
test-0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007c94  08007c94  00008c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ebc  08007ebc  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007ebc  08007ebc  00008ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ec4  08007ec4  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ec4  08007ec4  00008ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ec8  08007ec8  00008ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007ecc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000068  08007f34  00009068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08007f34  00009508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011edc  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a98  00000000  00000000  0001af74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0001da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2e  00000000  00000000  0001ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b19  00000000  00000000  0001fa86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001632b  00000000  00000000  0003959f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966b4  00000000  00000000  0004f8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e5f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  000e6004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000eb668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c7c 	.word	0x08007c7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007c7c 	.word	0x08007c7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <adxl_write>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	460a      	mov	r2, r1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	733b      	strb	r3, [r7, #12]
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	737b      	strb	r3, [r7, #13]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc0:	4809      	ldr	r0, [pc, #36]	@ (8000de8 <adxl_write+0x4c>)
 8000dc2:	f002 ff59 	bl	8003c78 <HAL_GPIO_WritePin>
 8000dc6:	f107 010c 	add.w	r1, r7, #12
 8000dca:	2364      	movs	r3, #100	@ 0x64
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4807      	ldr	r0, [pc, #28]	@ (8000dec <adxl_write+0x50>)
 8000dd0:	f004 ff4d 	bl	8005c6e <HAL_SPI_Transmit>
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dda:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <adxl_write+0x4c>)
 8000ddc:	f002 ff4c 	bl	8003c78 <HAL_GPIO_WritePin>
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40020000 	.word	0x40020000
 8000dec:	200001c4 	.word	0x200001c4

08000df0 <adxl_read>:
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e16:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <adxl_read+0x58>)
 8000e18:	f002 ff2e 	bl	8003c78 <HAL_GPIO_WritePin>
 8000e1c:	1df9      	adds	r1, r7, #7
 8000e1e:	2364      	movs	r3, #100	@ 0x64
 8000e20:	2201      	movs	r2, #1
 8000e22:	480a      	ldr	r0, [pc, #40]	@ (8000e4c <adxl_read+0x5c>)
 8000e24:	f004 ff23 	bl	8005c6e <HAL_SPI_Transmit>
 8000e28:	2364      	movs	r3, #100	@ 0x64
 8000e2a:	2206      	movs	r2, #6
 8000e2c:	6839      	ldr	r1, [r7, #0]
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <adxl_read+0x5c>)
 8000e30:	f005 f860 	bl	8005ef4 <HAL_SPI_Receive>
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3a:	4803      	ldr	r0, [pc, #12]	@ (8000e48 <adxl_read+0x58>)
 8000e3c:	f002 ff1c 	bl	8003c78 <HAL_GPIO_WritePin>
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	200001c4 	.word	0x200001c4

08000e50 <Adxl345_init>:
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	2101      	movs	r1, #1
 8000e56:	2031      	movs	r0, #49	@ 0x31
 8000e58:	f7ff ffa0 	bl	8000d9c <adxl_write>
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	202d      	movs	r0, #45	@ 0x2d
 8000e60:	f7ff ff9c 	bl	8000d9c <adxl_write>
 8000e64:	2108      	movs	r1, #8
 8000e66:	202d      	movs	r0, #45	@ 0x2d
 8000e68:	f7ff ff98 	bl	8000d9c <adxl_write>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	0000      	movs	r0, r0
 8000e74:	0000      	movs	r0, r0
	...

08000e78 <getAcceleration>:
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	4619      	mov	r1, r3
 8000e88:	2032      	movs	r0, #50	@ 0x32
 8000e8a:	f7ff ffb1 	bl	8000df0 <adxl_read>
 8000e8e:	7b7b      	ldrb	r3, [r7, #13]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	7b3b      	ldrb	r3, [r7, #12]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	83bb      	strh	r3, [r7, #28]
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	837b      	strh	r3, [r7, #26]
 8000eaa:	7c7b      	ldrb	r3, [r7, #17]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	7c3b      	ldrb	r3, [r7, #16]
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	833b      	strh	r3, [r7, #24]
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ebc:	d00c      	beq.n	8000ed8 <getAcceleration+0x60>
 8000ebe:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ec0:	dc0d      	bgt.n	8000ede <getAcceleration+0x66>
 8000ec2:	2b58      	cmp	r3, #88	@ 0x58
 8000ec4:	d002      	beq.n	8000ecc <getAcceleration+0x54>
 8000ec6:	2b59      	cmp	r3, #89	@ 0x59
 8000ec8:	d003      	beq.n	8000ed2 <getAcceleration+0x5a>
 8000eca:	e008      	b.n	8000ede <getAcceleration+0x66>
 8000ecc:	8bbb      	ldrh	r3, [r7, #28]
 8000ece:	83fb      	strh	r3, [r7, #30]
 8000ed0:	e006      	b.n	8000ee0 <getAcceleration+0x68>
 8000ed2:	8b7b      	ldrh	r3, [r7, #26]
 8000ed4:	83fb      	strh	r3, [r7, #30]
 8000ed6:	e003      	b.n	8000ee0 <getAcceleration+0x68>
 8000ed8:	8b3b      	ldrh	r3, [r7, #24]
 8000eda:	83fb      	strh	r3, [r7, #30]
 8000edc:	e000      	b.n	8000ee0 <getAcceleration+0x68>
 8000ede:	bf00      	nop
 8000ee0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb1d 	bl	8000524 <__aeabi_i2d>
 8000eea:	a30d      	add	r3, pc, #52	@ (adr r3, 8000f20 <getAcceleration+0xa8>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fb82 	bl	80005f8 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	a30a      	add	r3, pc, #40	@ (adr r3, 8000f28 <getAcceleration+0xb0>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff fb79 	bl	80005f8 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f7ff fd85 	bl	8000a1c <__aeabi_d2iz>
 8000f12:	4603      	mov	r3, r0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	8e8a71de 	.word	0x8e8a71de
 8000f24:	3f7ff2e4 	.word	0x3f7ff2e4
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	40c38800 	.word	0x40c38800

08000f30 <EEPROM_Read>:
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af04      	add	r7, sp, #16
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	80fb      	strh	r3, [r7, #6]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	80bb      	strh	r3, [r7, #4]
 8000f40:	88fa      	ldrh	r2, [r7, #6]
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2310      	movs	r3, #16
 8000f52:	21a1      	movs	r1, #161	@ 0xa1
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <EEPROM_Read+0x38>)
 8000f56:	f003 fb1d 	bl	8004594 <HAL_I2C_Mem_Read>
 8000f5a:	2005      	movs	r0, #5
 8000f5c:	f002 fbfe 	bl	800375c <HAL_Delay>
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000118 	.word	0x20000118

08000f6c <bytes2uInt>:
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	2300      	movs	r3, #0
 8000f76:	75fb      	strb	r3, [r7, #23]
 8000f78:	e00b      	b.n	8000f92 <bytes2uInt+0x26>
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	441a      	add	r2, r3
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	3318      	adds	r3, #24
 8000f86:	443b      	add	r3, r7
 8000f88:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d9f0      	bls.n	8000f7a <bytes2uInt+0xe>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	371c      	adds	r7, #28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <Etc_Read_Reg>:
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	80fb      	strh	r3, [r7, #6]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	717b      	strb	r3, [r7, #5]
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	82bb      	strh	r3, [r7, #20]
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	733b      	strb	r3, [r7, #12]
 8000fc4:	7d7b      	ldrb	r3, [r7, #21]
 8000fc6:	737b      	strb	r3, [r7, #13]
 8000fc8:	7d3b      	ldrb	r3, [r7, #20]
 8000fca:	73bb      	strb	r3, [r7, #14]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	77fb      	strb	r3, [r7, #31]
 8000fd0:	e009      	b.n	8000fe6 <Etc_Read_Reg+0x3a>
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	3320      	adds	r3, #32
 8000fd8:	443b      	add	r3, r7
 8000fda:	22ff      	movs	r2, #255	@ 0xff
 8000fdc:	f803 2c14 	strb.w	r2, [r3, #-20]
 8000fe0:	7ffb      	ldrb	r3, [r7, #31]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	77fb      	strb	r3, [r7, #31]
 8000fe6:	7ffa      	ldrb	r2, [r7, #31]
 8000fe8:	797b      	ldrb	r3, [r7, #5]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d3f1      	bcc.n	8000fd2 <Etc_Read_Reg+0x26>
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ff4:	4819      	ldr	r0, [pc, #100]	@ (800105c <Etc_Read_Reg+0xb0>)
 8000ff6:	f002 fe3f 	bl	8003c78 <HAL_GPIO_WritePin>
 8000ffa:	797b      	ldrb	r3, [r7, #5]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	3303      	adds	r3, #3
 8001000:	b29b      	uxth	r3, r3
 8001002:	f107 020c 	add.w	r2, r7, #12
 8001006:	f107 010c 	add.w	r1, r7, #12
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	9000      	str	r0, [sp, #0]
 8001010:	4813      	ldr	r0, [pc, #76]	@ (8001060 <Etc_Read_Reg+0xb4>)
 8001012:	f005 f887 	bl	8006124 <HAL_SPI_TransmitReceive>
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800101c:	480f      	ldr	r0, [pc, #60]	@ (800105c <Etc_Read_Reg+0xb0>)
 800101e:	f002 fe2b 	bl	8003c78 <HAL_GPIO_WritePin>
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	2300      	movs	r3, #0
 8001028:	77fb      	strb	r3, [r7, #31]
 800102a:	e00d      	b.n	8001048 <Etc_Read_Reg+0x9c>
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	1cda      	adds	r2, r3, #3
 8001030:	7ffb      	ldrb	r3, [r7, #31]
 8001032:	3220      	adds	r2, #32
 8001034:	443a      	add	r2, r7
 8001036:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800103a:	3320      	adds	r3, #32
 800103c:	443b      	add	r3, r7
 800103e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001042:	7ffb      	ldrb	r3, [r7, #31]
 8001044:	3301      	adds	r3, #1
 8001046:	77fb      	strb	r3, [r7, #31]
 8001048:	7ffa      	ldrb	r2, [r7, #31]
 800104a:	797b      	ldrb	r3, [r7, #5]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3ed      	bcc.n	800102c <Etc_Read_Reg+0x80>
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	4618      	mov	r0, r3
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020000 	.word	0x40020000
 8001060:	2000021c 	.word	0x2000021c

08001064 <Etc_Write_Reg>:
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	80fb      	strh	r3, [r7, #6]
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	82bb      	strh	r3, [r7, #20]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	2302      	movs	r3, #2
 800107a:	733b      	strb	r3, [r7, #12]
 800107c:	7d7b      	ldrb	r3, [r7, #21]
 800107e:	737b      	strb	r3, [r7, #13]
 8001080:	7d3b      	ldrb	r3, [r7, #20]
 8001082:	73bb      	strb	r3, [r7, #14]
 8001084:	2300      	movs	r3, #0
 8001086:	77fb      	strb	r3, [r7, #31]
 8001088:	e00d      	b.n	80010a6 <Etc_Write_Reg+0x42>
 800108a:	7ffa      	ldrb	r2, [r7, #31]
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	3303      	adds	r3, #3
 8001090:	3220      	adds	r2, #32
 8001092:	443a      	add	r2, r7
 8001094:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8001098:	3320      	adds	r3, #32
 800109a:	443b      	add	r3, r7
 800109c:	f803 2c14 	strb.w	r2, [r3, #-20]
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	3301      	adds	r3, #1
 80010a4:	77fb      	strb	r3, [r7, #31]
 80010a6:	7ffb      	ldrb	r3, [r7, #31]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d9ee      	bls.n	800108a <Etc_Write_Reg+0x26>
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010b2:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <Etc_Write_Reg+0x80>)
 80010b4:	f002 fde0 	bl	8003c78 <HAL_GPIO_WritePin>
 80010b8:	f107 020c 	add.w	r2, r7, #12
 80010bc:	f107 010c 	add.w	r1, r7, #12
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2307      	movs	r3, #7
 80010c8:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <Etc_Write_Reg+0x84>)
 80010ca:	f005 f82b 	bl	8006124 <HAL_SPI_TransmitReceive>
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <Etc_Write_Reg+0x80>)
 80010d6:	f002 fdcf 	bl	8003c78 <HAL_GPIO_WritePin>
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40020000 	.word	0x40020000
 80010e8:	2000021c 	.word	0x2000021c

080010ec <Etc_Read_Reg_Wait>:
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	80fb      	strh	r3, [r7, #6]
 80010f8:	4613      	mov	r3, r2
 80010fa:	717b      	strb	r3, [r7, #5]
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	813b      	strh	r3, [r7, #8]
 8001100:	7a3b      	ldrb	r3, [r7, #8]
 8001102:	733b      	strb	r3, [r7, #12]
 8001104:	7a7b      	ldrb	r3, [r7, #9]
 8001106:	737b      	strb	r3, [r7, #13]
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	73bb      	strb	r3, [r7, #14]
 800110c:	23c0      	movs	r3, #192	@ 0xc0
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4619      	mov	r1, r3
 8001114:	f44f 7041 	mov.w	r0, #772	@ 0x304
 8001118:	f7ff ffa4 	bl	8001064 <Etc_Write_Reg>
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	2104      	movs	r1, #4
 8001122:	f44f 7041 	mov.w	r0, #772	@ 0x304
 8001126:	f7ff ff41 	bl	8000fac <Etc_Read_Reg>
 800112a:	4603      	mov	r3, r0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	b25b      	sxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	dbf4      	blt.n	8001120 <Etc_Read_Reg_Wait+0x34>
 8001136:	797b      	ldrb	r3, [r7, #5]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800113e:	f7ff ff35 	bl	8000fac <Etc_Read_Reg>
 8001142:	4603      	mov	r3, r0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <Etc_Read_Fifo>:
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	@ 0x38
 8001154:	af02      	add	r7, sp, #8
 8001156:	4935      	ldr	r1, [pc, #212]	@ (800122c <Etc_Read_Fifo+0xdc>)
 8001158:	f44f 7042 	mov.w	r0, #776	@ 0x308
 800115c:	f7ff ff82 	bl	8001064 <Etc_Write_Reg>
 8001160:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001164:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 8001168:	f7ff ff7c 	bl	8001064 <Etc_Write_Reg>
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001170:	2104      	movs	r1, #4
 8001172:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 8001176:	f7ff ff19 	bl	8000fac <Etc_Read_Reg>
 800117a:	4603      	mov	r3, r0
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800117e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f2      	beq.n	8001170 <Etc_Read_Fifo+0x20>
 800118a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800118e:	2b08      	cmp	r3, #8
 8001190:	d1ee      	bne.n	8001170 <Etc_Read_Fifo+0x20>
 8001192:	2303      	movs	r3, #3
 8001194:	713b      	strb	r3, [r7, #4]
 8001196:	2300      	movs	r3, #0
 8001198:	717b      	strb	r3, [r7, #5]
 800119a:	2300      	movs	r3, #0
 800119c:	71bb      	strb	r3, [r7, #6]
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011a4:	e00c      	b.n	80011c0 <Etc_Read_Fifo+0x70>
 80011a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011aa:	3303      	adds	r3, #3
 80011ac:	3330      	adds	r3, #48	@ 0x30
 80011ae:	443b      	add	r3, r7
 80011b0:	22ff      	movs	r2, #255	@ 0xff
 80011b2:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80011b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011ba:	3301      	adds	r3, #1
 80011bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011c4:	2b1f      	cmp	r3, #31
 80011c6:	d9ee      	bls.n	80011a6 <Etc_Read_Fifo+0x56>
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011ce:	4818      	ldr	r0, [pc, #96]	@ (8001230 <Etc_Read_Fifo+0xe0>)
 80011d0:	f002 fd52 	bl	8003c78 <HAL_GPIO_WritePin>
 80011d4:	1d3a      	adds	r2, r7, #4
 80011d6:	1d39      	adds	r1, r7, #4
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2323      	movs	r3, #35	@ 0x23
 80011e0:	4814      	ldr	r0, [pc, #80]	@ (8001234 <Etc_Read_Fifo+0xe4>)
 80011e2:	f004 ff9f 	bl	8006124 <HAL_SPI_TransmitReceive>
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011ec:	4810      	ldr	r0, [pc, #64]	@ (8001230 <Etc_Read_Fifo+0xe0>)
 80011ee:	f002 fd43 	bl	8003c78 <HAL_GPIO_WritePin>
 80011f2:	2300      	movs	r3, #0
 80011f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011f8:	e00f      	b.n	800121a <Etc_Read_Fifo+0xca>
 80011fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011fe:	1cda      	adds	r2, r3, #3
 8001200:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001204:	3230      	adds	r2, #48	@ 0x30
 8001206:	443a      	add	r2, r7
 8001208:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 800120c:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <Etc_Read_Fifo+0xe8>)
 800120e:	54d1      	strb	r1, [r2, r3]
 8001210:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001214:	3301      	adds	r3, #1
 8001216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800121a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800121e:	2b1f      	cmp	r3, #31
 8001220:	d9eb      	bls.n	80011fa <Etc_Read_Fifo+0xaa>
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	3730      	adds	r7, #48	@ 0x30
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	00201000 	.word	0x00201000
 8001230:	40020000 	.word	0x40020000
 8001234:	2000021c 	.word	0x2000021c
 8001238:	20000084 	.word	0x20000084

0800123c <Etc_Write_Fifo>:
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af02      	add	r7, sp, #8
 8001242:	492a      	ldr	r1, [pc, #168]	@ (80012ec <Etc_Write_Fifo+0xb0>)
 8001244:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001248:	f7ff ff0c 	bl	8001064 <Etc_Write_Reg>
 800124c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001250:	f44f 7045 	mov.w	r0, #788	@ 0x314
 8001254:	f7ff ff06 	bl	8001064 <Etc_Write_Reg>
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800125c:	2104      	movs	r1, #4
 800125e:	f44f 7045 	mov.w	r0, #788	@ 0x314
 8001262:	f7ff fea3 	bl	8000fac <Etc_Read_Reg>
 8001266:	4603      	mov	r3, r0
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800126a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f2      	beq.n	800125c <Etc_Write_Fifo+0x20>
 8001276:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800127a:	2b07      	cmp	r3, #7
 800127c:	d9ee      	bls.n	800125c <Etc_Write_Fifo+0x20>
 800127e:	2302      	movs	r3, #2
 8001280:	713b      	strb	r3, [r7, #4]
 8001282:	2300      	movs	r3, #0
 8001284:	717b      	strb	r3, [r7, #5]
 8001286:	2320      	movs	r3, #32
 8001288:	71bb      	strb	r3, [r7, #6]
 800128a:	2300      	movs	r3, #0
 800128c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001290:	e00f      	b.n	80012b2 <Etc_Write_Fifo+0x76>
 8001292:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800129a:	3303      	adds	r3, #3
 800129c:	4914      	ldr	r1, [pc, #80]	@ (80012f0 <Etc_Write_Fifo+0xb4>)
 800129e:	5c8a      	ldrb	r2, [r1, r2]
 80012a0:	3330      	adds	r3, #48	@ 0x30
 80012a2:	443b      	add	r3, r7
 80012a4:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80012a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012ac:	3301      	adds	r3, #1
 80012ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012b6:	2b1f      	cmp	r3, #31
 80012b8:	d9eb      	bls.n	8001292 <Etc_Write_Fifo+0x56>
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <Etc_Write_Fifo+0xb8>)
 80012c2:	f002 fcd9 	bl	8003c78 <HAL_GPIO_WritePin>
 80012c6:	1d3a      	adds	r2, r7, #4
 80012c8:	1d39      	adds	r1, r7, #4
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2323      	movs	r3, #35	@ 0x23
 80012d2:	4809      	ldr	r0, [pc, #36]	@ (80012f8 <Etc_Write_Fifo+0xbc>)
 80012d4:	f004 ff26 	bl	8006124 <HAL_SPI_TransmitReceive>
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <Etc_Write_Fifo+0xb8>)
 80012e0:	f002 fcca 	bl	8003c78 <HAL_GPIO_WritePin>
 80012e4:	bf00      	nop
 80012e6:	3730      	adds	r7, #48	@ 0x30
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	00201200 	.word	0x00201200
 80012f0:	200000a4 	.word	0x200000a4
 80012f4:	40020000 	.word	0x40020000
 80012f8:	2000021c 	.word	0x2000021c

080012fc <etc_init>:
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	2100      	movs	r1, #0
 8001304:	f44f 70fc 	mov.w	r0, #504	@ 0x1f8
 8001308:	f7ff feac 	bl	8001064 <Etc_Write_Reg>
 800130c:	2064      	movs	r0, #100	@ 0x64
 800130e:	f002 fa25 	bl	800375c <HAL_Delay>
 8001312:	2104      	movs	r1, #4
 8001314:	2064      	movs	r0, #100	@ 0x64
 8001316:	f7ff fe49 	bl	8000fac <Etc_Read_Reg>
 800131a:	4603      	mov	r3, r0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <etc_init+0x54>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d001      	beq.n	800132a <etc_init+0x2e>
 8001326:	2300      	movs	r3, #0
 8001328:	e00d      	b.n	8001346 <etc_init+0x4a>
 800132a:	2104      	movs	r1, #4
 800132c:	2074      	movs	r0, #116	@ 0x74
 800132e:	f7ff fe3d 	bl	8000fac <Etc_Read_Reg>
 8001332:	4603      	mov	r3, r0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <etc_init+0x48>
 8001340:	2300      	movs	r3, #0
 8001342:	e000      	b.n	8001346 <etc_init+0x4a>
 8001344:	2301      	movs	r3, #1
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	87654321 	.word	0x87654321

08001354 <etc_scan>:
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	2300      	movs	r3, #0
 8001360:	71bb      	strb	r3, [r7, #6]
 8001362:	2101      	movs	r1, #1
 8001364:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 8001368:	f7ff fec0 	bl	80010ec <Etc_Read_Reg_Wait>
 800136c:	4603      	mov	r3, r0
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	783b      	ldrb	r3, [r7, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <etc_scan+0x2c>
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	e001      	b.n	8001384 <etc_scan+0x30>
 8001380:	2301      	movs	r3, #1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	2101      	movs	r1, #1
 8001386:	f44f 7098 	mov.w	r0, #304	@ 0x130
 800138a:	f7ff feaf 	bl	80010ec <Etc_Read_Reg_Wait>
 800138e:	4603      	mov	r3, r0
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	783b      	ldrb	r3, [r7, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	713b      	strb	r3, [r7, #4]
 800139a:	793b      	ldrb	r3, [r7, #4]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d102      	bne.n	80013a6 <etc_scan+0x52>
 80013a0:	2301      	movs	r3, #1
 80013a2:	71bb      	strb	r3, [r7, #6]
 80013a4:	e001      	b.n	80013aa <etc_scan+0x56>
 80013a6:	2300      	movs	r3, #0
 80013a8:	71bb      	strb	r3, [r7, #6]
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	f083 0301 	eor.w	r3, r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00e      	beq.n	80013da <etc_scan+0x86>
 80013bc:	2300      	movs	r3, #0
 80013be:	717b      	strb	r3, [r7, #5]
 80013c0:	e007      	b.n	80013d2 <etc_scan+0x7e>
 80013c2:	797b      	ldrb	r3, [r7, #5]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <etc_scan+0xa8>)
 80013c6:	2100      	movs	r1, #0
 80013c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80013cc:	797b      	ldrb	r3, [r7, #5]
 80013ce:	3301      	adds	r3, #1
 80013d0:	717b      	strb	r3, [r7, #5]
 80013d2:	797b      	ldrb	r3, [r7, #5]
 80013d4:	2b07      	cmp	r3, #7
 80013d6:	d9f4      	bls.n	80013c2 <etc_scan+0x6e>
 80013d8:	e001      	b.n	80013de <etc_scan+0x8a>
 80013da:	f7ff feb9 	bl	8001150 <Etc_Read_Fifo>
 80013de:	f7ff ff2d 	bl	800123c <Etc_Write_Fifo>
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <etc_scan+0x9c>
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013ee:	713b      	strb	r3, [r7, #4]
 80013f0:	793b      	ldrb	r3, [r7, #4]
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000084 	.word	0x20000084

08001400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001406:	f002 f937 	bl	8003678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140a:	f000 ff77 	bl	80022fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140e:	f001 f929 	bl	8002664 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001412:	f000 ffdb 	bl	80023cc <MX_I2C1_Init>
  MX_SPI5_Init();
 8001416:	f001 f8a1 	bl	800255c <MX_SPI5_Init>
  MX_TIM4_Init();
 800141a:	f001 f8d5 	bl	80025c8 <MX_TIM4_Init>
  MX_I2C2_Init();
 800141e:	f001 f803 	bl	8002428 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001422:	f001 f865 	bl	80024f0 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001426:	f001 f82d 	bl	8002484 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

   etc_init_ok = etc_init();
 800142a:	f7ff ff67 	bl	80012fc <etc_init>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4bbf      	ldr	r3, [pc, #764]	@ (8001730 <main+0x330>)
 8001434:	701a      	strb	r2, [r3, #0]
   pcap_init_ok = pcap_init();
 8001436:	f001 fa45 	bl	80028c4 <pcap_init>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4bbd      	ldr	r3, [pc, #756]	@ (8001734 <main+0x334>)
 8001440:	701a      	strb	r2, [r3, #0]
   Adxl345_init_ok = Adxl345_init();
 8001442:	f7ff fd05 	bl	8000e50 <Adxl345_init>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4bbb      	ldr	r3, [pc, #748]	@ (8001738 <main+0x338>)
 800144c:	701a      	strb	r2, [r3, #0]
	   no_error_drive = true;
   } else {
	   no_error_drive = false;
   }*/

   HAL_Delay(200);
 800144e:	20c8      	movs	r0, #200	@ 0xc8
 8001450:	f002 f984 	bl	800375c <HAL_Delay>

    /* USER CODE BEGIN 3 */

	  /*-------------------------- GET DATA FROM PCAP AND ETHERCAT----------------------------------------*/

	  if (pcap_init_ok) {
 8001454:	4bb7      	ldr	r3, [pc, #732]	@ (8001734 <main+0x334>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <main+0x62>
		  pcap_scan();
 800145c:	f001 fa8a 	bl	8002974 <pcap_scan>
 8001460:	e005      	b.n	800146e <main+0x6e>
	  } else {
		  pcap_init_ok = pcap_init();
 8001462:	f001 fa2f 	bl	80028c4 <pcap_init>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4bb2      	ldr	r3, [pc, #712]	@ (8001734 <main+0x334>)
 800146c:	701a      	strb	r2, [r3, #0]
	  }

	  if (etc_init_ok) {
 800146e:	4bb0      	ldr	r3, [pc, #704]	@ (8001730 <main+0x330>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <main+0x7c>
		  etc_scan();
 8001476:	f7ff ff6d 	bl	8001354 <etc_scan>
 800147a:	e005      	b.n	8001488 <main+0x88>
	  } else {
		  etc_init_ok = etc_init();
 800147c:	f7ff ff3e 	bl	80012fc <etc_init>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4baa      	ldr	r3, [pc, #680]	@ (8001730 <main+0x330>)
 8001486:	701a      	strb	r2, [r3, #0]
	  }

	  /*-------------------------- RECEIVED DATA FROM ETHERCAT ----------------------------------------*/

	  etc_new_command = (uint16_t)Etc_Buffer_Out.LANLong[0];
 8001488:	4bac      	ldr	r3, [pc, #688]	@ (800173c <main+0x33c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29a      	uxth	r2, r3
 800148e:	4bac      	ldr	r3, [pc, #688]	@ (8001740 <main+0x340>)
 8001490:	801a      	strh	r2, [r3, #0]
	  etc_new_data =  (int32_t) Etc_Buffer_Out.LANLong[1];
 8001492:	4baa      	ldr	r3, [pc, #680]	@ (800173c <main+0x33c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	461a      	mov	r2, r3
 8001498:	4baa      	ldr	r3, [pc, #680]	@ (8001744 <main+0x344>)
 800149a:	601a      	str	r2, [r3, #0]

	  if (((etc_new_command >= 0) && (etc_new_command <= 19)) || ((etc_new_command >= 100) && (etc_new_command <= 105))) {
 800149c:	4ba8      	ldr	r3, [pc, #672]	@ (8001740 <main+0x340>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	2b13      	cmp	r3, #19
 80014a2:	d907      	bls.n	80014b4 <main+0xb4>
 80014a4:	4ba6      	ldr	r3, [pc, #664]	@ (8001740 <main+0x340>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	2b63      	cmp	r3, #99	@ 0x63
 80014aa:	d907      	bls.n	80014bc <main+0xbc>
 80014ac:	4ba4      	ldr	r3, [pc, #656]	@ (8001740 <main+0x340>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	2b69      	cmp	r3, #105	@ 0x69
 80014b2:	d803      	bhi.n	80014bc <main+0xbc>
	      set_command_flag = true;
 80014b4:	4ba4      	ldr	r3, [pc, #656]	@ (8001748 <main+0x348>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e002      	b.n	80014c2 <main+0xc2>
	  } else {
		  set_command_flag = false;
 80014bc:	4ba2      	ldr	r3, [pc, #648]	@ (8001748 <main+0x348>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
	  }

	  if ((etc_new_command >= 50 && etc_new_command <= 70)) {
 80014c2:	4b9f      	ldr	r3, [pc, #636]	@ (8001740 <main+0x340>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	2b31      	cmp	r3, #49	@ 0x31
 80014c8:	d907      	bls.n	80014da <main+0xda>
 80014ca:	4b9d      	ldr	r3, [pc, #628]	@ (8001740 <main+0x340>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	2b46      	cmp	r3, #70	@ 0x46
 80014d0:	d803      	bhi.n	80014da <main+0xda>
		  get_command_flag = true;
 80014d2:	4b9e      	ldr	r3, [pc, #632]	@ (800174c <main+0x34c>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	e002      	b.n	80014e0 <main+0xe0>
	  } else {
		  get_command_flag = false;
 80014da:	4b9c      	ldr	r3, [pc, #624]	@ (800174c <main+0x34c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	  }

	  if ((etc_new_command == 301 || etc_new_command == 302 || etc_new_command == 303)) {
 80014e0:	4b97      	ldr	r3, [pc, #604]	@ (8001740 <main+0x340>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	f240 122d 	movw	r2, #301	@ 0x12d
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d00a      	beq.n	8001502 <main+0x102>
 80014ec:	4b94      	ldr	r3, [pc, #592]	@ (8001740 <main+0x340>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	f5b3 7f97 	cmp.w	r3, #302	@ 0x12e
 80014f4:	d005      	beq.n	8001502 <main+0x102>
 80014f6:	4b92      	ldr	r3, [pc, #584]	@ (8001740 <main+0x340>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	f240 122f 	movw	r2, #303	@ 0x12f
 80014fe:	4293      	cmp	r3, r2
 8001500:	d103      	bne.n	800150a <main+0x10a>
		  accelerometer_flag = true;
 8001502:	4b93      	ldr	r3, [pc, #588]	@ (8001750 <main+0x350>)
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e002      	b.n	8001510 <main+0x110>
	  } else {
		  accelerometer_flag = false;
 800150a:	4b91      	ldr	r3, [pc, #580]	@ (8001750 <main+0x350>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
	  }

	  etc_digital_output = Etc_Buffer_Out.LANLong[5];
 8001510:	4b8a      	ldr	r3, [pc, #552]	@ (800173c <main+0x33c>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	4a8f      	ldr	r2, [pc, #572]	@ (8001754 <main+0x354>)
 8001516:	6013      	str	r3, [r2, #0]
	  etc_analog_output_0_1 = Etc_Buffer_Out.LANLong[6];
 8001518:	4b88      	ldr	r3, [pc, #544]	@ (800173c <main+0x33c>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a8e      	ldr	r2, [pc, #568]	@ (8001758 <main+0x358>)
 800151e:	6013      	str	r3, [r2, #0]
	  etc_analog_output_2_3 = Etc_Buffer_Out.LANLong[7];
 8001520:	4b86      	ldr	r3, [pc, #536]	@ (800173c <main+0x33c>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	4a8d      	ldr	r2, [pc, #564]	@ (800175c <main+0x35c>)
 8001526:	6013      	str	r3, [r2, #0]

	  // Split the 32-bit floats into two 16-bit outputs each
	  etc_analog_output_0 = (uint16_t)(((uint32_t)etc_analog_output_0_1) & 0xFFFF);
 8001528:	4b8b      	ldr	r3, [pc, #556]	@ (8001758 <main+0x358>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b29a      	uxth	r2, r3
 800152e:	4b8c      	ldr	r3, [pc, #560]	@ (8001760 <main+0x360>)
 8001530:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_1 = (uint16_t)((((uint32_t)etc_analog_output_0_1) >> 16) & 0xFFFF);
 8001532:	4b89      	ldr	r3, [pc, #548]	@ (8001758 <main+0x358>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	0c1b      	lsrs	r3, r3, #16
 8001538:	b29a      	uxth	r2, r3
 800153a:	4b8a      	ldr	r3, [pc, #552]	@ (8001764 <main+0x364>)
 800153c:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_2 = (uint16_t)(((uint32_t)etc_analog_output_2_3) & 0xFFFF);
 800153e:	4b87      	ldr	r3, [pc, #540]	@ (800175c <main+0x35c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29a      	uxth	r2, r3
 8001544:	4b88      	ldr	r3, [pc, #544]	@ (8001768 <main+0x368>)
 8001546:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_3 = (uint16_t)((((uint32_t)etc_analog_output_2_3) >> 16) & 0xFFFF);
 8001548:	4b84      	ldr	r3, [pc, #528]	@ (800175c <main+0x35c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0c1b      	lsrs	r3, r3, #16
 800154e:	b29a      	uxth	r2, r3
 8001550:	4b86      	ldr	r3, [pc, #536]	@ (800176c <main+0x36c>)
 8001552:	801a      	strh	r2, [r3, #0]

	  /*---------------------------PROCESS REECIVED COMMAND AND DATA-----------------------------------------*/

	  if (set_command_flag) {
 8001554:	4b7c      	ldr	r3, [pc, #496]	@ (8001748 <main+0x348>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8335 	beq.w	8001bc8 <main+0x7c8>
		  if ((etc_old_command != etc_new_command) || (etc_old_data != etc_new_data)) {
 800155e:	4b84      	ldr	r3, [pc, #528]	@ (8001770 <main+0x370>)
 8001560:	881a      	ldrh	r2, [r3, #0]
 8001562:	4b77      	ldr	r3, [pc, #476]	@ (8001740 <main+0x340>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d106      	bne.n	8001578 <main+0x178>
 800156a:	4b82      	ldr	r3, [pc, #520]	@ (8001774 <main+0x374>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b75      	ldr	r3, [pc, #468]	@ (8001744 <main+0x344>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	f000 862b 	beq.w	80021ce <main+0xdce>
				switch (etc_new_command) {
 8001578:	4b71      	ldr	r3, [pc, #452]	@ (8001740 <main+0x340>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	2b69      	cmp	r3, #105	@ 0x69
 800157e:	f200 8308 	bhi.w	8001b92 <main+0x792>
 8001582:	a201      	add	r2, pc, #4	@ (adr r2, 8001588 <main+0x188>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001779 	.word	0x08001779
 800158c:	08001789 	.word	0x08001789
 8001590:	080017bf 	.word	0x080017bf
 8001594:	080017f3 	.word	0x080017f3
 8001598:	08001821 	.word	0x08001821
 800159c:	0800184d 	.word	0x0800184d
 80015a0:	08001877 	.word	0x08001877
 80015a4:	080018a1 	.word	0x080018a1
 80015a8:	080018cd 	.word	0x080018cd
 80015ac:	080018f9 	.word	0x080018f9
 80015b0:	08001923 	.word	0x08001923
 80015b4:	0800194d 	.word	0x0800194d
 80015b8:	08001979 	.word	0x08001979
 80015bc:	080019c5 	.word	0x080019c5
 80015c0:	080019f1 	.word	0x080019f1
 80015c4:	08001a1d 	.word	0x08001a1d
 80015c8:	08001a49 	.word	0x08001a49
 80015cc:	08001a75 	.word	0x08001a75
 80015d0:	08001aa1 	.word	0x08001aa1
 80015d4:	08001acf 	.word	0x08001acf
 80015d8:	08001b93 	.word	0x08001b93
 80015dc:	08001b93 	.word	0x08001b93
 80015e0:	08001b93 	.word	0x08001b93
 80015e4:	08001b93 	.word	0x08001b93
 80015e8:	08001b93 	.word	0x08001b93
 80015ec:	08001b93 	.word	0x08001b93
 80015f0:	08001b93 	.word	0x08001b93
 80015f4:	08001b93 	.word	0x08001b93
 80015f8:	08001b93 	.word	0x08001b93
 80015fc:	08001b93 	.word	0x08001b93
 8001600:	08001b93 	.word	0x08001b93
 8001604:	08001b93 	.word	0x08001b93
 8001608:	08001b93 	.word	0x08001b93
 800160c:	08001b93 	.word	0x08001b93
 8001610:	08001b93 	.word	0x08001b93
 8001614:	08001b93 	.word	0x08001b93
 8001618:	08001b93 	.word	0x08001b93
 800161c:	08001b93 	.word	0x08001b93
 8001620:	08001b93 	.word	0x08001b93
 8001624:	08001b93 	.word	0x08001b93
 8001628:	08001b93 	.word	0x08001b93
 800162c:	08001b93 	.word	0x08001b93
 8001630:	08001b93 	.word	0x08001b93
 8001634:	08001b93 	.word	0x08001b93
 8001638:	08001b93 	.word	0x08001b93
 800163c:	08001b93 	.word	0x08001b93
 8001640:	08001b93 	.word	0x08001b93
 8001644:	08001b93 	.word	0x08001b93
 8001648:	08001b93 	.word	0x08001b93
 800164c:	08001b93 	.word	0x08001b93
 8001650:	08001b93 	.word	0x08001b93
 8001654:	08001b93 	.word	0x08001b93
 8001658:	08001b93 	.word	0x08001b93
 800165c:	08001b93 	.word	0x08001b93
 8001660:	08001b93 	.word	0x08001b93
 8001664:	08001b93 	.word	0x08001b93
 8001668:	08001b93 	.word	0x08001b93
 800166c:	08001b93 	.word	0x08001b93
 8001670:	08001b93 	.word	0x08001b93
 8001674:	08001b93 	.word	0x08001b93
 8001678:	08001b93 	.word	0x08001b93
 800167c:	08001b93 	.word	0x08001b93
 8001680:	08001b93 	.word	0x08001b93
 8001684:	08001b93 	.word	0x08001b93
 8001688:	08001b93 	.word	0x08001b93
 800168c:	08001b93 	.word	0x08001b93
 8001690:	08001b93 	.word	0x08001b93
 8001694:	08001b93 	.word	0x08001b93
 8001698:	08001b93 	.word	0x08001b93
 800169c:	08001b93 	.word	0x08001b93
 80016a0:	08001b93 	.word	0x08001b93
 80016a4:	08001b93 	.word	0x08001b93
 80016a8:	08001b93 	.word	0x08001b93
 80016ac:	08001b93 	.word	0x08001b93
 80016b0:	08001b93 	.word	0x08001b93
 80016b4:	08001b93 	.word	0x08001b93
 80016b8:	08001b93 	.word	0x08001b93
 80016bc:	08001b93 	.word	0x08001b93
 80016c0:	08001b93 	.word	0x08001b93
 80016c4:	08001b93 	.word	0x08001b93
 80016c8:	08001b93 	.word	0x08001b93
 80016cc:	08001b93 	.word	0x08001b93
 80016d0:	08001b93 	.word	0x08001b93
 80016d4:	08001b93 	.word	0x08001b93
 80016d8:	08001b93 	.word	0x08001b93
 80016dc:	08001b93 	.word	0x08001b93
 80016e0:	08001b93 	.word	0x08001b93
 80016e4:	08001b93 	.word	0x08001b93
 80016e8:	08001b93 	.word	0x08001b93
 80016ec:	08001b93 	.word	0x08001b93
 80016f0:	08001b93 	.word	0x08001b93
 80016f4:	08001b93 	.word	0x08001b93
 80016f8:	08001b93 	.word	0x08001b93
 80016fc:	08001b93 	.word	0x08001b93
 8001700:	08001b93 	.word	0x08001b93
 8001704:	08001b93 	.word	0x08001b93
 8001708:	08001b93 	.word	0x08001b93
 800170c:	08001b93 	.word	0x08001b93
 8001710:	08001b93 	.word	0x08001b93
 8001714:	08001b93 	.word	0x08001b93
 8001718:	08001afd 	.word	0x08001afd
 800171c:	08001b25 	.word	0x08001b25
 8001720:	08001b3b 	.word	0x08001b3b
 8001724:	08001b51 	.word	0x08001b51
 8001728:	08001b67 	.word	0x08001b67
 800172c:	08001b7d 	.word	0x08001b7d
 8001730:	200002bd 	.word	0x200002bd
 8001734:	200002bc 	.word	0x200002bc
 8001738:	200002be 	.word	0x200002be
 800173c:	20000084 	.word	0x20000084
 8001740:	20000328 	.word	0x20000328
 8001744:	2000032c 	.word	0x2000032c
 8001748:	2000031c 	.word	0x2000031c
 800174c:	2000031d 	.word	0x2000031d
 8001750:	2000031f 	.word	0x2000031f
 8001754:	20000330 	.word	0x20000330
 8001758:	20000334 	.word	0x20000334
 800175c:	20000338 	.word	0x20000338
 8001760:	2000033c 	.word	0x2000033c
 8001764:	2000033e 	.word	0x2000033e
 8001768:	20000340 	.word	0x20000340
 800176c:	20000342 	.word	0x20000342
 8001770:	20000320 	.word	0x20000320
 8001774:	20000324 	.word	0x20000324
				case 0:
					TxData = etc_new_data;
 8001778:	4b8a      	ldr	r3, [pc, #552]	@ (80019a4 <main+0x5a4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a8a      	ldr	r2, [pc, #552]	@ (80019a8 <main+0x5a8>)
 800177e:	6013      	str	r3, [r2, #0]
					continuous_tx_flag = false;
 8001780:	4b8a      	ldr	r3, [pc, #552]	@ (80019ac <main+0x5ac>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
					break;
 8001786:	e205      	b.n	8001b94 <main+0x794>

				case 1:
					TxData = etc_new_data;
 8001788:	4b86      	ldr	r3, [pc, #536]	@ (80019a4 <main+0x5a4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a86      	ldr	r2, [pc, #536]	@ (80019a8 <main+0x5a8>)
 800178e:	6013      	str	r3, [r2, #0]
					set_Execution_count++;
 8001790:	4b87      	ldr	r3, [pc, #540]	@ (80019b0 <main+0x5b0>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b85      	ldr	r3, [pc, #532]	@ (80019b0 <main+0x5b0>)
 800179a:	701a      	strb	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 1000000)) {
 800179c:	4b81      	ldr	r3, [pc, #516]	@ (80019a4 <main+0x5a4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd04      	ble.n	80017ae <main+0x3ae>
 80017a4:	4b7f      	ldr	r3, [pc, #508]	@ (80019a4 <main+0x5a4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a82      	ldr	r2, [pc, #520]	@ (80019b4 <main+0x5b4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	dd03      	ble.n	80017b6 <main+0x3b6>
						setWrongCommandFlag(&tmc4671_controller, true);
 80017ae:	2101      	movs	r1, #1
 80017b0:	4881      	ldr	r0, [pc, #516]	@ (80019b8 <main+0x5b8>)
 80017b2:	f001 fd27 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setEncoderResolution(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80017b6:	4b7d      	ldr	r3, [pc, #500]	@ (80019ac <main+0x5ac>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
					break;
 80017bc:	e1ea      	b.n	8001b94 <main+0x794>

				case 2:
					TxData = etc_new_data;
 80017be:	4b79      	ldr	r3, [pc, #484]	@ (80019a4 <main+0x5a4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a79      	ldr	r2, [pc, #484]	@ (80019a8 <main+0x5a8>)
 80017c4:	6013      	str	r3, [r2, #0]
					set_Execution_count++;
 80017c6:	4b7a      	ldr	r3, [pc, #488]	@ (80019b0 <main+0x5b0>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b78      	ldr	r3, [pc, #480]	@ (80019b0 <main+0x5b0>)
 80017d0:	701a      	strb	r2, [r3, #0]
					if ((etc_new_data != 0) && (etc_new_data != 1)) {//cannot be anything other than 0 or 1
 80017d2:	4b74      	ldr	r3, [pc, #464]	@ (80019a4 <main+0x5a4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d007      	beq.n	80017ea <main+0x3ea>
 80017da:	4b72      	ldr	r3, [pc, #456]	@ (80019a4 <main+0x5a4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d003      	beq.n	80017ea <main+0x3ea>
						setWrongCommandFlag(&tmc4671_controller, true);
 80017e2:	2101      	movs	r1, #1
 80017e4:	4874      	ldr	r0, [pc, #464]	@ (80019b8 <main+0x5b8>)
 80017e6:	f001 fd0d 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setEncoderDirection(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80017ea:	4b70      	ldr	r3, [pc, #448]	@ (80019ac <main+0x5ac>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
					break;
 80017f0:	e1d0      	b.n	8001b94 <main+0x794>

				case 3:
					TxData = etc_new_data;
 80017f2:	4b6c      	ldr	r3, [pc, #432]	@ (80019a4 <main+0x5a4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6c      	ldr	r2, [pc, #432]	@ (80019a8 <main+0x5a8>)
 80017f8:	6013      	str	r3, [r2, #0]
					if (( etc_new_data <= -5000) || ( etc_new_data >= 5000)) {//cannot be less than -5000um = -5mm or greater than 5000um = 5mm
 80017fa:	4b6a      	ldr	r3, [pc, #424]	@ (80019a4 <main+0x5a4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6f      	ldr	r2, [pc, #444]	@ (80019bc <main+0x5bc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	db05      	blt.n	8001810 <main+0x410>
 8001804:	4b67      	ldr	r3, [pc, #412]	@ (80019a4 <main+0x5a4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f241 3287 	movw	r2, #4999	@ 0x1387
 800180c:	4293      	cmp	r3, r2
 800180e:	dd03      	ble.n	8001818 <main+0x418>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001810:	2101      	movs	r1, #1
 8001812:	4869      	ldr	r0, [pc, #420]	@ (80019b8 <main+0x5b8>)
 8001814:	f001 fcf6 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setZeroOffset(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001818:	4b64      	ldr	r3, [pc, #400]	@ (80019ac <main+0x5ac>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
					break;
 800181e:	e1b9      	b.n	8001b94 <main+0x794>

				case 4:
					TxData = etc_new_data;
 8001820:	4b60      	ldr	r3, [pc, #384]	@ (80019a4 <main+0x5a4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a60      	ldr	r2, [pc, #384]	@ (80019a8 <main+0x5a8>)
 8001826:	6013      	str	r3, [r2, #0]
					if (( etc_new_data <= 0) || ( etc_new_data > 12000)) {//cannot be 0, negative number or more than 12000um = 12mm
 8001828:	4b5e      	ldr	r3, [pc, #376]	@ (80019a4 <main+0x5a4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	dd05      	ble.n	800183c <main+0x43c>
 8001830:	4b5c      	ldr	r3, [pc, #368]	@ (80019a4 <main+0x5a4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001838:	4293      	cmp	r3, r2
 800183a:	dd03      	ble.n	8001844 <main+0x444>
						setWrongCommandFlag(&tmc4671_controller, true);
 800183c:	2101      	movs	r1, #1
 800183e:	485e      	ldr	r0, [pc, #376]	@ (80019b8 <main+0x5b8>)
 8001840:	f001 fce0 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setSoftPositiveLimit(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001844:	4b59      	ldr	r3, [pc, #356]	@ (80019ac <main+0x5ac>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
					break;
 800184a:	e1a3      	b.n	8001b94 <main+0x794>

				case 5:
					TxData = etc_new_data;
 800184c:	4b55      	ldr	r3, [pc, #340]	@ (80019a4 <main+0x5a4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a55      	ldr	r2, [pc, #340]	@ (80019a8 <main+0x5a8>)
 8001852:	6013      	str	r3, [r2, #0]
					if (( etc_new_data >= 0) || ( etc_new_data < -12000)) {	//cannot be 0, positive number or less than -12000um = -12mm
 8001854:	4b53      	ldr	r3, [pc, #332]	@ (80019a4 <main+0x5a4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	da04      	bge.n	8001866 <main+0x466>
 800185c:	4b51      	ldr	r3, [pc, #324]	@ (80019a4 <main+0x5a4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a57      	ldr	r2, [pc, #348]	@ (80019c0 <main+0x5c0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	da03      	bge.n	800186e <main+0x46e>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001866:	2101      	movs	r1, #1
 8001868:	4853      	ldr	r0, [pc, #332]	@ (80019b8 <main+0x5b8>)
 800186a:	f001 fccb 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setSoftNegativeLimit(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 800186e:	4b4f      	ldr	r3, [pc, #316]	@ (80019ac <main+0x5ac>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
					break;
 8001874:	e18e      	b.n	8001b94 <main+0x794>

				case 6:
					TxData = etc_new_data;
 8001876:	4b4b      	ldr	r3, [pc, #300]	@ (80019a4 <main+0x5a4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a4b      	ldr	r2, [pc, #300]	@ (80019a8 <main+0x5a8>)
 800187c:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 2000)) {	//cannot be 0, negative number or more than 2000um = 2mm
 800187e:	4b49      	ldr	r3, [pc, #292]	@ (80019a4 <main+0x5a4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	dd04      	ble.n	8001890 <main+0x490>
 8001886:	4b47      	ldr	r3, [pc, #284]	@ (80019a4 <main+0x5a4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800188e:	dd03      	ble.n	8001898 <main+0x498>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001890:	2101      	movs	r1, #1
 8001892:	4849      	ldr	r0, [pc, #292]	@ (80019b8 <main+0x5b8>)
 8001894:	f001 fcb6 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setMaxPositionError(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001898:	4b44      	ldr	r3, [pc, #272]	@ (80019ac <main+0x5ac>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
					break;
 800189e:	e179      	b.n	8001b94 <main+0x794>

				case 7:
					TxData = etc_new_data;
 80018a0:	4b40      	ldr	r3, [pc, #256]	@ (80019a4 <main+0x5a4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a40      	ldr	r2, [pc, #256]	@ (80019a8 <main+0x5a8>)
 80018a6:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 5000)) {	//cannot be 0, negative number or more than 5000
 80018a8:	4b3e      	ldr	r3, [pc, #248]	@ (80019a4 <main+0x5a4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dd05      	ble.n	80018bc <main+0x4bc>
 80018b0:	4b3c      	ldr	r3, [pc, #240]	@ (80019a4 <main+0x5a4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	dd03      	ble.n	80018c4 <main+0x4c4>
						setWrongCommandFlag(&tmc4671_controller, true);
 80018bc:	2101      	movs	r1, #1
 80018be:	483e      	ldr	r0, [pc, #248]	@ (80019b8 <main+0x5b8>)
 80018c0:	f001 fca0 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setCurrentLimitHoming(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80018c4:	4b39      	ldr	r3, [pc, #228]	@ (80019ac <main+0x5ac>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
					break;
 80018ca:	e163      	b.n	8001b94 <main+0x794>

				case 8:
					TxData = etc_new_data;
 80018cc:	4b35      	ldr	r3, [pc, #212]	@ (80019a4 <main+0x5a4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a35      	ldr	r2, [pc, #212]	@ (80019a8 <main+0x5a8>)
 80018d2:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 15000)) {//cannot be 0, negative number or more than 15000
 80018d4:	4b33      	ldr	r3, [pc, #204]	@ (80019a4 <main+0x5a4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	dd05      	ble.n	80018e8 <main+0x4e8>
 80018dc:	4b31      	ldr	r3, [pc, #196]	@ (80019a4 <main+0x5a4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80018e4:	4293      	cmp	r3, r2
 80018e6:	dd03      	ble.n	80018f0 <main+0x4f0>
						setWrongCommandFlag(&tmc4671_controller, true);
 80018e8:	2101      	movs	r1, #1
 80018ea:	4833      	ldr	r0, [pc, #204]	@ (80019b8 <main+0x5b8>)
 80018ec:	f001 fc8a 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setCurrentLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80018f0:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <main+0x5ac>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
					break;
 80018f6:	e14d      	b.n	8001b94 <main+0x794>

				case 9:
					TxData = etc_new_data;
 80018f8:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <main+0x5a4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2a      	ldr	r2, [pc, #168]	@ (80019a8 <main+0x5a8>)
 80018fe:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 8000)) {	//cannot be 0, negative number or more than 8000
 8001900:	4b28      	ldr	r3, [pc, #160]	@ (80019a4 <main+0x5a4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	dd04      	ble.n	8001912 <main+0x512>
 8001908:	4b26      	ldr	r3, [pc, #152]	@ (80019a4 <main+0x5a4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001910:	dd03      	ble.n	800191a <main+0x51a>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001912:	2101      	movs	r1, #1
 8001914:	4828      	ldr	r0, [pc, #160]	@ (80019b8 <main+0x5b8>)
 8001916:	f001 fc75 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setVoltageLimitHoming(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <main+0x5ac>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
					break;
 8001920:	e138      	b.n	8001b94 <main+0x794>

				case 10:
					TxData = etc_new_data;
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <main+0x5a4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a20      	ldr	r2, [pc, #128]	@ (80019a8 <main+0x5a8>)
 8001928:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 500)) {//cannot be 0, negative number or more than 500
 800192a:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <main+0x5a4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	dd04      	ble.n	800193c <main+0x53c>
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <main+0x5a4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800193a:	dd03      	ble.n	8001944 <main+0x544>
						setWrongCommandFlag(&tmc4671_controller, true);
 800193c:	2101      	movs	r1, #1
 800193e:	481e      	ldr	r0, [pc, #120]	@ (80019b8 <main+0x5b8>)
 8001940:	f001 fc60 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setVelocityLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001944:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <main+0x5ac>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
					break;
 800194a:	e123      	b.n	8001b94 <main+0x794>

				case 11:
					TxData = etc_new_data;
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <main+0x5a4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a15      	ldr	r2, [pc, #84]	@ (80019a8 <main+0x5a8>)
 8001952:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 30000)) {//cannot be 0, negative number or more than 30000
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <main+0x5a4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	dd05      	ble.n	8001968 <main+0x568>
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <main+0x5a4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001964:	4293      	cmp	r3, r2
 8001966:	dd03      	ble.n	8001970 <main+0x570>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001968:	2101      	movs	r1, #1
 800196a:	4813      	ldr	r0, [pc, #76]	@ (80019b8 <main+0x5b8>)
 800196c:	f001 fc4a 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setTorqueLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <main+0x5ac>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
					break;
 8001976:	e10d      	b.n	8001b94 <main+0x794>

				case 12:
					TxData = etc_new_data;
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <main+0x5a4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <main+0x5a8>)
 800197e:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <main+0x5a4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	dd05      	ble.n	8001994 <main+0x594>
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <main+0x5a4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001990:	4293      	cmp	r3, r2
 8001992:	dd03      	ble.n	800199c <main+0x59c>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001994:	2101      	movs	r1, #1
 8001996:	4808      	ldr	r0, [pc, #32]	@ (80019b8 <main+0x5b8>)
 8001998:	f001 fc34 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setCurrentGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <main+0x5ac>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
					break;
 80019a2:	e0f7      	b.n	8001b94 <main+0x794>
 80019a4:	2000032c 	.word	0x2000032c
 80019a8:	20000344 	.word	0x20000344
 80019ac:	2000031e 	.word	0x2000031e
 80019b0:	2000034b 	.word	0x2000034b
 80019b4:	000f4240 	.word	0x000f4240
 80019b8:	200002c0 	.word	0x200002c0
 80019bc:	ffffec79 	.word	0xffffec79
 80019c0:	ffffd120 	.word	0xffffd120

				case 13:
					TxData = etc_new_data;
 80019c4:	4b78      	ldr	r3, [pc, #480]	@ (8001ba8 <main+0x7a8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a78      	ldr	r2, [pc, #480]	@ (8001bac <main+0x7ac>)
 80019ca:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 80019cc:	4b76      	ldr	r3, [pc, #472]	@ (8001ba8 <main+0x7a8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dd05      	ble.n	80019e0 <main+0x5e0>
 80019d4:	4b74      	ldr	r3, [pc, #464]	@ (8001ba8 <main+0x7a8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 80019dc:	4293      	cmp	r3, r2
 80019de:	dd03      	ble.n	80019e8 <main+0x5e8>
						setWrongCommandFlag(&tmc4671_controller, true);
 80019e0:	2101      	movs	r1, #1
 80019e2:	4873      	ldr	r0, [pc, #460]	@ (8001bb0 <main+0x7b0>)
 80019e4:	f001 fc0e 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setCurrentGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80019e8:	4b72      	ldr	r3, [pc, #456]	@ (8001bb4 <main+0x7b4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
					break;
 80019ee:	e0d1      	b.n	8001b94 <main+0x794>

				case 14:
					TxData = etc_new_data;
 80019f0:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba8 <main+0x7a8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6d      	ldr	r2, [pc, #436]	@ (8001bac <main+0x7ac>)
 80019f6:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 80019f8:	4b6b      	ldr	r3, [pc, #428]	@ (8001ba8 <main+0x7a8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	dd05      	ble.n	8001a0c <main+0x60c>
 8001a00:	4b69      	ldr	r3, [pc, #420]	@ (8001ba8 <main+0x7a8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	dd03      	ble.n	8001a14 <main+0x614>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4868      	ldr	r0, [pc, #416]	@ (8001bb0 <main+0x7b0>)
 8001a10:	f001 fbf8 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setVelocityGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a14:	4b67      	ldr	r3, [pc, #412]	@ (8001bb4 <main+0x7b4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
					break;
 8001a1a:	e0bb      	b.n	8001b94 <main+0x794>

				case 15:
					TxData = etc_new_data;
 8001a1c:	4b62      	ldr	r3, [pc, #392]	@ (8001ba8 <main+0x7a8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a62      	ldr	r2, [pc, #392]	@ (8001bac <main+0x7ac>)
 8001a22:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a24:	4b60      	ldr	r3, [pc, #384]	@ (8001ba8 <main+0x7a8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	dd05      	ble.n	8001a38 <main+0x638>
 8001a2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ba8 <main+0x7a8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a34:	4293      	cmp	r3, r2
 8001a36:	dd03      	ble.n	8001a40 <main+0x640>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	485d      	ldr	r0, [pc, #372]	@ (8001bb0 <main+0x7b0>)
 8001a3c:	f001 fbe2 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setVelocityGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a40:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb4 <main+0x7b4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
					break;
 8001a46:	e0a5      	b.n	8001b94 <main+0x794>

				case 16:
					TxData = etc_new_data;
 8001a48:	4b57      	ldr	r3, [pc, #348]	@ (8001ba8 <main+0x7a8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a57      	ldr	r2, [pc, #348]	@ (8001bac <main+0x7ac>)
 8001a4e:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a50:	4b55      	ldr	r3, [pc, #340]	@ (8001ba8 <main+0x7a8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	dd05      	ble.n	8001a64 <main+0x664>
 8001a58:	4b53      	ldr	r3, [pc, #332]	@ (8001ba8 <main+0x7a8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a60:	4293      	cmp	r3, r2
 8001a62:	dd03      	ble.n	8001a6c <main+0x66c>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a64:	2101      	movs	r1, #1
 8001a66:	4852      	ldr	r0, [pc, #328]	@ (8001bb0 <main+0x7b0>)
 8001a68:	f001 fbcc 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setPositionGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a6c:	4b51      	ldr	r3, [pc, #324]	@ (8001bb4 <main+0x7b4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
					break;
 8001a72:	e08f      	b.n	8001b94 <main+0x794>

				case 17:
					TxData = etc_new_data;
 8001a74:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba8 <main+0x7a8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a4c      	ldr	r2, [pc, #304]	@ (8001bac <main+0x7ac>)
 8001a7a:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a7c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba8 <main+0x7a8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	dd05      	ble.n	8001a90 <main+0x690>
 8001a84:	4b48      	ldr	r3, [pc, #288]	@ (8001ba8 <main+0x7a8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	dd03      	ble.n	8001a98 <main+0x698>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a90:	2101      	movs	r1, #1
 8001a92:	4847      	ldr	r0, [pc, #284]	@ (8001bb0 <main+0x7b0>)
 8001a94:	f001 fbb6 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setPositionGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a98:	4b46      	ldr	r3, [pc, #280]	@ (8001bb4 <main+0x7b4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
					break;
 8001a9e:	e079      	b.n	8001b94 <main+0x794>

				case 18:
					TxData = etc_new_data;
 8001aa0:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <main+0x7a8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a41      	ldr	r2, [pc, #260]	@ (8001bac <main+0x7ac>)
 8001aa6:	6013      	str	r3, [r2, #0]
					if (( etc_new_data < -12000) || ( etc_new_data > 12000)) {//cannot be less than -12000um = -12mm or greater than 12000um = 12mm
 8001aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba8 <main+0x7a8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a42      	ldr	r2, [pc, #264]	@ (8001bb8 <main+0x7b8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	db05      	blt.n	8001abe <main+0x6be>
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba8 <main+0x7a8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001aba:	4293      	cmp	r3, r2
 8001abc:	dd03      	ble.n	8001ac6 <main+0x6c6>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001abe:	2101      	movs	r1, #1
 8001ac0:	483b      	ldr	r0, [pc, #236]	@ (8001bb0 <main+0x7b0>)
 8001ac2:	f001 fb9f 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setAbsoluteTargetPosition(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb4 <main+0x7b4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
					break;
 8001acc:	e062      	b.n	8001b94 <main+0x794>

				case 19:
					TxData = etc_new_data;
 8001ace:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <main+0x7a8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a36      	ldr	r2, [pc, #216]	@ (8001bac <main+0x7ac>)
 8001ad4:	6013      	str	r3, [r2, #0]
					if (( etc_new_data < -12000) || ( etc_new_data > 12000)) {//cannot be less than -12000um = -12mm or greater than 12000um = 12mm
 8001ad6:	4b34      	ldr	r3, [pc, #208]	@ (8001ba8 <main+0x7a8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a37      	ldr	r2, [pc, #220]	@ (8001bb8 <main+0x7b8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	db05      	blt.n	8001aec <main+0x6ec>
 8001ae0:	4b31      	ldr	r3, [pc, #196]	@ (8001ba8 <main+0x7a8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	dd03      	ble.n	8001af4 <main+0x6f4>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001aec:	2101      	movs	r1, #1
 8001aee:	4830      	ldr	r0, [pc, #192]	@ (8001bb0 <main+0x7b0>)
 8001af0:	f001 fb88 	bl	8003204 <setWrongCommandFlag>
					} else {
//						setIncrementalTargetPosition(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001af4:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <main+0x7b4>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
					break;
 8001afa:	e04b      	b.n	8001b94 <main+0x794>

				case 100:
					TxData = etc_new_data;
 8001afc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba8 <main+0x7a8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2a      	ldr	r2, [pc, #168]	@ (8001bac <main+0x7ac>)
 8001b02:	6013      	str	r3, [r2, #0]
					if ((etc_new_data != 0) && (etc_new_data != 1)) {//cannot be anything other than 0 or 1
 8001b04:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <main+0x7a8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <main+0x71c>
 8001b0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <main+0x7a8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d003      	beq.n	8001b1c <main+0x71c>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001b14:	2101      	movs	r1, #1
 8001b16:	4826      	ldr	r0, [pc, #152]	@ (8001bb0 <main+0x7b0>)
 8001b18:	f001 fb74 	bl	8003204 <setWrongCommandFlag>
					} else {
//						servoEnable(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001b1c:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <main+0x7b4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
					break;
 8001b22:	e037      	b.n	8001b94 <main+0x794>

				case 101:
					TxData = 0;
 8001b24:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <main+0x7ac>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
//					startHoming(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4820      	ldr	r0, [pc, #128]	@ (8001bb0 <main+0x7b0>)
 8001b2e:	f001 fb69 	bl	8003204 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <main+0x7b4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
					break;
 8001b38:	e02c      	b.n	8001b94 <main+0x794>

				case 102:
					TxData = 0;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <main+0x7ac>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
//					clearFaults(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b40:	2100      	movs	r1, #0
 8001b42:	481b      	ldr	r0, [pc, #108]	@ (8001bb0 <main+0x7b0>)
 8001b44:	f001 fb5e 	bl	8003204 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <main+0x7b4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
					break;
 8001b4e:	e021      	b.n	8001b94 <main+0x794>

				case 103:
					TxData = 0;
 8001b50:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <main+0x7ac>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
					//saveParameters(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b56:	2100      	movs	r1, #0
 8001b58:	4815      	ldr	r0, [pc, #84]	@ (8001bb0 <main+0x7b0>)
 8001b5a:	f001 fb53 	bl	8003204 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <main+0x7b4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
					break;
 8001b64:	e016      	b.n	8001b94 <main+0x794>

				case 104:
					TxData = 0;
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <main+0x7ac>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
					//loadDefaultParameters(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4810      	ldr	r0, [pc, #64]	@ (8001bb0 <main+0x7b0>)
 8001b70:	f001 fb48 	bl	8003204 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <main+0x7b4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
					break;
 8001b7a:	e00b      	b.n	8001b94 <main+0x794>

				case 105:
					TxData = 0;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <main+0x7ac>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
					//stopMovement(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b82:	2100      	movs	r1, #0
 8001b84:	480a      	ldr	r0, [pc, #40]	@ (8001bb0 <main+0x7b0>)
 8001b86:	f001 fb3d 	bl	8003204 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <main+0x7b4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
					break;
 8001b90:	e000      	b.n	8001b94 <main+0x794>

				default:
					break;
 8001b92:	bf00      	nop
				}
				etc_old_command = etc_new_command;
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <main+0x7bc>)
 8001b96:	881a      	ldrh	r2, [r3, #0]
 8001b98:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <main+0x7c0>)
 8001b9a:	801a      	strh	r2, [r3, #0]
				etc_old_data = etc_new_data;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	@ (8001ba8 <main+0x7a8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <main+0x7c4>)
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e313      	b.n	80021ce <main+0xdce>
 8001ba6:	bf00      	nop
 8001ba8:	2000032c 	.word	0x2000032c
 8001bac:	20000344 	.word	0x20000344
 8001bb0:	200002c0 	.word	0x200002c0
 8001bb4:	2000031e 	.word	0x2000031e
 8001bb8:	ffffd120 	.word	0xffffd120
 8001bbc:	20000328 	.word	0x20000328
 8001bc0:	20000320 	.word	0x20000320
 8001bc4:	20000324 	.word	0x20000324
		  }
	  } else if (get_command_flag) {
 8001bc8:	4bd7      	ldr	r3, [pc, #860]	@ (8001f28 <main+0xb28>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8296 	beq.w	80020fe <main+0xcfe>
		  switch(etc_new_command) {
 8001bd2:	4bd6      	ldr	r3, [pc, #856]	@ (8001f2c <main+0xb2c>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	3b32      	subs	r3, #50	@ 0x32
 8001bd8:	2b96      	cmp	r3, #150	@ 0x96
 8001bda:	f200 827e 	bhi.w	80020da <main+0xcda>
 8001bde:	a201      	add	r2, pc, #4	@ (adr r2, 8001be4 <main+0x7e4>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001e41 	.word	0x08001e41
 8001be8:	08001e59 	.word	0x08001e59
 8001bec:	08001e69 	.word	0x08001e69
 8001bf0:	08001e85 	.word	0x08001e85
 8001bf4:	08001e9b 	.word	0x08001e9b
 8001bf8:	08001eb1 	.word	0x08001eb1
 8001bfc:	08001ecf 	.word	0x08001ecf
 8001c00:	08001eed 	.word	0x08001eed
 8001c04:	08001f0b 	.word	0x08001f0b
 8001c08:	08001f45 	.word	0x08001f45
 8001c0c:	08001f63 	.word	0x08001f63
 8001c10:	08001f81 	.word	0x08001f81
 8001c14:	08001f9f 	.word	0x08001f9f
 8001c18:	08001fbd 	.word	0x08001fbd
 8001c1c:	08001fdb 	.word	0x08001fdb
 8001c20:	08001ff9 	.word	0x08001ff9
 8001c24:	08002017 	.word	0x08002017
 8001c28:	08002035 	.word	0x08002035
 8001c2c:	08002051 	.word	0x08002051
 8001c30:	0800206d 	.word	0x0800206d
 8001c34:	0800208b 	.word	0x0800208b
 8001c38:	080020db 	.word	0x080020db
 8001c3c:	080020db 	.word	0x080020db
 8001c40:	080020db 	.word	0x080020db
 8001c44:	080020db 	.word	0x080020db
 8001c48:	080020db 	.word	0x080020db
 8001c4c:	080020db 	.word	0x080020db
 8001c50:	080020db 	.word	0x080020db
 8001c54:	080020db 	.word	0x080020db
 8001c58:	080020db 	.word	0x080020db
 8001c5c:	080020db 	.word	0x080020db
 8001c60:	080020db 	.word	0x080020db
 8001c64:	080020db 	.word	0x080020db
 8001c68:	080020db 	.word	0x080020db
 8001c6c:	080020db 	.word	0x080020db
 8001c70:	080020db 	.word	0x080020db
 8001c74:	080020db 	.word	0x080020db
 8001c78:	080020db 	.word	0x080020db
 8001c7c:	080020db 	.word	0x080020db
 8001c80:	080020db 	.word	0x080020db
 8001c84:	080020db 	.word	0x080020db
 8001c88:	080020db 	.word	0x080020db
 8001c8c:	080020db 	.word	0x080020db
 8001c90:	080020db 	.word	0x080020db
 8001c94:	080020db 	.word	0x080020db
 8001c98:	080020db 	.word	0x080020db
 8001c9c:	080020db 	.word	0x080020db
 8001ca0:	080020db 	.word	0x080020db
 8001ca4:	080020db 	.word	0x080020db
 8001ca8:	080020db 	.word	0x080020db
 8001cac:	080020db 	.word	0x080020db
 8001cb0:	080020db 	.word	0x080020db
 8001cb4:	080020db 	.word	0x080020db
 8001cb8:	080020db 	.word	0x080020db
 8001cbc:	080020db 	.word	0x080020db
 8001cc0:	080020db 	.word	0x080020db
 8001cc4:	080020db 	.word	0x080020db
 8001cc8:	080020db 	.word	0x080020db
 8001ccc:	080020db 	.word	0x080020db
 8001cd0:	080020db 	.word	0x080020db
 8001cd4:	080020db 	.word	0x080020db
 8001cd8:	080020db 	.word	0x080020db
 8001cdc:	080020db 	.word	0x080020db
 8001ce0:	080020db 	.word	0x080020db
 8001ce4:	080020db 	.word	0x080020db
 8001ce8:	080020db 	.word	0x080020db
 8001cec:	080020db 	.word	0x080020db
 8001cf0:	080020db 	.word	0x080020db
 8001cf4:	080020db 	.word	0x080020db
 8001cf8:	080020db 	.word	0x080020db
 8001cfc:	080020db 	.word	0x080020db
 8001d00:	080020db 	.word	0x080020db
 8001d04:	080020db 	.word	0x080020db
 8001d08:	080020db 	.word	0x080020db
 8001d0c:	080020db 	.word	0x080020db
 8001d10:	080020db 	.word	0x080020db
 8001d14:	080020db 	.word	0x080020db
 8001d18:	080020db 	.word	0x080020db
 8001d1c:	080020db 	.word	0x080020db
 8001d20:	080020db 	.word	0x080020db
 8001d24:	080020db 	.word	0x080020db
 8001d28:	080020db 	.word	0x080020db
 8001d2c:	080020db 	.word	0x080020db
 8001d30:	080020db 	.word	0x080020db
 8001d34:	080020db 	.word	0x080020db
 8001d38:	080020db 	.word	0x080020db
 8001d3c:	080020db 	.word	0x080020db
 8001d40:	080020db 	.word	0x080020db
 8001d44:	080020db 	.word	0x080020db
 8001d48:	080020db 	.word	0x080020db
 8001d4c:	080020db 	.word	0x080020db
 8001d50:	080020db 	.word	0x080020db
 8001d54:	080020db 	.word	0x080020db
 8001d58:	080020db 	.word	0x080020db
 8001d5c:	080020db 	.word	0x080020db
 8001d60:	080020db 	.word	0x080020db
 8001d64:	080020db 	.word	0x080020db
 8001d68:	080020db 	.word	0x080020db
 8001d6c:	080020db 	.word	0x080020db
 8001d70:	080020db 	.word	0x080020db
 8001d74:	080020db 	.word	0x080020db
 8001d78:	080020db 	.word	0x080020db
 8001d7c:	080020db 	.word	0x080020db
 8001d80:	080020db 	.word	0x080020db
 8001d84:	080020db 	.word	0x080020db
 8001d88:	080020db 	.word	0x080020db
 8001d8c:	080020db 	.word	0x080020db
 8001d90:	080020db 	.word	0x080020db
 8001d94:	080020db 	.word	0x080020db
 8001d98:	080020db 	.word	0x080020db
 8001d9c:	080020db 	.word	0x080020db
 8001da0:	080020db 	.word	0x080020db
 8001da4:	080020db 	.word	0x080020db
 8001da8:	080020db 	.word	0x080020db
 8001dac:	080020db 	.word	0x080020db
 8001db0:	080020db 	.word	0x080020db
 8001db4:	080020db 	.word	0x080020db
 8001db8:	080020db 	.word	0x080020db
 8001dbc:	080020db 	.word	0x080020db
 8001dc0:	080020db 	.word	0x080020db
 8001dc4:	080020db 	.word	0x080020db
 8001dc8:	080020db 	.word	0x080020db
 8001dcc:	080020db 	.word	0x080020db
 8001dd0:	080020db 	.word	0x080020db
 8001dd4:	080020db 	.word	0x080020db
 8001dd8:	080020db 	.word	0x080020db
 8001ddc:	080020db 	.word	0x080020db
 8001de0:	080020db 	.word	0x080020db
 8001de4:	080020db 	.word	0x080020db
 8001de8:	080020db 	.word	0x080020db
 8001dec:	080020db 	.word	0x080020db
 8001df0:	080020db 	.word	0x080020db
 8001df4:	080020db 	.word	0x080020db
 8001df8:	080020db 	.word	0x080020db
 8001dfc:	080020db 	.word	0x080020db
 8001e00:	080020db 	.word	0x080020db
 8001e04:	080020db 	.word	0x080020db
 8001e08:	080020db 	.word	0x080020db
 8001e0c:	080020db 	.word	0x080020db
 8001e10:	080020db 	.word	0x080020db
 8001e14:	080020db 	.word	0x080020db
 8001e18:	080020db 	.word	0x080020db
 8001e1c:	080020db 	.word	0x080020db
 8001e20:	080020db 	.word	0x080020db
 8001e24:	080020db 	.word	0x080020db
 8001e28:	080020db 	.word	0x080020db
 8001e2c:	080020db 	.word	0x080020db
 8001e30:	080020db 	.word	0x080020db
 8001e34:	080020db 	.word	0x080020db
 8001e38:	080020db 	.word	0x080020db
 8001e3c:	080020a9 	.word	0x080020a9
			case 50:
				TxData = (uint32_t)1000;
 8001e40:	4b3b      	ldr	r3, [pc, #236]	@ (8001f30 <main+0xb30>)
 8001e42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e46:	601a      	str	r2, [r3, #0]
				//TxData = getEncoderResolution(&tmc4671_controller);
				setWrongCommandFlag(&tmc4671_controller, false);
 8001e48:	2100      	movs	r1, #0
 8001e4a:	483a      	ldr	r0, [pc, #232]	@ (8001f34 <main+0xb34>)
 8001e4c:	f001 f9da 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001e50:	4b39      	ldr	r3, [pc, #228]	@ (8001f38 <main+0xb38>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
				break;
 8001e56:	e14b      	b.n	80020f0 <main+0xcf0>

			case 51:
				//TxData = getEncoderDirection(&tmc4671_controller);
				setWrongCommandFlag(&tmc4671_controller, false);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4836      	ldr	r0, [pc, #216]	@ (8001f34 <main+0xb34>)
 8001e5c:	f001 f9d2 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001e60:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <main+0xb38>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
				break;
 8001e66:	e143      	b.n	80020f0 <main+0xcf0>

			case 52:
				// int32_t zero_offset = getZeroOffset(&tmc4671_controller);
				// TxData = (uint32_t) zero_offset;  // Cast int32_t to uint32_t
				 TxData = getZeroOffset(&tmc4671_controller);
 8001e68:	4832      	ldr	r0, [pc, #200]	@ (8001f34 <main+0xb34>)
 8001e6a:	f001 fac1 	bl	80033f0 <getZeroOffset>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a2f      	ldr	r2, [pc, #188]	@ (8001f30 <main+0xb30>)
 8001e72:	6013      	str	r3, [r2, #0]
				 setWrongCommandFlag(&tmc4671_controller, false);
 8001e74:	2100      	movs	r1, #0
 8001e76:	482f      	ldr	r0, [pc, #188]	@ (8001f34 <main+0xb34>)
 8001e78:	f001 f9c4 	bl	8003204 <setWrongCommandFlag>
				 continuous_tx_flag = true;
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f38 <main+0xb38>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
				 break;
 8001e82:	e135      	b.n	80020f0 <main+0xcf0>

			case 53:
				TxData = -1000;
 8001e84:	4b2a      	ldr	r3, [pc, #168]	@ (8001f30 <main+0xb30>)
 8001e86:	4a2d      	ldr	r2, [pc, #180]	@ (8001f3c <main+0xb3c>)
 8001e88:	601a      	str	r2, [r3, #0]
			//	int32_t soft_pos_limit = getSoftPositiveLimit(&tmc4671_controller);
			//	TxData = (uint32_t) soft_pos_limit;  // Cast int32_t to uint32_t
				//TxData = getSoftPositiveLimit(&tmc4671_controller);
				setWrongCommandFlag(&tmc4671_controller, false);
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4829      	ldr	r0, [pc, #164]	@ (8001f34 <main+0xb34>)
 8001e8e:	f001 f9b9 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001e92:	4b29      	ldr	r3, [pc, #164]	@ (8001f38 <main+0xb38>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
				break;
 8001e98:	e12a      	b.n	80020f0 <main+0xcf0>


			case 54:
				TxData = -80000;
 8001e9a:	4b25      	ldr	r3, [pc, #148]	@ (8001f30 <main+0xb30>)
 8001e9c:	4a28      	ldr	r2, [pc, #160]	@ (8001f40 <main+0xb40>)
 8001e9e:	601a      	str	r2, [r3, #0]
			//	int32_t soft_neg_limit = getSoftNegativeLimit(&tmc4671_controller);
			//	TxData = (uint32_t) soft_neg_limit;  // Cast int32_t to uint32_t
			//	TxData =  getSoftNegativeLimit(&tmc4671_controller);
				setWrongCommandFlag(&tmc4671_controller, false);
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4824      	ldr	r0, [pc, #144]	@ (8001f34 <main+0xb34>)
 8001ea4:	f001 f9ae 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ea8:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <main+0xb38>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
				break;
 8001eae:	e11f      	b.n	80020f0 <main+0xcf0>

			case 55:
				TxData = getMaxPositionError(&tmc4671_controller);
 8001eb0:	4820      	ldr	r0, [pc, #128]	@ (8001f34 <main+0xb34>)
 8001eb2:	f001 fb2d 	bl	8003510 <getMaxPositionError>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <main+0xb30>)
 8001ebc:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	481c      	ldr	r0, [pc, #112]	@ (8001f34 <main+0xb34>)
 8001ec2:	f001 f99f 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <main+0xb38>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
				break;
 8001ecc:	e110      	b.n	80020f0 <main+0xcf0>

			case 56:
				TxData = getCurrentLimitHoming(&tmc4671_controller);
 8001ece:	4819      	ldr	r0, [pc, #100]	@ (8001f34 <main+0xb34>)
 8001ed0:	f001 fa52 	bl	8003378 <getCurrentLimitHoming>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <main+0xb30>)
 8001eda:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001edc:	2100      	movs	r1, #0
 8001ede:	4815      	ldr	r0, [pc, #84]	@ (8001f34 <main+0xb34>)
 8001ee0:	f001 f990 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <main+0xb38>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
				break;
 8001eea:	e101      	b.n	80020f0 <main+0xcf0>

			case 57:
				TxData = getCurrentLimitServo(&tmc4671_controller);
 8001eec:	4811      	ldr	r0, [pc, #68]	@ (8001f34 <main+0xb34>)
 8001eee:	f001 fa4f 	bl	8003390 <getCurrentLimitServo>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <main+0xb30>)
 8001ef8:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001efa:	2100      	movs	r1, #0
 8001efc:	480d      	ldr	r0, [pc, #52]	@ (8001f34 <main+0xb34>)
 8001efe:	f001 f981 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <main+0xb38>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
				break;
 8001f08:	e0f2      	b.n	80020f0 <main+0xcf0>

			case 58:
				TxData = getVoltageLimitHoming(&tmc4671_controller);
 8001f0a:	480a      	ldr	r0, [pc, #40]	@ (8001f34 <main+0xb34>)
 8001f0c:	f001 fa4c 	bl	80033a8 <getVoltageLimitHoming>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <main+0xb30>)
 8001f16:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4806      	ldr	r0, [pc, #24]	@ (8001f34 <main+0xb34>)
 8001f1c:	f001 f972 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <main+0xb38>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
				break;
 8001f26:	e0e3      	b.n	80020f0 <main+0xcf0>
 8001f28:	2000031d 	.word	0x2000031d
 8001f2c:	20000328 	.word	0x20000328
 8001f30:	20000344 	.word	0x20000344
 8001f34:	200002c0 	.word	0x200002c0
 8001f38:	2000031e 	.word	0x2000031e
 8001f3c:	fffffc18 	.word	0xfffffc18
 8001f40:	fffec780 	.word	0xfffec780

			case 59:
				TxData = getVelocityLimitServo(&tmc4671_controller);
 8001f44:	488d      	ldr	r0, [pc, #564]	@ (800217c <main+0xd7c>)
 8001f46:	f001 fa3b 	bl	80033c0 <getVelocityLimitServo>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b8c      	ldr	r3, [pc, #560]	@ (8002180 <main+0xd80>)
 8001f50:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f52:	2100      	movs	r1, #0
 8001f54:	4889      	ldr	r0, [pc, #548]	@ (800217c <main+0xd7c>)
 8001f56:	f001 f955 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f5a:	4b8a      	ldr	r3, [pc, #552]	@ (8002184 <main+0xd84>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
				break;
 8001f60:	e0c6      	b.n	80020f0 <main+0xcf0>

			case 60:
				TxData = getTorqueLimitServo(&tmc4671_controller);
 8001f62:	4886      	ldr	r0, [pc, #536]	@ (800217c <main+0xd7c>)
 8001f64:	f001 fa38 	bl	80033d8 <getTorqueLimitServo>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b84      	ldr	r3, [pc, #528]	@ (8002180 <main+0xd80>)
 8001f6e:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f70:	2100      	movs	r1, #0
 8001f72:	4882      	ldr	r0, [pc, #520]	@ (800217c <main+0xd7c>)
 8001f74:	f001 f946 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f78:	4b82      	ldr	r3, [pc, #520]	@ (8002184 <main+0xd84>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
				break;
 8001f7e:	e0b7      	b.n	80020f0 <main+0xcf0>

			case 61:
				TxData = getCurrentGainP(&tmc4671_controller);
 8001f80:	487e      	ldr	r0, [pc, #504]	@ (800217c <main+0xd7c>)
 8001f82:	f001 faf3 	bl	800356c <getCurrentGainP>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002180 <main+0xd80>)
 8001f8c:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	487a      	ldr	r0, [pc, #488]	@ (800217c <main+0xd7c>)
 8001f92:	f001 f937 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f96:	4b7b      	ldr	r3, [pc, #492]	@ (8002184 <main+0xd84>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
				break;
 8001f9c:	e0a8      	b.n	80020f0 <main+0xcf0>

			case 62:
				TxData = getCurrentGainI(&tmc4671_controller);
 8001f9e:	4877      	ldr	r0, [pc, #476]	@ (800217c <main+0xd7c>)
 8001fa0:	f001 faf0 	bl	8003584 <getCurrentGainI>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b75      	ldr	r3, [pc, #468]	@ (8002180 <main+0xd80>)
 8001faa:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fac:	2100      	movs	r1, #0
 8001fae:	4873      	ldr	r0, [pc, #460]	@ (800217c <main+0xd7c>)
 8001fb0:	f001 f928 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001fb4:	4b73      	ldr	r3, [pc, #460]	@ (8002184 <main+0xd84>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
				break;
 8001fba:	e099      	b.n	80020f0 <main+0xcf0>

			case 63:
				TxData = getVelocityGainP(&tmc4671_controller);
 8001fbc:	486f      	ldr	r0, [pc, #444]	@ (800217c <main+0xd7c>)
 8001fbe:	f001 faed 	bl	800359c <getVelocityGainP>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8002180 <main+0xd80>)
 8001fc8:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fca:	2100      	movs	r1, #0
 8001fcc:	486b      	ldr	r0, [pc, #428]	@ (800217c <main+0xd7c>)
 8001fce:	f001 f919 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001fd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002184 <main+0xd84>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
				break;
 8001fd8:	e08a      	b.n	80020f0 <main+0xcf0>

			case 64:
				TxData = getVelocityGainI(&tmc4671_controller);
 8001fda:	4868      	ldr	r0, [pc, #416]	@ (800217c <main+0xd7c>)
 8001fdc:	f001 faea 	bl	80035b4 <getVelocityGainI>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b66      	ldr	r3, [pc, #408]	@ (8002180 <main+0xd80>)
 8001fe6:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4864      	ldr	r0, [pc, #400]	@ (800217c <main+0xd7c>)
 8001fec:	f001 f90a 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ff0:	4b64      	ldr	r3, [pc, #400]	@ (8002184 <main+0xd84>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
				break;
 8001ff6:	e07b      	b.n	80020f0 <main+0xcf0>

			case 65:
				TxData = getPositionGainP(&tmc4671_controller);
 8001ff8:	4860      	ldr	r0, [pc, #384]	@ (800217c <main+0xd7c>)
 8001ffa:	f001 fae7 	bl	80035cc <getPositionGainP>
 8001ffe:	4603      	mov	r3, r0
 8002000:	461a      	mov	r2, r3
 8002002:	4b5f      	ldr	r3, [pc, #380]	@ (8002180 <main+0xd80>)
 8002004:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002006:	2100      	movs	r1, #0
 8002008:	485c      	ldr	r0, [pc, #368]	@ (800217c <main+0xd7c>)
 800200a:	f001 f8fb 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 800200e:	4b5d      	ldr	r3, [pc, #372]	@ (8002184 <main+0xd84>)
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
				break;
 8002014:	e06c      	b.n	80020f0 <main+0xcf0>

			case 66:
				TxData = getPositionGainI(&tmc4671_controller);
 8002016:	4859      	ldr	r0, [pc, #356]	@ (800217c <main+0xd7c>)
 8002018:	f001 fae4 	bl	80035e4 <getPositionGainI>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	4b57      	ldr	r3, [pc, #348]	@ (8002180 <main+0xd80>)
 8002022:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002024:	2100      	movs	r1, #0
 8002026:	4855      	ldr	r0, [pc, #340]	@ (800217c <main+0xd7c>)
 8002028:	f001 f8ec 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 800202c:	4b55      	ldr	r3, [pc, #340]	@ (8002184 <main+0xd84>)
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
				break;
 8002032:	e05d      	b.n	80020f0 <main+0xcf0>

			case 67:
			//	int32_t target_position = getTargetPosition(&tmc4671_controller);
			//	TxData = (uint32_t) target_position;  // Cast int32_t to uint32_t
				TxData = getTargetPosition(&tmc4671_controller);
 8002034:	4851      	ldr	r0, [pc, #324]	@ (800217c <main+0xd7c>)
 8002036:	f001 fa3b 	bl	80034b0 <getTargetPosition>
 800203a:	4603      	mov	r3, r0
 800203c:	4a50      	ldr	r2, [pc, #320]	@ (8002180 <main+0xd80>)
 800203e:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002040:	2100      	movs	r1, #0
 8002042:	484e      	ldr	r0, [pc, #312]	@ (800217c <main+0xd7c>)
 8002044:	f001 f8de 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002048:	4b4e      	ldr	r3, [pc, #312]	@ (8002184 <main+0xd84>)
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
				break;
 800204e:	e04f      	b.n	80020f0 <main+0xcf0>

			case 68:
			//	int32_t actual_position = getActualPosition(&tmc4671_controller);
			//	TxData = (uint32_t) actual_position;  // Cast int32_t to uint32_t
				TxData = getActualPosition(&tmc4671_controller);
 8002050:	484a      	ldr	r0, [pc, #296]	@ (800217c <main+0xd7c>)
 8002052:	f001 f9fd 	bl	8003450 <getActualPosition>
 8002056:	4603      	mov	r3, r0
 8002058:	4a49      	ldr	r2, [pc, #292]	@ (8002180 <main+0xd80>)
 800205a:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 800205c:	2100      	movs	r1, #0
 800205e:	4847      	ldr	r0, [pc, #284]	@ (800217c <main+0xd7c>)
 8002060:	f001 f8d0 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002064:	4b47      	ldr	r3, [pc, #284]	@ (8002184 <main+0xd84>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
				break;
 800206a:	e041      	b.n	80020f0 <main+0xcf0>

			case 69:
				TxData = getCoilCurrent(&tmc4671_controller);
 800206c:	4843      	ldr	r0, [pc, #268]	@ (800217c <main+0xd7c>)
 800206e:	f001 f977 	bl	8003360 <getCoilCurrent>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	4b42      	ldr	r3, [pc, #264]	@ (8002180 <main+0xd80>)
 8002078:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 800207a:	2100      	movs	r1, #0
 800207c:	483f      	ldr	r0, [pc, #252]	@ (800217c <main+0xd7c>)
 800207e:	f001 f8c1 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002082:	4b40      	ldr	r3, [pc, #256]	@ (8002184 <main+0xd84>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
				break;
 8002088:	e032      	b.n	80020f0 <main+0xcf0>

			case 70:
				TxData = getFirmwareVersion(&tmc4671_controller);
 800208a:	483c      	ldr	r0, [pc, #240]	@ (800217c <main+0xd7c>)
 800208c:	f001 fab6 	bl	80035fc <getFirmwareVersion>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b3a      	ldr	r3, [pc, #232]	@ (8002180 <main+0xd80>)
 8002096:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002098:	2100      	movs	r1, #0
 800209a:	4838      	ldr	r0, [pc, #224]	@ (800217c <main+0xd7c>)
 800209c:	f001 f8b2 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = true;
 80020a0:	4b38      	ldr	r3, [pc, #224]	@ (8002184 <main+0xd84>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
				break;
 80020a6:	e023      	b.n	80020f0 <main+0xcf0>

			case 200:
				TxData = 0;
 80020a8:	4b35      	ldr	r3, [pc, #212]	@ (8002180 <main+0xd80>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
				get_Execution_count++;
 80020ae:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <main+0xd88>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b34      	ldr	r3, [pc, #208]	@ (8002188 <main+0xd88>)
 80020b8:	701a      	strb	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 80020ba:	2100      	movs	r1, #0
 80020bc:	482f      	ldr	r0, [pc, #188]	@ (800217c <main+0xd7c>)
 80020be:	f001 f8a1 	bl	8003204 <setWrongCommandFlag>
				TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 80020c2:	4932      	ldr	r1, [pc, #200]	@ (800218c <main+0xd8c>)
 80020c4:	482d      	ldr	r0, [pc, #180]	@ (800217c <main+0xd7c>)
 80020c6:	f001 f8ad 	bl	8003224 <getEventStatusWord>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b30      	ldr	r3, [pc, #192]	@ (8002190 <main+0xd90>)
 80020d0:	801a      	strh	r2, [r3, #0]
				continuous_tx_flag = false;
 80020d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002184 <main+0xd84>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
				break;
 80020d8:	e00a      	b.n	80020f0 <main+0xcf0>

			default:
				TxData = 0;
 80020da:	4b29      	ldr	r3, [pc, #164]	@ (8002180 <main+0xd80>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, true);
 80020e0:	2101      	movs	r1, #1
 80020e2:	4826      	ldr	r0, [pc, #152]	@ (800217c <main+0xd7c>)
 80020e4:	f001 f88e 	bl	8003204 <setWrongCommandFlag>
				continuous_tx_flag = false;
 80020e8:	4b26      	ldr	r3, [pc, #152]	@ (8002184 <main+0xd84>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
				break;
 80020ee:	bf00      	nop
		  }
		  etc_old_command = 0;
 80020f0:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <main+0xd94>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	801a      	strh	r2, [r3, #0]
		  etc_old_data = 0;
 80020f6:	4b28      	ldr	r3, [pc, #160]	@ (8002198 <main+0xd98>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e067      	b.n	80021ce <main+0xdce>
	  } else if (accelerometer_flag) {
 80020fe:	4b27      	ldr	r3, [pc, #156]	@ (800219c <main+0xd9c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d063      	beq.n	80021ce <main+0xdce>
		  switch(etc_new_command) {
 8002106:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <main+0xda0>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	f240 122f 	movw	r2, #303	@ 0x12f
 800210e:	4293      	cmp	r3, r2
 8002110:	d048      	beq.n	80021a4 <main+0xda4>
 8002112:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8002116:	da54      	bge.n	80021c2 <main+0xdc2>
 8002118:	f240 122d 	movw	r2, #301	@ 0x12d
 800211c:	4293      	cmp	r3, r2
 800211e:	d003      	beq.n	8002128 <main+0xd28>
 8002120:	f5b3 7f97 	cmp.w	r3, #302	@ 0x12e
 8002124:	d015      	beq.n	8002152 <main+0xd52>
 8002126:	e04c      	b.n	80021c2 <main+0xdc2>
		  case 301:
			  get_Execution_count++;
 8002128:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <main+0xd88>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <main+0xd88>)
 8002132:	701a      	strb	r2, [r3, #0]
			  setWrongCommandFlag(&tmc4671_controller, false);
 8002134:	2100      	movs	r1, #0
 8002136:	4811      	ldr	r0, [pc, #68]	@ (800217c <main+0xd7c>)
 8002138:	f001 f864 	bl	8003204 <setWrongCommandFlag>
			  int32_t Accel_x = getAcceleration('X');
 800213c:	2058      	movs	r0, #88	@ 0x58
 800213e:	f7fe fe9b 	bl	8000e78 <getAcceleration>
 8002142:	6078      	str	r0, [r7, #4]
			  TxData =  Accel_x;
 8002144:	4a0e      	ldr	r2, [pc, #56]	@ (8002180 <main+0xd80>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
			  continuous_tx_flag = true;
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <main+0xd84>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
			  break;
 8002150:	e037      	b.n	80021c2 <main+0xdc2>

		  case 302:
			  get_Execution_count++;
 8002152:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <main+0xd88>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <main+0xd88>)
 800215c:	701a      	strb	r2, [r3, #0]
			  setWrongCommandFlag(&tmc4671_controller, false);
 800215e:	2100      	movs	r1, #0
 8002160:	4806      	ldr	r0, [pc, #24]	@ (800217c <main+0xd7c>)
 8002162:	f001 f84f 	bl	8003204 <setWrongCommandFlag>
			  int32_t Accel_y = getAcceleration('Y');
 8002166:	2059      	movs	r0, #89	@ 0x59
 8002168:	f7fe fe86 	bl	8000e78 <getAcceleration>
 800216c:	60b8      	str	r0, [r7, #8]
			  TxData = Accel_y;
 800216e:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <main+0xd80>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	6013      	str	r3, [r2, #0]
			  continuous_tx_flag = true;
 8002174:	4b03      	ldr	r3, [pc, #12]	@ (8002184 <main+0xd84>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
			  break;
 800217a:	e022      	b.n	80021c2 <main+0xdc2>
 800217c:	200002c0 	.word	0x200002c0
 8002180:	20000344 	.word	0x20000344
 8002184:	2000031e 	.word	0x2000031e
 8002188:	2000034c 	.word	0x2000034c
 800218c:	2000034a 	.word	0x2000034a
 8002190:	20000348 	.word	0x20000348
 8002194:	20000320 	.word	0x20000320
 8002198:	20000324 	.word	0x20000324
 800219c:	2000031f 	.word	0x2000031f
 80021a0:	20000328 	.word	0x20000328

		  case 303:
			  setWrongCommandFlag(&tmc4671_controller, false);
 80021a4:	2100      	movs	r1, #0
 80021a6:	4846      	ldr	r0, [pc, #280]	@ (80022c0 <main+0xec0>)
 80021a8:	f001 f82c 	bl	8003204 <setWrongCommandFlag>
			  int32_t Accel_z = getAcceleration('Z');
 80021ac:	205a      	movs	r0, #90	@ 0x5a
 80021ae:	f7fe fe63 	bl	8000e78 <getAcceleration>
 80021b2:	60f8      	str	r0, [r7, #12]
			  TxData = Accel_z;
 80021b4:	4a43      	ldr	r2, [pc, #268]	@ (80022c4 <main+0xec4>)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6013      	str	r3, [r2, #0]
			  continuous_tx_flag = true;
 80021ba:	4b43      	ldr	r3, [pc, #268]	@ (80022c8 <main+0xec8>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
			  break;
 80021c0:	bf00      	nop
		  }
		  etc_old_command = 0;
 80021c2:	4b42      	ldr	r3, [pc, #264]	@ (80022cc <main+0xecc>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	801a      	strh	r2, [r3, #0]
		  etc_old_data = 0;
 80021c8:	4b41      	ldr	r3, [pc, #260]	@ (80022d0 <main+0xed0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
		  no_error_drive = true;
	  }*/

	  /*---------------------------TRANSMIT DATA TO ETHERCAT ---------------------------------------------*/

	  if (set_command_flag) {
 80021ce:	4b41      	ldr	r3, [pc, #260]	@ (80022d4 <main+0xed4>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d034      	beq.n	8002240 <main+0xe40>
		  if (!continuous_tx_flag) {
 80021d6:	4b3c      	ldr	r3, [pc, #240]	@ (80022c8 <main+0xec8>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	f083 0301 	eor.w	r3, r3, #1
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01d      	beq.n	8002220 <main+0xe20>
			  set_sent_count++;
 80021e4:	4b3c      	ldr	r3, [pc, #240]	@ (80022d8 <main+0xed8>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b3a      	ldr	r3, [pc, #232]	@ (80022d8 <main+0xed8>)
 80021ee:	701a      	strb	r2, [r3, #0]
			  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 80021f0:	493a      	ldr	r1, [pc, #232]	@ (80022dc <main+0xedc>)
 80021f2:	4833      	ldr	r0, [pc, #204]	@ (80022c0 <main+0xec0>)
 80021f4:	f001 f816 	bl	8003224 <getEventStatusWord>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b38      	ldr	r3, [pc, #224]	@ (80022e0 <main+0xee0>)
 80021fe:	801a      	strh	r2, [r3, #0]
			  Etc_Buffer_In.LANLong[0] = ((uint32_t)TxStatus << 16) | (uint32_t)etc_new_command;
 8002200:	4b37      	ldr	r3, [pc, #220]	@ (80022e0 <main+0xee0>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	4a37      	ldr	r2, [pc, #220]	@ (80022e4 <main+0xee4>)
 8002208:	8812      	ldrh	r2, [r2, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	4a36      	ldr	r2, [pc, #216]	@ (80022e8 <main+0xee8>)
 800220e:	6013      	str	r3, [r2, #0]
			  Etc_Buffer_In.LANLong[1] = TxData;
 8002210:	4b2c      	ldr	r3, [pc, #176]	@ (80022c4 <main+0xec4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b34      	ldr	r3, [pc, #208]	@ (80022e8 <main+0xee8>)
 8002218:	605a      	str	r2, [r3, #4]
			  continuous_tx_flag = true;  // Mark that data has been sent
 800221a:	4b2b      	ldr	r3, [pc, #172]	@ (80022c8 <main+0xec8>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
		  }
		  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 8002220:	492e      	ldr	r1, [pc, #184]	@ (80022dc <main+0xedc>)
 8002222:	4827      	ldr	r0, [pc, #156]	@ (80022c0 <main+0xec0>)
 8002224:	f000 fffe 	bl	8003224 <getEventStatusWord>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	4b2c      	ldr	r3, [pc, #176]	@ (80022e0 <main+0xee0>)
 800222e:	801a      	strh	r2, [r3, #0]
		  Etc_Buffer_In.LANLong[0] = ((uint32_t)TxStatus << 16) | (uint32_t)etc_new_command;
 8002230:	4b2b      	ldr	r3, [pc, #172]	@ (80022e0 <main+0xee0>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	4a2b      	ldr	r2, [pc, #172]	@ (80022e4 <main+0xee4>)
 8002238:	8812      	ldrh	r2, [r2, #0]
 800223a:	4313      	orrs	r3, r2
 800223c:	4a2a      	ldr	r2, [pc, #168]	@ (80022e8 <main+0xee8>)
 800223e:	6013      	str	r3, [r2, #0]
	  }

	  if (get_command_flag) {
 8002240:	4b2a      	ldr	r3, [pc, #168]	@ (80022ec <main+0xeec>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d019      	beq.n	800227c <main+0xe7c>
		  get_sent_count++;
 8002248:	4b29      	ldr	r3, [pc, #164]	@ (80022f0 <main+0xef0>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <main+0xef0>)
 8002252:	701a      	strb	r2, [r3, #0]
		  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 8002254:	4921      	ldr	r1, [pc, #132]	@ (80022dc <main+0xedc>)
 8002256:	481a      	ldr	r0, [pc, #104]	@ (80022c0 <main+0xec0>)
 8002258:	f000 ffe4 	bl	8003224 <getEventStatusWord>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	4b1f      	ldr	r3, [pc, #124]	@ (80022e0 <main+0xee0>)
 8002262:	801a      	strh	r2, [r3, #0]
		  Etc_Buffer_In.LANLong[0] = ((uint32_t) TxStatus << 16) | (uint32_t) etc_new_command;
 8002264:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <main+0xee0>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	4a1e      	ldr	r2, [pc, #120]	@ (80022e4 <main+0xee4>)
 800226c:	8812      	ldrh	r2, [r2, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	4a1d      	ldr	r2, [pc, #116]	@ (80022e8 <main+0xee8>)
 8002272:	6013      	str	r3, [r2, #0]
		 // Etc_Buffer_In.LANLong[1] = TxData;
		  Etc_Buffer_In.LANInt[1] = TxData;
 8002274:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <main+0xec4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1b      	ldr	r2, [pc, #108]	@ (80022e8 <main+0xee8>)
 800227a:	6053      	str	r3, [r2, #4]
	  }

	  if(accelerometer_flag) {
 800227c:	4b1d      	ldr	r3, [pc, #116]	@ (80022f4 <main+0xef4>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f43f a8e7 	beq.w	8001454 <main+0x54>
		  adxl_sent_count++;
 8002286:	4b1c      	ldr	r3, [pc, #112]	@ (80022f8 <main+0xef8>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b1a      	ldr	r3, [pc, #104]	@ (80022f8 <main+0xef8>)
 8002290:	701a      	strb	r2, [r3, #0]
		  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 8002292:	4912      	ldr	r1, [pc, #72]	@ (80022dc <main+0xedc>)
 8002294:	480a      	ldr	r0, [pc, #40]	@ (80022c0 <main+0xec0>)
 8002296:	f000 ffc5 	bl	8003224 <getEventStatusWord>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <main+0xee0>)
 80022a0:	801a      	strh	r2, [r3, #0]
	       Etc_Buffer_In.LANLong[0] = ((uint32_t) TxStatus << 16) | (uint32_t) etc_new_command;
 80022a2:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <main+0xee0>)
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	041b      	lsls	r3, r3, #16
 80022a8:	4a0e      	ldr	r2, [pc, #56]	@ (80022e4 <main+0xee4>)
 80022aa:	8812      	ldrh	r2, [r2, #0]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	4a0e      	ldr	r2, [pc, #56]	@ (80022e8 <main+0xee8>)
 80022b0:	6013      	str	r3, [r2, #0]
		  Etc_Buffer_In.LANLong[1] = (int32_t)TxData;
 80022b2:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <main+0xec4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <main+0xee8>)
 80022ba:	605a      	str	r2, [r3, #4]
	  if (pcap_init_ok) {
 80022bc:	f7ff b8ca 	b.w	8001454 <main+0x54>
 80022c0:	200002c0 	.word	0x200002c0
 80022c4:	20000344 	.word	0x20000344
 80022c8:	2000031e 	.word	0x2000031e
 80022cc:	20000320 	.word	0x20000320
 80022d0:	20000324 	.word	0x20000324
 80022d4:	2000031c 	.word	0x2000031c
 80022d8:	2000034d 	.word	0x2000034d
 80022dc:	2000034a 	.word	0x2000034a
 80022e0:	20000348 	.word	0x20000348
 80022e4:	20000328 	.word	0x20000328
 80022e8:	200000a4 	.word	0x200000a4
 80022ec:	2000031d 	.word	0x2000031d
 80022f0:	2000034e 	.word	0x2000034e
 80022f4:	2000031f 	.word	0x2000031f
 80022f8:	2000034f 	.word	0x2000034f

080022fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b094      	sub	sp, #80	@ 0x50
 8002300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002302:	f107 0320 	add.w	r3, r7, #32
 8002306:	2230      	movs	r2, #48	@ 0x30
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f004 ff32 	bl	8007174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	4b27      	ldr	r3, [pc, #156]	@ (80023c4 <SystemClock_Config+0xc8>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	4a26      	ldr	r2, [pc, #152]	@ (80023c4 <SystemClock_Config+0xc8>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800232e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002330:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <SystemClock_Config+0xc8>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800233c:	2300      	movs	r3, #0
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	4b21      	ldr	r3, [pc, #132]	@ (80023c8 <SystemClock_Config+0xcc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a20      	ldr	r2, [pc, #128]	@ (80023c8 <SystemClock_Config+0xcc>)
 8002346:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <SystemClock_Config+0xcc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002358:	2301      	movs	r3, #1
 800235a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800235c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002362:	2302      	movs	r3, #2
 8002364:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002366:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800236a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800236c:	2319      	movs	r3, #25
 800236e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002370:	23c0      	movs	r3, #192	@ 0xc0
 8002372:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002374:	2302      	movs	r3, #2
 8002376:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002378:	2304      	movs	r3, #4
 800237a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237c:	f107 0320 	add.w	r3, r7, #32
 8002380:	4618      	mov	r0, r3
 8002382:	f002 ffa7 	bl	80052d4 <HAL_RCC_OscConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800238c:	f000 fa1e 	bl	80027cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002390:	230f      	movs	r3, #15
 8002392:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002394:	2302      	movs	r3, #2
 8002396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800239c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	2103      	movs	r1, #3
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 fa09 	bl	80057c4 <HAL_RCC_ClockConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80023b8:	f000 fa08 	bl	80027cc <Error_Handler>
  }
}
 80023bc:	bf00      	nop
 80023be:	3750      	adds	r7, #80	@ 0x50
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40007000 	.word	0x40007000

080023cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023d0:	4b12      	ldr	r3, [pc, #72]	@ (800241c <MX_I2C1_Init+0x50>)
 80023d2:	4a13      	ldr	r2, [pc, #76]	@ (8002420 <MX_I2C1_Init+0x54>)
 80023d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023d6:	4b11      	ldr	r3, [pc, #68]	@ (800241c <MX_I2C1_Init+0x50>)
 80023d8:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <MX_I2C1_Init+0x58>)
 80023da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <MX_I2C1_Init+0x50>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <MX_I2C1_Init+0x50>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <MX_I2C1_Init+0x50>)
 80023ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <MX_I2C1_Init+0x50>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023f6:	4b09      	ldr	r3, [pc, #36]	@ (800241c <MX_I2C1_Init+0x50>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023fc:	4b07      	ldr	r3, [pc, #28]	@ (800241c <MX_I2C1_Init+0x50>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <MX_I2C1_Init+0x50>)
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	@ (800241c <MX_I2C1_Init+0x50>)
 800240a:	f001 fc4f 	bl	8003cac <HAL_I2C_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002414:	f000 f9da 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200000c4 	.word	0x200000c4
 8002420:	40005400 	.word	0x40005400
 8002424:	000186a0 	.word	0x000186a0

08002428 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800242c:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <MX_I2C2_Init+0x50>)
 800242e:	4a13      	ldr	r2, [pc, #76]	@ (800247c <MX_I2C2_Init+0x54>)
 8002430:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002432:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <MX_I2C2_Init+0x50>)
 8002434:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <MX_I2C2_Init+0x58>)
 8002436:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002438:	4b0f      	ldr	r3, [pc, #60]	@ (8002478 <MX_I2C2_Init+0x50>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800243e:	4b0e      	ldr	r3, [pc, #56]	@ (8002478 <MX_I2C2_Init+0x50>)
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <MX_I2C2_Init+0x50>)
 8002446:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800244a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800244c:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <MX_I2C2_Init+0x50>)
 800244e:	2200      	movs	r2, #0
 8002450:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002452:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <MX_I2C2_Init+0x50>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002458:	4b07      	ldr	r3, [pc, #28]	@ (8002478 <MX_I2C2_Init+0x50>)
 800245a:	2200      	movs	r2, #0
 800245c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800245e:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <MX_I2C2_Init+0x50>)
 8002460:	2200      	movs	r2, #0
 8002462:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002464:	4804      	ldr	r0, [pc, #16]	@ (8002478 <MX_I2C2_Init+0x50>)
 8002466:	f001 fc21 	bl	8003cac <HAL_I2C_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002470:	f000 f9ac 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000118 	.word	0x20000118
 800247c:	40005800 	.word	0x40005800
 8002480:	000186a0 	.word	0x000186a0

08002484 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002488:	4b17      	ldr	r3, [pc, #92]	@ (80024e8 <MX_SPI1_Init+0x64>)
 800248a:	4a18      	ldr	r2, [pc, #96]	@ (80024ec <MX_SPI1_Init+0x68>)
 800248c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800248e:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <MX_SPI1_Init+0x64>)
 8002490:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002494:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002496:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <MX_SPI1_Init+0x64>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800249c:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <MX_SPI1_Init+0x64>)
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80024a2:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <MX_SPI1_Init+0x64>)
 80024a4:	2202      	movs	r2, #2
 80024a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80024a8:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <MX_SPI1_Init+0x64>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <MX_SPI1_Init+0x64>)
 80024b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80024b6:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <MX_SPI1_Init+0x64>)
 80024b8:	2220      	movs	r2, #32
 80024ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024bc:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <MX_SPI1_Init+0x64>)
 80024be:	2200      	movs	r2, #0
 80024c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <MX_SPI1_Init+0x64>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c8:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <MX_SPI1_Init+0x64>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024ce:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <MX_SPI1_Init+0x64>)
 80024d0:	220a      	movs	r2, #10
 80024d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024d4:	4804      	ldr	r0, [pc, #16]	@ (80024e8 <MX_SPI1_Init+0x64>)
 80024d6:	f003 fb41 	bl	8005b5c <HAL_SPI_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024e0:	f000 f974 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	2000016c 	.word	0x2000016c
 80024ec:	40013000 	.word	0x40013000

080024f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80024f4:	4b17      	ldr	r3, [pc, #92]	@ (8002554 <MX_SPI2_Init+0x64>)
 80024f6:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <MX_SPI2_Init+0x68>)
 80024f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024fa:	4b16      	ldr	r3, [pc, #88]	@ (8002554 <MX_SPI2_Init+0x64>)
 80024fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002500:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002502:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <MX_SPI2_Init+0x64>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002508:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <MX_SPI2_Init+0x64>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800250e:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <MX_SPI2_Init+0x64>)
 8002510:	2202      	movs	r2, #2
 8002512:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002514:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <MX_SPI2_Init+0x64>)
 8002516:	2201      	movs	r2, #1
 8002518:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800251a:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <MX_SPI2_Init+0x64>)
 800251c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002520:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002522:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <MX_SPI2_Init+0x64>)
 8002524:	2218      	movs	r2, #24
 8002526:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002528:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <MX_SPI2_Init+0x64>)
 800252a:	2200      	movs	r2, #0
 800252c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800252e:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <MX_SPI2_Init+0x64>)
 8002530:	2200      	movs	r2, #0
 8002532:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002534:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <MX_SPI2_Init+0x64>)
 8002536:	2200      	movs	r2, #0
 8002538:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <MX_SPI2_Init+0x64>)
 800253c:	220a      	movs	r2, #10
 800253e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002540:	4804      	ldr	r0, [pc, #16]	@ (8002554 <MX_SPI2_Init+0x64>)
 8002542:	f003 fb0b 	bl	8005b5c <HAL_SPI_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800254c:	f000 f93e 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	200001c4 	.word	0x200001c4
 8002558:	40003800 	.word	0x40003800

0800255c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002560:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <MX_SPI5_Init+0x64>)
 8002562:	4a18      	ldr	r2, [pc, #96]	@ (80025c4 <MX_SPI5_Init+0x68>)
 8002564:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002566:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <MX_SPI5_Init+0x64>)
 8002568:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800256c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800256e:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <MX_SPI5_Init+0x64>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <MX_SPI5_Init+0x64>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800257a:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <MX_SPI5_Init+0x64>)
 800257c:	2202      	movs	r2, #2
 800257e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002580:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <MX_SPI5_Init+0x64>)
 8002582:	2201      	movs	r2, #1
 8002584:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002586:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <MX_SPI5_Init+0x64>)
 8002588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800258c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800258e:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <MX_SPI5_Init+0x64>)
 8002590:	2208      	movs	r2, #8
 8002592:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002594:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <MX_SPI5_Init+0x64>)
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <MX_SPI5_Init+0x64>)
 800259c:	2200      	movs	r2, #0
 800259e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <MX_SPI5_Init+0x64>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <MX_SPI5_Init+0x64>)
 80025a8:	220a      	movs	r2, #10
 80025aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80025ac:	4804      	ldr	r0, [pc, #16]	@ (80025c0 <MX_SPI5_Init+0x64>)
 80025ae:	f003 fad5 	bl	8005b5c <HAL_SPI_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80025b8:	f000 f908 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	2000021c 	.word	0x2000021c
 80025c4:	40015000 	.word	0x40015000

080025c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025dc:	463b      	mov	r3, r7
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <MX_TIM4_Init+0x94>)
 80025e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002660 <MX_TIM4_Init+0x98>)
 80025e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 80025ea:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <MX_TIM4_Init+0x94>)
 80025ec:	225f      	movs	r2, #95	@ 0x5f
 80025ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f0:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <MX_TIM4_Init+0x94>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80025f6:	4b19      	ldr	r3, [pc, #100]	@ (800265c <MX_TIM4_Init+0x94>)
 80025f8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80025fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fe:	4b17      	ldr	r3, [pc, #92]	@ (800265c <MX_TIM4_Init+0x94>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002604:	4b15      	ldr	r3, [pc, #84]	@ (800265c <MX_TIM4_Init+0x94>)
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800260a:	4814      	ldr	r0, [pc, #80]	@ (800265c <MX_TIM4_Init+0x94>)
 800260c:	f004 f87c 	bl	8006708 <HAL_TIM_Base_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002616:	f000 f8d9 	bl	80027cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800261e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	4619      	mov	r1, r3
 8002626:	480d      	ldr	r0, [pc, #52]	@ (800265c <MX_TIM4_Init+0x94>)
 8002628:	f004 f93f 	bl	80068aa <HAL_TIM_ConfigClockSource>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002632:	f000 f8cb 	bl	80027cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800263e:	463b      	mov	r3, r7
 8002640:	4619      	mov	r1, r3
 8002642:	4806      	ldr	r0, [pc, #24]	@ (800265c <MX_TIM4_Init+0x94>)
 8002644:	f004 fb1e 	bl	8006c84 <HAL_TIMEx_MasterConfigSynchronization>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800264e:	f000 f8bd 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000274 	.word	0x20000274
 8002660:	40000800 	.word	0x40000800

08002664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	@ 0x28
 8002668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	4b4f      	ldr	r3, [pc, #316]	@ (80027bc <MX_GPIO_Init+0x158>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	4a4e      	ldr	r2, [pc, #312]	@ (80027bc <MX_GPIO_Init+0x158>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	6313      	str	r3, [r2, #48]	@ 0x30
 800268a:	4b4c      	ldr	r3, [pc, #304]	@ (80027bc <MX_GPIO_Init+0x158>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b48      	ldr	r3, [pc, #288]	@ (80027bc <MX_GPIO_Init+0x158>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	4a47      	ldr	r2, [pc, #284]	@ (80027bc <MX_GPIO_Init+0x158>)
 80026a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a6:	4b45      	ldr	r3, [pc, #276]	@ (80027bc <MX_GPIO_Init+0x158>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	4b41      	ldr	r3, [pc, #260]	@ (80027bc <MX_GPIO_Init+0x158>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	4a40      	ldr	r2, [pc, #256]	@ (80027bc <MX_GPIO_Init+0x158>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c2:	4b3e      	ldr	r3, [pc, #248]	@ (80027bc <MX_GPIO_Init+0x158>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	4b3a      	ldr	r3, [pc, #232]	@ (80027bc <MX_GPIO_Init+0x158>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	4a39      	ldr	r2, [pc, #228]	@ (80027bc <MX_GPIO_Init+0x158>)
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026de:	4b37      	ldr	r3, [pc, #220]	@ (80027bc <MX_GPIO_Init+0x158>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80026ea:	2200      	movs	r2, #0
 80026ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026f0:	4833      	ldr	r0, [pc, #204]	@ (80027c0 <MX_GPIO_Init+0x15c>)
 80026f2:	f001 fac1 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TMC4671_CS_Pin|ADXL345_CS_Pin|LAN9252_CS_Pin, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	f640 2108 	movw	r1, #2568	@ 0xa08
 80026fc:	4831      	ldr	r0, [pc, #196]	@ (80027c4 <MX_GPIO_Init+0x160>)
 80026fe:	f001 fabb 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CTRL_EN_Pin, GPIO_PIN_RESET);
 8002702:	2200      	movs	r2, #0
 8002704:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002708:	482f      	ldr	r0, [pc, #188]	@ (80027c8 <MX_GPIO_Init+0x164>)
 800270a:	f001 fab5 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800270e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002714:	2301      	movs	r3, #1
 8002716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	4619      	mov	r1, r3
 8002726:	4826      	ldr	r0, [pc, #152]	@ (80027c0 <MX_GPIO_Init+0x15c>)
 8002728:	f001 f922 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC4671_CS_Pin ADXL345_CS_Pin LAN9252_CS_Pin */
  GPIO_InitStruct.Pin = TMC4671_CS_Pin|ADXL345_CS_Pin|LAN9252_CS_Pin;
 800272c:	f640 2308 	movw	r3, #2568	@ 0xa08
 8002730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002732:	2301      	movs	r3, #1
 8002734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	481f      	ldr	r0, [pc, #124]	@ (80027c4 <MX_GPIO_Init+0x160>)
 8002746:	f001 f913 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC6100_CS_Pin */
  GPIO_InitStruct.Pin = TMC6100_CS_Pin;
 800274a:	2310      	movs	r3, #16
 800274c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMC6100_CS_GPIO_Port, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4819      	ldr	r0, [pc, #100]	@ (80027c4 <MX_GPIO_Init+0x160>)
 800275e:	f001 f907 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC_STATUS_Pin */
  GPIO_InitStruct.Pin = TMC_STATUS_Pin;
 8002762:	2302      	movs	r3, #2
 8002764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMC_STATUS_GPIO_Port, &GPIO_InitStruct);
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4619      	mov	r1, r3
 8002774:	4814      	ldr	r0, [pc, #80]	@ (80027c8 <MX_GPIO_Init+0x164>)
 8002776:	f001 f8fb 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_INDEX_Pin */
  GPIO_InitStruct.Pin = ENC_INDEX_Pin;
 800277a:	2304      	movs	r3, #4
 800277c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800277e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_INDEX_GPIO_Port, &GPIO_InitStruct);
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	4619      	mov	r1, r3
 800278e:	480e      	ldr	r0, [pc, #56]	@ (80027c8 <MX_GPIO_Init+0x164>)
 8002790:	f001 f8ee 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTRL_EN_Pin */
  GPIO_InitStruct.Pin = CTRL_EN_Pin;
 8002794:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279a:	2301      	movs	r3, #1
 800279c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CTRL_EN_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	4806      	ldr	r0, [pc, #24]	@ (80027c8 <MX_GPIO_Init+0x164>)
 80027ae:	f001 f8df 	bl	8003970 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	@ 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020000 	.word	0x40020000
 80027c8:	40020400 	.word	0x40020400

080027cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d0:	b672      	cpsid	i
}
 80027d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <Error_Handler+0x8>

080027d8 <initMovingAverage>:
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e007      	b.n	80027f6 <initMovingAverage+0x1e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	2100      	movs	r1, #0
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3301      	adds	r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b0e      	cmp	r3, #14
 80027fa:	ddf4      	ble.n	80027e6 <initMovingAverage+0xe>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	641a      	str	r2, [r3, #64]	@ 0x40
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <updateMovingAverage>:
 8002822:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002834:	68f9      	ldr	r1, [r7, #12]
 8002836:	8f89      	ldrh	r1, [r1, #60]	@ 0x3c
 8002838:	4608      	mov	r0, r1
 800283a:	68f9      	ldr	r1, [r7, #12]
 800283c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002840:	2000      	movs	r0, #0
 8002842:	4688      	mov	r8, r1
 8002844:	4681      	mov	r9, r0
 8002846:	ebb2 0108 	subs.w	r1, r2, r8
 800284a:	6039      	str	r1, [r7, #0]
 800284c:	eb63 0309 	sbc.w	r3, r3, r9
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002858:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002860:	4619      	mov	r1, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	2000      	movs	r0, #0
 8002874:	460c      	mov	r4, r1
 8002876:	4605      	mov	r5, r0
 8002878:	eb12 0a04 	adds.w	sl, r2, r4
 800287c:	eb43 0b05 	adc.w	fp, r3, r5
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	e9c3 ab12 	strd	sl, fp, [r3, #72]	@ 0x48
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800288a:	3301      	adds	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002896:	2b0e      	cmp	r3, #14
 8002898:	d902      	bls.n	80028a0 <updateMovingAverage+0x7e>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80028a6:	f04f 020f 	mov.w	r2, #15
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	f7fe f8fd 	bl	8000aac <__aeabi_uldivmod>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080028c4 <pcap_init>:
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	f107 0308 	add.w	r3, r7, #8
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	809a      	strh	r2, [r3, #4]
 80028d8:	237e      	movs	r3, #126	@ 0x7e
 80028da:	713b      	strb	r3, [r7, #4]
 80028dc:	1d3a      	adds	r2, r7, #4
 80028de:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2301      	movs	r3, #1
 80028e6:	2150      	movs	r1, #80	@ 0x50
 80028e8:	481c      	ldr	r0, [pc, #112]	@ (800295c <pcap_init+0x98>)
 80028ea:	f001 fb23 	bl	8003f34 <HAL_I2C_Master_Transmit>
 80028ee:	4603      	mov	r3, r0
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <pcap_init+0x42>
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	4619      	mov	r1, r3
 80028fc:	4818      	ldr	r0, [pc, #96]	@ (8002960 <pcap_init+0x9c>)
 80028fe:	f004 faf1 	bl	8006ee4 <iprintf>
 8002902:	2300      	movs	r3, #0
 8002904:	e025      	b.n	8002952 <pcap_init+0x8e>
 8002906:	1d3a      	adds	r2, r7, #4
 8002908:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2301      	movs	r3, #1
 8002910:	2150      	movs	r1, #80	@ 0x50
 8002912:	4812      	ldr	r0, [pc, #72]	@ (800295c <pcap_init+0x98>)
 8002914:	f001 fc0c 	bl	8004130 <HAL_I2C_Master_Receive>
 8002918:	4603      	mov	r3, r0
 800291a:	73fb      	strb	r3, [r7, #15]
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d006      	beq.n	8002930 <pcap_init+0x6c>
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	4619      	mov	r1, r3
 8002926:	480f      	ldr	r0, [pc, #60]	@ (8002964 <pcap_init+0xa0>)
 8002928:	f004 fadc 	bl	8006ee4 <iprintf>
 800292c:	2300      	movs	r3, #0
 800292e:	e010      	b.n	8002952 <pcap_init+0x8e>
 8002930:	793b      	ldrb	r3, [r7, #4]
 8002932:	2b11      	cmp	r3, #17
 8002934:	d006      	beq.n	8002944 <pcap_init+0x80>
 8002936:	793b      	ldrb	r3, [r7, #4]
 8002938:	4619      	mov	r1, r3
 800293a:	480b      	ldr	r0, [pc, #44]	@ (8002968 <pcap_init+0xa4>)
 800293c:	f004 fad2 	bl	8006ee4 <iprintf>
 8002940:	2300      	movs	r3, #0
 8002942:	e006      	b.n	8002952 <pcap_init+0x8e>
 8002944:	4809      	ldr	r0, [pc, #36]	@ (800296c <pcap_init+0xa8>)
 8002946:	f7ff ff47 	bl	80027d8 <initMovingAverage>
 800294a:	4809      	ldr	r0, [pc, #36]	@ (8002970 <pcap_init+0xac>)
 800294c:	f004 fb32 	bl	8006fb4 <puts>
 8002950:	2301      	movs	r3, #1
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200000c4 	.word	0x200000c4
 8002960:	08007c94 	.word	0x08007c94
 8002964:	08007cc0 	.word	0x08007cc0
 8002968:	08007d04 	.word	0x08007d04
 800296c:	20000350 	.word	0x20000350
 8002970:	08007d48 	.word	0x08007d48

08002974 <pcap_scan>:
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af02      	add	r7, sp, #8
 800297a:	2300      	movs	r3, #0
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	809a      	strh	r2, [r3, #4]
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
 800298a:	2361      	movs	r3, #97	@ 0x61
 800298c:	703b      	strb	r3, [r7, #0]
 800298e:	463a      	mov	r2, r7
 8002990:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2301      	movs	r3, #1
 8002998:	2150      	movs	r1, #80	@ 0x50
 800299a:	48a5      	ldr	r0, [pc, #660]	@ (8002c30 <pcap_scan+0x2bc>)
 800299c:	f001 faca 	bl	8003f34 <HAL_I2C_Master_Transmit>
 80029a0:	4603      	mov	r3, r0
 80029a2:	73bb      	strb	r3, [r7, #14]
 80029a4:	7bbb      	ldrb	r3, [r7, #14]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <pcap_scan+0x4a>
 80029aa:	7bbb      	ldrb	r3, [r7, #14]
 80029ac:	4619      	mov	r1, r3
 80029ae:	48a1      	ldr	r0, [pc, #644]	@ (8002c34 <pcap_scan+0x2c0>)
 80029b0:	f004 fa98 	bl	8006ee4 <iprintf>
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	e133      	b.n	8002c26 <pcap_scan+0x2b2>
 80029be:	463a      	mov	r2, r7
 80029c0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	2302      	movs	r3, #2
 80029c8:	2150      	movs	r1, #80	@ 0x50
 80029ca:	4899      	ldr	r0, [pc, #612]	@ (8002c30 <pcap_scan+0x2bc>)
 80029cc:	f001 fbb0 	bl	8004130 <HAL_I2C_Master_Receive>
 80029d0:	4603      	mov	r3, r0
 80029d2:	73bb      	strb	r3, [r7, #14]
 80029d4:	7bbb      	ldrb	r3, [r7, #14]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <pcap_scan+0x7a>
 80029da:	7bbb      	ldrb	r3, [r7, #14]
 80029dc:	4619      	mov	r1, r3
 80029de:	4896      	ldr	r0, [pc, #600]	@ (8002c38 <pcap_scan+0x2c4>)
 80029e0:	f004 fa80 	bl	8006ee4 <iprintf>
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e11b      	b.n	8002c26 <pcap_scan+0x2b2>
 80029ee:	787b      	ldrb	r3, [r7, #1]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	b21a      	sxth	r2, r3
 80029f4:	783b      	ldrb	r3, [r7, #0]
 80029f6:	b21b      	sxth	r3, r3
 80029f8:	4313      	orrs	r3, r2
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	81bb      	strh	r3, [r7, #12]
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	89bb      	ldrh	r3, [r7, #12]
 8002a04:	4619      	mov	r1, r3
 8002a06:	488d      	ldr	r0, [pc, #564]	@ (8002c3c <pcap_scan+0x2c8>)
 8002a08:	f004 fa6c 	bl	8006ee4 <iprintf>
 8002a0c:	2340      	movs	r3, #64	@ 0x40
 8002a0e:	703b      	strb	r3, [r7, #0]
 8002a10:	2300      	movs	r3, #0
 8002a12:	707b      	strb	r3, [r7, #1]
 8002a14:	463a      	mov	r2, r7
 8002a16:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	2150      	movs	r1, #80	@ 0x50
 8002a20:	4883      	ldr	r0, [pc, #524]	@ (8002c30 <pcap_scan+0x2bc>)
 8002a22:	f001 fa87 	bl	8003f34 <HAL_I2C_Master_Transmit>
 8002a26:	4603      	mov	r3, r0
 8002a28:	73bb      	strb	r3, [r7, #14]
 8002a2a:	7bbb      	ldrb	r3, [r7, #14]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00c      	beq.n	8002a4a <pcap_scan+0xd6>
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	4619      	mov	r1, r3
 8002a34:	4882      	ldr	r0, [pc, #520]	@ (8002c40 <pcap_scan+0x2cc>)
 8002a36:	f004 fa55 	bl	8006ee4 <iprintf>
 8002a3a:	4b82      	ldr	r3, [pc, #520]	@ (8002c44 <pcap_scan+0x2d0>)
 8002a3c:	795b      	ldrb	r3, [r3, #5]
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b7f      	ldr	r3, [pc, #508]	@ (8002c44 <pcap_scan+0x2d0>)
 8002a46:	715a      	strb	r2, [r3, #5]
 8002a48:	e0ed      	b.n	8002c26 <pcap_scan+0x2b2>
 8002a4a:	463a      	mov	r2, r7
 8002a4c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2304      	movs	r3, #4
 8002a54:	2150      	movs	r1, #80	@ 0x50
 8002a56:	4876      	ldr	r0, [pc, #472]	@ (8002c30 <pcap_scan+0x2bc>)
 8002a58:	f001 fb6a 	bl	8004130 <HAL_I2C_Master_Receive>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	73bb      	strb	r3, [r7, #14]
 8002a60:	7bbb      	ldrb	r3, [r7, #14]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <pcap_scan+0x106>
 8002a66:	7bbb      	ldrb	r3, [r7, #14]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4877      	ldr	r0, [pc, #476]	@ (8002c48 <pcap_scan+0x2d4>)
 8002a6c:	f004 fa3a 	bl	8006ee4 <iprintf>
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	e0d5      	b.n	8002c26 <pcap_scan+0x2b2>
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	061a      	lsls	r2, r3, #24
 8002a7e:	78bb      	ldrb	r3, [r7, #2]
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	431a      	orrs	r2, r3
 8002a84:	787b      	ldrb	r3, [r7, #1]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	783a      	ldrb	r2, [r7, #0]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	4a6f      	ldr	r2, [pc, #444]	@ (8002c4c <pcap_scan+0x2d8>)
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	2096      	movs	r0, #150	@ 0x96
 8002a94:	f000 f8ee 	bl	8002c74 <delay_us>
 8002a98:	2340      	movs	r3, #64	@ 0x40
 8002a9a:	703b      	strb	r3, [r7, #0]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	707b      	strb	r3, [r7, #1]
 8002aa0:	463a      	mov	r2, r7
 8002aa2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	2150      	movs	r1, #80	@ 0x50
 8002aac:	4860      	ldr	r0, [pc, #384]	@ (8002c30 <pcap_scan+0x2bc>)
 8002aae:	f001 fa41 	bl	8003f34 <HAL_I2C_Master_Transmit>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	73bb      	strb	r3, [r7, #14]
 8002ab6:	7bbb      	ldrb	r3, [r7, #14]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <pcap_scan+0x15c>
 8002abc:	7bbb      	ldrb	r3, [r7, #14]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	485f      	ldr	r0, [pc, #380]	@ (8002c40 <pcap_scan+0x2cc>)
 8002ac2:	f004 fa0f 	bl	8006ee4 <iprintf>
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e0aa      	b.n	8002c26 <pcap_scan+0x2b2>
 8002ad0:	463a      	mov	r2, r7
 8002ad2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2304      	movs	r3, #4
 8002ada:	2150      	movs	r1, #80	@ 0x50
 8002adc:	4854      	ldr	r0, [pc, #336]	@ (8002c30 <pcap_scan+0x2bc>)
 8002ade:	f001 fb27 	bl	8004130 <HAL_I2C_Master_Receive>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73bb      	strb	r3, [r7, #14]
 8002ae6:	7bbb      	ldrb	r3, [r7, #14]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <pcap_scan+0x18c>
 8002aec:	7bbb      	ldrb	r3, [r7, #14]
 8002aee:	4619      	mov	r1, r3
 8002af0:	4855      	ldr	r0, [pc, #340]	@ (8002c48 <pcap_scan+0x2d4>)
 8002af2:	f004 f9f7 	bl	8006ee4 <iprintf>
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	e092      	b.n	8002c26 <pcap_scan+0x2b2>
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	061a      	lsls	r2, r3, #24
 8002b04:	78bb      	ldrb	r3, [r7, #2]
 8002b06:	041b      	lsls	r3, r3, #16
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	787b      	ldrb	r3, [r7, #1]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	783a      	ldrb	r2, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	4a4e      	ldr	r2, [pc, #312]	@ (8002c50 <pcap_scan+0x2dc>)
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	4b4c      	ldr	r3, [pc, #304]	@ (8002c4c <pcap_scan+0x2d8>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c50 <pcap_scan+0x2dc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b4b      	ldr	r3, [pc, #300]	@ (8002c54 <pcap_scan+0x2e0>)
 8002b26:	429a      	cmp	r2, r3
 8002b28:	db33      	blt.n	8002b92 <pcap_scan+0x21e>
 8002b2a:	4b48      	ldr	r3, [pc, #288]	@ (8002c4c <pcap_scan+0x2d8>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	4b48      	ldr	r3, [pc, #288]	@ (8002c50 <pcap_scan+0x2dc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b48      	ldr	r3, [pc, #288]	@ (8002c58 <pcap_scan+0x2e4>)
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	dc2a      	bgt.n	8002b92 <pcap_scan+0x21e>
 8002b3c:	4b44      	ldr	r3, [pc, #272]	@ (8002c50 <pcap_scan+0x2dc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a46      	ldr	r2, [pc, #280]	@ (8002c5c <pcap_scan+0x2e8>)
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b45      	ldr	r3, [pc, #276]	@ (8002c5c <pcap_scan+0x2e8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a45      	ldr	r2, [pc, #276]	@ (8002c60 <pcap_scan+0x2ec>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d904      	bls.n	8002b58 <pcap_scan+0x1e4>
 8002b4e:	4b43      	ldr	r3, [pc, #268]	@ (8002c5c <pcap_scan+0x2e8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a3c      	ldr	r2, [pc, #240]	@ (8002c44 <pcap_scan+0x2d0>)
 8002b54:	6093      	str	r3, [r2, #8]
 8002b56:	e01c      	b.n	8002b92 <pcap_scan+0x21e>
 8002b58:	4b40      	ldr	r3, [pc, #256]	@ (8002c5c <pcap_scan+0x2e8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4841      	ldr	r0, [pc, #260]	@ (8002c64 <pcap_scan+0x2f0>)
 8002b60:	f7ff fe5f 	bl	8002822 <updateMovingAverage>
 8002b64:	4b3f      	ldr	r3, [pc, #252]	@ (8002c64 <pcap_scan+0x2f0>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	4a3f      	ldr	r2, [pc, #252]	@ (8002c68 <pcap_scan+0x2f4>)
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c68 <pcap_scan+0x2f4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a34      	ldr	r2, [pc, #208]	@ (8002c44 <pcap_scan+0x2d0>)
 8002b72:	6093      	str	r3, [r2, #8]
 8002b74:	4b3c      	ldr	r3, [pc, #240]	@ (8002c68 <pcap_scan+0x2f4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d103      	bne.n	8002b86 <pcap_scan+0x212>
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	4b38      	ldr	r3, [pc, #224]	@ (8002c68 <pcap_scan+0x2f4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4837      	ldr	r0, [pc, #220]	@ (8002c6c <pcap_scan+0x2f8>)
 8002b8e:	f004 f9a9 	bl	8006ee4 <iprintf>
 8002b92:	2358      	movs	r3, #88	@ 0x58
 8002b94:	703b      	strb	r3, [r7, #0]
 8002b96:	2300      	movs	r3, #0
 8002b98:	707b      	strb	r3, [r7, #1]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	70bb      	strb	r3, [r7, #2]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	70fb      	strb	r3, [r7, #3]
 8002ba2:	463a      	mov	r2, r7
 8002ba4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2301      	movs	r3, #1
 8002bac:	2150      	movs	r1, #80	@ 0x50
 8002bae:	4820      	ldr	r0, [pc, #128]	@ (8002c30 <pcap_scan+0x2bc>)
 8002bb0:	f001 f9c0 	bl	8003f34 <HAL_I2C_Master_Transmit>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	73bb      	strb	r3, [r7, #14]
 8002bb8:	7bbb      	ldrb	r3, [r7, #14]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <pcap_scan+0x25e>
 8002bbe:	7bbb      	ldrb	r3, [r7, #14]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	481f      	ldr	r0, [pc, #124]	@ (8002c40 <pcap_scan+0x2cc>)
 8002bc4:	f004 f98e 	bl	8006ee4 <iprintf>
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	e029      	b.n	8002c26 <pcap_scan+0x2b2>
 8002bd2:	463a      	mov	r2, r7
 8002bd4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	2304      	movs	r3, #4
 8002bdc:	2150      	movs	r1, #80	@ 0x50
 8002bde:	4814      	ldr	r0, [pc, #80]	@ (8002c30 <pcap_scan+0x2bc>)
 8002be0:	f001 faa6 	bl	8004130 <HAL_I2C_Master_Receive>
 8002be4:	4603      	mov	r3, r0
 8002be6:	73bb      	strb	r3, [r7, #14]
 8002be8:	7bbb      	ldrb	r3, [r7, #14]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <pcap_scan+0x28e>
 8002bee:	7bbb      	ldrb	r3, [r7, #14]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4815      	ldr	r0, [pc, #84]	@ (8002c48 <pcap_scan+0x2d4>)
 8002bf4:	f004 f976 	bl	8006ee4 <iprintf>
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	e011      	b.n	8002c26 <pcap_scan+0x2b2>
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	061a      	lsls	r2, r3, #24
 8002c06:	78bb      	ldrb	r3, [r7, #2]
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	787b      	ldrb	r3, [r7, #1]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	4313      	orrs	r3, r2
 8002c12:	783a      	ldrb	r2, [r7, #0]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	4a16      	ldr	r2, [pc, #88]	@ (8002c70 <pcap_scan+0x2fc>)
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <pcap_scan+0x2fc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a09      	ldr	r2, [pc, #36]	@ (8002c44 <pcap_scan+0x2d0>)
 8002c20:	60d3      	str	r3, [r2, #12]
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	e7ff      	b.n	8002c26 <pcap_scan+0x2b2>
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200000c4 	.word	0x200000c4
 8002c34:	08007d64 	.word	0x08007d64
 8002c38:	08007d90 	.word	0x08007d90
 8002c3c:	08007dd0 	.word	0x08007dd0
 8002c40:	08007de0 	.word	0x08007de0
 8002c44:	200000a4 	.word	0x200000a4
 8002c48:	08007e0c 	.word	0x08007e0c
 8002c4c:	200003a8 	.word	0x200003a8
 8002c50:	200003ac 	.word	0x200003ac
 8002c54:	fa0a1f01 	.word	0xfa0a1f01
 8002c58:	05f5e0ff 	.word	0x05f5e0ff
 8002c5c:	200003a0 	.word	0x200003a0
 8002c60:	05f5e100 	.word	0x05f5e100
 8002c64:	20000350 	.word	0x20000350
 8002c68:	200003b0 	.word	0x200003b0
 8002c6c:	08007e4c 	.word	0x08007e4c
 8002c70:	200003a4 	.word	0x200003a4

08002c74 <delay_us>:
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	80fb      	strh	r3, [r7, #6]
 8002c7e:	480a      	ldr	r0, [pc, #40]	@ (8002ca8 <delay_us+0x34>)
 8002c80:	f003 fd92 	bl	80067a8 <HAL_TIM_Base_Start>
 8002c84:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <delay_us+0x34>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c8c:	bf00      	nop
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <delay_us+0x34>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d3f9      	bcc.n	8002c8e <delay_us+0x1a>
 8002c9a:	4803      	ldr	r0, [pc, #12]	@ (8002ca8 <delay_us+0x34>)
 8002c9c:	f003 fdde 	bl	800685c <HAL_TIM_Base_Stop>
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000274 	.word	0x20000274

08002cac <HAL_MspInit>:
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <HAL_MspInit+0x4c>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cba:	4a0f      	ldr	r2, [pc, #60]	@ (8002cf8 <HAL_MspInit+0x4c>)
 8002cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <HAL_MspInit+0x4c>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <HAL_MspInit+0x4c>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	4a08      	ldr	r2, [pc, #32]	@ (8002cf8 <HAL_MspInit+0x4c>)
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_MspInit+0x4c>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800

08002cfc <HAL_I2C_MspInit>:
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08c      	sub	sp, #48	@ 0x30
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	f107 031c 	add.w	r3, r7, #28
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a3b      	ldr	r2, [pc, #236]	@ (8002e08 <HAL_I2C_MspInit+0x10c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d12c      	bne.n	8002d78 <HAL_I2C_MspInit+0x7c>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	4b3a      	ldr	r3, [pc, #232]	@ (8002e0c <HAL_I2C_MspInit+0x110>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	4a39      	ldr	r2, [pc, #228]	@ (8002e0c <HAL_I2C_MspInit+0x110>)
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d2e:	4b37      	ldr	r3, [pc, #220]	@ (8002e0c <HAL_I2C_MspInit+0x110>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	23c0      	movs	r3, #192	@ 0xc0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	2312      	movs	r3, #18
 8002d40:	623b      	str	r3, [r7, #32]
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d46:	2303      	movs	r3, #3
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d4e:	f107 031c 	add.w	r3, r7, #28
 8002d52:	4619      	mov	r1, r3
 8002d54:	482e      	ldr	r0, [pc, #184]	@ (8002e10 <HAL_I2C_MspInit+0x114>)
 8002d56:	f000 fe0b 	bl	8003970 <HAL_GPIO_Init>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e0c <HAL_I2C_MspInit+0x110>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	4a2a      	ldr	r2, [pc, #168]	@ (8002e0c <HAL_I2C_MspInit+0x110>)
 8002d64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6a:	4b28      	ldr	r3, [pc, #160]	@ (8002e0c <HAL_I2C_MspInit+0x110>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	e042      	b.n	8002dfe <HAL_I2C_MspInit+0x102>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a25      	ldr	r2, [pc, #148]	@ (8002e14 <HAL_I2C_MspInit+0x118>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d13d      	bne.n	8002dfe <HAL_I2C_MspInit+0x102>
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b21      	ldr	r3, [pc, #132]	@ (8002e0c <HAL_I2C_MspInit+0x110>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	4a20      	ldr	r2, [pc, #128]	@ (8002e0c <HAL_I2C_MspInit+0x110>)
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d92:	4b1e      	ldr	r3, [pc, #120]	@ (8002e0c <HAL_I2C_MspInit+0x110>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	2312      	movs	r3, #18
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dac:	2303      	movs	r3, #3
 8002dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002db0:	2304      	movs	r3, #4
 8002db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db4:	f107 031c 	add.w	r3, r7, #28
 8002db8:	4619      	mov	r1, r3
 8002dba:	4815      	ldr	r0, [pc, #84]	@ (8002e10 <HAL_I2C_MspInit+0x114>)
 8002dbc:	f000 fdd8 	bl	8003970 <HAL_GPIO_Init>
 8002dc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	2312      	movs	r3, #18
 8002dc8:	623b      	str	r3, [r7, #32]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dce:	2303      	movs	r3, #3
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dd2:	2309      	movs	r3, #9
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dd6:	f107 031c 	add.w	r3, r7, #28
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480c      	ldr	r0, [pc, #48]	@ (8002e10 <HAL_I2C_MspInit+0x114>)
 8002dde:	f000 fdc7 	bl	8003970 <HAL_GPIO_Init>
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <HAL_I2C_MspInit+0x110>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	4a08      	ldr	r2, [pc, #32]	@ (8002e0c <HAL_I2C_MspInit+0x110>)
 8002dec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df2:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <HAL_I2C_MspInit+0x110>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	bf00      	nop
 8002e00:	3730      	adds	r7, #48	@ 0x30
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40005400 	.word	0x40005400
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40020400 	.word	0x40020400
 8002e14:	40005800 	.word	0x40005800

08002e18 <HAL_SPI_MspInit>:
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b090      	sub	sp, #64	@ 0x40
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a6a      	ldr	r2, [pc, #424]	@ (8002fe0 <HAL_SPI_MspInit+0x1c8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d14a      	bne.n	8002ed0 <HAL_SPI_MspInit+0xb8>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e3e:	4b69      	ldr	r3, [pc, #420]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	4a68      	ldr	r2, [pc, #416]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002e44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e4a:	4b66      	ldr	r3, [pc, #408]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5a:	4b62      	ldr	r3, [pc, #392]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	4a61      	ldr	r2, [pc, #388]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e66:	4b5f      	ldr	r3, [pc, #380]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	2300      	movs	r3, #0
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	4a5a      	ldr	r2, [pc, #360]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e82:	4b58      	ldr	r3, [pc, #352]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	2320      	movs	r3, #32
 8002e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e92:	2302      	movs	r3, #2
 8002e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e9e:	2305      	movs	r3, #5
 8002ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	484f      	ldr	r0, [pc, #316]	@ (8002fe8 <HAL_SPI_MspInit+0x1d0>)
 8002eaa:	f000 fd61 	bl	8003970 <HAL_GPIO_Init>
 8002eae:	2330      	movs	r3, #48	@ 0x30
 8002eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eba:	2303      	movs	r3, #3
 8002ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ebe:	2305      	movs	r3, #5
 8002ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4848      	ldr	r0, [pc, #288]	@ (8002fec <HAL_SPI_MspInit+0x1d4>)
 8002eca:	f000 fd51 	bl	8003970 <HAL_GPIO_Init>
 8002ece:	e082      	b.n	8002fd6 <HAL_SPI_MspInit+0x1be>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a46      	ldr	r2, [pc, #280]	@ (8002ff0 <HAL_SPI_MspInit+0x1d8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d12d      	bne.n	8002f36 <HAL_SPI_MspInit+0x11e>
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	4b41      	ldr	r3, [pc, #260]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	4a40      	ldr	r2, [pc, #256]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eea:	4b3e      	ldr	r3, [pc, #248]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	4a39      	ldr	r2, [pc, #228]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f06:	4b37      	ldr	r3, [pc, #220]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f18:	2302      	movs	r3, #2
 8002f1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f20:	2303      	movs	r3, #3
 8002f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f24:	2305      	movs	r3, #5
 8002f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	482f      	ldr	r0, [pc, #188]	@ (8002fec <HAL_SPI_MspInit+0x1d4>)
 8002f30:	f000 fd1e 	bl	8003970 <HAL_GPIO_Init>
 8002f34:	e04f      	b.n	8002fd6 <HAL_SPI_MspInit+0x1be>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8002ff4 <HAL_SPI_MspInit+0x1dc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d14a      	bne.n	8002fd6 <HAL_SPI_MspInit+0x1be>
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	4b27      	ldr	r3, [pc, #156]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f48:	4a26      	ldr	r2, [pc, #152]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f50:	4b24      	ldr	r3, [pc, #144]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	4b20      	ldr	r3, [pc, #128]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002f66:	f043 0302 	orr.w	r3, r3, #2
 8002f6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	4b19      	ldr	r3, [pc, #100]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	4a18      	ldr	r2, [pc, #96]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f88:	4b16      	ldr	r3, [pc, #88]	@ (8002fe4 <HAL_SPI_MspInit+0x1cc>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2301      	movs	r3, #1
 8002f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f98:	2302      	movs	r3, #2
 8002f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fa4:	2306      	movs	r3, #6
 8002fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fac:	4619      	mov	r1, r3
 8002fae:	480f      	ldr	r0, [pc, #60]	@ (8002fec <HAL_SPI_MspInit+0x1d4>)
 8002fb0:	f000 fcde 	bl	8003970 <HAL_GPIO_Init>
 8002fb4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fba:	2302      	movs	r3, #2
 8002fbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fc6:	2306      	movs	r3, #6
 8002fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4805      	ldr	r0, [pc, #20]	@ (8002fe8 <HAL_SPI_MspInit+0x1d0>)
 8002fd2:	f000 fccd 	bl	8003970 <HAL_GPIO_Init>
 8002fd6:	bf00      	nop
 8002fd8:	3740      	adds	r7, #64	@ 0x40
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40013000 	.word	0x40013000
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40020000 	.word	0x40020000
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40003800 	.word	0x40003800
 8002ff4:	40015000 	.word	0x40015000

08002ff8 <HAL_TIM_Base_MspInit>:
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0b      	ldr	r2, [pc, #44]	@ (8003034 <HAL_TIM_Base_MspInit+0x3c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10d      	bne.n	8003026 <HAL_TIM_Base_MspInit+0x2e>
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <HAL_TIM_Base_MspInit+0x40>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	4a09      	ldr	r2, [pc, #36]	@ (8003038 <HAL_TIM_Base_MspInit+0x40>)
 8003014:	f043 0304 	orr.w	r3, r3, #4
 8003018:	6413      	str	r3, [r2, #64]	@ 0x40
 800301a:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <HAL_TIM_Base_MspInit+0x40>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40000800 	.word	0x40000800
 8003038:	40023800 	.word	0x40023800

0800303c <NMI_Handler>:
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
 8003040:	bf00      	nop
 8003042:	e7fd      	b.n	8003040 <NMI_Handler+0x4>

08003044 <HardFault_Handler>:
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <HardFault_Handler+0x4>

0800304c <MemManage_Handler>:
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
 8003050:	bf00      	nop
 8003052:	e7fd      	b.n	8003050 <MemManage_Handler+0x4>

08003054 <BusFault_Handler>:
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <BusFault_Handler+0x4>

0800305c <UsageFault_Handler>:
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <UsageFault_Handler+0x4>

08003064 <SVC_Handler>:
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <DebugMon_Handler>:
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <PendSV_Handler>:
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <SysTick_Handler>:
 800308e:	b580      	push	{r7, lr}
 8003090:	af00      	add	r7, sp, #0
 8003092:	f000 fb43 	bl	800371c <HAL_IncTick>
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}

0800309a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e00a      	b.n	80030c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030ac:	f3af 8000 	nop.w
 80030b0:	4601      	mov	r1, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	60ba      	str	r2, [r7, #8]
 80030b8:	b2ca      	uxtb	r2, r1
 80030ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3301      	adds	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	dbf0      	blt.n	80030ac <_read+0x12>
  }

  return len;
 80030ca:	687b      	ldr	r3, [r7, #4]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	e009      	b.n	80030fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	60ba      	str	r2, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	3301      	adds	r3, #1
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	dbf1      	blt.n	80030e6 <_write+0x12>
  }
  return len;
 8003102:	687b      	ldr	r3, [r7, #4]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <_close>:

int _close(int file)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003134:	605a      	str	r2, [r3, #4]
  return 0;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <_isatty>:

int _isatty(int file)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800314c:	2301      	movs	r3, #1
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800317c:	4a14      	ldr	r2, [pc, #80]	@ (80031d0 <_sbrk+0x5c>)
 800317e:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <_sbrk+0x60>)
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003188:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <_sbrk+0x64>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003190:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <_sbrk+0x64>)
 8003192:	4a12      	ldr	r2, [pc, #72]	@ (80031dc <_sbrk+0x68>)
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003196:	4b10      	ldr	r3, [pc, #64]	@ (80031d8 <_sbrk+0x64>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d207      	bcs.n	80031b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a4:	f004 f834 	bl	8007210 <__errno>
 80031a8:	4603      	mov	r3, r0
 80031aa:	220c      	movs	r2, #12
 80031ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295
 80031b2:	e009      	b.n	80031c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b4:	4b08      	ldr	r3, [pc, #32]	@ (80031d8 <_sbrk+0x64>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ba:	4b07      	ldr	r3, [pc, #28]	@ (80031d8 <_sbrk+0x64>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	4a05      	ldr	r2, [pc, #20]	@ (80031d8 <_sbrk+0x64>)
 80031c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031c6:	68fb      	ldr	r3, [r7, #12]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20020000 	.word	0x20020000
 80031d4:	00000400 	.word	0x00000400
 80031d8:	200003b4 	.word	0x200003b4
 80031dc:	20000508 	.word	0x20000508

080031e0 <SystemInit>:
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <SystemInit+0x20>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ea:	4a05      	ldr	r2, [pc, #20]	@ (8003200 <SystemInit+0x20>)
 80031ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <setWrongCommandFlag>:
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	70fb      	strb	r3, [r7, #3]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <getEventStatusWord>:
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	81fb      	strh	r3, [r7, #14]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003238:	2b04      	cmp	r3, #4
 800323a:	d821      	bhi.n	8003280 <getEventStatusWord+0x5c>
 800323c:	a201      	add	r2, pc, #4	@ (adr r2, 8003244 <getEventStatusWord+0x20>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	08003281 	.word	0x08003281
 8003248:	08003277 	.word	0x08003277
 800324c:	0800326d 	.word	0x0800326d
 8003250:	08003263 	.word	0x08003263
 8003254:	08003259 	.word	0x08003259
 8003258:	89fb      	ldrh	r3, [r7, #14]
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	81fb      	strh	r3, [r7, #14]
 8003260:	e00e      	b.n	8003280 <getEventStatusWord+0x5c>
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	81fb      	strh	r3, [r7, #14]
 800326a:	e009      	b.n	8003280 <getEventStatusWord+0x5c>
 800326c:	89fb      	ldrh	r3, [r7, #14]
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	81fb      	strh	r3, [r7, #14]
 8003274:	e004      	b.n	8003280 <getEventStatusWord+0x5c>
 8003276:	89fb      	ldrh	r3, [r7, #14]
 8003278:	f043 0308 	orr.w	r3, r3, #8
 800327c:	81fb      	strh	r3, [r7, #14]
 800327e:	bf00      	nop
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <getEventStatusWord+0x6e>
 800328a:	89fb      	ldrh	r3, [r7, #14]
 800328c:	f043 0310 	orr.w	r3, r3, #16
 8003290:	81fb      	strh	r3, [r7, #14]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <getEventStatusWord+0x80>
 800329c:	89fb      	ldrh	r3, [r7, #14]
 800329e:	f043 0320 	orr.w	r3, r3, #32
 80032a2:	81fb      	strh	r3, [r7, #14]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <getEventStatusWord+0x92>
 80032ae:	89fb      	ldrh	r3, [r7, #14]
 80032b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032b4:	81fb      	strh	r3, [r7, #14]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <getEventStatusWord+0xa4>
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032c6:	81fb      	strh	r3, [r7, #14]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d820      	bhi.n	8003314 <getEventStatusWord+0xf0>
 80032d2:	a201      	add	r2, pc, #4	@ (adr r2, 80032d8 <getEventStatusWord+0xb4>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	08003315 	.word	0x08003315
 80032dc:	0800330b 	.word	0x0800330b
 80032e0:	08003301 	.word	0x08003301
 80032e4:	080032f7 	.word	0x080032f7
 80032e8:	080032ed 	.word	0x080032ed
 80032ec:	89fb      	ldrh	r3, [r7, #14]
 80032ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f2:	81fb      	strh	r3, [r7, #14]
 80032f4:	e00e      	b.n	8003314 <getEventStatusWord+0xf0>
 80032f6:	89fb      	ldrh	r3, [r7, #14]
 80032f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032fc:	81fb      	strh	r3, [r7, #14]
 80032fe:	e009      	b.n	8003314 <getEventStatusWord+0xf0>
 8003300:	89fb      	ldrh	r3, [r7, #14]
 8003302:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003306:	81fb      	strh	r3, [r7, #14]
 8003308:	e004      	b.n	8003314 <getEventStatusWord+0xf0>
 800330a:	89fb      	ldrh	r3, [r7, #14]
 800330c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003310:	81fb      	strh	r3, [r7, #14]
 8003312:	bf00      	nop
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <getEventStatusWord+0x102>
 800331e:	89fb      	ldrh	r3, [r7, #14]
 8003320:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003324:	81fb      	strh	r3, [r7, #14]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d00a      	beq.n	8003344 <getEventStatusWord+0x120>
 800332e:	2b02      	cmp	r3, #2
 8003330:	dc0e      	bgt.n	8003350 <getEventStatusWord+0x12c>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <getEventStatusWord+0x12a>
 8003336:	2b01      	cmp	r3, #1
 8003338:	d10a      	bne.n	8003350 <getEventStatusWord+0x12c>
 800333a:	89fb      	ldrh	r3, [r7, #14]
 800333c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003340:	81fb      	strh	r3, [r7, #14]
 8003342:	e005      	b.n	8003350 <getEventStatusWord+0x12c>
 8003344:	89fb      	ldrh	r3, [r7, #14]
 8003346:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800334a:	81fb      	strh	r3, [r7, #14]
 800334c:	e000      	b.n	8003350 <getEventStatusWord+0x12c>
 800334e:	bf00      	nop
 8003350:	89fb      	ldrh	r3, [r7, #14]
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop

08003360 <getCoilCurrent>:
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <getCurrentLimitHoming>:
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <getCurrentLimitServo>:
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <getVoltageLimitHoming>:
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <getVelocityLimitServo>:
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <getTorqueLimitServo>:
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <getZeroOffset>:
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7fd f890 	bl	8000524 <__aeabi_i2d>
 8003404:	a30f      	add	r3, pc, #60	@ (adr r3, 8003444 <getZeroOffset+0x54>)
 8003406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340a:	f7fd f8f5 	bl	80005f8 <__aeabi_dmul>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	4b09      	ldr	r3, [pc, #36]	@ (8003440 <getZeroOffset+0x50>)
 800341c:	f7fd fa16 	bl	800084c <__aeabi_ddiv>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	f7fd faf8 	bl	8000a1c <__aeabi_d2iz>
 800342c:	4603      	mov	r3, r0
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	f3af 8000 	nop.w
 8003440:	40f00000 	.word	0x40f00000
 8003444:	00000000 	.word	0x00000000
 8003448:	40d38800 	.word	0x40d38800
 800344c:	00000000 	.word	0x00000000

08003450 <getActualPosition>:
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7fd f85d 	bl	8000524 <__aeabi_i2d>
 800346a:	a30e      	add	r3, pc, #56	@ (adr r3, 80034a4 <getActualPosition+0x54>)
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f7fd f8c2 	bl	80005f8 <__aeabi_dmul>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	4b07      	ldr	r3, [pc, #28]	@ (80034a0 <getActualPosition+0x50>)
 8003482:	f7fd f9e3 	bl	800084c <__aeabi_ddiv>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4610      	mov	r0, r2
 800348c:	4619      	mov	r1, r3
 800348e:	f7fd fac5 	bl	8000a1c <__aeabi_d2iz>
 8003492:	4603      	mov	r3, r0
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40f00000 	.word	0x40f00000
 80034a4:	00000000 	.word	0x00000000
 80034a8:	40d38800 	.word	0x40d38800
 80034ac:	00000000 	.word	0x00000000

080034b0 <getTargetPosition>:
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f7fd f82d 	bl	8000524 <__aeabi_i2d>
 80034ca:	a30e      	add	r3, pc, #56	@ (adr r3, 8003504 <getTargetPosition+0x54>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	f7fd f892 	bl	80005f8 <__aeabi_dmul>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	4b07      	ldr	r3, [pc, #28]	@ (8003500 <getTargetPosition+0x50>)
 80034e2:	f7fd f9b3 	bl	800084c <__aeabi_ddiv>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	f7fd fa95 	bl	8000a1c <__aeabi_d2iz>
 80034f2:	4603      	mov	r3, r0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40f00000 	.word	0x40f00000
 8003504:	00000000 	.word	0x00000000
 8003508:	40d38800 	.word	0x40d38800
 800350c:	00000000 	.word	0x00000000

08003510 <getMaxPositionError>:
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7fc fff0 	bl	8000504 <__aeabi_ui2d>
 8003524:	a30f      	add	r3, pc, #60	@ (adr r3, 8003564 <getMaxPositionError+0x54>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f7fd f865 	bl	80005f8 <__aeabi_dmul>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4610      	mov	r0, r2
 8003534:	4619      	mov	r1, r3
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <getMaxPositionError+0x50>)
 800353c:	f7fd f986 	bl	800084c <__aeabi_ddiv>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4610      	mov	r0, r2
 8003546:	4619      	mov	r1, r3
 8003548:	f7fd fa90 	bl	8000a6c <__aeabi_d2uiz>
 800354c:	4603      	mov	r3, r0
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	f3af 8000 	nop.w
 8003560:	40f00000 	.word	0x40f00000
 8003564:	00000000 	.word	0x00000000
 8003568:	40d38800 	.word	0x40d38800

0800356c <getCurrentGainP>:
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	4618      	mov	r0, r3
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <getCurrentGainI>:
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <getVelocityGainP>:
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <getVelocityGainI>:
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <getPositionGainP>:
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <getPositionGainI>:
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <getFirmwareVersion>:
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	463b      	mov	r3, r7
 8003604:	2204      	movs	r2, #4
 8003606:	4619      	mov	r1, r3
 8003608:	f44f 7022 	mov.w	r0, #648	@ 0x288
 800360c:	f7fd fc90 	bl	8000f30 <EEPROM_Read>
 8003610:	463b      	mov	r3, r7
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fcaa 	bl	8000f6c <bytes2uInt>
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003624:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800365c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003628:	f7ff fdda 	bl	80031e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800362c:	480c      	ldr	r0, [pc, #48]	@ (8003660 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800362e:	490d      	ldr	r1, [pc, #52]	@ (8003664 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003630:	4a0d      	ldr	r2, [pc, #52]	@ (8003668 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003634:	e002      	b.n	800363c <LoopCopyDataInit>

08003636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800363a:	3304      	adds	r3, #4

0800363c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800363c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003640:	d3f9      	bcc.n	8003636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003644:	4c0a      	ldr	r4, [pc, #40]	@ (8003670 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003648:	e001      	b.n	800364e <LoopFillZerobss>

0800364a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800364a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800364c:	3204      	adds	r2, #4

0800364e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003650:	d3fb      	bcc.n	800364a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003652:	f003 fde3 	bl	800721c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003656:	f7fd fed3 	bl	8001400 <main>
  bx  lr    
 800365a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800365c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003664:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003668:	08007ecc 	.word	0x08007ecc
  ldr r2, =_sbss
 800366c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003670:	20000508 	.word	0x20000508

08003674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003674:	e7fe      	b.n	8003674 <ADC_IRQHandler>
	...

08003678 <HAL_Init>:
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
 800367c:	4b0e      	ldr	r3, [pc, #56]	@ (80036b8 <HAL_Init+0x40>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0d      	ldr	r2, [pc, #52]	@ (80036b8 <HAL_Init+0x40>)
 8003682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <HAL_Init+0x40>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0a      	ldr	r2, [pc, #40]	@ (80036b8 <HAL_Init+0x40>)
 800368e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4b08      	ldr	r3, [pc, #32]	@ (80036b8 <HAL_Init+0x40>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a07      	ldr	r2, [pc, #28]	@ (80036b8 <HAL_Init+0x40>)
 800369a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	2003      	movs	r0, #3
 80036a2:	f000 f931 	bl	8003908 <HAL_NVIC_SetPriorityGrouping>
 80036a6:	200f      	movs	r0, #15
 80036a8:	f000 f808 	bl	80036bc <HAL_InitTick>
 80036ac:	f7ff fafe 	bl	8002cac <HAL_MspInit>
 80036b0:	2300      	movs	r3, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023c00 	.word	0x40023c00

080036bc <HAL_InitTick>:
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	4b12      	ldr	r3, [pc, #72]	@ (8003710 <HAL_InitTick+0x54>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <HAL_InitTick+0x58>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	4619      	mov	r1, r3
 80036ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f93b 	bl	8003956 <HAL_SYSTICK_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_InitTick+0x2e>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e00e      	b.n	8003708 <HAL_InitTick+0x4c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b0f      	cmp	r3, #15
 80036ee:	d80a      	bhi.n	8003706 <HAL_InitTick+0x4a>
 80036f0:	2200      	movs	r2, #0
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	f000 f911 	bl	800391e <HAL_NVIC_SetPriority>
 80036fc:	4a06      	ldr	r2, [pc, #24]	@ (8003718 <HAL_InitTick+0x5c>)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	2300      	movs	r3, #0
 8003704:	e000      	b.n	8003708 <HAL_InitTick+0x4c>
 8003706:	2301      	movs	r3, #1
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000000 	.word	0x20000000
 8003714:	20000008 	.word	0x20000008
 8003718:	20000004 	.word	0x20000004

0800371c <HAL_IncTick>:
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
 8003720:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_IncTick+0x20>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_IncTick+0x24>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4413      	add	r3, r2
 800372c:	4a04      	ldr	r2, [pc, #16]	@ (8003740 <HAL_IncTick+0x24>)
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000008 	.word	0x20000008
 8003740:	200003b8 	.word	0x200003b8

08003744 <HAL_GetTick>:
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <HAL_GetTick+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	200003b8 	.word	0x200003b8

0800375c <HAL_Delay>:
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	f7ff ffee 	bl	8003744 <HAL_GetTick>
 8003768:	60b8      	str	r0, [r7, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d005      	beq.n	8003782 <HAL_Delay+0x26>
 8003776:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <HAL_Delay+0x44>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	bf00      	nop
 8003784:	f7ff ffde 	bl	8003744 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	429a      	cmp	r2, r3
 8003792:	d8f7      	bhi.n	8003784 <HAL_Delay+0x28>
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000008 	.word	0x20000008

080037a4 <__NVIC_SetPriorityGrouping>:
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	4b0c      	ldr	r3, [pc, #48]	@ (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4a04      	ldr	r2, [pc, #16]	@ (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	4b04      	ldr	r3, [pc, #16]	@ (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_SetPriority>:
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	6039      	str	r1, [r7, #0]
 8003812:	71fb      	strb	r3, [r7, #7]
 8003814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003818:	2b00      	cmp	r3, #0
 800381a:	db0a      	blt.n	8003832 <__NVIC_SetPriority+0x2a>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	490c      	ldr	r1, [pc, #48]	@ (8003854 <__NVIC_SetPriority+0x4c>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	440b      	add	r3, r1
 800382c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8003830:	e00a      	b.n	8003848 <__NVIC_SetPriority+0x40>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	4908      	ldr	r1, [pc, #32]	@ (8003858 <__NVIC_SetPriority+0x50>)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	3b04      	subs	r3, #4
 8003840:	0112      	lsls	r2, r2, #4
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	440b      	add	r3, r1
 8003846:	761a      	strb	r2, [r3, #24]
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000e100 	.word	0xe000e100
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <NVIC_EncodePriority>:
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	@ 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f1c3 0307 	rsb	r3, r3, #7
 8003876:	2b04      	cmp	r3, #4
 8003878:	bf28      	it	cs
 800387a:	2304      	movcs	r3, #4
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3304      	adds	r3, #4
 8003882:	2b06      	cmp	r3, #6
 8003884:	d902      	bls.n	800388c <NVIC_EncodePriority+0x30>
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3b03      	subs	r3, #3
 800388a:	e000      	b.n	800388e <NVIC_EncodePriority+0x32>
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	f04f 32ff 	mov.w	r2, #4294967295
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	401a      	ands	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	409a      	lsls	r2, r3
 80038a4:	f04f 31ff 	mov.w	r1, #4294967295
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	43d9      	mvns	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	400b      	ands	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	3724      	adds	r7, #36	@ 0x24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <SysTick_Config>:
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038d4:	d301      	bcc.n	80038da <SysTick_Config+0x16>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e00f      	b.n	80038fa <SysTick_Config+0x36>
 80038da:	4a0a      	ldr	r2, [pc, #40]	@ (8003904 <SysTick_Config+0x40>)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	6053      	str	r3, [r2, #4]
 80038e2:	210f      	movs	r1, #15
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	f7ff ff8e 	bl	8003808 <__NVIC_SetPriority>
 80038ec:	4b05      	ldr	r3, [pc, #20]	@ (8003904 <SysTick_Config+0x40>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	4b04      	ldr	r3, [pc, #16]	@ (8003904 <SysTick_Config+0x40>)
 80038f4:	2207      	movs	r2, #7
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	2300      	movs	r3, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	e000e010 	.word	0xe000e010

08003908 <HAL_NVIC_SetPriorityGrouping>:
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ff47 	bl	80037a4 <__NVIC_SetPriorityGrouping>
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_NVIC_SetPriority>:
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	4603      	mov	r3, r0
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	f7ff ff5c 	bl	80037ec <__NVIC_GetPriorityGrouping>
 8003934:	6178      	str	r0, [r7, #20]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	6978      	ldr	r0, [r7, #20]
 800393c:	f7ff ff8e 	bl	800385c <NVIC_EncodePriority>
 8003940:	4602      	mov	r2, r0
 8003942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff5d 	bl	8003808 <__NVIC_SetPriority>
 800394e:	bf00      	nop
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_SYSTICK_Config>:
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ffb0 	bl	80038c4 <SysTick_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	@ 0x24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003982:	2300      	movs	r3, #0
 8003984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e159      	b.n	8003c40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800398c:	2201      	movs	r2, #1
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	f040 8148 	bne.w	8003c3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d005      	beq.n	80039c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d130      	bne.n	8003a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	2203      	movs	r2, #3
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4013      	ands	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039f8:	2201      	movs	r2, #1
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 0201 	and.w	r2, r3, #1
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d017      	beq.n	8003a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d123      	bne.n	8003ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	08da      	lsrs	r2, r3, #3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3208      	adds	r2, #8
 8003a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	220f      	movs	r2, #15
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	08da      	lsrs	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3208      	adds	r2, #8
 8003aae:	69b9      	ldr	r1, [r7, #24]
 8003ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2203      	movs	r2, #3
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 0203 	and.w	r2, r3, #3
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80a2 	beq.w	8003c3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	4b57      	ldr	r3, [pc, #348]	@ (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afe:	4a56      	ldr	r2, [pc, #344]	@ (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b06:	4b54      	ldr	r3, [pc, #336]	@ (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b12:	4a52      	ldr	r2, [pc, #328]	@ (8003c5c <HAL_GPIO_Init+0x2ec>)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	3302      	adds	r3, #2
 8003b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	220f      	movs	r2, #15
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a49      	ldr	r2, [pc, #292]	@ (8003c60 <HAL_GPIO_Init+0x2f0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d019      	beq.n	8003b72 <HAL_GPIO_Init+0x202>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a48      	ldr	r2, [pc, #288]	@ (8003c64 <HAL_GPIO_Init+0x2f4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_GPIO_Init+0x1fe>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a47      	ldr	r2, [pc, #284]	@ (8003c68 <HAL_GPIO_Init+0x2f8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00d      	beq.n	8003b6a <HAL_GPIO_Init+0x1fa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a46      	ldr	r2, [pc, #280]	@ (8003c6c <HAL_GPIO_Init+0x2fc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <HAL_GPIO_Init+0x1f6>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a45      	ldr	r2, [pc, #276]	@ (8003c70 <HAL_GPIO_Init+0x300>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <HAL_GPIO_Init+0x1f2>
 8003b5e:	2304      	movs	r3, #4
 8003b60:	e008      	b.n	8003b74 <HAL_GPIO_Init+0x204>
 8003b62:	2307      	movs	r3, #7
 8003b64:	e006      	b.n	8003b74 <HAL_GPIO_Init+0x204>
 8003b66:	2303      	movs	r3, #3
 8003b68:	e004      	b.n	8003b74 <HAL_GPIO_Init+0x204>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e002      	b.n	8003b74 <HAL_GPIO_Init+0x204>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_GPIO_Init+0x204>
 8003b72:	2300      	movs	r3, #0
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	f002 0203 	and.w	r2, r2, #3
 8003b7a:	0092      	lsls	r2, r2, #2
 8003b7c:	4093      	lsls	r3, r2
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b84:	4935      	ldr	r1, [pc, #212]	@ (8003c5c <HAL_GPIO_Init+0x2ec>)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b92:	4b38      	ldr	r3, [pc, #224]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003be0:	4a24      	ldr	r2, [pc, #144]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003be6:	4b23      	ldr	r3, [pc, #140]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c10:	4b18      	ldr	r3, [pc, #96]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c34:	4a0f      	ldr	r2, [pc, #60]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b0f      	cmp	r3, #15
 8003c44:	f67f aea2 	bls.w	800398c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	3724      	adds	r7, #36	@ 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40013800 	.word	0x40013800
 8003c60:	40020000 	.word	0x40020000
 8003c64:	40020400 	.word	0x40020400
 8003c68:	40020800 	.word	0x40020800
 8003c6c:	40020c00 	.word	0x40020c00
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40013c00 	.word	0x40013c00

08003c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	807b      	strh	r3, [r7, #2]
 8003c84:	4613      	mov	r3, r2
 8003c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c88:	787b      	ldrb	r3, [r7, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c94:	e003      	b.n	8003c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	041a      	lsls	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	619a      	str	r2, [r3, #24]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e12b      	b.n	8003f16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff f812 	bl	8002cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2224      	movs	r2, #36	@ 0x24
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d10:	f001 ff10 	bl	8005b34 <HAL_RCC_GetPCLK1Freq>
 8003d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4a81      	ldr	r2, [pc, #516]	@ (8003f20 <HAL_I2C_Init+0x274>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d807      	bhi.n	8003d30 <HAL_I2C_Init+0x84>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a80      	ldr	r2, [pc, #512]	@ (8003f24 <HAL_I2C_Init+0x278>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	bf94      	ite	ls
 8003d28:	2301      	movls	r3, #1
 8003d2a:	2300      	movhi	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	e006      	b.n	8003d3e <HAL_I2C_Init+0x92>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a7d      	ldr	r2, [pc, #500]	@ (8003f28 <HAL_I2C_Init+0x27c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	bf94      	ite	ls
 8003d38:	2301      	movls	r3, #1
 8003d3a:	2300      	movhi	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0e7      	b.n	8003f16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a78      	ldr	r2, [pc, #480]	@ (8003f2c <HAL_I2C_Init+0x280>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	0c9b      	lsrs	r3, r3, #18
 8003d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a6a      	ldr	r2, [pc, #424]	@ (8003f20 <HAL_I2C_Init+0x274>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d802      	bhi.n	8003d80 <HAL_I2C_Init+0xd4>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	e009      	b.n	8003d94 <HAL_I2C_Init+0xe8>
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	4a69      	ldr	r2, [pc, #420]	@ (8003f30 <HAL_I2C_Init+0x284>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	3301      	adds	r3, #1
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003da6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	495c      	ldr	r1, [pc, #368]	@ (8003f20 <HAL_I2C_Init+0x274>)
 8003db0:	428b      	cmp	r3, r1
 8003db2:	d819      	bhi.n	8003de8 <HAL_I2C_Init+0x13c>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1e59      	subs	r1, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc2:	1c59      	adds	r1, r3, #1
 8003dc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003dc8:	400b      	ands	r3, r1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_I2C_Init+0x138>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1e59      	subs	r1, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de2:	e051      	b.n	8003e88 <HAL_I2C_Init+0x1dc>
 8003de4:	2304      	movs	r3, #4
 8003de6:	e04f      	b.n	8003e88 <HAL_I2C_Init+0x1dc>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d111      	bne.n	8003e14 <HAL_I2C_Init+0x168>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1e58      	subs	r0, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	440b      	add	r3, r1
 8003dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e02:	3301      	adds	r3, #1
 8003e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e012      	b.n	8003e3a <HAL_I2C_Init+0x18e>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1e58      	subs	r0, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	0099      	lsls	r1, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Init+0x196>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e022      	b.n	8003e88 <HAL_I2C_Init+0x1dc>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10e      	bne.n	8003e68 <HAL_I2C_Init+0x1bc>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1e58      	subs	r0, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6859      	ldr	r1, [r3, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	440b      	add	r3, r1
 8003e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e66:	e00f      	b.n	8003e88 <HAL_I2C_Init+0x1dc>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1e58      	subs	r0, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	0099      	lsls	r1, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	6809      	ldr	r1, [r1, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003eb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6911      	ldr	r1, [r2, #16]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68d2      	ldr	r2, [r2, #12]
 8003ec2:	4311      	orrs	r1, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	000186a0 	.word	0x000186a0
 8003f24:	001e847f 	.word	0x001e847f
 8003f28:	003d08ff 	.word	0x003d08ff
 8003f2c:	431bde83 	.word	0x431bde83
 8003f30:	10624dd3 	.word	0x10624dd3

08003f34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	460b      	mov	r3, r1
 8003f42:	817b      	strh	r3, [r7, #10]
 8003f44:	4613      	mov	r3, r2
 8003f46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f48:	f7ff fbfc 	bl	8003744 <HAL_GetTick>
 8003f4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	f040 80e0 	bne.w	800411c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2319      	movs	r3, #25
 8003f62:	2201      	movs	r2, #1
 8003f64:	4970      	ldr	r1, [pc, #448]	@ (8004128 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 ff7e 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
 8003f74:	e0d3      	b.n	800411e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_I2C_Master_Transmit+0x50>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e0cc      	b.n	800411e <HAL_I2C_Master_Transmit+0x1ea>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d007      	beq.n	8003faa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2221      	movs	r2, #33	@ 0x21
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	893a      	ldrh	r2, [r7, #8]
 8003fda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4a50      	ldr	r2, [pc, #320]	@ (800412c <HAL_I2C_Master_Transmit+0x1f8>)
 8003fea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fec:	8979      	ldrh	r1, [r7, #10]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fd00 	bl	80049f8 <I2C_MasterRequestWrite>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e08d      	b.n	800411e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004018:	e066      	b.n	80040e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	6a39      	ldr	r1, [r7, #32]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f001 f83c 	bl	800509c <I2C_WaitOnTXEFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	2b04      	cmp	r3, #4
 8004030:	d107      	bne.n	8004042 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004040:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e06b      	b.n	800411e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	781a      	ldrb	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b04      	cmp	r3, #4
 8004082:	d11b      	bne.n	80040bc <HAL_I2C_Master_Transmit+0x188>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004088:	2b00      	cmp	r3, #0
 800408a:	d017      	beq.n	80040bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	6a39      	ldr	r1, [r7, #32]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f001 f833 	bl	800512c <I2C_WaitOnBTFFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00d      	beq.n	80040e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d107      	bne.n	80040e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e01a      	b.n	800411e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d194      	bne.n	800401a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	00100002 	.word	0x00100002
 800412c:	ffff0000 	.word	0xffff0000

08004130 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08c      	sub	sp, #48	@ 0x30
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	461a      	mov	r2, r3
 800413c:	460b      	mov	r3, r1
 800413e:	817b      	strh	r3, [r7, #10]
 8004140:	4613      	mov	r3, r2
 8004142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004144:	f7ff fafe 	bl	8003744 <HAL_GetTick>
 8004148:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b20      	cmp	r3, #32
 8004154:	f040 8217 	bne.w	8004586 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2319      	movs	r3, #25
 800415e:	2201      	movs	r2, #1
 8004160:	497c      	ldr	r1, [pc, #496]	@ (8004354 <HAL_I2C_Master_Receive+0x224>)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fe80 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
 8004170:	e20a      	b.n	8004588 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_I2C_Master_Receive+0x50>
 800417c:	2302      	movs	r3, #2
 800417e:	e203      	b.n	8004588 <HAL_I2C_Master_Receive+0x458>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d007      	beq.n	80041a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2222      	movs	r2, #34	@ 0x22
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2210      	movs	r2, #16
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	893a      	ldrh	r2, [r7, #8]
 80041d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a5c      	ldr	r2, [pc, #368]	@ (8004358 <HAL_I2C_Master_Receive+0x228>)
 80041e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041e8:	8979      	ldrh	r1, [r7, #10]
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fc84 	bl	8004afc <I2C_MasterRequestRead>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e1c4      	b.n	8004588 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004202:	2b00      	cmp	r3, #0
 8004204:	d113      	bne.n	800422e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004206:	2300      	movs	r3, #0
 8004208:	623b      	str	r3, [r7, #32]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	623b      	str	r3, [r7, #32]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	623b      	str	r3, [r7, #32]
 800421a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e198      	b.n	8004560 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004232:	2b01      	cmp	r3, #1
 8004234:	d11b      	bne.n	800426e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004244:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e178      	b.n	8004560 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004272:	2b02      	cmp	r3, #2
 8004274:	d11b      	bne.n	80042ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004284:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004294:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004296:	2300      	movs	r3, #0
 8004298:	61bb      	str	r3, [r7, #24]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	e158      	b.n	8004560 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80042d4:	e144      	b.n	8004560 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042da:	2b03      	cmp	r3, #3
 80042dc:	f200 80f1 	bhi.w	80044c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d123      	bne.n	8004330 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 ff65 	bl	80051bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e145      	b.n	8004588 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800432e:	e117      	b.n	8004560 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	2b02      	cmp	r3, #2
 8004336:	d14e      	bne.n	80043d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433e:	2200      	movs	r2, #0
 8004340:	4906      	ldr	r1, [pc, #24]	@ (800435c <HAL_I2C_Master_Receive+0x22c>)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fd90 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e11a      	b.n	8004588 <HAL_I2C_Master_Receive+0x458>
 8004352:	bf00      	nop
 8004354:	00100002 	.word	0x00100002
 8004358:	ffff0000 	.word	0xffff0000
 800435c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800436e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043d4:	e0c4      	b.n	8004560 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	2200      	movs	r2, #0
 80043de:	496c      	ldr	r1, [pc, #432]	@ (8004590 <HAL_I2C_Master_Receive+0x460>)
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fd41 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0cb      	b.n	8004588 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	2200      	movs	r2, #0
 800443a:	4955      	ldr	r1, [pc, #340]	@ (8004590 <HAL_I2C_Master_Receive+0x460>)
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fd13 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e09d      	b.n	8004588 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800445a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044c0:	e04e      	b.n	8004560 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fe78 	bl	80051bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e058      	b.n	8004588 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b04      	cmp	r3, #4
 8004514:	d124      	bne.n	8004560 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451a:	2b03      	cmp	r3, #3
 800451c:	d107      	bne.n	800452e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800452c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004564:	2b00      	cmp	r3, #0
 8004566:	f47f aeb6 	bne.w	80042d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e000      	b.n	8004588 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3728      	adds	r7, #40	@ 0x28
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	00010004 	.word	0x00010004

08004594 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08c      	sub	sp, #48	@ 0x30
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	4608      	mov	r0, r1
 800459e:	4611      	mov	r1, r2
 80045a0:	461a      	mov	r2, r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	817b      	strh	r3, [r7, #10]
 80045a6:	460b      	mov	r3, r1
 80045a8:	813b      	strh	r3, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045ae:	f7ff f8c9 	bl	8003744 <HAL_GetTick>
 80045b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b20      	cmp	r3, #32
 80045be:	f040 8214 	bne.w	80049ea <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	2319      	movs	r3, #25
 80045c8:	2201      	movs	r2, #1
 80045ca:	497b      	ldr	r1, [pc, #492]	@ (80047b8 <HAL_I2C_Mem_Read+0x224>)
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fc4b 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
 80045da:	e207      	b.n	80049ec <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_I2C_Mem_Read+0x56>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e200      	b.n	80049ec <HAL_I2C_Mem_Read+0x458>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d007      	beq.n	8004610 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800461e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2222      	movs	r2, #34	@ 0x22
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2240      	movs	r2, #64	@ 0x40
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800463a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004640:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4a5b      	ldr	r2, [pc, #364]	@ (80047bc <HAL_I2C_Mem_Read+0x228>)
 8004650:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004652:	88f8      	ldrh	r0, [r7, #6]
 8004654:	893a      	ldrh	r2, [r7, #8]
 8004656:	8979      	ldrh	r1, [r7, #10]
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	4603      	mov	r3, r0
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 fb18 	bl	8004c98 <I2C_RequestMemoryRead>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e1bc      	b.n	80049ec <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004676:	2b00      	cmp	r3, #0
 8004678:	d113      	bne.n	80046a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467a:	2300      	movs	r3, #0
 800467c:	623b      	str	r3, [r7, #32]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	623b      	str	r3, [r7, #32]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	623b      	str	r3, [r7, #32]
 800468e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e190      	b.n	80049c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d11b      	bne.n	80046e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	61fb      	str	r3, [r7, #28]
 80046ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	e170      	b.n	80049c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d11b      	bne.n	8004722 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	e150      	b.n	80049c4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004738:	e144      	b.n	80049c4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473e:	2b03      	cmp	r3, #3
 8004740:	f200 80f1 	bhi.w	8004926 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004748:	2b01      	cmp	r3, #1
 800474a:	d123      	bne.n	8004794 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800474c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 fd33 	bl	80051bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e145      	b.n	80049ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004792:	e117      	b.n	80049c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004798:	2b02      	cmp	r3, #2
 800479a:	d14e      	bne.n	800483a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a2:	2200      	movs	r2, #0
 80047a4:	4906      	ldr	r1, [pc, #24]	@ (80047c0 <HAL_I2C_Mem_Read+0x22c>)
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fb5e 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e11a      	b.n	80049ec <HAL_I2C_Mem_Read+0x458>
 80047b6:	bf00      	nop
 80047b8:	00100002 	.word	0x00100002
 80047bc:	ffff0000 	.word	0xffff0000
 80047c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004838:	e0c4      	b.n	80049c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004840:	2200      	movs	r2, #0
 8004842:	496c      	ldr	r1, [pc, #432]	@ (80049f4 <HAL_I2C_Mem_Read+0x460>)
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fb0f 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0cb      	b.n	80049ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489c:	2200      	movs	r2, #0
 800489e:	4955      	ldr	r1, [pc, #340]	@ (80049f4 <HAL_I2C_Mem_Read+0x460>)
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fae1 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e09d      	b.n	80049ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004924:	e04e      	b.n	80049c4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004928:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fc46 	bl	80051bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e058      	b.n	80049ec <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b04      	cmp	r3, #4
 8004978:	d124      	bne.n	80049c4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497e:	2b03      	cmp	r3, #3
 8004980:	d107      	bne.n	8004992 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004990:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f47f aeb6 	bne.w	800473a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e000      	b.n	80049ec <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80049ea:	2302      	movs	r3, #2
  }
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3728      	adds	r7, #40	@ 0x28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	00010004 	.word	0x00010004

080049f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	460b      	mov	r3, r1
 8004a06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d006      	beq.n	8004a22 <I2C_MasterRequestWrite+0x2a>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d003      	beq.n	8004a22 <I2C_MasterRequestWrite+0x2a>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a20:	d108      	bne.n	8004a34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e00b      	b.n	8004a4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a38:	2b12      	cmp	r3, #18
 8004a3a:	d107      	bne.n	8004a4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 fa05 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a72:	d103      	bne.n	8004a7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e035      	b.n	8004aec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a88:	d108      	bne.n	8004a9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a8a:	897b      	ldrh	r3, [r7, #10]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a98:	611a      	str	r2, [r3, #16]
 8004a9a:	e01b      	b.n	8004ad4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a9c:	897b      	ldrh	r3, [r7, #10]
 8004a9e:	11db      	asrs	r3, r3, #7
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 0306 	and.w	r3, r3, #6
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f063 030f 	orn	r3, r3, #15
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	490e      	ldr	r1, [pc, #56]	@ (8004af4 <I2C_MasterRequestWrite+0xfc>)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 fa4e 	bl	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e010      	b.n	8004aec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004aca:	897b      	ldrh	r3, [r7, #10]
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4907      	ldr	r1, [pc, #28]	@ (8004af8 <I2C_MasterRequestWrite+0x100>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fa3e 	bl	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	00010008 	.word	0x00010008
 8004af8:	00010002 	.word	0x00010002

08004afc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d006      	beq.n	8004b36 <I2C_MasterRequestRead+0x3a>
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d003      	beq.n	8004b36 <I2C_MasterRequestRead+0x3a>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b34:	d108      	bne.n	8004b48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e00b      	b.n	8004b60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4c:	2b11      	cmp	r3, #17
 8004b4e:	d107      	bne.n	8004b60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f97b 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00d      	beq.n	8004b94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b86:	d103      	bne.n	8004b90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e079      	b.n	8004c88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b9c:	d108      	bne.n	8004bb0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b9e:	897b      	ldrh	r3, [r7, #10]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	611a      	str	r2, [r3, #16]
 8004bae:	e05f      	b.n	8004c70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bb0:	897b      	ldrh	r3, [r7, #10]
 8004bb2:	11db      	asrs	r3, r3, #7
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	f003 0306 	and.w	r3, r3, #6
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f063 030f 	orn	r3, r3, #15
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	4930      	ldr	r1, [pc, #192]	@ (8004c90 <I2C_MasterRequestRead+0x194>)
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f9c4 	bl	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e054      	b.n	8004c88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bde:	897b      	ldrh	r3, [r7, #10]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4929      	ldr	r1, [pc, #164]	@ (8004c94 <I2C_MasterRequestRead+0x198>)
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f9b4 	bl	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e044      	b.n	8004c88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f919 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00d      	beq.n	8004c58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c4a:	d103      	bne.n	8004c54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c52:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e017      	b.n	8004c88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c58:	897b      	ldrh	r3, [r7, #10]
 8004c5a:	11db      	asrs	r3, r3, #7
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	f003 0306 	and.w	r3, r3, #6
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	f063 030e 	orn	r3, r3, #14
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4907      	ldr	r1, [pc, #28]	@ (8004c94 <I2C_MasterRequestRead+0x198>)
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f970 	bl	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	00010008 	.word	0x00010008
 8004c94:	00010002 	.word	0x00010002

08004c98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	817b      	strh	r3, [r7, #10]
 8004caa:	460b      	mov	r3, r1
 8004cac:	813b      	strh	r3, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f8c2 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf8:	d103      	bne.n	8004d02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e0aa      	b.n	8004e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d06:	897b      	ldrh	r3, [r7, #10]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d18:	6a3a      	ldr	r2, [r7, #32]
 8004d1a:	4952      	ldr	r1, [pc, #328]	@ (8004e64 <I2C_RequestMemoryRead+0x1cc>)
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f91d 	bl	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e097      	b.n	8004e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d44:	6a39      	ldr	r1, [r7, #32]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f9a8 	bl	800509c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00d      	beq.n	8004d6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d107      	bne.n	8004d6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e076      	b.n	8004e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d105      	bne.n	8004d80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d74:	893b      	ldrh	r3, [r7, #8]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	611a      	str	r2, [r3, #16]
 8004d7e:	e021      	b.n	8004dc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d80:	893b      	ldrh	r3, [r7, #8]
 8004d82:	0a1b      	lsrs	r3, r3, #8
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d90:	6a39      	ldr	r1, [r7, #32]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f982 	bl	800509c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d107      	bne.n	8004db6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004db4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e050      	b.n	8004e5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dba:	893b      	ldrh	r3, [r7, #8]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc6:	6a39      	ldr	r1, [r7, #32]
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 f967 	bl	800509c <I2C_WaitOnTXEFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00d      	beq.n	8004df0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d107      	bne.n	8004dec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e035      	b.n	8004e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f82b 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00d      	beq.n	8004e34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e26:	d103      	bne.n	8004e30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e013      	b.n	8004e5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e34:	897b      	ldrh	r3, [r7, #10]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e46:	6a3a      	ldr	r2, [r7, #32]
 8004e48:	4906      	ldr	r1, [pc, #24]	@ (8004e64 <I2C_RequestMemoryRead+0x1cc>)
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f886 	bl	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	00010002 	.word	0x00010002

08004e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e78:	e048      	b.n	8004f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d044      	beq.n	8004f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e82:	f7fe fc5f 	bl	8003744 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d139      	bne.n	8004f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d10d      	bne.n	8004ebe <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	43da      	mvns	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4013      	ands	r3, r2
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2301      	moveq	r3, #1
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	e00c      	b.n	8004ed8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	43da      	mvns	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d116      	bne.n	8004f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e023      	b.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	0c1b      	lsrs	r3, r3, #16
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d10d      	bne.n	8004f32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	43da      	mvns	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4013      	ands	r3, r2
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	e00c      	b.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	43da      	mvns	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf0c      	ite	eq
 8004f44:	2301      	moveq	r3, #1
 8004f46:	2300      	movne	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d093      	beq.n	8004e7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f6a:	e071      	b.n	8005050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f7a:	d123      	bne.n	8004fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb0:	f043 0204 	orr.w	r2, r3, #4
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e067      	b.n	8005094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d041      	beq.n	8005050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fcc:	f7fe fbba 	bl	8003744 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d302      	bcc.n	8004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d136      	bne.n	8005050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	0c1b      	lsrs	r3, r3, #16
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d10c      	bne.n	8005006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	43da      	mvns	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf14      	ite	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	2300      	moveq	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	e00b      	b.n	800501e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	43da      	mvns	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4013      	ands	r3, r2
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	bf14      	ite	ne
 8005018:	2301      	movne	r3, #1
 800501a:	2300      	moveq	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d016      	beq.n	8005050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e021      	b.n	8005094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	0c1b      	lsrs	r3, r3, #16
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b01      	cmp	r3, #1
 8005058:	d10c      	bne.n	8005074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	43da      	mvns	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4013      	ands	r3, r2
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	bf14      	ite	ne
 800506c:	2301      	movne	r3, #1
 800506e:	2300      	moveq	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	e00b      	b.n	800508c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	43da      	mvns	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	bf14      	ite	ne
 8005086:	2301      	movne	r3, #1
 8005088:	2300      	moveq	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f af6d 	bne.w	8004f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050a8:	e034      	b.n	8005114 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f8e3 	bl	8005276 <I2C_IsAcknowledgeFailed>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e034      	b.n	8005124 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d028      	beq.n	8005114 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fe fb3f 	bl	8003744 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d11d      	bne.n	8005114 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e2:	2b80      	cmp	r3, #128	@ 0x80
 80050e4:	d016      	beq.n	8005114 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005100:	f043 0220 	orr.w	r2, r3, #32
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e007      	b.n	8005124 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511e:	2b80      	cmp	r3, #128	@ 0x80
 8005120:	d1c3      	bne.n	80050aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005138:	e034      	b.n	80051a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f89b 	bl	8005276 <I2C_IsAcknowledgeFailed>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e034      	b.n	80051b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d028      	beq.n	80051a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005152:	f7fe faf7 	bl	8003744 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	d302      	bcc.n	8005168 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d11d      	bne.n	80051a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b04      	cmp	r3, #4
 8005174:	d016      	beq.n	80051a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005190:	f043 0220 	orr.w	r2, r3, #32
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e007      	b.n	80051b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d1c3      	bne.n	800513a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051c8:	e049      	b.n	800525e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d119      	bne.n	800520c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0210 	mvn.w	r2, #16
 80051e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e030      	b.n	800526e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520c:	f7fe fa9a 	bl	8003744 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	429a      	cmp	r2, r3
 800521a:	d302      	bcc.n	8005222 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d11d      	bne.n	800525e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522c:	2b40      	cmp	r3, #64	@ 0x40
 800522e:	d016      	beq.n	800525e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524a:	f043 0220 	orr.w	r2, r3, #32
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e007      	b.n	800526e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005268:	2b40      	cmp	r3, #64	@ 0x40
 800526a:	d1ae      	bne.n	80051ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800528c:	d11b      	bne.n	80052c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005296:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	f043 0204 	orr.w	r2, r3, #4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e267      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d075      	beq.n	80053de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052f2:	4b88      	ldr	r3, [pc, #544]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d00c      	beq.n	8005318 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052fe:	4b85      	ldr	r3, [pc, #532]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005306:	2b08      	cmp	r3, #8
 8005308:	d112      	bne.n	8005330 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800530a:	4b82      	ldr	r3, [pc, #520]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005312:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005316:	d10b      	bne.n	8005330 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005318:	4b7e      	ldr	r3, [pc, #504]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d05b      	beq.n	80053dc <HAL_RCC_OscConfig+0x108>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d157      	bne.n	80053dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e242      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005338:	d106      	bne.n	8005348 <HAL_RCC_OscConfig+0x74>
 800533a:	4b76      	ldr	r3, [pc, #472]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a75      	ldr	r2, [pc, #468]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	e01d      	b.n	8005384 <HAL_RCC_OscConfig+0xb0>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005350:	d10c      	bne.n	800536c <HAL_RCC_OscConfig+0x98>
 8005352:	4b70      	ldr	r3, [pc, #448]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a6f      	ldr	r2, [pc, #444]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	4b6d      	ldr	r3, [pc, #436]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a6c      	ldr	r2, [pc, #432]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e00b      	b.n	8005384 <HAL_RCC_OscConfig+0xb0>
 800536c:	4b69      	ldr	r3, [pc, #420]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a68      	ldr	r2, [pc, #416]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	4b66      	ldr	r3, [pc, #408]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a65      	ldr	r2, [pc, #404]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 800537e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d013      	beq.n	80053b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538c:	f7fe f9da 	bl	8003744 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005394:	f7fe f9d6 	bl	8003744 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b64      	cmp	r3, #100	@ 0x64
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e207      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0xc0>
 80053b2:	e014      	b.n	80053de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fe f9c6 	bl	8003744 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053bc:	f7fe f9c2 	bl	8003744 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	@ 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e1f3      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ce:	4b51      	ldr	r3, [pc, #324]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0xe8>
 80053da:	e000      	b.n	80053de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d063      	beq.n	80054b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00b      	beq.n	800540e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053f6:	4b47      	ldr	r3, [pc, #284]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d11c      	bne.n	800543c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005402:	4b44      	ldr	r3, [pc, #272]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d116      	bne.n	800543c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800540e:	4b41      	ldr	r3, [pc, #260]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_RCC_OscConfig+0x152>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d001      	beq.n	8005426 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e1c7      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005426:	4b3b      	ldr	r3, [pc, #236]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	4937      	ldr	r1, [pc, #220]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005436:	4313      	orrs	r3, r2
 8005438:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800543a:	e03a      	b.n	80054b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d020      	beq.n	8005486 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005444:	4b34      	ldr	r3, [pc, #208]	@ (8005518 <HAL_RCC_OscConfig+0x244>)
 8005446:	2201      	movs	r2, #1
 8005448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544a:	f7fe f97b 	bl	8003744 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005452:	f7fe f977 	bl	8003744 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e1a8      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005464:	4b2b      	ldr	r3, [pc, #172]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005470:	4b28      	ldr	r3, [pc, #160]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	4925      	ldr	r1, [pc, #148]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 8005480:	4313      	orrs	r3, r2
 8005482:	600b      	str	r3, [r1, #0]
 8005484:	e015      	b.n	80054b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005486:	4b24      	ldr	r3, [pc, #144]	@ (8005518 <HAL_RCC_OscConfig+0x244>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548c:	f7fe f95a 	bl	8003744 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005494:	f7fe f956 	bl	8003744 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e187      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f0      	bne.n	8005494 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d036      	beq.n	800552c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d016      	beq.n	80054f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054c6:	4b15      	ldr	r3, [pc, #84]	@ (800551c <HAL_RCC_OscConfig+0x248>)
 80054c8:	2201      	movs	r2, #1
 80054ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054cc:	f7fe f93a 	bl	8003744 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054d4:	f7fe f936 	bl	8003744 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e167      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005514 <HAL_RCC_OscConfig+0x240>)
 80054e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f0      	beq.n	80054d4 <HAL_RCC_OscConfig+0x200>
 80054f2:	e01b      	b.n	800552c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054f4:	4b09      	ldr	r3, [pc, #36]	@ (800551c <HAL_RCC_OscConfig+0x248>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054fa:	f7fe f923 	bl	8003744 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005500:	e00e      	b.n	8005520 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005502:	f7fe f91f 	bl	8003744 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d907      	bls.n	8005520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e150      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
 8005514:	40023800 	.word	0x40023800
 8005518:	42470000 	.word	0x42470000
 800551c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005520:	4b88      	ldr	r3, [pc, #544]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 8005522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1ea      	bne.n	8005502 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8097 	beq.w	8005668 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800553a:	2300      	movs	r3, #0
 800553c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800553e:	4b81      	ldr	r3, [pc, #516]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10f      	bne.n	800556a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	4b7d      	ldr	r3, [pc, #500]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	4a7c      	ldr	r2, [pc, #496]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 8005554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005558:	6413      	str	r3, [r2, #64]	@ 0x40
 800555a:	4b7a      	ldr	r3, [pc, #488]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005566:	2301      	movs	r3, #1
 8005568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800556a:	4b77      	ldr	r3, [pc, #476]	@ (8005748 <HAL_RCC_OscConfig+0x474>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d118      	bne.n	80055a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005576:	4b74      	ldr	r3, [pc, #464]	@ (8005748 <HAL_RCC_OscConfig+0x474>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a73      	ldr	r2, [pc, #460]	@ (8005748 <HAL_RCC_OscConfig+0x474>)
 800557c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005582:	f7fe f8df 	bl	8003744 <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558a:	f7fe f8db 	bl	8003744 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e10c      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800559c:	4b6a      	ldr	r3, [pc, #424]	@ (8005748 <HAL_RCC_OscConfig+0x474>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d106      	bne.n	80055be <HAL_RCC_OscConfig+0x2ea>
 80055b0:	4b64      	ldr	r3, [pc, #400]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80055b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b4:	4a63      	ldr	r2, [pc, #396]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80055bc:	e01c      	b.n	80055f8 <HAL_RCC_OscConfig+0x324>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	d10c      	bne.n	80055e0 <HAL_RCC_OscConfig+0x30c>
 80055c6:	4b5f      	ldr	r3, [pc, #380]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ca:	4a5e      	ldr	r2, [pc, #376]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80055cc:	f043 0304 	orr.w	r3, r3, #4
 80055d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80055d2:	4b5c      	ldr	r3, [pc, #368]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d6:	4a5b      	ldr	r2, [pc, #364]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80055de:	e00b      	b.n	80055f8 <HAL_RCC_OscConfig+0x324>
 80055e0:	4b58      	ldr	r3, [pc, #352]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80055e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e4:	4a57      	ldr	r2, [pc, #348]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ec:	4b55      	ldr	r3, [pc, #340]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80055ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f0:	4a54      	ldr	r2, [pc, #336]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80055f2:	f023 0304 	bic.w	r3, r3, #4
 80055f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d015      	beq.n	800562c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005600:	f7fe f8a0 	bl	8003744 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005606:	e00a      	b.n	800561e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005608:	f7fe f89c 	bl	8003744 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005616:	4293      	cmp	r3, r2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e0cb      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561e:	4b49      	ldr	r3, [pc, #292]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 8005620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0ee      	beq.n	8005608 <HAL_RCC_OscConfig+0x334>
 800562a:	e014      	b.n	8005656 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562c:	f7fe f88a 	bl	8003744 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005632:	e00a      	b.n	800564a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005634:	f7fe f886 	bl	8003744 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005642:	4293      	cmp	r3, r2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e0b5      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800564a:	4b3e      	ldr	r3, [pc, #248]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1ee      	bne.n	8005634 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d105      	bne.n	8005668 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800565c:	4b39      	ldr	r3, [pc, #228]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	4a38      	ldr	r2, [pc, #224]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 8005662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005666:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80a1 	beq.w	80057b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005672:	4b34      	ldr	r3, [pc, #208]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 030c 	and.w	r3, r3, #12
 800567a:	2b08      	cmp	r3, #8
 800567c:	d05c      	beq.n	8005738 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d141      	bne.n	800570a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005686:	4b31      	ldr	r3, [pc, #196]	@ (800574c <HAL_RCC_OscConfig+0x478>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568c:	f7fe f85a 	bl	8003744 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005694:	f7fe f856 	bl	8003744 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e087      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a6:	4b27      	ldr	r3, [pc, #156]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69da      	ldr	r2, [r3, #28]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c0:	019b      	lsls	r3, r3, #6
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c8:	085b      	lsrs	r3, r3, #1
 80056ca:	3b01      	subs	r3, #1
 80056cc:	041b      	lsls	r3, r3, #16
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d4:	061b      	lsls	r3, r3, #24
 80056d6:	491b      	ldr	r1, [pc, #108]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056dc:	4b1b      	ldr	r3, [pc, #108]	@ (800574c <HAL_RCC_OscConfig+0x478>)
 80056de:	2201      	movs	r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e2:	f7fe f82f 	bl	8003744 <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ea:	f7fe f82b 	bl	8003744 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e05c      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056fc:	4b11      	ldr	r3, [pc, #68]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <HAL_RCC_OscConfig+0x416>
 8005708:	e054      	b.n	80057b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800570a:	4b10      	ldr	r3, [pc, #64]	@ (800574c <HAL_RCC_OscConfig+0x478>)
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005710:	f7fe f818 	bl	8003744 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005718:	f7fe f814 	bl	8003744 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e045      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572a:	4b06      	ldr	r3, [pc, #24]	@ (8005744 <HAL_RCC_OscConfig+0x470>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f0      	bne.n	8005718 <HAL_RCC_OscConfig+0x444>
 8005736:	e03d      	b.n	80057b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d107      	bne.n	8005750 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e038      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
 8005744:	40023800 	.word	0x40023800
 8005748:	40007000 	.word	0x40007000
 800574c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005750:	4b1b      	ldr	r3, [pc, #108]	@ (80057c0 <HAL_RCC_OscConfig+0x4ec>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d028      	beq.n	80057b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005768:	429a      	cmp	r2, r3
 800576a:	d121      	bne.n	80057b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005776:	429a      	cmp	r2, r3
 8005778:	d11a      	bne.n	80057b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005780:	4013      	ands	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005786:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005788:	4293      	cmp	r3, r2
 800578a:	d111      	bne.n	80057b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	3b01      	subs	r3, #1
 800579a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800579c:	429a      	cmp	r2, r3
 800579e:	d107      	bne.n	80057b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d001      	beq.n	80057b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	40023800 	.word	0x40023800

080057c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0cc      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057d8:	4b68      	ldr	r3, [pc, #416]	@ (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d90c      	bls.n	8005800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e6:	4b65      	ldr	r3, [pc, #404]	@ (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ee:	4b63      	ldr	r3, [pc, #396]	@ (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d001      	beq.n	8005800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0b8      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d020      	beq.n	800584e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005818:	4b59      	ldr	r3, [pc, #356]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4a58      	ldr	r2, [pc, #352]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005830:	4b53      	ldr	r3, [pc, #332]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4a52      	ldr	r2, [pc, #328]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800583a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800583c:	4b50      	ldr	r3, [pc, #320]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	494d      	ldr	r1, [pc, #308]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	4313      	orrs	r3, r2
 800584c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d044      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d107      	bne.n	8005872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005862:	4b47      	ldr	r3, [pc, #284]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d119      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e07f      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d003      	beq.n	8005882 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800587e:	2b03      	cmp	r3, #3
 8005880:	d107      	bne.n	8005892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005882:	4b3f      	ldr	r3, [pc, #252]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d109      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e06f      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005892:	4b3b      	ldr	r3, [pc, #236]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e067      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058a2:	4b37      	ldr	r3, [pc, #220]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f023 0203 	bic.w	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4934      	ldr	r1, [pc, #208]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058b4:	f7fd ff46 	bl	8003744 <HAL_GetTick>
 80058b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	e00a      	b.n	80058d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058bc:	f7fd ff42 	bl	8003744 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e04f      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 020c 	and.w	r2, r3, #12
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d1eb      	bne.n	80058bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058e4:	4b25      	ldr	r3, [pc, #148]	@ (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d20c      	bcs.n	800590c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f2:	4b22      	ldr	r3, [pc, #136]	@ (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fa:	4b20      	ldr	r3, [pc, #128]	@ (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d001      	beq.n	800590c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e032      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005918:	4b19      	ldr	r3, [pc, #100]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	4916      	ldr	r1, [pc, #88]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005936:	4b12      	ldr	r3, [pc, #72]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	490e      	ldr	r1, [pc, #56]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	4313      	orrs	r3, r2
 8005948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800594a:	f000 f821 	bl	8005990 <HAL_RCC_GetSysClockFreq>
 800594e:	4602      	mov	r2, r0
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	490a      	ldr	r1, [pc, #40]	@ (8005984 <HAL_RCC_ClockConfig+0x1c0>)
 800595c:	5ccb      	ldrb	r3, [r1, r3]
 800595e:	fa22 f303 	lsr.w	r3, r2, r3
 8005962:	4a09      	ldr	r2, [pc, #36]	@ (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 8005964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005966:	4b09      	ldr	r3, [pc, #36]	@ (800598c <HAL_RCC_ClockConfig+0x1c8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f7fd fea6 	bl	80036bc <HAL_InitTick>

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40023c00 	.word	0x40023c00
 8005980:	40023800 	.word	0x40023800
 8005984:	08007e70 	.word	0x08007e70
 8005988:	20000000 	.word	0x20000000
 800598c:	20000004 	.word	0x20000004

08005990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005994:	b090      	sub	sp, #64	@ 0x40
 8005996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	637b      	str	r3, [r7, #52]	@ 0x34
 800599c:	2300      	movs	r3, #0
 800599e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059a0:	2300      	movs	r3, #0
 80059a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059a8:	4b59      	ldr	r3, [pc, #356]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 030c 	and.w	r3, r3, #12
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d00d      	beq.n	80059d0 <HAL_RCC_GetSysClockFreq+0x40>
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	f200 80a1 	bhi.w	8005afc <HAL_RCC_GetSysClockFreq+0x16c>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <HAL_RCC_GetSysClockFreq+0x34>
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d003      	beq.n	80059ca <HAL_RCC_GetSysClockFreq+0x3a>
 80059c2:	e09b      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059c4:	4b53      	ldr	r3, [pc, #332]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x184>)
 80059c6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80059c8:	e09b      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059ca:	4b53      	ldr	r3, [pc, #332]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80059cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059ce:	e098      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059d0:	4b4f      	ldr	r3, [pc, #316]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059da:	4b4d      	ldr	r3, [pc, #308]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d028      	beq.n	8005a38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	099b      	lsrs	r3, r3, #6
 80059ec:	2200      	movs	r2, #0
 80059ee:	623b      	str	r3, [r7, #32]
 80059f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059f8:	2100      	movs	r1, #0
 80059fa:	4b47      	ldr	r3, [pc, #284]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80059fc:	fb03 f201 	mul.w	r2, r3, r1
 8005a00:	2300      	movs	r3, #0
 8005a02:	fb00 f303 	mul.w	r3, r0, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	4a43      	ldr	r2, [pc, #268]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8005a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a10:	460a      	mov	r2, r1
 8005a12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a16:	4413      	add	r3, r2
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	61bb      	str	r3, [r7, #24]
 8005a20:	61fa      	str	r2, [r7, #28]
 8005a22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005a2a:	f7fb f83f 	bl	8000aac <__aeabi_uldivmod>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4613      	mov	r3, r2
 8005a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a36:	e053      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a38:	4b35      	ldr	r3, [pc, #212]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	099b      	lsrs	r3, r3, #6
 8005a3e:	2200      	movs	r2, #0
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	617a      	str	r2, [r7, #20]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a4a:	f04f 0b00 	mov.w	fp, #0
 8005a4e:	4652      	mov	r2, sl
 8005a50:	465b      	mov	r3, fp
 8005a52:	f04f 0000 	mov.w	r0, #0
 8005a56:	f04f 0100 	mov.w	r1, #0
 8005a5a:	0159      	lsls	r1, r3, #5
 8005a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a60:	0150      	lsls	r0, r2, #5
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	ebb2 080a 	subs.w	r8, r2, sl
 8005a6a:	eb63 090b 	sbc.w	r9, r3, fp
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a82:	ebb2 0408 	subs.w	r4, r2, r8
 8005a86:	eb63 0509 	sbc.w	r5, r3, r9
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	00eb      	lsls	r3, r5, #3
 8005a94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a98:	00e2      	lsls	r2, r4, #3
 8005a9a:	4614      	mov	r4, r2
 8005a9c:	461d      	mov	r5, r3
 8005a9e:	eb14 030a 	adds.w	r3, r4, sl
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	eb45 030b 	adc.w	r3, r5, fp
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	028b      	lsls	r3, r1, #10
 8005aba:	4621      	mov	r1, r4
 8005abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	028a      	lsls	r2, r1, #10
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aca:	2200      	movs	r2, #0
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	60fa      	str	r2, [r7, #12]
 8005ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ad4:	f7fa ffea 	bl	8000aac <__aeabi_uldivmod>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4613      	mov	r3, r2
 8005ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	0c1b      	lsrs	r3, r3, #16
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	3301      	adds	r3, #1
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005af0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005afa:	e002      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005afc:	4b05      	ldr	r3, [pc, #20]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x184>)
 8005afe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3740      	adds	r7, #64	@ 0x40
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b0e:	bf00      	nop
 8005b10:	40023800 	.word	0x40023800
 8005b14:	00f42400 	.word	0x00f42400
 8005b18:	017d7840 	.word	0x017d7840

08005b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b20:	4b03      	ldr	r3, [pc, #12]	@ (8005b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b22:	681b      	ldr	r3, [r3, #0]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20000000 	.word	0x20000000

08005b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b38:	f7ff fff0 	bl	8005b1c <HAL_RCC_GetHCLKFreq>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	4b05      	ldr	r3, [pc, #20]	@ (8005b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	0a9b      	lsrs	r3, r3, #10
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	4903      	ldr	r1, [pc, #12]	@ (8005b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b4a:	5ccb      	ldrb	r3, [r1, r3]
 8005b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	40023800 	.word	0x40023800
 8005b58:	08007e80 	.word	0x08007e80

08005b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e07b      	b.n	8005c66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d108      	bne.n	8005b88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b7e:	d009      	beq.n	8005b94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	61da      	str	r2, [r3, #28]
 8005b86:	e005      	b.n	8005b94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fd f932 	bl	8002e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c18:	ea42 0103 	orr.w	r1, r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c20:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	f003 0104 	and.w	r1, r3, #4
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	f003 0210 	and.w	r2, r3, #16
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b088      	sub	sp, #32
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	603b      	str	r3, [r7, #0]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_SPI_Transmit+0x22>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e12d      	b.n	8005eec <HAL_SPI_Transmit+0x27e>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c98:	f7fd fd54 	bl	8003744 <HAL_GetTick>
 8005c9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d002      	beq.n	8005cb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cb2:	e116      	b.n	8005ee2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_SPI_Transmit+0x52>
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d102      	bne.n	8005cc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cc4:	e10d      	b.n	8005ee2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2203      	movs	r2, #3
 8005cca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d0c:	d10f      	bne.n	8005d2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d38:	2b40      	cmp	r3, #64	@ 0x40
 8005d3a:	d007      	beq.n	8005d4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d54:	d14f      	bne.n	8005df6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_SPI_Transmit+0xf6>
 8005d5e:	8afb      	ldrh	r3, [r7, #22]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d142      	bne.n	8005dea <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d68:	881a      	ldrh	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d74:	1c9a      	adds	r2, r3, #2
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d88:	e02f      	b.n	8005dea <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d112      	bne.n	8005dbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9c:	881a      	ldrh	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da8:	1c9a      	adds	r2, r3, #2
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005dbc:	e015      	b.n	8005dea <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dbe:	f7fd fcc1 	bl	8003744 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d803      	bhi.n	8005dd6 <HAL_SPI_Transmit+0x168>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd4:	d102      	bne.n	8005ddc <HAL_SPI_Transmit+0x16e>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d106      	bne.n	8005dea <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005de8:	e07b      	b.n	8005ee2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1ca      	bne.n	8005d8a <HAL_SPI_Transmit+0x11c>
 8005df4:	e050      	b.n	8005e98 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <HAL_SPI_Transmit+0x196>
 8005dfe:	8afb      	ldrh	r3, [r7, #22]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d144      	bne.n	8005e8e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	7812      	ldrb	r2, [r2, #0]
 8005e10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e2a:	e030      	b.n	8005e8e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d113      	bne.n	8005e62 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	330c      	adds	r3, #12
 8005e44:	7812      	ldrb	r2, [r2, #0]
 8005e46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e60:	e015      	b.n	8005e8e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e62:	f7fd fc6f 	bl	8003744 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d803      	bhi.n	8005e7a <HAL_SPI_Transmit+0x20c>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d102      	bne.n	8005e80 <HAL_SPI_Transmit+0x212>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005e8c:	e029      	b.n	8005ee2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1c9      	bne.n	8005e2c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fbdf 	bl	8006660 <SPI_EndRxTxTransaction>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e003      	b.n	8005ee2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005eea:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	4613      	mov	r3, r2
 8005f02:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d002      	beq.n	8005f1a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005f14:	2302      	movs	r3, #2
 8005f16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f18:	e0fb      	b.n	8006112 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f22:	d112      	bne.n	8005f4a <HAL_SPI_Receive+0x56>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10e      	bne.n	8005f4a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2204      	movs	r2, #4
 8005f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 f8ef 	bl	8006124 <HAL_SPI_TransmitReceive>
 8005f46:	4603      	mov	r3, r0
 8005f48:	e0e8      	b.n	800611c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_SPI_Receive+0x64>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e0e1      	b.n	800611c <HAL_SPI_Receive+0x228>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f60:	f7fd fbf0 	bl	8003744 <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <HAL_SPI_Receive+0x7e>
 8005f6c:	88fb      	ldrh	r3, [r7, #6]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d102      	bne.n	8005f78 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f76:	e0cc      	b.n	8006112 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	88fa      	ldrh	r2, [r7, #6]
 8005f90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fbe:	d10f      	bne.n	8005fe0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005fde:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fea:	2b40      	cmp	r3, #64	@ 0x40
 8005fec:	d007      	beq.n	8005ffe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ffc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d16a      	bne.n	80060dc <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006006:	e032      	b.n	800606e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b01      	cmp	r3, #1
 8006014:	d115      	bne.n	8006042 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f103 020c 	add.w	r2, r3, #12
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006022:	7812      	ldrb	r2, [r2, #0]
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006040:	e015      	b.n	800606e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006042:	f7fd fb7f 	bl	8003744 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d803      	bhi.n	800605a <HAL_SPI_Receive+0x166>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006058:	d102      	bne.n	8006060 <HAL_SPI_Receive+0x16c>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d106      	bne.n	800606e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800606c:	e051      	b.n	8006112 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1c7      	bne.n	8006008 <HAL_SPI_Receive+0x114>
 8006078:	e035      	b.n	80060e6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b01      	cmp	r3, #1
 8006086:	d113      	bne.n	80060b0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006092:	b292      	uxth	r2, r2
 8006094:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609a:	1c9a      	adds	r2, r3, #2
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060ae:	e015      	b.n	80060dc <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060b0:	f7fd fb48 	bl	8003744 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d803      	bhi.n	80060c8 <HAL_SPI_Receive+0x1d4>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d102      	bne.n	80060ce <HAL_SPI_Receive+0x1da>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80060da:	e01a      	b.n	8006112 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1c9      	bne.n	800607a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 fa52 	bl	8006594 <SPI_EndRxTransaction>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	75fb      	strb	r3, [r7, #23]
 8006108:	e003      	b.n	8006112 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800611a:	7dfb      	ldrb	r3, [r7, #23]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08c      	sub	sp, #48	@ 0x30
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006132:	2301      	movs	r3, #1
 8006134:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_SPI_TransmitReceive+0x26>
 8006146:	2302      	movs	r3, #2
 8006148:	e198      	b.n	800647c <HAL_SPI_TransmitReceive+0x358>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006152:	f7fd faf7 	bl	8003744 <HAL_GetTick>
 8006156:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800615e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006168:	887b      	ldrh	r3, [r7, #2]
 800616a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800616c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006170:	2b01      	cmp	r3, #1
 8006172:	d00f      	beq.n	8006194 <HAL_SPI_TransmitReceive+0x70>
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800617a:	d107      	bne.n	800618c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <HAL_SPI_TransmitReceive+0x68>
 8006184:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006188:	2b04      	cmp	r3, #4
 800618a:	d003      	beq.n	8006194 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800618c:	2302      	movs	r3, #2
 800618e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006192:	e16d      	b.n	8006470 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <HAL_SPI_TransmitReceive+0x82>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <HAL_SPI_TransmitReceive+0x82>
 80061a0:	887b      	ldrh	r3, [r7, #2]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d103      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80061ac:	e160      	b.n	8006470 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d003      	beq.n	80061c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2205      	movs	r2, #5
 80061be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	887a      	ldrh	r2, [r7, #2]
 80061d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	887a      	ldrh	r2, [r7, #2]
 80061e4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	887a      	ldrh	r2, [r7, #2]
 80061ea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006202:	2b40      	cmp	r3, #64	@ 0x40
 8006204:	d007      	beq.n	8006216 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006214:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800621e:	d17c      	bne.n	800631a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <HAL_SPI_TransmitReceive+0x10a>
 8006228:	8b7b      	ldrh	r3, [r7, #26]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d16a      	bne.n	8006304 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006232:	881a      	ldrh	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	1c9a      	adds	r2, r3, #2
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006252:	e057      	b.n	8006304 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b02      	cmp	r3, #2
 8006260:	d11b      	bne.n	800629a <HAL_SPI_TransmitReceive+0x176>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d016      	beq.n	800629a <HAL_SPI_TransmitReceive+0x176>
 800626c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626e:	2b01      	cmp	r3, #1
 8006270:	d113      	bne.n	800629a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006276:	881a      	ldrh	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006282:	1c9a      	adds	r2, r3, #2
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d119      	bne.n	80062dc <HAL_SPI_TransmitReceive+0x1b8>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d014      	beq.n	80062dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062bc:	b292      	uxth	r2, r2
 80062be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c4:	1c9a      	adds	r2, r3, #2
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062d8:	2301      	movs	r3, #1
 80062da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062dc:	f7fd fa32 	bl	8003744 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d80b      	bhi.n	8006304 <HAL_SPI_TransmitReceive+0x1e0>
 80062ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f2:	d007      	beq.n	8006304 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006302:	e0b5      	b.n	8006470 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1a2      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x130>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d19d      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x130>
 8006318:	e080      	b.n	800641c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_SPI_TransmitReceive+0x204>
 8006322:	8b7b      	ldrh	r3, [r7, #26]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d16f      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	7812      	ldrb	r2, [r2, #0]
 8006334:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006344:	b29b      	uxth	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800634e:	e05b      	b.n	8006408 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b02      	cmp	r3, #2
 800635c:	d11c      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x274>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d017      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x274>
 8006368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636a:	2b01      	cmp	r3, #1
 800636c:	d114      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d119      	bne.n	80063da <HAL_SPI_TransmitReceive+0x2b6>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d014      	beq.n	80063da <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063d6:	2301      	movs	r3, #1
 80063d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063da:	f7fd f9b3 	bl	8003744 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d803      	bhi.n	80063f2 <HAL_SPI_TransmitReceive+0x2ce>
 80063ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d102      	bne.n	80063f8 <HAL_SPI_TransmitReceive+0x2d4>
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d107      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006406:	e033      	b.n	8006470 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d19e      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x22c>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d199      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800641c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800641e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 f91d 	bl	8006660 <SPI_EndRxTxTransaction>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d006      	beq.n	800643a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006438:	e01a      	b.n	8006470 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006466:	e003      	b.n	8006470 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006478:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800647c:	4618      	mov	r0, r3
 800647e:	3730      	adds	r7, #48	@ 0x30
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	4613      	mov	r3, r2
 8006492:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006494:	f7fd f956 	bl	8003744 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649c:	1a9b      	subs	r3, r3, r2
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	4413      	add	r3, r2
 80064a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064a4:	f7fd f94e 	bl	8003744 <HAL_GetTick>
 80064a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064aa:	4b39      	ldr	r3, [pc, #228]	@ (8006590 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	015b      	lsls	r3, r3, #5
 80064b0:	0d1b      	lsrs	r3, r3, #20
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	fb02 f303 	mul.w	r3, r2, r3
 80064b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ba:	e054      	b.n	8006566 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d050      	beq.n	8006566 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064c4:	f7fd f93e 	bl	8003744 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d902      	bls.n	80064da <SPI_WaitFlagStateUntilTimeout+0x56>
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d13d      	bne.n	8006556 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064f2:	d111      	bne.n	8006518 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064fc:	d004      	beq.n	8006508 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006506:	d107      	bne.n	8006518 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006516:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006520:	d10f      	bne.n	8006542 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006540:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e017      	b.n	8006586 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	3b01      	subs	r3, #1
 8006564:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4013      	ands	r3, r2
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	429a      	cmp	r2, r3
 8006574:	bf0c      	ite	eq
 8006576:	2301      	moveq	r3, #1
 8006578:	2300      	movne	r3, #0
 800657a:	b2db      	uxtb	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	79fb      	ldrb	r3, [r7, #7]
 8006580:	429a      	cmp	r2, r3
 8006582:	d19b      	bne.n	80064bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3720      	adds	r7, #32
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20000000 	.word	0x20000000

08006594 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af02      	add	r7, sp, #8
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065a8:	d111      	bne.n	80065ce <SPI_EndRxTransaction+0x3a>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b2:	d004      	beq.n	80065be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065bc:	d107      	bne.n	80065ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065d6:	d12a      	bne.n	800662e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e0:	d012      	beq.n	8006608 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2200      	movs	r2, #0
 80065ea:	2180      	movs	r1, #128	@ 0x80
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7ff ff49 	bl	8006484 <SPI_WaitFlagStateUntilTimeout>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d02d      	beq.n	8006654 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fc:	f043 0220 	orr.w	r2, r3, #32
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e026      	b.n	8006656 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2200      	movs	r2, #0
 8006610:	2101      	movs	r1, #1
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f7ff ff36 	bl	8006484 <SPI_WaitFlagStateUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01a      	beq.n	8006654 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006622:	f043 0220 	orr.w	r2, r3, #32
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e013      	b.n	8006656 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2200      	movs	r2, #0
 8006636:	2101      	movs	r1, #1
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff ff23 	bl	8006484 <SPI_WaitFlagStateUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006648:	f043 0220 	orr.w	r2, r3, #32
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e000      	b.n	8006656 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af02      	add	r7, sp, #8
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2201      	movs	r2, #1
 8006674:	2102      	movs	r1, #2
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7ff ff04 	bl	8006484 <SPI_WaitFlagStateUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006686:	f043 0220 	orr.w	r2, r3, #32
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e032      	b.n	80066f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006692:	4b1b      	ldr	r3, [pc, #108]	@ (8006700 <SPI_EndRxTxTransaction+0xa0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1b      	ldr	r2, [pc, #108]	@ (8006704 <SPI_EndRxTxTransaction+0xa4>)
 8006698:	fba2 2303 	umull	r2, r3, r2, r3
 800669c:	0d5b      	lsrs	r3, r3, #21
 800669e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80066a2:	fb02 f303 	mul.w	r3, r2, r3
 80066a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066b0:	d112      	bne.n	80066d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2200      	movs	r2, #0
 80066ba:	2180      	movs	r1, #128	@ 0x80
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7ff fee1 	bl	8006484 <SPI_WaitFlagStateUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d016      	beq.n	80066f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066cc:	f043 0220 	orr.w	r2, r3, #32
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e00f      	b.n	80066f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ee:	2b80      	cmp	r3, #128	@ 0x80
 80066f0:	d0f2      	beq.n	80066d8 <SPI_EndRxTxTransaction+0x78>
 80066f2:	e000      	b.n	80066f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80066f4:	bf00      	nop
  }

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20000000 	.word	0x20000000
 8006704:	165e9f81 	.word	0x165e9f81

08006708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e041      	b.n	800679e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fc fc62 	bl	8002ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3304      	adds	r3, #4
 8006744:	4619      	mov	r1, r3
 8006746:	4610      	mov	r0, r2
 8006748:	f000 f976 	bl	8006a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d001      	beq.n	80067c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e03c      	b.n	800683a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006848 <HAL_TIM_Base_Start+0xa0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d018      	beq.n	8006804 <HAL_TIM_Base_Start+0x5c>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067da:	d013      	beq.n	8006804 <HAL_TIM_Base_Start+0x5c>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a1a      	ldr	r2, [pc, #104]	@ (800684c <HAL_TIM_Base_Start+0xa4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00e      	beq.n	8006804 <HAL_TIM_Base_Start+0x5c>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a19      	ldr	r2, [pc, #100]	@ (8006850 <HAL_TIM_Base_Start+0xa8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_TIM_Base_Start+0x5c>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a17      	ldr	r2, [pc, #92]	@ (8006854 <HAL_TIM_Base_Start+0xac>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d004      	beq.n	8006804 <HAL_TIM_Base_Start+0x5c>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a16      	ldr	r2, [pc, #88]	@ (8006858 <HAL_TIM_Base_Start+0xb0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d111      	bne.n	8006828 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b06      	cmp	r3, #6
 8006814:	d010      	beq.n	8006838 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0201 	orr.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006826:	e007      	b.n	8006838 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	40010000 	.word	0x40010000
 800684c:	40000400 	.word	0x40000400
 8006850:	40000800 	.word	0x40000800
 8006854:	40000c00 	.word	0x40000c00
 8006858:	40014000 	.word	0x40014000

0800685c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6a1a      	ldr	r2, [r3, #32]
 800686a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800686e:	4013      	ands	r3, r2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10f      	bne.n	8006894 <HAL_TIM_Base_Stop+0x38>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6a1a      	ldr	r2, [r3, #32]
 800687a:	f240 4344 	movw	r3, #1092	@ 0x444
 800687e:	4013      	ands	r3, r2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d107      	bne.n	8006894 <HAL_TIM_Base_Stop+0x38>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0201 	bic.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d101      	bne.n	80068c6 <HAL_TIM_ConfigClockSource+0x1c>
 80068c2:	2302      	movs	r3, #2
 80068c4:	e0b4      	b.n	8006a30 <HAL_TIM_ConfigClockSource+0x186>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2202      	movs	r2, #2
 80068d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80068e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068fe:	d03e      	beq.n	800697e <HAL_TIM_ConfigClockSource+0xd4>
 8006900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006904:	f200 8087 	bhi.w	8006a16 <HAL_TIM_ConfigClockSource+0x16c>
 8006908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800690c:	f000 8086 	beq.w	8006a1c <HAL_TIM_ConfigClockSource+0x172>
 8006910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006914:	d87f      	bhi.n	8006a16 <HAL_TIM_ConfigClockSource+0x16c>
 8006916:	2b70      	cmp	r3, #112	@ 0x70
 8006918:	d01a      	beq.n	8006950 <HAL_TIM_ConfigClockSource+0xa6>
 800691a:	2b70      	cmp	r3, #112	@ 0x70
 800691c:	d87b      	bhi.n	8006a16 <HAL_TIM_ConfigClockSource+0x16c>
 800691e:	2b60      	cmp	r3, #96	@ 0x60
 8006920:	d050      	beq.n	80069c4 <HAL_TIM_ConfigClockSource+0x11a>
 8006922:	2b60      	cmp	r3, #96	@ 0x60
 8006924:	d877      	bhi.n	8006a16 <HAL_TIM_ConfigClockSource+0x16c>
 8006926:	2b50      	cmp	r3, #80	@ 0x50
 8006928:	d03c      	beq.n	80069a4 <HAL_TIM_ConfigClockSource+0xfa>
 800692a:	2b50      	cmp	r3, #80	@ 0x50
 800692c:	d873      	bhi.n	8006a16 <HAL_TIM_ConfigClockSource+0x16c>
 800692e:	2b40      	cmp	r3, #64	@ 0x40
 8006930:	d058      	beq.n	80069e4 <HAL_TIM_ConfigClockSource+0x13a>
 8006932:	2b40      	cmp	r3, #64	@ 0x40
 8006934:	d86f      	bhi.n	8006a16 <HAL_TIM_ConfigClockSource+0x16c>
 8006936:	2b30      	cmp	r3, #48	@ 0x30
 8006938:	d064      	beq.n	8006a04 <HAL_TIM_ConfigClockSource+0x15a>
 800693a:	2b30      	cmp	r3, #48	@ 0x30
 800693c:	d86b      	bhi.n	8006a16 <HAL_TIM_ConfigClockSource+0x16c>
 800693e:	2b20      	cmp	r3, #32
 8006940:	d060      	beq.n	8006a04 <HAL_TIM_ConfigClockSource+0x15a>
 8006942:	2b20      	cmp	r3, #32
 8006944:	d867      	bhi.n	8006a16 <HAL_TIM_ConfigClockSource+0x16c>
 8006946:	2b00      	cmp	r3, #0
 8006948:	d05c      	beq.n	8006a04 <HAL_TIM_ConfigClockSource+0x15a>
 800694a:	2b10      	cmp	r3, #16
 800694c:	d05a      	beq.n	8006a04 <HAL_TIM_ConfigClockSource+0x15a>
 800694e:	e062      	b.n	8006a16 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006960:	f000 f970 	bl	8006c44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006972:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	609a      	str	r2, [r3, #8]
      break;
 800697c:	e04f      	b.n	8006a1e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800698e:	f000 f959 	bl	8006c44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069a0:	609a      	str	r2, [r3, #8]
      break;
 80069a2:	e03c      	b.n	8006a1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b0:	461a      	mov	r2, r3
 80069b2:	f000 f8cd 	bl	8006b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2150      	movs	r1, #80	@ 0x50
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 f926 	bl	8006c0e <TIM_ITRx_SetConfig>
      break;
 80069c2:	e02c      	b.n	8006a1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069d0:	461a      	mov	r2, r3
 80069d2:	f000 f8ec 	bl	8006bae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2160      	movs	r1, #96	@ 0x60
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 f916 	bl	8006c0e <TIM_ITRx_SetConfig>
      break;
 80069e2:	e01c      	b.n	8006a1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f0:	461a      	mov	r2, r3
 80069f2:	f000 f8ad 	bl	8006b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2140      	movs	r1, #64	@ 0x40
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 f906 	bl	8006c0e <TIM_ITRx_SetConfig>
      break;
 8006a02:	e00c      	b.n	8006a1e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f000 f8fd 	bl	8006c0e <TIM_ITRx_SetConfig>
      break;
 8006a14:	e003      	b.n	8006a1e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	73fb      	strb	r3, [r7, #15]
      break;
 8006a1a:	e000      	b.n	8006a1e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a3a      	ldr	r2, [pc, #232]	@ (8006b34 <TIM_Base_SetConfig+0xfc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00f      	beq.n	8006a70 <TIM_Base_SetConfig+0x38>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a56:	d00b      	beq.n	8006a70 <TIM_Base_SetConfig+0x38>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a37      	ldr	r2, [pc, #220]	@ (8006b38 <TIM_Base_SetConfig+0x100>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d007      	beq.n	8006a70 <TIM_Base_SetConfig+0x38>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a36      	ldr	r2, [pc, #216]	@ (8006b3c <TIM_Base_SetConfig+0x104>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_Base_SetConfig+0x38>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a35      	ldr	r2, [pc, #212]	@ (8006b40 <TIM_Base_SetConfig+0x108>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d108      	bne.n	8006a82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a2b      	ldr	r2, [pc, #172]	@ (8006b34 <TIM_Base_SetConfig+0xfc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d01b      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a90:	d017      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a28      	ldr	r2, [pc, #160]	@ (8006b38 <TIM_Base_SetConfig+0x100>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a27      	ldr	r2, [pc, #156]	@ (8006b3c <TIM_Base_SetConfig+0x104>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00f      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a26      	ldr	r2, [pc, #152]	@ (8006b40 <TIM_Base_SetConfig+0x108>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00b      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a25      	ldr	r2, [pc, #148]	@ (8006b44 <TIM_Base_SetConfig+0x10c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d007      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a24      	ldr	r2, [pc, #144]	@ (8006b48 <TIM_Base_SetConfig+0x110>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d003      	beq.n	8006ac2 <TIM_Base_SetConfig+0x8a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a23      	ldr	r2, [pc, #140]	@ (8006b4c <TIM_Base_SetConfig+0x114>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d108      	bne.n	8006ad4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a0e      	ldr	r2, [pc, #56]	@ (8006b34 <TIM_Base_SetConfig+0xfc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d103      	bne.n	8006b08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d105      	bne.n	8006b26 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f023 0201 	bic.w	r2, r3, #1
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	611a      	str	r2, [r3, #16]
  }
}
 8006b26:	bf00      	nop
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40010000 	.word	0x40010000
 8006b38:	40000400 	.word	0x40000400
 8006b3c:	40000800 	.word	0x40000800
 8006b40:	40000c00 	.word	0x40000c00
 8006b44:	40014000 	.word	0x40014000
 8006b48:	40014400 	.word	0x40014400
 8006b4c:	40014800 	.word	0x40014800

08006b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f023 0201 	bic.w	r2, r3, #1
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	011b      	lsls	r3, r3, #4
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f023 030a 	bic.w	r3, r3, #10
 8006b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	621a      	str	r2, [r3, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b087      	sub	sp, #28
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f023 0210 	bic.w	r2, r3, #16
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	031b      	lsls	r3, r3, #12
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	621a      	str	r2, [r3, #32]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	f043 0307 	orr.w	r3, r3, #7
 8006c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	609a      	str	r2, [r3, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	021a      	lsls	r2, r3, #8
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	431a      	orrs	r2, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	609a      	str	r2, [r3, #8]
}
 8006c78:	bf00      	nop
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e050      	b.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1c      	ldr	r2, [pc, #112]	@ (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d018      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce8:	d013      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a18      	ldr	r2, [pc, #96]	@ (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00e      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a16      	ldr	r2, [pc, #88]	@ (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d009      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a15      	ldr	r2, [pc, #84]	@ (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d004      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a13      	ldr	r2, [pc, #76]	@ (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d10c      	bne.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	40010000 	.word	0x40010000
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	40000c00 	.word	0x40000c00
 8006d5c:	40014000 	.word	0x40014000

08006d60 <std>:
 8006d60:	2300      	movs	r3, #0
 8006d62:	b510      	push	{r4, lr}
 8006d64:	4604      	mov	r4, r0
 8006d66:	e9c0 3300 	strd	r3, r3, [r0]
 8006d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d6e:	6083      	str	r3, [r0, #8]
 8006d70:	8181      	strh	r1, [r0, #12]
 8006d72:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d74:	81c2      	strh	r2, [r0, #14]
 8006d76:	6183      	str	r3, [r0, #24]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	305c      	adds	r0, #92	@ 0x5c
 8006d7e:	f000 f9f9 	bl	8007174 <memset>
 8006d82:	4b0d      	ldr	r3, [pc, #52]	@ (8006db8 <std+0x58>)
 8006d84:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d86:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <std+0x5c>)
 8006d88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc0 <std+0x60>)
 8006d8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc4 <std+0x64>)
 8006d90:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d92:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc8 <std+0x68>)
 8006d94:	6224      	str	r4, [r4, #32]
 8006d96:	429c      	cmp	r4, r3
 8006d98:	d006      	beq.n	8006da8 <std+0x48>
 8006d9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d9e:	4294      	cmp	r4, r2
 8006da0:	d002      	beq.n	8006da8 <std+0x48>
 8006da2:	33d0      	adds	r3, #208	@ 0xd0
 8006da4:	429c      	cmp	r4, r3
 8006da6:	d105      	bne.n	8006db4 <std+0x54>
 8006da8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db0:	f000 ba58 	b.w	8007264 <__retarget_lock_init_recursive>
 8006db4:	bd10      	pop	{r4, pc}
 8006db6:	bf00      	nop
 8006db8:	08006fc5 	.word	0x08006fc5
 8006dbc:	08006fe7 	.word	0x08006fe7
 8006dc0:	0800701f 	.word	0x0800701f
 8006dc4:	08007043 	.word	0x08007043
 8006dc8:	200003bc 	.word	0x200003bc

08006dcc <stdio_exit_handler>:
 8006dcc:	4a02      	ldr	r2, [pc, #8]	@ (8006dd8 <stdio_exit_handler+0xc>)
 8006dce:	4903      	ldr	r1, [pc, #12]	@ (8006ddc <stdio_exit_handler+0x10>)
 8006dd0:	4803      	ldr	r0, [pc, #12]	@ (8006de0 <stdio_exit_handler+0x14>)
 8006dd2:	f000 b869 	b.w	8006ea8 <_fwalk_sglue>
 8006dd6:	bf00      	nop
 8006dd8:	2000000c 	.word	0x2000000c
 8006ddc:	08007b05 	.word	0x08007b05
 8006de0:	2000001c 	.word	0x2000001c

08006de4 <cleanup_stdio>:
 8006de4:	6841      	ldr	r1, [r0, #4]
 8006de6:	4b0c      	ldr	r3, [pc, #48]	@ (8006e18 <cleanup_stdio+0x34>)
 8006de8:	4299      	cmp	r1, r3
 8006dea:	b510      	push	{r4, lr}
 8006dec:	4604      	mov	r4, r0
 8006dee:	d001      	beq.n	8006df4 <cleanup_stdio+0x10>
 8006df0:	f000 fe88 	bl	8007b04 <_fflush_r>
 8006df4:	68a1      	ldr	r1, [r4, #8]
 8006df6:	4b09      	ldr	r3, [pc, #36]	@ (8006e1c <cleanup_stdio+0x38>)
 8006df8:	4299      	cmp	r1, r3
 8006dfa:	d002      	beq.n	8006e02 <cleanup_stdio+0x1e>
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 fe81 	bl	8007b04 <_fflush_r>
 8006e02:	68e1      	ldr	r1, [r4, #12]
 8006e04:	4b06      	ldr	r3, [pc, #24]	@ (8006e20 <cleanup_stdio+0x3c>)
 8006e06:	4299      	cmp	r1, r3
 8006e08:	d004      	beq.n	8006e14 <cleanup_stdio+0x30>
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e10:	f000 be78 	b.w	8007b04 <_fflush_r>
 8006e14:	bd10      	pop	{r4, pc}
 8006e16:	bf00      	nop
 8006e18:	200003bc 	.word	0x200003bc
 8006e1c:	20000424 	.word	0x20000424
 8006e20:	2000048c 	.word	0x2000048c

08006e24 <global_stdio_init.part.0>:
 8006e24:	b510      	push	{r4, lr}
 8006e26:	4b0b      	ldr	r3, [pc, #44]	@ (8006e54 <global_stdio_init.part.0+0x30>)
 8006e28:	4c0b      	ldr	r4, [pc, #44]	@ (8006e58 <global_stdio_init.part.0+0x34>)
 8006e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e5c <global_stdio_init.part.0+0x38>)
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	4620      	mov	r0, r4
 8006e30:	2200      	movs	r2, #0
 8006e32:	2104      	movs	r1, #4
 8006e34:	f7ff ff94 	bl	8006d60 <std>
 8006e38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	2109      	movs	r1, #9
 8006e40:	f7ff ff8e 	bl	8006d60 <std>
 8006e44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e48:	2202      	movs	r2, #2
 8006e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e4e:	2112      	movs	r1, #18
 8006e50:	f7ff bf86 	b.w	8006d60 <std>
 8006e54:	200004f4 	.word	0x200004f4
 8006e58:	200003bc 	.word	0x200003bc
 8006e5c:	08006dcd 	.word	0x08006dcd

08006e60 <__sfp_lock_acquire>:
 8006e60:	4801      	ldr	r0, [pc, #4]	@ (8006e68 <__sfp_lock_acquire+0x8>)
 8006e62:	f000 ba00 	b.w	8007266 <__retarget_lock_acquire_recursive>
 8006e66:	bf00      	nop
 8006e68:	200004fd 	.word	0x200004fd

08006e6c <__sfp_lock_release>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	@ (8006e74 <__sfp_lock_release+0x8>)
 8006e6e:	f000 b9fb 	b.w	8007268 <__retarget_lock_release_recursive>
 8006e72:	bf00      	nop
 8006e74:	200004fd 	.word	0x200004fd

08006e78 <__sinit>:
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	f7ff fff0 	bl	8006e60 <__sfp_lock_acquire>
 8006e80:	6a23      	ldr	r3, [r4, #32]
 8006e82:	b11b      	cbz	r3, 8006e8c <__sinit+0x14>
 8006e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e88:	f7ff bff0 	b.w	8006e6c <__sfp_lock_release>
 8006e8c:	4b04      	ldr	r3, [pc, #16]	@ (8006ea0 <__sinit+0x28>)
 8006e8e:	6223      	str	r3, [r4, #32]
 8006e90:	4b04      	ldr	r3, [pc, #16]	@ (8006ea4 <__sinit+0x2c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1f5      	bne.n	8006e84 <__sinit+0xc>
 8006e98:	f7ff ffc4 	bl	8006e24 <global_stdio_init.part.0>
 8006e9c:	e7f2      	b.n	8006e84 <__sinit+0xc>
 8006e9e:	bf00      	nop
 8006ea0:	08006de5 	.word	0x08006de5
 8006ea4:	200004f4 	.word	0x200004f4

08006ea8 <_fwalk_sglue>:
 8006ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eac:	4607      	mov	r7, r0
 8006eae:	4688      	mov	r8, r1
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	2600      	movs	r6, #0
 8006eb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eb8:	f1b9 0901 	subs.w	r9, r9, #1
 8006ebc:	d505      	bpl.n	8006eca <_fwalk_sglue+0x22>
 8006ebe:	6824      	ldr	r4, [r4, #0]
 8006ec0:	2c00      	cmp	r4, #0
 8006ec2:	d1f7      	bne.n	8006eb4 <_fwalk_sglue+0xc>
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eca:	89ab      	ldrh	r3, [r5, #12]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d907      	bls.n	8006ee0 <_fwalk_sglue+0x38>
 8006ed0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	d003      	beq.n	8006ee0 <_fwalk_sglue+0x38>
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4638      	mov	r0, r7
 8006edc:	47c0      	blx	r8
 8006ede:	4306      	orrs	r6, r0
 8006ee0:	3568      	adds	r5, #104	@ 0x68
 8006ee2:	e7e9      	b.n	8006eb8 <_fwalk_sglue+0x10>

08006ee4 <iprintf>:
 8006ee4:	b40f      	push	{r0, r1, r2, r3}
 8006ee6:	b507      	push	{r0, r1, r2, lr}
 8006ee8:	4906      	ldr	r1, [pc, #24]	@ (8006f04 <iprintf+0x20>)
 8006eea:	ab04      	add	r3, sp, #16
 8006eec:	6808      	ldr	r0, [r1, #0]
 8006eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef2:	6881      	ldr	r1, [r0, #8]
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	f000 fadb 	bl	80074b0 <_vfiprintf_r>
 8006efa:	b003      	add	sp, #12
 8006efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f00:	b004      	add	sp, #16
 8006f02:	4770      	bx	lr
 8006f04:	20000018 	.word	0x20000018

08006f08 <_puts_r>:
 8006f08:	6a03      	ldr	r3, [r0, #32]
 8006f0a:	b570      	push	{r4, r5, r6, lr}
 8006f0c:	6884      	ldr	r4, [r0, #8]
 8006f0e:	4605      	mov	r5, r0
 8006f10:	460e      	mov	r6, r1
 8006f12:	b90b      	cbnz	r3, 8006f18 <_puts_r+0x10>
 8006f14:	f7ff ffb0 	bl	8006e78 <__sinit>
 8006f18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f1a:	07db      	lsls	r3, r3, #31
 8006f1c:	d405      	bmi.n	8006f2a <_puts_r+0x22>
 8006f1e:	89a3      	ldrh	r3, [r4, #12]
 8006f20:	0598      	lsls	r0, r3, #22
 8006f22:	d402      	bmi.n	8006f2a <_puts_r+0x22>
 8006f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f26:	f000 f99e 	bl	8007266 <__retarget_lock_acquire_recursive>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	0719      	lsls	r1, r3, #28
 8006f2e:	d502      	bpl.n	8006f36 <_puts_r+0x2e>
 8006f30:	6923      	ldr	r3, [r4, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d135      	bne.n	8006fa2 <_puts_r+0x9a>
 8006f36:	4621      	mov	r1, r4
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f000 f8c5 	bl	80070c8 <__swsetup_r>
 8006f3e:	b380      	cbz	r0, 8006fa2 <_puts_r+0x9a>
 8006f40:	f04f 35ff 	mov.w	r5, #4294967295
 8006f44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f46:	07da      	lsls	r2, r3, #31
 8006f48:	d405      	bmi.n	8006f56 <_puts_r+0x4e>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	059b      	lsls	r3, r3, #22
 8006f4e:	d402      	bmi.n	8006f56 <_puts_r+0x4e>
 8006f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f52:	f000 f989 	bl	8007268 <__retarget_lock_release_recursive>
 8006f56:	4628      	mov	r0, r5
 8006f58:	bd70      	pop	{r4, r5, r6, pc}
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	da04      	bge.n	8006f68 <_puts_r+0x60>
 8006f5e:	69a2      	ldr	r2, [r4, #24]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	dc17      	bgt.n	8006f94 <_puts_r+0x8c>
 8006f64:	290a      	cmp	r1, #10
 8006f66:	d015      	beq.n	8006f94 <_puts_r+0x8c>
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	6022      	str	r2, [r4, #0]
 8006f6e:	7019      	strb	r1, [r3, #0]
 8006f70:	68a3      	ldr	r3, [r4, #8]
 8006f72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f76:	3b01      	subs	r3, #1
 8006f78:	60a3      	str	r3, [r4, #8]
 8006f7a:	2900      	cmp	r1, #0
 8006f7c:	d1ed      	bne.n	8006f5a <_puts_r+0x52>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	da11      	bge.n	8006fa6 <_puts_r+0x9e>
 8006f82:	4622      	mov	r2, r4
 8006f84:	210a      	movs	r1, #10
 8006f86:	4628      	mov	r0, r5
 8006f88:	f000 f85f 	bl	800704a <__swbuf_r>
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d0d7      	beq.n	8006f40 <_puts_r+0x38>
 8006f90:	250a      	movs	r5, #10
 8006f92:	e7d7      	b.n	8006f44 <_puts_r+0x3c>
 8006f94:	4622      	mov	r2, r4
 8006f96:	4628      	mov	r0, r5
 8006f98:	f000 f857 	bl	800704a <__swbuf_r>
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d1e7      	bne.n	8006f70 <_puts_r+0x68>
 8006fa0:	e7ce      	b.n	8006f40 <_puts_r+0x38>
 8006fa2:	3e01      	subs	r6, #1
 8006fa4:	e7e4      	b.n	8006f70 <_puts_r+0x68>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	6022      	str	r2, [r4, #0]
 8006fac:	220a      	movs	r2, #10
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	e7ee      	b.n	8006f90 <_puts_r+0x88>
	...

08006fb4 <puts>:
 8006fb4:	4b02      	ldr	r3, [pc, #8]	@ (8006fc0 <puts+0xc>)
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	f7ff bfa5 	b.w	8006f08 <_puts_r>
 8006fbe:	bf00      	nop
 8006fc0:	20000018 	.word	0x20000018

08006fc4 <__sread>:
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fcc:	f000 f8fc 	bl	80071c8 <_read_r>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	bfab      	itete	ge
 8006fd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8006fd8:	181b      	addge	r3, r3, r0
 8006fda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fde:	bfac      	ite	ge
 8006fe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006fe2:	81a3      	strhlt	r3, [r4, #12]
 8006fe4:	bd10      	pop	{r4, pc}

08006fe6 <__swrite>:
 8006fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fea:	461f      	mov	r7, r3
 8006fec:	898b      	ldrh	r3, [r1, #12]
 8006fee:	05db      	lsls	r3, r3, #23
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	4616      	mov	r6, r2
 8006ff6:	d505      	bpl.n	8007004 <__swrite+0x1e>
 8006ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	2200      	movs	r2, #0
 8007000:	f000 f8d0 	bl	80071a4 <_lseek_r>
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800700a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	4632      	mov	r2, r6
 8007012:	463b      	mov	r3, r7
 8007014:	4628      	mov	r0, r5
 8007016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800701a:	f000 b8e7 	b.w	80071ec <_write_r>

0800701e <__sseek>:
 800701e:	b510      	push	{r4, lr}
 8007020:	460c      	mov	r4, r1
 8007022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007026:	f000 f8bd 	bl	80071a4 <_lseek_r>
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	bf15      	itete	ne
 8007030:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800703a:	81a3      	strheq	r3, [r4, #12]
 800703c:	bf18      	it	ne
 800703e:	81a3      	strhne	r3, [r4, #12]
 8007040:	bd10      	pop	{r4, pc}

08007042 <__sclose>:
 8007042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007046:	f000 b89d 	b.w	8007184 <_close_r>

0800704a <__swbuf_r>:
 800704a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704c:	460e      	mov	r6, r1
 800704e:	4614      	mov	r4, r2
 8007050:	4605      	mov	r5, r0
 8007052:	b118      	cbz	r0, 800705c <__swbuf_r+0x12>
 8007054:	6a03      	ldr	r3, [r0, #32]
 8007056:	b90b      	cbnz	r3, 800705c <__swbuf_r+0x12>
 8007058:	f7ff ff0e 	bl	8006e78 <__sinit>
 800705c:	69a3      	ldr	r3, [r4, #24]
 800705e:	60a3      	str	r3, [r4, #8]
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	071a      	lsls	r2, r3, #28
 8007064:	d501      	bpl.n	800706a <__swbuf_r+0x20>
 8007066:	6923      	ldr	r3, [r4, #16]
 8007068:	b943      	cbnz	r3, 800707c <__swbuf_r+0x32>
 800706a:	4621      	mov	r1, r4
 800706c:	4628      	mov	r0, r5
 800706e:	f000 f82b 	bl	80070c8 <__swsetup_r>
 8007072:	b118      	cbz	r0, 800707c <__swbuf_r+0x32>
 8007074:	f04f 37ff 	mov.w	r7, #4294967295
 8007078:	4638      	mov	r0, r7
 800707a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	6922      	ldr	r2, [r4, #16]
 8007080:	1a98      	subs	r0, r3, r2
 8007082:	6963      	ldr	r3, [r4, #20]
 8007084:	b2f6      	uxtb	r6, r6
 8007086:	4283      	cmp	r3, r0
 8007088:	4637      	mov	r7, r6
 800708a:	dc05      	bgt.n	8007098 <__swbuf_r+0x4e>
 800708c:	4621      	mov	r1, r4
 800708e:	4628      	mov	r0, r5
 8007090:	f000 fd38 	bl	8007b04 <_fflush_r>
 8007094:	2800      	cmp	r0, #0
 8007096:	d1ed      	bne.n	8007074 <__swbuf_r+0x2a>
 8007098:	68a3      	ldr	r3, [r4, #8]
 800709a:	3b01      	subs	r3, #1
 800709c:	60a3      	str	r3, [r4, #8]
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	6022      	str	r2, [r4, #0]
 80070a4:	701e      	strb	r6, [r3, #0]
 80070a6:	6962      	ldr	r2, [r4, #20]
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d004      	beq.n	80070b8 <__swbuf_r+0x6e>
 80070ae:	89a3      	ldrh	r3, [r4, #12]
 80070b0:	07db      	lsls	r3, r3, #31
 80070b2:	d5e1      	bpl.n	8007078 <__swbuf_r+0x2e>
 80070b4:	2e0a      	cmp	r6, #10
 80070b6:	d1df      	bne.n	8007078 <__swbuf_r+0x2e>
 80070b8:	4621      	mov	r1, r4
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 fd22 	bl	8007b04 <_fflush_r>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d0d9      	beq.n	8007078 <__swbuf_r+0x2e>
 80070c4:	e7d6      	b.n	8007074 <__swbuf_r+0x2a>
	...

080070c8 <__swsetup_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4b29      	ldr	r3, [pc, #164]	@ (8007170 <__swsetup_r+0xa8>)
 80070cc:	4605      	mov	r5, r0
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	460c      	mov	r4, r1
 80070d2:	b118      	cbz	r0, 80070dc <__swsetup_r+0x14>
 80070d4:	6a03      	ldr	r3, [r0, #32]
 80070d6:	b90b      	cbnz	r3, 80070dc <__swsetup_r+0x14>
 80070d8:	f7ff fece 	bl	8006e78 <__sinit>
 80070dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e0:	0719      	lsls	r1, r3, #28
 80070e2:	d422      	bmi.n	800712a <__swsetup_r+0x62>
 80070e4:	06da      	lsls	r2, r3, #27
 80070e6:	d407      	bmi.n	80070f8 <__swsetup_r+0x30>
 80070e8:	2209      	movs	r2, #9
 80070ea:	602a      	str	r2, [r5, #0]
 80070ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070f0:	81a3      	strh	r3, [r4, #12]
 80070f2:	f04f 30ff 	mov.w	r0, #4294967295
 80070f6:	e033      	b.n	8007160 <__swsetup_r+0x98>
 80070f8:	0758      	lsls	r0, r3, #29
 80070fa:	d512      	bpl.n	8007122 <__swsetup_r+0x5a>
 80070fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070fe:	b141      	cbz	r1, 8007112 <__swsetup_r+0x4a>
 8007100:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007104:	4299      	cmp	r1, r3
 8007106:	d002      	beq.n	800710e <__swsetup_r+0x46>
 8007108:	4628      	mov	r0, r5
 800710a:	f000 f8af 	bl	800726c <_free_r>
 800710e:	2300      	movs	r3, #0
 8007110:	6363      	str	r3, [r4, #52]	@ 0x34
 8007112:	89a3      	ldrh	r3, [r4, #12]
 8007114:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007118:	81a3      	strh	r3, [r4, #12]
 800711a:	2300      	movs	r3, #0
 800711c:	6063      	str	r3, [r4, #4]
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	f043 0308 	orr.w	r3, r3, #8
 8007128:	81a3      	strh	r3, [r4, #12]
 800712a:	6923      	ldr	r3, [r4, #16]
 800712c:	b94b      	cbnz	r3, 8007142 <__swsetup_r+0x7a>
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007138:	d003      	beq.n	8007142 <__swsetup_r+0x7a>
 800713a:	4621      	mov	r1, r4
 800713c:	4628      	mov	r0, r5
 800713e:	f000 fd2f 	bl	8007ba0 <__smakebuf_r>
 8007142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007146:	f013 0201 	ands.w	r2, r3, #1
 800714a:	d00a      	beq.n	8007162 <__swsetup_r+0x9a>
 800714c:	2200      	movs	r2, #0
 800714e:	60a2      	str	r2, [r4, #8]
 8007150:	6962      	ldr	r2, [r4, #20]
 8007152:	4252      	negs	r2, r2
 8007154:	61a2      	str	r2, [r4, #24]
 8007156:	6922      	ldr	r2, [r4, #16]
 8007158:	b942      	cbnz	r2, 800716c <__swsetup_r+0xa4>
 800715a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800715e:	d1c5      	bne.n	80070ec <__swsetup_r+0x24>
 8007160:	bd38      	pop	{r3, r4, r5, pc}
 8007162:	0799      	lsls	r1, r3, #30
 8007164:	bf58      	it	pl
 8007166:	6962      	ldrpl	r2, [r4, #20]
 8007168:	60a2      	str	r2, [r4, #8]
 800716a:	e7f4      	b.n	8007156 <__swsetup_r+0x8e>
 800716c:	2000      	movs	r0, #0
 800716e:	e7f7      	b.n	8007160 <__swsetup_r+0x98>
 8007170:	20000018 	.word	0x20000018

08007174 <memset>:
 8007174:	4402      	add	r2, r0
 8007176:	4603      	mov	r3, r0
 8007178:	4293      	cmp	r3, r2
 800717a:	d100      	bne.n	800717e <memset+0xa>
 800717c:	4770      	bx	lr
 800717e:	f803 1b01 	strb.w	r1, [r3], #1
 8007182:	e7f9      	b.n	8007178 <memset+0x4>

08007184 <_close_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4d06      	ldr	r5, [pc, #24]	@ (80071a0 <_close_r+0x1c>)
 8007188:	2300      	movs	r3, #0
 800718a:	4604      	mov	r4, r0
 800718c:	4608      	mov	r0, r1
 800718e:	602b      	str	r3, [r5, #0]
 8007190:	f7fb ffbc 	bl	800310c <_close>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d102      	bne.n	800719e <_close_r+0x1a>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	b103      	cbz	r3, 800719e <_close_r+0x1a>
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	bd38      	pop	{r3, r4, r5, pc}
 80071a0:	200004f8 	.word	0x200004f8

080071a4 <_lseek_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	4d07      	ldr	r5, [pc, #28]	@ (80071c4 <_lseek_r+0x20>)
 80071a8:	4604      	mov	r4, r0
 80071aa:	4608      	mov	r0, r1
 80071ac:	4611      	mov	r1, r2
 80071ae:	2200      	movs	r2, #0
 80071b0:	602a      	str	r2, [r5, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	f7fb ffd1 	bl	800315a <_lseek>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d102      	bne.n	80071c2 <_lseek_r+0x1e>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	b103      	cbz	r3, 80071c2 <_lseek_r+0x1e>
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	200004f8 	.word	0x200004f8

080071c8 <_read_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4d07      	ldr	r5, [pc, #28]	@ (80071e8 <_read_r+0x20>)
 80071cc:	4604      	mov	r4, r0
 80071ce:	4608      	mov	r0, r1
 80071d0:	4611      	mov	r1, r2
 80071d2:	2200      	movs	r2, #0
 80071d4:	602a      	str	r2, [r5, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	f7fb ff5f 	bl	800309a <_read>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d102      	bne.n	80071e6 <_read_r+0x1e>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	b103      	cbz	r3, 80071e6 <_read_r+0x1e>
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	200004f8 	.word	0x200004f8

080071ec <_write_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4d07      	ldr	r5, [pc, #28]	@ (800720c <_write_r+0x20>)
 80071f0:	4604      	mov	r4, r0
 80071f2:	4608      	mov	r0, r1
 80071f4:	4611      	mov	r1, r2
 80071f6:	2200      	movs	r2, #0
 80071f8:	602a      	str	r2, [r5, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f7fb ff6a 	bl	80030d4 <_write>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d102      	bne.n	800720a <_write_r+0x1e>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	b103      	cbz	r3, 800720a <_write_r+0x1e>
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	200004f8 	.word	0x200004f8

08007210 <__errno>:
 8007210:	4b01      	ldr	r3, [pc, #4]	@ (8007218 <__errno+0x8>)
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20000018 	.word	0x20000018

0800721c <__libc_init_array>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	4d0d      	ldr	r5, [pc, #52]	@ (8007254 <__libc_init_array+0x38>)
 8007220:	4c0d      	ldr	r4, [pc, #52]	@ (8007258 <__libc_init_array+0x3c>)
 8007222:	1b64      	subs	r4, r4, r5
 8007224:	10a4      	asrs	r4, r4, #2
 8007226:	2600      	movs	r6, #0
 8007228:	42a6      	cmp	r6, r4
 800722a:	d109      	bne.n	8007240 <__libc_init_array+0x24>
 800722c:	4d0b      	ldr	r5, [pc, #44]	@ (800725c <__libc_init_array+0x40>)
 800722e:	4c0c      	ldr	r4, [pc, #48]	@ (8007260 <__libc_init_array+0x44>)
 8007230:	f000 fd24 	bl	8007c7c <_init>
 8007234:	1b64      	subs	r4, r4, r5
 8007236:	10a4      	asrs	r4, r4, #2
 8007238:	2600      	movs	r6, #0
 800723a:	42a6      	cmp	r6, r4
 800723c:	d105      	bne.n	800724a <__libc_init_array+0x2e>
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	f855 3b04 	ldr.w	r3, [r5], #4
 8007244:	4798      	blx	r3
 8007246:	3601      	adds	r6, #1
 8007248:	e7ee      	b.n	8007228 <__libc_init_array+0xc>
 800724a:	f855 3b04 	ldr.w	r3, [r5], #4
 800724e:	4798      	blx	r3
 8007250:	3601      	adds	r6, #1
 8007252:	e7f2      	b.n	800723a <__libc_init_array+0x1e>
 8007254:	08007ec4 	.word	0x08007ec4
 8007258:	08007ec4 	.word	0x08007ec4
 800725c:	08007ec4 	.word	0x08007ec4
 8007260:	08007ec8 	.word	0x08007ec8

08007264 <__retarget_lock_init_recursive>:
 8007264:	4770      	bx	lr

08007266 <__retarget_lock_acquire_recursive>:
 8007266:	4770      	bx	lr

08007268 <__retarget_lock_release_recursive>:
 8007268:	4770      	bx	lr
	...

0800726c <_free_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4605      	mov	r5, r0
 8007270:	2900      	cmp	r1, #0
 8007272:	d041      	beq.n	80072f8 <_free_r+0x8c>
 8007274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007278:	1f0c      	subs	r4, r1, #4
 800727a:	2b00      	cmp	r3, #0
 800727c:	bfb8      	it	lt
 800727e:	18e4      	addlt	r4, r4, r3
 8007280:	f000 f8e0 	bl	8007444 <__malloc_lock>
 8007284:	4a1d      	ldr	r2, [pc, #116]	@ (80072fc <_free_r+0x90>)
 8007286:	6813      	ldr	r3, [r2, #0]
 8007288:	b933      	cbnz	r3, 8007298 <_free_r+0x2c>
 800728a:	6063      	str	r3, [r4, #4]
 800728c:	6014      	str	r4, [r2, #0]
 800728e:	4628      	mov	r0, r5
 8007290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007294:	f000 b8dc 	b.w	8007450 <__malloc_unlock>
 8007298:	42a3      	cmp	r3, r4
 800729a:	d908      	bls.n	80072ae <_free_r+0x42>
 800729c:	6820      	ldr	r0, [r4, #0]
 800729e:	1821      	adds	r1, r4, r0
 80072a0:	428b      	cmp	r3, r1
 80072a2:	bf01      	itttt	eq
 80072a4:	6819      	ldreq	r1, [r3, #0]
 80072a6:	685b      	ldreq	r3, [r3, #4]
 80072a8:	1809      	addeq	r1, r1, r0
 80072aa:	6021      	streq	r1, [r4, #0]
 80072ac:	e7ed      	b.n	800728a <_free_r+0x1e>
 80072ae:	461a      	mov	r2, r3
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	b10b      	cbz	r3, 80072b8 <_free_r+0x4c>
 80072b4:	42a3      	cmp	r3, r4
 80072b6:	d9fa      	bls.n	80072ae <_free_r+0x42>
 80072b8:	6811      	ldr	r1, [r2, #0]
 80072ba:	1850      	adds	r0, r2, r1
 80072bc:	42a0      	cmp	r0, r4
 80072be:	d10b      	bne.n	80072d8 <_free_r+0x6c>
 80072c0:	6820      	ldr	r0, [r4, #0]
 80072c2:	4401      	add	r1, r0
 80072c4:	1850      	adds	r0, r2, r1
 80072c6:	4283      	cmp	r3, r0
 80072c8:	6011      	str	r1, [r2, #0]
 80072ca:	d1e0      	bne.n	800728e <_free_r+0x22>
 80072cc:	6818      	ldr	r0, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	6053      	str	r3, [r2, #4]
 80072d2:	4408      	add	r0, r1
 80072d4:	6010      	str	r0, [r2, #0]
 80072d6:	e7da      	b.n	800728e <_free_r+0x22>
 80072d8:	d902      	bls.n	80072e0 <_free_r+0x74>
 80072da:	230c      	movs	r3, #12
 80072dc:	602b      	str	r3, [r5, #0]
 80072de:	e7d6      	b.n	800728e <_free_r+0x22>
 80072e0:	6820      	ldr	r0, [r4, #0]
 80072e2:	1821      	adds	r1, r4, r0
 80072e4:	428b      	cmp	r3, r1
 80072e6:	bf04      	itt	eq
 80072e8:	6819      	ldreq	r1, [r3, #0]
 80072ea:	685b      	ldreq	r3, [r3, #4]
 80072ec:	6063      	str	r3, [r4, #4]
 80072ee:	bf04      	itt	eq
 80072f0:	1809      	addeq	r1, r1, r0
 80072f2:	6021      	streq	r1, [r4, #0]
 80072f4:	6054      	str	r4, [r2, #4]
 80072f6:	e7ca      	b.n	800728e <_free_r+0x22>
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	bf00      	nop
 80072fc:	20000504 	.word	0x20000504

08007300 <sbrk_aligned>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	4e0f      	ldr	r6, [pc, #60]	@ (8007340 <sbrk_aligned+0x40>)
 8007304:	460c      	mov	r4, r1
 8007306:	6831      	ldr	r1, [r6, #0]
 8007308:	4605      	mov	r5, r0
 800730a:	b911      	cbnz	r1, 8007312 <sbrk_aligned+0x12>
 800730c:	f000 fca6 	bl	8007c5c <_sbrk_r>
 8007310:	6030      	str	r0, [r6, #0]
 8007312:	4621      	mov	r1, r4
 8007314:	4628      	mov	r0, r5
 8007316:	f000 fca1 	bl	8007c5c <_sbrk_r>
 800731a:	1c43      	adds	r3, r0, #1
 800731c:	d103      	bne.n	8007326 <sbrk_aligned+0x26>
 800731e:	f04f 34ff 	mov.w	r4, #4294967295
 8007322:	4620      	mov	r0, r4
 8007324:	bd70      	pop	{r4, r5, r6, pc}
 8007326:	1cc4      	adds	r4, r0, #3
 8007328:	f024 0403 	bic.w	r4, r4, #3
 800732c:	42a0      	cmp	r0, r4
 800732e:	d0f8      	beq.n	8007322 <sbrk_aligned+0x22>
 8007330:	1a21      	subs	r1, r4, r0
 8007332:	4628      	mov	r0, r5
 8007334:	f000 fc92 	bl	8007c5c <_sbrk_r>
 8007338:	3001      	adds	r0, #1
 800733a:	d1f2      	bne.n	8007322 <sbrk_aligned+0x22>
 800733c:	e7ef      	b.n	800731e <sbrk_aligned+0x1e>
 800733e:	bf00      	nop
 8007340:	20000500 	.word	0x20000500

08007344 <_malloc_r>:
 8007344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007348:	1ccd      	adds	r5, r1, #3
 800734a:	f025 0503 	bic.w	r5, r5, #3
 800734e:	3508      	adds	r5, #8
 8007350:	2d0c      	cmp	r5, #12
 8007352:	bf38      	it	cc
 8007354:	250c      	movcc	r5, #12
 8007356:	2d00      	cmp	r5, #0
 8007358:	4606      	mov	r6, r0
 800735a:	db01      	blt.n	8007360 <_malloc_r+0x1c>
 800735c:	42a9      	cmp	r1, r5
 800735e:	d904      	bls.n	800736a <_malloc_r+0x26>
 8007360:	230c      	movs	r3, #12
 8007362:	6033      	str	r3, [r6, #0]
 8007364:	2000      	movs	r0, #0
 8007366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007440 <_malloc_r+0xfc>
 800736e:	f000 f869 	bl	8007444 <__malloc_lock>
 8007372:	f8d8 3000 	ldr.w	r3, [r8]
 8007376:	461c      	mov	r4, r3
 8007378:	bb44      	cbnz	r4, 80073cc <_malloc_r+0x88>
 800737a:	4629      	mov	r1, r5
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff ffbf 	bl	8007300 <sbrk_aligned>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	4604      	mov	r4, r0
 8007386:	d158      	bne.n	800743a <_malloc_r+0xf6>
 8007388:	f8d8 4000 	ldr.w	r4, [r8]
 800738c:	4627      	mov	r7, r4
 800738e:	2f00      	cmp	r7, #0
 8007390:	d143      	bne.n	800741a <_malloc_r+0xd6>
 8007392:	2c00      	cmp	r4, #0
 8007394:	d04b      	beq.n	800742e <_malloc_r+0xea>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	4639      	mov	r1, r7
 800739a:	4630      	mov	r0, r6
 800739c:	eb04 0903 	add.w	r9, r4, r3
 80073a0:	f000 fc5c 	bl	8007c5c <_sbrk_r>
 80073a4:	4581      	cmp	r9, r0
 80073a6:	d142      	bne.n	800742e <_malloc_r+0xea>
 80073a8:	6821      	ldr	r1, [r4, #0]
 80073aa:	1a6d      	subs	r5, r5, r1
 80073ac:	4629      	mov	r1, r5
 80073ae:	4630      	mov	r0, r6
 80073b0:	f7ff ffa6 	bl	8007300 <sbrk_aligned>
 80073b4:	3001      	adds	r0, #1
 80073b6:	d03a      	beq.n	800742e <_malloc_r+0xea>
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	442b      	add	r3, r5
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	f8d8 3000 	ldr.w	r3, [r8]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	bb62      	cbnz	r2, 8007420 <_malloc_r+0xdc>
 80073c6:	f8c8 7000 	str.w	r7, [r8]
 80073ca:	e00f      	b.n	80073ec <_malloc_r+0xa8>
 80073cc:	6822      	ldr	r2, [r4, #0]
 80073ce:	1b52      	subs	r2, r2, r5
 80073d0:	d420      	bmi.n	8007414 <_malloc_r+0xd0>
 80073d2:	2a0b      	cmp	r2, #11
 80073d4:	d917      	bls.n	8007406 <_malloc_r+0xc2>
 80073d6:	1961      	adds	r1, r4, r5
 80073d8:	42a3      	cmp	r3, r4
 80073da:	6025      	str	r5, [r4, #0]
 80073dc:	bf18      	it	ne
 80073de:	6059      	strne	r1, [r3, #4]
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	bf08      	it	eq
 80073e4:	f8c8 1000 	streq.w	r1, [r8]
 80073e8:	5162      	str	r2, [r4, r5]
 80073ea:	604b      	str	r3, [r1, #4]
 80073ec:	4630      	mov	r0, r6
 80073ee:	f000 f82f 	bl	8007450 <__malloc_unlock>
 80073f2:	f104 000b 	add.w	r0, r4, #11
 80073f6:	1d23      	adds	r3, r4, #4
 80073f8:	f020 0007 	bic.w	r0, r0, #7
 80073fc:	1ac2      	subs	r2, r0, r3
 80073fe:	bf1c      	itt	ne
 8007400:	1a1b      	subne	r3, r3, r0
 8007402:	50a3      	strne	r3, [r4, r2]
 8007404:	e7af      	b.n	8007366 <_malloc_r+0x22>
 8007406:	6862      	ldr	r2, [r4, #4]
 8007408:	42a3      	cmp	r3, r4
 800740a:	bf0c      	ite	eq
 800740c:	f8c8 2000 	streq.w	r2, [r8]
 8007410:	605a      	strne	r2, [r3, #4]
 8007412:	e7eb      	b.n	80073ec <_malloc_r+0xa8>
 8007414:	4623      	mov	r3, r4
 8007416:	6864      	ldr	r4, [r4, #4]
 8007418:	e7ae      	b.n	8007378 <_malloc_r+0x34>
 800741a:	463c      	mov	r4, r7
 800741c:	687f      	ldr	r7, [r7, #4]
 800741e:	e7b6      	b.n	800738e <_malloc_r+0x4a>
 8007420:	461a      	mov	r2, r3
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	42a3      	cmp	r3, r4
 8007426:	d1fb      	bne.n	8007420 <_malloc_r+0xdc>
 8007428:	2300      	movs	r3, #0
 800742a:	6053      	str	r3, [r2, #4]
 800742c:	e7de      	b.n	80073ec <_malloc_r+0xa8>
 800742e:	230c      	movs	r3, #12
 8007430:	6033      	str	r3, [r6, #0]
 8007432:	4630      	mov	r0, r6
 8007434:	f000 f80c 	bl	8007450 <__malloc_unlock>
 8007438:	e794      	b.n	8007364 <_malloc_r+0x20>
 800743a:	6005      	str	r5, [r0, #0]
 800743c:	e7d6      	b.n	80073ec <_malloc_r+0xa8>
 800743e:	bf00      	nop
 8007440:	20000504 	.word	0x20000504

08007444 <__malloc_lock>:
 8007444:	4801      	ldr	r0, [pc, #4]	@ (800744c <__malloc_lock+0x8>)
 8007446:	f7ff bf0e 	b.w	8007266 <__retarget_lock_acquire_recursive>
 800744a:	bf00      	nop
 800744c:	200004fc 	.word	0x200004fc

08007450 <__malloc_unlock>:
 8007450:	4801      	ldr	r0, [pc, #4]	@ (8007458 <__malloc_unlock+0x8>)
 8007452:	f7ff bf09 	b.w	8007268 <__retarget_lock_release_recursive>
 8007456:	bf00      	nop
 8007458:	200004fc 	.word	0x200004fc

0800745c <__sfputc_r>:
 800745c:	6893      	ldr	r3, [r2, #8]
 800745e:	3b01      	subs	r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	b410      	push	{r4}
 8007464:	6093      	str	r3, [r2, #8]
 8007466:	da08      	bge.n	800747a <__sfputc_r+0x1e>
 8007468:	6994      	ldr	r4, [r2, #24]
 800746a:	42a3      	cmp	r3, r4
 800746c:	db01      	blt.n	8007472 <__sfputc_r+0x16>
 800746e:	290a      	cmp	r1, #10
 8007470:	d103      	bne.n	800747a <__sfputc_r+0x1e>
 8007472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007476:	f7ff bde8 	b.w	800704a <__swbuf_r>
 800747a:	6813      	ldr	r3, [r2, #0]
 800747c:	1c58      	adds	r0, r3, #1
 800747e:	6010      	str	r0, [r2, #0]
 8007480:	7019      	strb	r1, [r3, #0]
 8007482:	4608      	mov	r0, r1
 8007484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007488:	4770      	bx	lr

0800748a <__sfputs_r>:
 800748a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748c:	4606      	mov	r6, r0
 800748e:	460f      	mov	r7, r1
 8007490:	4614      	mov	r4, r2
 8007492:	18d5      	adds	r5, r2, r3
 8007494:	42ac      	cmp	r4, r5
 8007496:	d101      	bne.n	800749c <__sfputs_r+0x12>
 8007498:	2000      	movs	r0, #0
 800749a:	e007      	b.n	80074ac <__sfputs_r+0x22>
 800749c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a0:	463a      	mov	r2, r7
 80074a2:	4630      	mov	r0, r6
 80074a4:	f7ff ffda 	bl	800745c <__sfputc_r>
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	d1f3      	bne.n	8007494 <__sfputs_r+0xa>
 80074ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074b0 <_vfiprintf_r>:
 80074b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	460d      	mov	r5, r1
 80074b6:	b09d      	sub	sp, #116	@ 0x74
 80074b8:	4614      	mov	r4, r2
 80074ba:	4698      	mov	r8, r3
 80074bc:	4606      	mov	r6, r0
 80074be:	b118      	cbz	r0, 80074c8 <_vfiprintf_r+0x18>
 80074c0:	6a03      	ldr	r3, [r0, #32]
 80074c2:	b90b      	cbnz	r3, 80074c8 <_vfiprintf_r+0x18>
 80074c4:	f7ff fcd8 	bl	8006e78 <__sinit>
 80074c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074ca:	07d9      	lsls	r1, r3, #31
 80074cc:	d405      	bmi.n	80074da <_vfiprintf_r+0x2a>
 80074ce:	89ab      	ldrh	r3, [r5, #12]
 80074d0:	059a      	lsls	r2, r3, #22
 80074d2:	d402      	bmi.n	80074da <_vfiprintf_r+0x2a>
 80074d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074d6:	f7ff fec6 	bl	8007266 <__retarget_lock_acquire_recursive>
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	071b      	lsls	r3, r3, #28
 80074de:	d501      	bpl.n	80074e4 <_vfiprintf_r+0x34>
 80074e0:	692b      	ldr	r3, [r5, #16]
 80074e2:	b99b      	cbnz	r3, 800750c <_vfiprintf_r+0x5c>
 80074e4:	4629      	mov	r1, r5
 80074e6:	4630      	mov	r0, r6
 80074e8:	f7ff fdee 	bl	80070c8 <__swsetup_r>
 80074ec:	b170      	cbz	r0, 800750c <_vfiprintf_r+0x5c>
 80074ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074f0:	07dc      	lsls	r4, r3, #31
 80074f2:	d504      	bpl.n	80074fe <_vfiprintf_r+0x4e>
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295
 80074f8:	b01d      	add	sp, #116	@ 0x74
 80074fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fe:	89ab      	ldrh	r3, [r5, #12]
 8007500:	0598      	lsls	r0, r3, #22
 8007502:	d4f7      	bmi.n	80074f4 <_vfiprintf_r+0x44>
 8007504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007506:	f7ff feaf 	bl	8007268 <__retarget_lock_release_recursive>
 800750a:	e7f3      	b.n	80074f4 <_vfiprintf_r+0x44>
 800750c:	2300      	movs	r3, #0
 800750e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007510:	2320      	movs	r3, #32
 8007512:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007516:	f8cd 800c 	str.w	r8, [sp, #12]
 800751a:	2330      	movs	r3, #48	@ 0x30
 800751c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076cc <_vfiprintf_r+0x21c>
 8007520:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007524:	f04f 0901 	mov.w	r9, #1
 8007528:	4623      	mov	r3, r4
 800752a:	469a      	mov	sl, r3
 800752c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007530:	b10a      	cbz	r2, 8007536 <_vfiprintf_r+0x86>
 8007532:	2a25      	cmp	r2, #37	@ 0x25
 8007534:	d1f9      	bne.n	800752a <_vfiprintf_r+0x7a>
 8007536:	ebba 0b04 	subs.w	fp, sl, r4
 800753a:	d00b      	beq.n	8007554 <_vfiprintf_r+0xa4>
 800753c:	465b      	mov	r3, fp
 800753e:	4622      	mov	r2, r4
 8007540:	4629      	mov	r1, r5
 8007542:	4630      	mov	r0, r6
 8007544:	f7ff ffa1 	bl	800748a <__sfputs_r>
 8007548:	3001      	adds	r0, #1
 800754a:	f000 80a7 	beq.w	800769c <_vfiprintf_r+0x1ec>
 800754e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007550:	445a      	add	r2, fp
 8007552:	9209      	str	r2, [sp, #36]	@ 0x24
 8007554:	f89a 3000 	ldrb.w	r3, [sl]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 809f 	beq.w	800769c <_vfiprintf_r+0x1ec>
 800755e:	2300      	movs	r3, #0
 8007560:	f04f 32ff 	mov.w	r2, #4294967295
 8007564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007568:	f10a 0a01 	add.w	sl, sl, #1
 800756c:	9304      	str	r3, [sp, #16]
 800756e:	9307      	str	r3, [sp, #28]
 8007570:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007574:	931a      	str	r3, [sp, #104]	@ 0x68
 8007576:	4654      	mov	r4, sl
 8007578:	2205      	movs	r2, #5
 800757a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757e:	4853      	ldr	r0, [pc, #332]	@ (80076cc <_vfiprintf_r+0x21c>)
 8007580:	f7f8 fe2e 	bl	80001e0 <memchr>
 8007584:	9a04      	ldr	r2, [sp, #16]
 8007586:	b9d8      	cbnz	r0, 80075c0 <_vfiprintf_r+0x110>
 8007588:	06d1      	lsls	r1, r2, #27
 800758a:	bf44      	itt	mi
 800758c:	2320      	movmi	r3, #32
 800758e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007592:	0713      	lsls	r3, r2, #28
 8007594:	bf44      	itt	mi
 8007596:	232b      	movmi	r3, #43	@ 0x2b
 8007598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800759c:	f89a 3000 	ldrb.w	r3, [sl]
 80075a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80075a2:	d015      	beq.n	80075d0 <_vfiprintf_r+0x120>
 80075a4:	9a07      	ldr	r2, [sp, #28]
 80075a6:	4654      	mov	r4, sl
 80075a8:	2000      	movs	r0, #0
 80075aa:	f04f 0c0a 	mov.w	ip, #10
 80075ae:	4621      	mov	r1, r4
 80075b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075b4:	3b30      	subs	r3, #48	@ 0x30
 80075b6:	2b09      	cmp	r3, #9
 80075b8:	d94b      	bls.n	8007652 <_vfiprintf_r+0x1a2>
 80075ba:	b1b0      	cbz	r0, 80075ea <_vfiprintf_r+0x13a>
 80075bc:	9207      	str	r2, [sp, #28]
 80075be:	e014      	b.n	80075ea <_vfiprintf_r+0x13a>
 80075c0:	eba0 0308 	sub.w	r3, r0, r8
 80075c4:	fa09 f303 	lsl.w	r3, r9, r3
 80075c8:	4313      	orrs	r3, r2
 80075ca:	9304      	str	r3, [sp, #16]
 80075cc:	46a2      	mov	sl, r4
 80075ce:	e7d2      	b.n	8007576 <_vfiprintf_r+0xc6>
 80075d0:	9b03      	ldr	r3, [sp, #12]
 80075d2:	1d19      	adds	r1, r3, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	9103      	str	r1, [sp, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bfbb      	ittet	lt
 80075dc:	425b      	neglt	r3, r3
 80075de:	f042 0202 	orrlt.w	r2, r2, #2
 80075e2:	9307      	strge	r3, [sp, #28]
 80075e4:	9307      	strlt	r3, [sp, #28]
 80075e6:	bfb8      	it	lt
 80075e8:	9204      	strlt	r2, [sp, #16]
 80075ea:	7823      	ldrb	r3, [r4, #0]
 80075ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80075ee:	d10a      	bne.n	8007606 <_vfiprintf_r+0x156>
 80075f0:	7863      	ldrb	r3, [r4, #1]
 80075f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80075f4:	d132      	bne.n	800765c <_vfiprintf_r+0x1ac>
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	1d1a      	adds	r2, r3, #4
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	9203      	str	r2, [sp, #12]
 80075fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007602:	3402      	adds	r4, #2
 8007604:	9305      	str	r3, [sp, #20]
 8007606:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076dc <_vfiprintf_r+0x22c>
 800760a:	7821      	ldrb	r1, [r4, #0]
 800760c:	2203      	movs	r2, #3
 800760e:	4650      	mov	r0, sl
 8007610:	f7f8 fde6 	bl	80001e0 <memchr>
 8007614:	b138      	cbz	r0, 8007626 <_vfiprintf_r+0x176>
 8007616:	9b04      	ldr	r3, [sp, #16]
 8007618:	eba0 000a 	sub.w	r0, r0, sl
 800761c:	2240      	movs	r2, #64	@ 0x40
 800761e:	4082      	lsls	r2, r0
 8007620:	4313      	orrs	r3, r2
 8007622:	3401      	adds	r4, #1
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800762a:	4829      	ldr	r0, [pc, #164]	@ (80076d0 <_vfiprintf_r+0x220>)
 800762c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007630:	2206      	movs	r2, #6
 8007632:	f7f8 fdd5 	bl	80001e0 <memchr>
 8007636:	2800      	cmp	r0, #0
 8007638:	d03f      	beq.n	80076ba <_vfiprintf_r+0x20a>
 800763a:	4b26      	ldr	r3, [pc, #152]	@ (80076d4 <_vfiprintf_r+0x224>)
 800763c:	bb1b      	cbnz	r3, 8007686 <_vfiprintf_r+0x1d6>
 800763e:	9b03      	ldr	r3, [sp, #12]
 8007640:	3307      	adds	r3, #7
 8007642:	f023 0307 	bic.w	r3, r3, #7
 8007646:	3308      	adds	r3, #8
 8007648:	9303      	str	r3, [sp, #12]
 800764a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764c:	443b      	add	r3, r7
 800764e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007650:	e76a      	b.n	8007528 <_vfiprintf_r+0x78>
 8007652:	fb0c 3202 	mla	r2, ip, r2, r3
 8007656:	460c      	mov	r4, r1
 8007658:	2001      	movs	r0, #1
 800765a:	e7a8      	b.n	80075ae <_vfiprintf_r+0xfe>
 800765c:	2300      	movs	r3, #0
 800765e:	3401      	adds	r4, #1
 8007660:	9305      	str	r3, [sp, #20]
 8007662:	4619      	mov	r1, r3
 8007664:	f04f 0c0a 	mov.w	ip, #10
 8007668:	4620      	mov	r0, r4
 800766a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800766e:	3a30      	subs	r2, #48	@ 0x30
 8007670:	2a09      	cmp	r2, #9
 8007672:	d903      	bls.n	800767c <_vfiprintf_r+0x1cc>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0c6      	beq.n	8007606 <_vfiprintf_r+0x156>
 8007678:	9105      	str	r1, [sp, #20]
 800767a:	e7c4      	b.n	8007606 <_vfiprintf_r+0x156>
 800767c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007680:	4604      	mov	r4, r0
 8007682:	2301      	movs	r3, #1
 8007684:	e7f0      	b.n	8007668 <_vfiprintf_r+0x1b8>
 8007686:	ab03      	add	r3, sp, #12
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	462a      	mov	r2, r5
 800768c:	4b12      	ldr	r3, [pc, #72]	@ (80076d8 <_vfiprintf_r+0x228>)
 800768e:	a904      	add	r1, sp, #16
 8007690:	4630      	mov	r0, r6
 8007692:	f3af 8000 	nop.w
 8007696:	4607      	mov	r7, r0
 8007698:	1c78      	adds	r0, r7, #1
 800769a:	d1d6      	bne.n	800764a <_vfiprintf_r+0x19a>
 800769c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800769e:	07d9      	lsls	r1, r3, #31
 80076a0:	d405      	bmi.n	80076ae <_vfiprintf_r+0x1fe>
 80076a2:	89ab      	ldrh	r3, [r5, #12]
 80076a4:	059a      	lsls	r2, r3, #22
 80076a6:	d402      	bmi.n	80076ae <_vfiprintf_r+0x1fe>
 80076a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076aa:	f7ff fddd 	bl	8007268 <__retarget_lock_release_recursive>
 80076ae:	89ab      	ldrh	r3, [r5, #12]
 80076b0:	065b      	lsls	r3, r3, #25
 80076b2:	f53f af1f 	bmi.w	80074f4 <_vfiprintf_r+0x44>
 80076b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076b8:	e71e      	b.n	80074f8 <_vfiprintf_r+0x48>
 80076ba:	ab03      	add	r3, sp, #12
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	462a      	mov	r2, r5
 80076c0:	4b05      	ldr	r3, [pc, #20]	@ (80076d8 <_vfiprintf_r+0x228>)
 80076c2:	a904      	add	r1, sp, #16
 80076c4:	4630      	mov	r0, r6
 80076c6:	f000 f879 	bl	80077bc <_printf_i>
 80076ca:	e7e4      	b.n	8007696 <_vfiprintf_r+0x1e6>
 80076cc:	08007e88 	.word	0x08007e88
 80076d0:	08007e92 	.word	0x08007e92
 80076d4:	00000000 	.word	0x00000000
 80076d8:	0800748b 	.word	0x0800748b
 80076dc:	08007e8e 	.word	0x08007e8e

080076e0 <_printf_common>:
 80076e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e4:	4616      	mov	r6, r2
 80076e6:	4698      	mov	r8, r3
 80076e8:	688a      	ldr	r2, [r1, #8]
 80076ea:	690b      	ldr	r3, [r1, #16]
 80076ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076f0:	4293      	cmp	r3, r2
 80076f2:	bfb8      	it	lt
 80076f4:	4613      	movlt	r3, r2
 80076f6:	6033      	str	r3, [r6, #0]
 80076f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076fc:	4607      	mov	r7, r0
 80076fe:	460c      	mov	r4, r1
 8007700:	b10a      	cbz	r2, 8007706 <_printf_common+0x26>
 8007702:	3301      	adds	r3, #1
 8007704:	6033      	str	r3, [r6, #0]
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	0699      	lsls	r1, r3, #26
 800770a:	bf42      	ittt	mi
 800770c:	6833      	ldrmi	r3, [r6, #0]
 800770e:	3302      	addmi	r3, #2
 8007710:	6033      	strmi	r3, [r6, #0]
 8007712:	6825      	ldr	r5, [r4, #0]
 8007714:	f015 0506 	ands.w	r5, r5, #6
 8007718:	d106      	bne.n	8007728 <_printf_common+0x48>
 800771a:	f104 0a19 	add.w	sl, r4, #25
 800771e:	68e3      	ldr	r3, [r4, #12]
 8007720:	6832      	ldr	r2, [r6, #0]
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	42ab      	cmp	r3, r5
 8007726:	dc26      	bgt.n	8007776 <_printf_common+0x96>
 8007728:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800772c:	6822      	ldr	r2, [r4, #0]
 800772e:	3b00      	subs	r3, #0
 8007730:	bf18      	it	ne
 8007732:	2301      	movne	r3, #1
 8007734:	0692      	lsls	r2, r2, #26
 8007736:	d42b      	bmi.n	8007790 <_printf_common+0xb0>
 8007738:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800773c:	4641      	mov	r1, r8
 800773e:	4638      	mov	r0, r7
 8007740:	47c8      	blx	r9
 8007742:	3001      	adds	r0, #1
 8007744:	d01e      	beq.n	8007784 <_printf_common+0xa4>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	6922      	ldr	r2, [r4, #16]
 800774a:	f003 0306 	and.w	r3, r3, #6
 800774e:	2b04      	cmp	r3, #4
 8007750:	bf02      	ittt	eq
 8007752:	68e5      	ldreq	r5, [r4, #12]
 8007754:	6833      	ldreq	r3, [r6, #0]
 8007756:	1aed      	subeq	r5, r5, r3
 8007758:	68a3      	ldr	r3, [r4, #8]
 800775a:	bf0c      	ite	eq
 800775c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007760:	2500      	movne	r5, #0
 8007762:	4293      	cmp	r3, r2
 8007764:	bfc4      	itt	gt
 8007766:	1a9b      	subgt	r3, r3, r2
 8007768:	18ed      	addgt	r5, r5, r3
 800776a:	2600      	movs	r6, #0
 800776c:	341a      	adds	r4, #26
 800776e:	42b5      	cmp	r5, r6
 8007770:	d11a      	bne.n	80077a8 <_printf_common+0xc8>
 8007772:	2000      	movs	r0, #0
 8007774:	e008      	b.n	8007788 <_printf_common+0xa8>
 8007776:	2301      	movs	r3, #1
 8007778:	4652      	mov	r2, sl
 800777a:	4641      	mov	r1, r8
 800777c:	4638      	mov	r0, r7
 800777e:	47c8      	blx	r9
 8007780:	3001      	adds	r0, #1
 8007782:	d103      	bne.n	800778c <_printf_common+0xac>
 8007784:	f04f 30ff 	mov.w	r0, #4294967295
 8007788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778c:	3501      	adds	r5, #1
 800778e:	e7c6      	b.n	800771e <_printf_common+0x3e>
 8007790:	18e1      	adds	r1, r4, r3
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	2030      	movs	r0, #48	@ 0x30
 8007796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800779a:	4422      	add	r2, r4
 800779c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077a4:	3302      	adds	r3, #2
 80077a6:	e7c7      	b.n	8007738 <_printf_common+0x58>
 80077a8:	2301      	movs	r3, #1
 80077aa:	4622      	mov	r2, r4
 80077ac:	4641      	mov	r1, r8
 80077ae:	4638      	mov	r0, r7
 80077b0:	47c8      	blx	r9
 80077b2:	3001      	adds	r0, #1
 80077b4:	d0e6      	beq.n	8007784 <_printf_common+0xa4>
 80077b6:	3601      	adds	r6, #1
 80077b8:	e7d9      	b.n	800776e <_printf_common+0x8e>
	...

080077bc <_printf_i>:
 80077bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077c0:	7e0f      	ldrb	r7, [r1, #24]
 80077c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077c4:	2f78      	cmp	r7, #120	@ 0x78
 80077c6:	4691      	mov	r9, r2
 80077c8:	4680      	mov	r8, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	469a      	mov	sl, r3
 80077ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077d2:	d807      	bhi.n	80077e4 <_printf_i+0x28>
 80077d4:	2f62      	cmp	r7, #98	@ 0x62
 80077d6:	d80a      	bhi.n	80077ee <_printf_i+0x32>
 80077d8:	2f00      	cmp	r7, #0
 80077da:	f000 80d2 	beq.w	8007982 <_printf_i+0x1c6>
 80077de:	2f58      	cmp	r7, #88	@ 0x58
 80077e0:	f000 80b9 	beq.w	8007956 <_printf_i+0x19a>
 80077e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077ec:	e03a      	b.n	8007864 <_printf_i+0xa8>
 80077ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077f2:	2b15      	cmp	r3, #21
 80077f4:	d8f6      	bhi.n	80077e4 <_printf_i+0x28>
 80077f6:	a101      	add	r1, pc, #4	@ (adr r1, 80077fc <_printf_i+0x40>)
 80077f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077fc:	08007855 	.word	0x08007855
 8007800:	08007869 	.word	0x08007869
 8007804:	080077e5 	.word	0x080077e5
 8007808:	080077e5 	.word	0x080077e5
 800780c:	080077e5 	.word	0x080077e5
 8007810:	080077e5 	.word	0x080077e5
 8007814:	08007869 	.word	0x08007869
 8007818:	080077e5 	.word	0x080077e5
 800781c:	080077e5 	.word	0x080077e5
 8007820:	080077e5 	.word	0x080077e5
 8007824:	080077e5 	.word	0x080077e5
 8007828:	08007969 	.word	0x08007969
 800782c:	08007893 	.word	0x08007893
 8007830:	08007923 	.word	0x08007923
 8007834:	080077e5 	.word	0x080077e5
 8007838:	080077e5 	.word	0x080077e5
 800783c:	0800798b 	.word	0x0800798b
 8007840:	080077e5 	.word	0x080077e5
 8007844:	08007893 	.word	0x08007893
 8007848:	080077e5 	.word	0x080077e5
 800784c:	080077e5 	.word	0x080077e5
 8007850:	0800792b 	.word	0x0800792b
 8007854:	6833      	ldr	r3, [r6, #0]
 8007856:	1d1a      	adds	r2, r3, #4
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6032      	str	r2, [r6, #0]
 800785c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007864:	2301      	movs	r3, #1
 8007866:	e09d      	b.n	80079a4 <_printf_i+0x1e8>
 8007868:	6833      	ldr	r3, [r6, #0]
 800786a:	6820      	ldr	r0, [r4, #0]
 800786c:	1d19      	adds	r1, r3, #4
 800786e:	6031      	str	r1, [r6, #0]
 8007870:	0606      	lsls	r6, r0, #24
 8007872:	d501      	bpl.n	8007878 <_printf_i+0xbc>
 8007874:	681d      	ldr	r5, [r3, #0]
 8007876:	e003      	b.n	8007880 <_printf_i+0xc4>
 8007878:	0645      	lsls	r5, r0, #25
 800787a:	d5fb      	bpl.n	8007874 <_printf_i+0xb8>
 800787c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007880:	2d00      	cmp	r5, #0
 8007882:	da03      	bge.n	800788c <_printf_i+0xd0>
 8007884:	232d      	movs	r3, #45	@ 0x2d
 8007886:	426d      	negs	r5, r5
 8007888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800788c:	4859      	ldr	r0, [pc, #356]	@ (80079f4 <_printf_i+0x238>)
 800788e:	230a      	movs	r3, #10
 8007890:	e011      	b.n	80078b6 <_printf_i+0xfa>
 8007892:	6821      	ldr	r1, [r4, #0]
 8007894:	6833      	ldr	r3, [r6, #0]
 8007896:	0608      	lsls	r0, r1, #24
 8007898:	f853 5b04 	ldr.w	r5, [r3], #4
 800789c:	d402      	bmi.n	80078a4 <_printf_i+0xe8>
 800789e:	0649      	lsls	r1, r1, #25
 80078a0:	bf48      	it	mi
 80078a2:	b2ad      	uxthmi	r5, r5
 80078a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80078a6:	4853      	ldr	r0, [pc, #332]	@ (80079f4 <_printf_i+0x238>)
 80078a8:	6033      	str	r3, [r6, #0]
 80078aa:	bf14      	ite	ne
 80078ac:	230a      	movne	r3, #10
 80078ae:	2308      	moveq	r3, #8
 80078b0:	2100      	movs	r1, #0
 80078b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078b6:	6866      	ldr	r6, [r4, #4]
 80078b8:	60a6      	str	r6, [r4, #8]
 80078ba:	2e00      	cmp	r6, #0
 80078bc:	bfa2      	ittt	ge
 80078be:	6821      	ldrge	r1, [r4, #0]
 80078c0:	f021 0104 	bicge.w	r1, r1, #4
 80078c4:	6021      	strge	r1, [r4, #0]
 80078c6:	b90d      	cbnz	r5, 80078cc <_printf_i+0x110>
 80078c8:	2e00      	cmp	r6, #0
 80078ca:	d04b      	beq.n	8007964 <_printf_i+0x1a8>
 80078cc:	4616      	mov	r6, r2
 80078ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80078d2:	fb03 5711 	mls	r7, r3, r1, r5
 80078d6:	5dc7      	ldrb	r7, [r0, r7]
 80078d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078dc:	462f      	mov	r7, r5
 80078de:	42bb      	cmp	r3, r7
 80078e0:	460d      	mov	r5, r1
 80078e2:	d9f4      	bls.n	80078ce <_printf_i+0x112>
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d10b      	bne.n	8007900 <_printf_i+0x144>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	07df      	lsls	r7, r3, #31
 80078ec:	d508      	bpl.n	8007900 <_printf_i+0x144>
 80078ee:	6923      	ldr	r3, [r4, #16]
 80078f0:	6861      	ldr	r1, [r4, #4]
 80078f2:	4299      	cmp	r1, r3
 80078f4:	bfde      	ittt	le
 80078f6:	2330      	movle	r3, #48	@ 0x30
 80078f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007900:	1b92      	subs	r2, r2, r6
 8007902:	6122      	str	r2, [r4, #16]
 8007904:	f8cd a000 	str.w	sl, [sp]
 8007908:	464b      	mov	r3, r9
 800790a:	aa03      	add	r2, sp, #12
 800790c:	4621      	mov	r1, r4
 800790e:	4640      	mov	r0, r8
 8007910:	f7ff fee6 	bl	80076e0 <_printf_common>
 8007914:	3001      	adds	r0, #1
 8007916:	d14a      	bne.n	80079ae <_printf_i+0x1f2>
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	b004      	add	sp, #16
 800791e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	f043 0320 	orr.w	r3, r3, #32
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	4833      	ldr	r0, [pc, #204]	@ (80079f8 <_printf_i+0x23c>)
 800792c:	2778      	movs	r7, #120	@ 0x78
 800792e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	6831      	ldr	r1, [r6, #0]
 8007936:	061f      	lsls	r7, r3, #24
 8007938:	f851 5b04 	ldr.w	r5, [r1], #4
 800793c:	d402      	bmi.n	8007944 <_printf_i+0x188>
 800793e:	065f      	lsls	r7, r3, #25
 8007940:	bf48      	it	mi
 8007942:	b2ad      	uxthmi	r5, r5
 8007944:	6031      	str	r1, [r6, #0]
 8007946:	07d9      	lsls	r1, r3, #31
 8007948:	bf44      	itt	mi
 800794a:	f043 0320 	orrmi.w	r3, r3, #32
 800794e:	6023      	strmi	r3, [r4, #0]
 8007950:	b11d      	cbz	r5, 800795a <_printf_i+0x19e>
 8007952:	2310      	movs	r3, #16
 8007954:	e7ac      	b.n	80078b0 <_printf_i+0xf4>
 8007956:	4827      	ldr	r0, [pc, #156]	@ (80079f4 <_printf_i+0x238>)
 8007958:	e7e9      	b.n	800792e <_printf_i+0x172>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	f023 0320 	bic.w	r3, r3, #32
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	e7f6      	b.n	8007952 <_printf_i+0x196>
 8007964:	4616      	mov	r6, r2
 8007966:	e7bd      	b.n	80078e4 <_printf_i+0x128>
 8007968:	6833      	ldr	r3, [r6, #0]
 800796a:	6825      	ldr	r5, [r4, #0]
 800796c:	6961      	ldr	r1, [r4, #20]
 800796e:	1d18      	adds	r0, r3, #4
 8007970:	6030      	str	r0, [r6, #0]
 8007972:	062e      	lsls	r6, r5, #24
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	d501      	bpl.n	800797c <_printf_i+0x1c0>
 8007978:	6019      	str	r1, [r3, #0]
 800797a:	e002      	b.n	8007982 <_printf_i+0x1c6>
 800797c:	0668      	lsls	r0, r5, #25
 800797e:	d5fb      	bpl.n	8007978 <_printf_i+0x1bc>
 8007980:	8019      	strh	r1, [r3, #0]
 8007982:	2300      	movs	r3, #0
 8007984:	6123      	str	r3, [r4, #16]
 8007986:	4616      	mov	r6, r2
 8007988:	e7bc      	b.n	8007904 <_printf_i+0x148>
 800798a:	6833      	ldr	r3, [r6, #0]
 800798c:	1d1a      	adds	r2, r3, #4
 800798e:	6032      	str	r2, [r6, #0]
 8007990:	681e      	ldr	r6, [r3, #0]
 8007992:	6862      	ldr	r2, [r4, #4]
 8007994:	2100      	movs	r1, #0
 8007996:	4630      	mov	r0, r6
 8007998:	f7f8 fc22 	bl	80001e0 <memchr>
 800799c:	b108      	cbz	r0, 80079a2 <_printf_i+0x1e6>
 800799e:	1b80      	subs	r0, r0, r6
 80079a0:	6060      	str	r0, [r4, #4]
 80079a2:	6863      	ldr	r3, [r4, #4]
 80079a4:	6123      	str	r3, [r4, #16]
 80079a6:	2300      	movs	r3, #0
 80079a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079ac:	e7aa      	b.n	8007904 <_printf_i+0x148>
 80079ae:	6923      	ldr	r3, [r4, #16]
 80079b0:	4632      	mov	r2, r6
 80079b2:	4649      	mov	r1, r9
 80079b4:	4640      	mov	r0, r8
 80079b6:	47d0      	blx	sl
 80079b8:	3001      	adds	r0, #1
 80079ba:	d0ad      	beq.n	8007918 <_printf_i+0x15c>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	079b      	lsls	r3, r3, #30
 80079c0:	d413      	bmi.n	80079ea <_printf_i+0x22e>
 80079c2:	68e0      	ldr	r0, [r4, #12]
 80079c4:	9b03      	ldr	r3, [sp, #12]
 80079c6:	4298      	cmp	r0, r3
 80079c8:	bfb8      	it	lt
 80079ca:	4618      	movlt	r0, r3
 80079cc:	e7a6      	b.n	800791c <_printf_i+0x160>
 80079ce:	2301      	movs	r3, #1
 80079d0:	4632      	mov	r2, r6
 80079d2:	4649      	mov	r1, r9
 80079d4:	4640      	mov	r0, r8
 80079d6:	47d0      	blx	sl
 80079d8:	3001      	adds	r0, #1
 80079da:	d09d      	beq.n	8007918 <_printf_i+0x15c>
 80079dc:	3501      	adds	r5, #1
 80079de:	68e3      	ldr	r3, [r4, #12]
 80079e0:	9903      	ldr	r1, [sp, #12]
 80079e2:	1a5b      	subs	r3, r3, r1
 80079e4:	42ab      	cmp	r3, r5
 80079e6:	dcf2      	bgt.n	80079ce <_printf_i+0x212>
 80079e8:	e7eb      	b.n	80079c2 <_printf_i+0x206>
 80079ea:	2500      	movs	r5, #0
 80079ec:	f104 0619 	add.w	r6, r4, #25
 80079f0:	e7f5      	b.n	80079de <_printf_i+0x222>
 80079f2:	bf00      	nop
 80079f4:	08007e99 	.word	0x08007e99
 80079f8:	08007eaa 	.word	0x08007eaa

080079fc <__sflush_r>:
 80079fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a04:	0716      	lsls	r6, r2, #28
 8007a06:	4605      	mov	r5, r0
 8007a08:	460c      	mov	r4, r1
 8007a0a:	d454      	bmi.n	8007ab6 <__sflush_r+0xba>
 8007a0c:	684b      	ldr	r3, [r1, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dc02      	bgt.n	8007a18 <__sflush_r+0x1c>
 8007a12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dd48      	ble.n	8007aaa <__sflush_r+0xae>
 8007a18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a1a:	2e00      	cmp	r6, #0
 8007a1c:	d045      	beq.n	8007aaa <__sflush_r+0xae>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a24:	682f      	ldr	r7, [r5, #0]
 8007a26:	6a21      	ldr	r1, [r4, #32]
 8007a28:	602b      	str	r3, [r5, #0]
 8007a2a:	d030      	beq.n	8007a8e <__sflush_r+0x92>
 8007a2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	0759      	lsls	r1, r3, #29
 8007a32:	d505      	bpl.n	8007a40 <__sflush_r+0x44>
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	1ad2      	subs	r2, r2, r3
 8007a38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a3a:	b10b      	cbz	r3, 8007a40 <__sflush_r+0x44>
 8007a3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a3e:	1ad2      	subs	r2, r2, r3
 8007a40:	2300      	movs	r3, #0
 8007a42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a44:	6a21      	ldr	r1, [r4, #32]
 8007a46:	4628      	mov	r0, r5
 8007a48:	47b0      	blx	r6
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	d106      	bne.n	8007a5e <__sflush_r+0x62>
 8007a50:	6829      	ldr	r1, [r5, #0]
 8007a52:	291d      	cmp	r1, #29
 8007a54:	d82b      	bhi.n	8007aae <__sflush_r+0xb2>
 8007a56:	4a2a      	ldr	r2, [pc, #168]	@ (8007b00 <__sflush_r+0x104>)
 8007a58:	410a      	asrs	r2, r1
 8007a5a:	07d6      	lsls	r6, r2, #31
 8007a5c:	d427      	bmi.n	8007aae <__sflush_r+0xb2>
 8007a5e:	2200      	movs	r2, #0
 8007a60:	6062      	str	r2, [r4, #4]
 8007a62:	04d9      	lsls	r1, r3, #19
 8007a64:	6922      	ldr	r2, [r4, #16]
 8007a66:	6022      	str	r2, [r4, #0]
 8007a68:	d504      	bpl.n	8007a74 <__sflush_r+0x78>
 8007a6a:	1c42      	adds	r2, r0, #1
 8007a6c:	d101      	bne.n	8007a72 <__sflush_r+0x76>
 8007a6e:	682b      	ldr	r3, [r5, #0]
 8007a70:	b903      	cbnz	r3, 8007a74 <__sflush_r+0x78>
 8007a72:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a76:	602f      	str	r7, [r5, #0]
 8007a78:	b1b9      	cbz	r1, 8007aaa <__sflush_r+0xae>
 8007a7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a7e:	4299      	cmp	r1, r3
 8007a80:	d002      	beq.n	8007a88 <__sflush_r+0x8c>
 8007a82:	4628      	mov	r0, r5
 8007a84:	f7ff fbf2 	bl	800726c <_free_r>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a8c:	e00d      	b.n	8007aaa <__sflush_r+0xae>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4628      	mov	r0, r5
 8007a92:	47b0      	blx	r6
 8007a94:	4602      	mov	r2, r0
 8007a96:	1c50      	adds	r0, r2, #1
 8007a98:	d1c9      	bne.n	8007a2e <__sflush_r+0x32>
 8007a9a:	682b      	ldr	r3, [r5, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0c6      	beq.n	8007a2e <__sflush_r+0x32>
 8007aa0:	2b1d      	cmp	r3, #29
 8007aa2:	d001      	beq.n	8007aa8 <__sflush_r+0xac>
 8007aa4:	2b16      	cmp	r3, #22
 8007aa6:	d11e      	bne.n	8007ae6 <__sflush_r+0xea>
 8007aa8:	602f      	str	r7, [r5, #0]
 8007aaa:	2000      	movs	r0, #0
 8007aac:	e022      	b.n	8007af4 <__sflush_r+0xf8>
 8007aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ab2:	b21b      	sxth	r3, r3
 8007ab4:	e01b      	b.n	8007aee <__sflush_r+0xf2>
 8007ab6:	690f      	ldr	r7, [r1, #16]
 8007ab8:	2f00      	cmp	r7, #0
 8007aba:	d0f6      	beq.n	8007aaa <__sflush_r+0xae>
 8007abc:	0793      	lsls	r3, r2, #30
 8007abe:	680e      	ldr	r6, [r1, #0]
 8007ac0:	bf08      	it	eq
 8007ac2:	694b      	ldreq	r3, [r1, #20]
 8007ac4:	600f      	str	r7, [r1, #0]
 8007ac6:	bf18      	it	ne
 8007ac8:	2300      	movne	r3, #0
 8007aca:	eba6 0807 	sub.w	r8, r6, r7
 8007ace:	608b      	str	r3, [r1, #8]
 8007ad0:	f1b8 0f00 	cmp.w	r8, #0
 8007ad4:	dde9      	ble.n	8007aaa <__sflush_r+0xae>
 8007ad6:	6a21      	ldr	r1, [r4, #32]
 8007ad8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007ada:	4643      	mov	r3, r8
 8007adc:	463a      	mov	r2, r7
 8007ade:	4628      	mov	r0, r5
 8007ae0:	47b0      	blx	r6
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	dc08      	bgt.n	8007af8 <__sflush_r+0xfc>
 8007ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aee:	81a3      	strh	r3, [r4, #12]
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295
 8007af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af8:	4407      	add	r7, r0
 8007afa:	eba8 0800 	sub.w	r8, r8, r0
 8007afe:	e7e7      	b.n	8007ad0 <__sflush_r+0xd4>
 8007b00:	dfbffffe 	.word	0xdfbffffe

08007b04 <_fflush_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	690b      	ldr	r3, [r1, #16]
 8007b08:	4605      	mov	r5, r0
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	b913      	cbnz	r3, 8007b14 <_fflush_r+0x10>
 8007b0e:	2500      	movs	r5, #0
 8007b10:	4628      	mov	r0, r5
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	b118      	cbz	r0, 8007b1e <_fflush_r+0x1a>
 8007b16:	6a03      	ldr	r3, [r0, #32]
 8007b18:	b90b      	cbnz	r3, 8007b1e <_fflush_r+0x1a>
 8007b1a:	f7ff f9ad 	bl	8006e78 <__sinit>
 8007b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0f3      	beq.n	8007b0e <_fflush_r+0xa>
 8007b26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b28:	07d0      	lsls	r0, r2, #31
 8007b2a:	d404      	bmi.n	8007b36 <_fflush_r+0x32>
 8007b2c:	0599      	lsls	r1, r3, #22
 8007b2e:	d402      	bmi.n	8007b36 <_fflush_r+0x32>
 8007b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b32:	f7ff fb98 	bl	8007266 <__retarget_lock_acquire_recursive>
 8007b36:	4628      	mov	r0, r5
 8007b38:	4621      	mov	r1, r4
 8007b3a:	f7ff ff5f 	bl	80079fc <__sflush_r>
 8007b3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b40:	07da      	lsls	r2, r3, #31
 8007b42:	4605      	mov	r5, r0
 8007b44:	d4e4      	bmi.n	8007b10 <_fflush_r+0xc>
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	059b      	lsls	r3, r3, #22
 8007b4a:	d4e1      	bmi.n	8007b10 <_fflush_r+0xc>
 8007b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b4e:	f7ff fb8b 	bl	8007268 <__retarget_lock_release_recursive>
 8007b52:	e7dd      	b.n	8007b10 <_fflush_r+0xc>

08007b54 <__swhatbuf_r>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	460c      	mov	r4, r1
 8007b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	b096      	sub	sp, #88	@ 0x58
 8007b60:	4615      	mov	r5, r2
 8007b62:	461e      	mov	r6, r3
 8007b64:	da0d      	bge.n	8007b82 <__swhatbuf_r+0x2e>
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b6c:	f04f 0100 	mov.w	r1, #0
 8007b70:	bf14      	ite	ne
 8007b72:	2340      	movne	r3, #64	@ 0x40
 8007b74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b78:	2000      	movs	r0, #0
 8007b7a:	6031      	str	r1, [r6, #0]
 8007b7c:	602b      	str	r3, [r5, #0]
 8007b7e:	b016      	add	sp, #88	@ 0x58
 8007b80:	bd70      	pop	{r4, r5, r6, pc}
 8007b82:	466a      	mov	r2, sp
 8007b84:	f000 f848 	bl	8007c18 <_fstat_r>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	dbec      	blt.n	8007b66 <__swhatbuf_r+0x12>
 8007b8c:	9901      	ldr	r1, [sp, #4]
 8007b8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b96:	4259      	negs	r1, r3
 8007b98:	4159      	adcs	r1, r3
 8007b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b9e:	e7eb      	b.n	8007b78 <__swhatbuf_r+0x24>

08007ba0 <__smakebuf_r>:
 8007ba0:	898b      	ldrh	r3, [r1, #12]
 8007ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ba4:	079d      	lsls	r5, r3, #30
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460c      	mov	r4, r1
 8007baa:	d507      	bpl.n	8007bbc <__smakebuf_r+0x1c>
 8007bac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	6123      	str	r3, [r4, #16]
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	6163      	str	r3, [r4, #20]
 8007bb8:	b003      	add	sp, #12
 8007bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bbc:	ab01      	add	r3, sp, #4
 8007bbe:	466a      	mov	r2, sp
 8007bc0:	f7ff ffc8 	bl	8007b54 <__swhatbuf_r>
 8007bc4:	9f00      	ldr	r7, [sp, #0]
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	4639      	mov	r1, r7
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f7ff fbba 	bl	8007344 <_malloc_r>
 8007bd0:	b948      	cbnz	r0, 8007be6 <__smakebuf_r+0x46>
 8007bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bd6:	059a      	lsls	r2, r3, #22
 8007bd8:	d4ee      	bmi.n	8007bb8 <__smakebuf_r+0x18>
 8007bda:	f023 0303 	bic.w	r3, r3, #3
 8007bde:	f043 0302 	orr.w	r3, r3, #2
 8007be2:	81a3      	strh	r3, [r4, #12]
 8007be4:	e7e2      	b.n	8007bac <__smakebuf_r+0xc>
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	6020      	str	r0, [r4, #0]
 8007bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bee:	81a3      	strh	r3, [r4, #12]
 8007bf0:	9b01      	ldr	r3, [sp, #4]
 8007bf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007bf6:	b15b      	cbz	r3, 8007c10 <__smakebuf_r+0x70>
 8007bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f000 f81d 	bl	8007c3c <_isatty_r>
 8007c02:	b128      	cbz	r0, 8007c10 <__smakebuf_r+0x70>
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	f023 0303 	bic.w	r3, r3, #3
 8007c0a:	f043 0301 	orr.w	r3, r3, #1
 8007c0e:	81a3      	strh	r3, [r4, #12]
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	431d      	orrs	r5, r3
 8007c14:	81a5      	strh	r5, [r4, #12]
 8007c16:	e7cf      	b.n	8007bb8 <__smakebuf_r+0x18>

08007c18 <_fstat_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d07      	ldr	r5, [pc, #28]	@ (8007c38 <_fstat_r+0x20>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	602b      	str	r3, [r5, #0]
 8007c26:	f7fb fa7d 	bl	8003124 <_fstat>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d102      	bne.n	8007c34 <_fstat_r+0x1c>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	b103      	cbz	r3, 8007c34 <_fstat_r+0x1c>
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	bd38      	pop	{r3, r4, r5, pc}
 8007c36:	bf00      	nop
 8007c38:	200004f8 	.word	0x200004f8

08007c3c <_isatty_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d06      	ldr	r5, [pc, #24]	@ (8007c58 <_isatty_r+0x1c>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7fb fa7c 	bl	8003144 <_isatty>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_isatty_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_isatty_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	200004f8 	.word	0x200004f8

08007c5c <_sbrk_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d06      	ldr	r5, [pc, #24]	@ (8007c78 <_sbrk_r+0x1c>)
 8007c60:	2300      	movs	r3, #0
 8007c62:	4604      	mov	r4, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	602b      	str	r3, [r5, #0]
 8007c68:	f7fb fa84 	bl	8003174 <_sbrk>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_sbrk_r+0x1a>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_sbrk_r+0x1a>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	200004f8 	.word	0x200004f8

08007c7c <_init>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	bf00      	nop
 8007c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	469e      	mov	lr, r3
 8007c86:	4770      	bx	lr

08007c88 <_fini>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	bf00      	nop
 8007c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8e:	bc08      	pop	{r3}
 8007c90:	469e      	mov	lr, r3
 8007c92:	4770      	bx	lr

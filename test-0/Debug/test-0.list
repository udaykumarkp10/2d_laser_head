
test-0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007b84  08007b84  00008b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dac  08007dac  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007dac  08007dac  00008dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db4  08007db4  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db4  08007db4  00008db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007db8  08007db8  00008db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007dbc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000068  08007e24  00009068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08007e24  00009508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011eb0  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a98  00000000  00000000  0001af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0001d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2e  00000000  00000000  0001ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b19  00000000  00000000  0001fa56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162fc  00000000  00000000  0003956f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966b4  00000000  00000000  0004f86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e5f1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  000e5fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000eb60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b6c 	.word	0x08007b6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007b6c 	.word	0x08007b6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <adxl_write>:
#define CS_SET() 	HAL_GPIO_WritePin(ADXL345_CS_GPIO_Port, ADXL345_CS_Pin, GPIO_PIN_SET)
#define CS_RESET() 	HAL_GPIO_WritePin(ADXL345_CS_GPIO_Port, ADXL345_CS_Pin, GPIO_PIN_RESET)


void adxl_write (uint8_t address, uint8_t value)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	460a      	mov	r2, r1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = address | ADXL_SPI_MULTI_BYTE;  // multibyte write enabled
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	737b      	strb	r3, [r7, #13]
	CS_RESET();     // pull the cs pin low to enable the slave
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc0:	4809      	ldr	r0, [pc, #36]	@ (8000de8 <adxl_write+0x4c>)
 8000dc2:	f002 fed1 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ADXL345_PORT, data, 2, 100);  // transmit the address and data
 8000dc6:	f107 010c 	add.w	r1, r7, #12
 8000dca:	2364      	movs	r3, #100	@ 0x64
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4807      	ldr	r0, [pc, #28]	@ (8000dec <adxl_write+0x50>)
 8000dd0:	f004 fec5 	bl	8005b5e <HAL_SPI_Transmit>
	CS_SET(); // pull the cs pin high to disable the slave
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dda:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <adxl_write+0x4c>)
 8000ddc:	f002 fec4 	bl	8003b68 <HAL_GPIO_WritePin>
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40020000 	.word	0x40020000
 8000dec:	200001c4 	.word	0x200001c4

08000df0 <adxl_read>:


void adxl_read(uint8_t address, uint8_t* data_rec) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
    address |= ADXL_SPI_READ;  // read operation
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	71fb      	strb	r3, [r7, #7]
    address |= ADXL_SPI_MULTI_BYTE;  // multibyte read
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	71fb      	strb	r3, [r7, #7]
    CS_RESET();  // pull the cs pin low to enable the slave
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e16:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <adxl_read+0x58>)
 8000e18:	f002 fea6 	bl	8003b68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ADXL345_PORT, &address, 1, 100);  // send the address from where you want to read data
 8000e1c:	1df9      	adds	r1, r7, #7
 8000e1e:	2364      	movs	r3, #100	@ 0x64
 8000e20:	2201      	movs	r2, #1
 8000e22:	480a      	ldr	r0, [pc, #40]	@ (8000e4c <adxl_read+0x5c>)
 8000e24:	f004 fe9b 	bl	8005b5e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&ADXL345_PORT, data_rec, 6, 100);  // read 6 bytes of data
 8000e28:	2364      	movs	r3, #100	@ 0x64
 8000e2a:	2206      	movs	r2, #6
 8000e2c:	6839      	ldr	r1, [r7, #0]
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <adxl_read+0x5c>)
 8000e30:	f004 ffd8 	bl	8005de4 <HAL_SPI_Receive>
    CS_SET();  // pull the cs pin high to disable the slave
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3a:	4803      	ldr	r0, [pc, #12]	@ (8000e48 <adxl_read+0x58>)
 8000e3c:	f002 fe94 	bl	8003b68 <HAL_GPIO_WritePin>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	200001c4 	.word	0x200001c4

08000e50 <Adxl345_init>:

bool Adxl345_init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	adxl_write (ADXL_REG_DATA_FORMAT, ADXL_RANGE_4G);  // data_format range= +- 4g
 8000e54:	2101      	movs	r1, #1
 8000e56:	2031      	movs	r0, #49	@ 0x31
 8000e58:	f7ff ffa0 	bl	8000d9c <adxl_write>
	adxl_write (ADXL_REG_POWER_CTL, ADXL_RES_10BIT);  // reset all bits
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	202d      	movs	r0, #45	@ 0x2d
 8000e60:	f7ff ff9c 	bl	8000d9c <adxl_write>
	adxl_write (ADXL_REG_POWER_CTL, ADXL_FULL_RES);  // power_cntl measure and wake up 8hz
 8000e64:	2108      	movs	r1, #8
 8000e66:	202d      	movs	r0, #45	@ 0x2d
 8000e68:	f7ff ff98 	bl	8000d9c <adxl_write>
	return true;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	0000      	movs	r0, r0
 8000e74:	0000      	movs	r0, r0
	...

08000e78 <getAcceleration>:

int32_t getAcceleration(char axis) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
    uint8_t accel_data[6];  // Buffer to store raw acceleration data from the ADXL345
    int16_t raw_accel_x, raw_accel_y, raw_accel_z;  // Raw acceleration values for the X, Y, and Z axes
    int16_t raw_accel;  // Declare raw_accel to store the selected axis value

    // Read acceleration data from ADXL345
    adxl_read(ADXL_REG_DATAX0, accel_data);
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	4619      	mov	r1, r3
 8000e88:	2032      	movs	r0, #50	@ 0x32
 8000e8a:	f7ff ffb1 	bl	8000df0 <adxl_read>

    raw_accel_x = ((accel_data[1] << 8) | accel_data[0]);
 8000e8e:	7b7b      	ldrb	r3, [r7, #13]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	7b3b      	ldrb	r3, [r7, #12]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	83bb      	strh	r3, [r7, #28]
    raw_accel_y = ((accel_data[3] << 8) | accel_data[2]);
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	837b      	strh	r3, [r7, #26]
    raw_accel_z = ((accel_data[5] << 8) | accel_data[4]);
 8000eaa:	7c7b      	ldrb	r3, [r7, #17]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	7c3b      	ldrb	r3, [r7, #16]
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	833b      	strh	r3, [r7, #24]

    // Select the correct axis based on the input character 'X', 'Y', or 'Z'
    switch (axis) {
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ebc:	d00c      	beq.n	8000ed8 <getAcceleration+0x60>
 8000ebe:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ec0:	dc0d      	bgt.n	8000ede <getAcceleration+0x66>
 8000ec2:	2b58      	cmp	r3, #88	@ 0x58
 8000ec4:	d002      	beq.n	8000ecc <getAcceleration+0x54>
 8000ec6:	2b59      	cmp	r3, #89	@ 0x59
 8000ec8:	d003      	beq.n	8000ed2 <getAcceleration+0x5a>
            break;
        case 'Z':
            raw_accel = raw_accel_z;
            break;
        default:
            break;
 8000eca:	e008      	b.n	8000ede <getAcceleration+0x66>
            raw_accel = raw_accel_x;
 8000ecc:	8bbb      	ldrh	r3, [r7, #28]
 8000ece:	83fb      	strh	r3, [r7, #30]
            break;
 8000ed0:	e006      	b.n	8000ee0 <getAcceleration+0x68>
            raw_accel = raw_accel_y;
 8000ed2:	8b7b      	ldrh	r3, [r7, #26]
 8000ed4:	83fb      	strh	r3, [r7, #30]
            break;
 8000ed6:	e003      	b.n	8000ee0 <getAcceleration+0x68>
            raw_accel = raw_accel_z;
 8000ed8:	8b3b      	ldrh	r3, [r7, #24]
 8000eda:	83fb      	strh	r3, [r7, #30]
            break;
 8000edc:	e000      	b.n	8000ee0 <getAcceleration+0x68>
            break;
 8000ede:	bf00      	nop
    }

    // Convert the raw value to g and apply offset encoding to store as uint32_t
    int32_t accel_g = ((raw_accel * ADXL345_SCALE_FACTOR_4G) * ACCEL_SCALING_FACTOR);
 8000ee0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb1d 	bl	8000524 <__aeabi_i2d>
 8000eea:	a30d      	add	r3, pc, #52	@ (adr r3, 8000f20 <getAcceleration+0xa8>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fb82 	bl	80005f8 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	a30a      	add	r3, pc, #40	@ (adr r3, 8000f28 <getAcceleration+0xb0>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff fb79 	bl	80005f8 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f7ff fd85 	bl	8000a1c <__aeabi_d2iz>
 8000f12:	4603      	mov	r3, r0
 8000f14:	617b      	str	r3, [r7, #20]

    return accel_g;
 8000f16:	697b      	ldr	r3, [r7, #20]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	8e8a71de 	.word	0x8e8a71de
 8000f24:	3f7ff2e4 	.word	0x3f7ff2e4
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	40c38800 	.word	0x40c38800

08000f30 <EEPROM_Read>:
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af04      	add	r7, sp, #16
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	80fb      	strh	r3, [r7, #6]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	80bb      	strh	r3, [r7, #4]
 8000f40:	88fa      	ldrh	r2, [r7, #6]
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2310      	movs	r3, #16
 8000f52:	21a1      	movs	r1, #161	@ 0xa1
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <EEPROM_Read+0x38>)
 8000f56:	f003 fa95 	bl	8004484 <HAL_I2C_Mem_Read>
 8000f5a:	2005      	movs	r0, #5
 8000f5c:	f002 fb76 	bl	800364c <HAL_Delay>
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000118 	.word	0x20000118

08000f6c <bytes2uInt>:
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	2300      	movs	r3, #0
 8000f76:	75fb      	strb	r3, [r7, #23]
 8000f78:	e00b      	b.n	8000f92 <bytes2uInt+0x26>
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	441a      	add	r2, r3
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	3318      	adds	r3, #24
 8000f86:	443b      	add	r3, r7
 8000f88:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d9f0      	bls.n	8000f7a <bytes2uInt+0xe>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	371c      	adds	r7, #28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <Etc_Read_Reg>:
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	80fb      	strh	r3, [r7, #6]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	717b      	strb	r3, [r7, #5]
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	82bb      	strh	r3, [r7, #20]
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	733b      	strb	r3, [r7, #12]
 8000fc4:	7d7b      	ldrb	r3, [r7, #21]
 8000fc6:	737b      	strb	r3, [r7, #13]
 8000fc8:	7d3b      	ldrb	r3, [r7, #20]
 8000fca:	73bb      	strb	r3, [r7, #14]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	77fb      	strb	r3, [r7, #31]
 8000fd0:	e009      	b.n	8000fe6 <Etc_Read_Reg+0x3a>
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	3320      	adds	r3, #32
 8000fd8:	443b      	add	r3, r7
 8000fda:	22ff      	movs	r2, #255	@ 0xff
 8000fdc:	f803 2c14 	strb.w	r2, [r3, #-20]
 8000fe0:	7ffb      	ldrb	r3, [r7, #31]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	77fb      	strb	r3, [r7, #31]
 8000fe6:	7ffa      	ldrb	r2, [r7, #31]
 8000fe8:	797b      	ldrb	r3, [r7, #5]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d3f1      	bcc.n	8000fd2 <Etc_Read_Reg+0x26>
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ff4:	4819      	ldr	r0, [pc, #100]	@ (800105c <Etc_Read_Reg+0xb0>)
 8000ff6:	f002 fdb7 	bl	8003b68 <HAL_GPIO_WritePin>
 8000ffa:	797b      	ldrb	r3, [r7, #5]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	3303      	adds	r3, #3
 8001000:	b29b      	uxth	r3, r3
 8001002:	f107 020c 	add.w	r2, r7, #12
 8001006:	f107 010c 	add.w	r1, r7, #12
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	9000      	str	r0, [sp, #0]
 8001010:	4813      	ldr	r0, [pc, #76]	@ (8001060 <Etc_Read_Reg+0xb4>)
 8001012:	f004 ffff 	bl	8006014 <HAL_SPI_TransmitReceive>
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800101c:	480f      	ldr	r0, [pc, #60]	@ (800105c <Etc_Read_Reg+0xb0>)
 800101e:	f002 fda3 	bl	8003b68 <HAL_GPIO_WritePin>
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	2300      	movs	r3, #0
 8001028:	77fb      	strb	r3, [r7, #31]
 800102a:	e00d      	b.n	8001048 <Etc_Read_Reg+0x9c>
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	1cda      	adds	r2, r3, #3
 8001030:	7ffb      	ldrb	r3, [r7, #31]
 8001032:	3220      	adds	r2, #32
 8001034:	443a      	add	r2, r7
 8001036:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800103a:	3320      	adds	r3, #32
 800103c:	443b      	add	r3, r7
 800103e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001042:	7ffb      	ldrb	r3, [r7, #31]
 8001044:	3301      	adds	r3, #1
 8001046:	77fb      	strb	r3, [r7, #31]
 8001048:	7ffa      	ldrb	r2, [r7, #31]
 800104a:	797b      	ldrb	r3, [r7, #5]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3ed      	bcc.n	800102c <Etc_Read_Reg+0x80>
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	4618      	mov	r0, r3
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020000 	.word	0x40020000
 8001060:	2000021c 	.word	0x2000021c

08001064 <Etc_Write_Reg>:
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	80fb      	strh	r3, [r7, #6]
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	82bb      	strh	r3, [r7, #20]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	2302      	movs	r3, #2
 800107a:	733b      	strb	r3, [r7, #12]
 800107c:	7d7b      	ldrb	r3, [r7, #21]
 800107e:	737b      	strb	r3, [r7, #13]
 8001080:	7d3b      	ldrb	r3, [r7, #20]
 8001082:	73bb      	strb	r3, [r7, #14]
 8001084:	2300      	movs	r3, #0
 8001086:	77fb      	strb	r3, [r7, #31]
 8001088:	e00d      	b.n	80010a6 <Etc_Write_Reg+0x42>
 800108a:	7ffa      	ldrb	r2, [r7, #31]
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	3303      	adds	r3, #3
 8001090:	3220      	adds	r2, #32
 8001092:	443a      	add	r2, r7
 8001094:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8001098:	3320      	adds	r3, #32
 800109a:	443b      	add	r3, r7
 800109c:	f803 2c14 	strb.w	r2, [r3, #-20]
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	3301      	adds	r3, #1
 80010a4:	77fb      	strb	r3, [r7, #31]
 80010a6:	7ffb      	ldrb	r3, [r7, #31]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d9ee      	bls.n	800108a <Etc_Write_Reg+0x26>
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010b2:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <Etc_Write_Reg+0x80>)
 80010b4:	f002 fd58 	bl	8003b68 <HAL_GPIO_WritePin>
 80010b8:	f107 020c 	add.w	r2, r7, #12
 80010bc:	f107 010c 	add.w	r1, r7, #12
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2307      	movs	r3, #7
 80010c8:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <Etc_Write_Reg+0x84>)
 80010ca:	f004 ffa3 	bl	8006014 <HAL_SPI_TransmitReceive>
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <Etc_Write_Reg+0x80>)
 80010d6:	f002 fd47 	bl	8003b68 <HAL_GPIO_WritePin>
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40020000 	.word	0x40020000
 80010e8:	2000021c 	.word	0x2000021c

080010ec <Etc_Read_Reg_Wait>:
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	80fb      	strh	r3, [r7, #6]
 80010f8:	4613      	mov	r3, r2
 80010fa:	717b      	strb	r3, [r7, #5]
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	813b      	strh	r3, [r7, #8]
 8001100:	7a3b      	ldrb	r3, [r7, #8]
 8001102:	733b      	strb	r3, [r7, #12]
 8001104:	7a7b      	ldrb	r3, [r7, #9]
 8001106:	737b      	strb	r3, [r7, #13]
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	73bb      	strb	r3, [r7, #14]
 800110c:	23c0      	movs	r3, #192	@ 0xc0
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4619      	mov	r1, r3
 8001114:	f44f 7041 	mov.w	r0, #772	@ 0x304
 8001118:	f7ff ffa4 	bl	8001064 <Etc_Write_Reg>
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	2104      	movs	r1, #4
 8001122:	f44f 7041 	mov.w	r0, #772	@ 0x304
 8001126:	f7ff ff41 	bl	8000fac <Etc_Read_Reg>
 800112a:	4603      	mov	r3, r0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	b25b      	sxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	dbf4      	blt.n	8001120 <Etc_Read_Reg_Wait+0x34>
 8001136:	797b      	ldrb	r3, [r7, #5]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800113e:	f7ff ff35 	bl	8000fac <Etc_Read_Reg>
 8001142:	4603      	mov	r3, r0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <Etc_Read_Fifo>:
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	@ 0x38
 8001154:	af02      	add	r7, sp, #8
 8001156:	4935      	ldr	r1, [pc, #212]	@ (800122c <Etc_Read_Fifo+0xdc>)
 8001158:	f44f 7042 	mov.w	r0, #776	@ 0x308
 800115c:	f7ff ff82 	bl	8001064 <Etc_Write_Reg>
 8001160:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001164:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 8001168:	f7ff ff7c 	bl	8001064 <Etc_Write_Reg>
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001170:	2104      	movs	r1, #4
 8001172:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 8001176:	f7ff ff19 	bl	8000fac <Etc_Read_Reg>
 800117a:	4603      	mov	r3, r0
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800117e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f2      	beq.n	8001170 <Etc_Read_Fifo+0x20>
 800118a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800118e:	2b08      	cmp	r3, #8
 8001190:	d1ee      	bne.n	8001170 <Etc_Read_Fifo+0x20>
 8001192:	2303      	movs	r3, #3
 8001194:	713b      	strb	r3, [r7, #4]
 8001196:	2300      	movs	r3, #0
 8001198:	717b      	strb	r3, [r7, #5]
 800119a:	2300      	movs	r3, #0
 800119c:	71bb      	strb	r3, [r7, #6]
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011a4:	e00c      	b.n	80011c0 <Etc_Read_Fifo+0x70>
 80011a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011aa:	3303      	adds	r3, #3
 80011ac:	3330      	adds	r3, #48	@ 0x30
 80011ae:	443b      	add	r3, r7
 80011b0:	22ff      	movs	r2, #255	@ 0xff
 80011b2:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80011b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011ba:	3301      	adds	r3, #1
 80011bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011c4:	2b1f      	cmp	r3, #31
 80011c6:	d9ee      	bls.n	80011a6 <Etc_Read_Fifo+0x56>
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011ce:	4818      	ldr	r0, [pc, #96]	@ (8001230 <Etc_Read_Fifo+0xe0>)
 80011d0:	f002 fcca 	bl	8003b68 <HAL_GPIO_WritePin>
 80011d4:	1d3a      	adds	r2, r7, #4
 80011d6:	1d39      	adds	r1, r7, #4
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2323      	movs	r3, #35	@ 0x23
 80011e0:	4814      	ldr	r0, [pc, #80]	@ (8001234 <Etc_Read_Fifo+0xe4>)
 80011e2:	f004 ff17 	bl	8006014 <HAL_SPI_TransmitReceive>
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011ec:	4810      	ldr	r0, [pc, #64]	@ (8001230 <Etc_Read_Fifo+0xe0>)
 80011ee:	f002 fcbb 	bl	8003b68 <HAL_GPIO_WritePin>
 80011f2:	2300      	movs	r3, #0
 80011f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011f8:	e00f      	b.n	800121a <Etc_Read_Fifo+0xca>
 80011fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011fe:	1cda      	adds	r2, r3, #3
 8001200:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001204:	3230      	adds	r2, #48	@ 0x30
 8001206:	443a      	add	r2, r7
 8001208:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 800120c:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <Etc_Read_Fifo+0xe8>)
 800120e:	54d1      	strb	r1, [r2, r3]
 8001210:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001214:	3301      	adds	r3, #1
 8001216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800121a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800121e:	2b1f      	cmp	r3, #31
 8001220:	d9eb      	bls.n	80011fa <Etc_Read_Fifo+0xaa>
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	3730      	adds	r7, #48	@ 0x30
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	00201000 	.word	0x00201000
 8001230:	40020000 	.word	0x40020000
 8001234:	2000021c 	.word	0x2000021c
 8001238:	20000084 	.word	0x20000084

0800123c <Etc_Write_Fifo>:
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af02      	add	r7, sp, #8
 8001242:	492a      	ldr	r1, [pc, #168]	@ (80012ec <Etc_Write_Fifo+0xb0>)
 8001244:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001248:	f7ff ff0c 	bl	8001064 <Etc_Write_Reg>
 800124c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001250:	f44f 7045 	mov.w	r0, #788	@ 0x314
 8001254:	f7ff ff06 	bl	8001064 <Etc_Write_Reg>
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800125c:	2104      	movs	r1, #4
 800125e:	f44f 7045 	mov.w	r0, #788	@ 0x314
 8001262:	f7ff fea3 	bl	8000fac <Etc_Read_Reg>
 8001266:	4603      	mov	r3, r0
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800126a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f2      	beq.n	800125c <Etc_Write_Fifo+0x20>
 8001276:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800127a:	2b07      	cmp	r3, #7
 800127c:	d9ee      	bls.n	800125c <Etc_Write_Fifo+0x20>
 800127e:	2302      	movs	r3, #2
 8001280:	713b      	strb	r3, [r7, #4]
 8001282:	2300      	movs	r3, #0
 8001284:	717b      	strb	r3, [r7, #5]
 8001286:	2320      	movs	r3, #32
 8001288:	71bb      	strb	r3, [r7, #6]
 800128a:	2300      	movs	r3, #0
 800128c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001290:	e00f      	b.n	80012b2 <Etc_Write_Fifo+0x76>
 8001292:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800129a:	3303      	adds	r3, #3
 800129c:	4914      	ldr	r1, [pc, #80]	@ (80012f0 <Etc_Write_Fifo+0xb4>)
 800129e:	5c8a      	ldrb	r2, [r1, r2]
 80012a0:	3330      	adds	r3, #48	@ 0x30
 80012a2:	443b      	add	r3, r7
 80012a4:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80012a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012ac:	3301      	adds	r3, #1
 80012ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012b6:	2b1f      	cmp	r3, #31
 80012b8:	d9eb      	bls.n	8001292 <Etc_Write_Fifo+0x56>
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <Etc_Write_Fifo+0xb8>)
 80012c2:	f002 fc51 	bl	8003b68 <HAL_GPIO_WritePin>
 80012c6:	1d3a      	adds	r2, r7, #4
 80012c8:	1d39      	adds	r1, r7, #4
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2323      	movs	r3, #35	@ 0x23
 80012d2:	4809      	ldr	r0, [pc, #36]	@ (80012f8 <Etc_Write_Fifo+0xbc>)
 80012d4:	f004 fe9e 	bl	8006014 <HAL_SPI_TransmitReceive>
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <Etc_Write_Fifo+0xb8>)
 80012e0:	f002 fc42 	bl	8003b68 <HAL_GPIO_WritePin>
 80012e4:	bf00      	nop
 80012e6:	3730      	adds	r7, #48	@ 0x30
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	00201200 	.word	0x00201200
 80012f0:	200000a4 	.word	0x200000a4
 80012f4:	40020000 	.word	0x40020000
 80012f8:	2000021c 	.word	0x2000021c

080012fc <etc_init>:
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	2100      	movs	r1, #0
 8001304:	f44f 70fc 	mov.w	r0, #504	@ 0x1f8
 8001308:	f7ff feac 	bl	8001064 <Etc_Write_Reg>
 800130c:	2064      	movs	r0, #100	@ 0x64
 800130e:	f002 f99d 	bl	800364c <HAL_Delay>
 8001312:	2104      	movs	r1, #4
 8001314:	2064      	movs	r0, #100	@ 0x64
 8001316:	f7ff fe49 	bl	8000fac <Etc_Read_Reg>
 800131a:	4603      	mov	r3, r0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <etc_init+0x54>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d001      	beq.n	800132a <etc_init+0x2e>
 8001326:	2300      	movs	r3, #0
 8001328:	e00d      	b.n	8001346 <etc_init+0x4a>
 800132a:	2104      	movs	r1, #4
 800132c:	2074      	movs	r0, #116	@ 0x74
 800132e:	f7ff fe3d 	bl	8000fac <Etc_Read_Reg>
 8001332:	4603      	mov	r3, r0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <etc_init+0x48>
 8001340:	2300      	movs	r3, #0
 8001342:	e000      	b.n	8001346 <etc_init+0x4a>
 8001344:	2301      	movs	r3, #1
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	87654321 	.word	0x87654321

08001354 <etc_scan>:
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	2300      	movs	r3, #0
 8001360:	71bb      	strb	r3, [r7, #6]
 8001362:	2101      	movs	r1, #1
 8001364:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 8001368:	f7ff fec0 	bl	80010ec <Etc_Read_Reg_Wait>
 800136c:	4603      	mov	r3, r0
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	783b      	ldrb	r3, [r7, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <etc_scan+0x2c>
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	e001      	b.n	8001384 <etc_scan+0x30>
 8001380:	2301      	movs	r3, #1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	2101      	movs	r1, #1
 8001386:	f44f 7098 	mov.w	r0, #304	@ 0x130
 800138a:	f7ff feaf 	bl	80010ec <Etc_Read_Reg_Wait>
 800138e:	4603      	mov	r3, r0
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	783b      	ldrb	r3, [r7, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	713b      	strb	r3, [r7, #4]
 800139a:	793b      	ldrb	r3, [r7, #4]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d102      	bne.n	80013a6 <etc_scan+0x52>
 80013a0:	2301      	movs	r3, #1
 80013a2:	71bb      	strb	r3, [r7, #6]
 80013a4:	e001      	b.n	80013aa <etc_scan+0x56>
 80013a6:	2300      	movs	r3, #0
 80013a8:	71bb      	strb	r3, [r7, #6]
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	f083 0301 	eor.w	r3, r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00e      	beq.n	80013da <etc_scan+0x86>
 80013bc:	2300      	movs	r3, #0
 80013be:	717b      	strb	r3, [r7, #5]
 80013c0:	e007      	b.n	80013d2 <etc_scan+0x7e>
 80013c2:	797b      	ldrb	r3, [r7, #5]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <etc_scan+0xa8>)
 80013c6:	2100      	movs	r1, #0
 80013c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80013cc:	797b      	ldrb	r3, [r7, #5]
 80013ce:	3301      	adds	r3, #1
 80013d0:	717b      	strb	r3, [r7, #5]
 80013d2:	797b      	ldrb	r3, [r7, #5]
 80013d4:	2b07      	cmp	r3, #7
 80013d6:	d9f4      	bls.n	80013c2 <etc_scan+0x6e>
 80013d8:	e001      	b.n	80013de <etc_scan+0x8a>
 80013da:	f7ff feb9 	bl	8001150 <Etc_Read_Fifo>
 80013de:	f7ff ff2d 	bl	800123c <Etc_Write_Fifo>
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <etc_scan+0x9c>
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013ee:	713b      	strb	r3, [r7, #4]
 80013f0:	793b      	ldrb	r3, [r7, #4]
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000084 	.word	0x20000084

08001400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001406:	f002 f8af 	bl	8003568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140a:	f000 ff6b 	bl	80022e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140e:	f001 f91d 	bl	800264c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001412:	f000 ffcf 	bl	80023b4 <MX_I2C1_Init>
  MX_SPI5_Init();
 8001416:	f001 f895 	bl	8002544 <MX_SPI5_Init>
  MX_TIM4_Init();
 800141a:	f001 f8c9 	bl	80025b0 <MX_TIM4_Init>
  MX_I2C2_Init();
 800141e:	f000 fff7 	bl	8002410 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001422:	f001 f859 	bl	80024d8 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001426:	f001 f821 	bl	800246c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

   etc_init_ok = etc_init();
 800142a:	f7ff ff67 	bl	80012fc <etc_init>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b38      	ldr	r3, [pc, #224]	@ (8001514 <main+0x114>)
 8001434:	701a      	strb	r2, [r3, #0]
   pcap_init_ok = pcap_init();
 8001436:	f001 fa39 	bl	80028ac <pcap_init>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b36      	ldr	r3, [pc, #216]	@ (8001518 <main+0x118>)
 8001440:	701a      	strb	r2, [r3, #0]
   Adxl345_init_ok = Adxl345_init();
 8001442:	f7ff fd05 	bl	8000e50 <Adxl345_init>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4b34      	ldr	r3, [pc, #208]	@ (800151c <main+0x11c>)
 800144c:	701a      	strb	r2, [r3, #0]
	   no_error_drive = true;
   } else {
	   no_error_drive = false;
   }*/

   HAL_Delay(200);
 800144e:	20c8      	movs	r0, #200	@ 0xc8
 8001450:	f002 f8fc 	bl	800364c <HAL_Delay>

    /* USER CODE BEGIN 3 */

	  /*-------------------------- GET DATA FROM PCAP AND ETHERCAT----------------------------------------*/

	  if (pcap_init_ok) {
 8001454:	4b30      	ldr	r3, [pc, #192]	@ (8001518 <main+0x118>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <main+0x62>
		  pcap_scan();
 800145c:	f001 fa7e 	bl	800295c <pcap_scan>
 8001460:	e005      	b.n	800146e <main+0x6e>
	  } else {
		  pcap_init_ok = pcap_init();
 8001462:	f001 fa23 	bl	80028ac <pcap_init>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b2b      	ldr	r3, [pc, #172]	@ (8001518 <main+0x118>)
 800146c:	701a      	strb	r2, [r3, #0]
	  }

	  if (etc_init_ok) {
 800146e:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <main+0x114>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <main+0x7c>
		  etc_scan();
 8001476:	f7ff ff6d 	bl	8001354 <etc_scan>
 800147a:	e005      	b.n	8001488 <main+0x88>
	  } else {
		  etc_init_ok = etc_init();
 800147c:	f7ff ff3e 	bl	80012fc <etc_init>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <main+0x114>)
 8001486:	701a      	strb	r2, [r3, #0]
	  }

	  /*-------------------------- RECEIVED DATA FROM ETHERCAT ----------------------------------------*/

	  etc_new_command = (uint16_t)Etc_Buffer_Out.LANLong[0];
 8001488:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <main+0x120>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29a      	uxth	r2, r3
 800148e:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <main+0x124>)
 8001490:	801a      	strh	r2, [r3, #0]
	  etc_new_data =  Etc_Buffer_Out.LANFloat[1];
 8001492:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <main+0x120>)
 8001494:	edd3 7a01 	vldr	s15, [r3, #4]
 8001498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800149c:	ee17 2a90 	vmov	r2, s15
 80014a0:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <main+0x128>)
 80014a2:	601a      	str	r2, [r3, #0]

	  if (((etc_new_command >= 0) && (etc_new_command <= 19)) || ((etc_new_command >= 100) && (etc_new_command <= 105))) {
 80014a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <main+0x124>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	2b13      	cmp	r3, #19
 80014aa:	d907      	bls.n	80014bc <main+0xbc>
 80014ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <main+0x124>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	2b63      	cmp	r3, #99	@ 0x63
 80014b2:	d907      	bls.n	80014c4 <main+0xc4>
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <main+0x124>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	2b69      	cmp	r3, #105	@ 0x69
 80014ba:	d803      	bhi.n	80014c4 <main+0xc4>
	      set_command_flag = true;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <main+0x12c>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	e002      	b.n	80014ca <main+0xca>
	  } else {
		  set_command_flag = false;
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <main+0x12c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
	  }

	  if ((etc_new_command >= 50 && etc_new_command <= 70)) {
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <main+0x124>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	2b31      	cmp	r3, #49	@ 0x31
 80014d0:	d907      	bls.n	80014e2 <main+0xe2>
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <main+0x124>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	2b46      	cmp	r3, #70	@ 0x46
 80014d8:	d803      	bhi.n	80014e2 <main+0xe2>
		  get_command_flag = true;
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <main+0x130>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e002      	b.n	80014e8 <main+0xe8>
	  } else {
		  get_command_flag = false;
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <main+0x130>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
	  }

	  if ((etc_new_command == 301 || etc_new_command == 302 || etc_new_command == 303)) {
 80014e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <main+0x124>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	f240 122d 	movw	r2, #301	@ 0x12d
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d00a      	beq.n	800150a <main+0x10a>
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <main+0x124>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	f5b3 7f97 	cmp.w	r3, #302	@ 0x12e
 80014fc:	d005      	beq.n	800150a <main+0x10a>
 80014fe:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <main+0x124>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	f240 122f 	movw	r2, #303	@ 0x12f
 8001506:	4293      	cmp	r3, r2
 8001508:	d116      	bne.n	8001538 <main+0x138>
		  accelerometer_flag = true;
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <main+0x134>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	e015      	b.n	800153e <main+0x13e>
 8001512:	bf00      	nop
 8001514:	200002bd 	.word	0x200002bd
 8001518:	200002bc 	.word	0x200002bc
 800151c:	200002be 	.word	0x200002be
 8001520:	20000084 	.word	0x20000084
 8001524:	20000328 	.word	0x20000328
 8001528:	2000032c 	.word	0x2000032c
 800152c:	2000031c 	.word	0x2000031c
 8001530:	2000031d 	.word	0x2000031d
 8001534:	2000031f 	.word	0x2000031f
	  } else {
		  accelerometer_flag = false;
 8001538:	4bbb      	ldr	r3, [pc, #748]	@ (8001828 <main+0x428>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
	  }

	  etc_digital_output = Etc_Buffer_Out.LANFloat[5];
 800153e:	4bbb      	ldr	r3, [pc, #748]	@ (800182c <main+0x42c>)
 8001540:	edd3 7a05 	vldr	s15, [r3, #20]
 8001544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001548:	ee17 2a90 	vmov	r2, s15
 800154c:	4bb8      	ldr	r3, [pc, #736]	@ (8001830 <main+0x430>)
 800154e:	601a      	str	r2, [r3, #0]
	  etc_analog_output_0_1 = Etc_Buffer_Out.LANFloat[6];
 8001550:	4bb6      	ldr	r3, [pc, #728]	@ (800182c <main+0x42c>)
 8001552:	edd3 7a06 	vldr	s15, [r3, #24]
 8001556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155a:	ee17 2a90 	vmov	r2, s15
 800155e:	4bb5      	ldr	r3, [pc, #724]	@ (8001834 <main+0x434>)
 8001560:	601a      	str	r2, [r3, #0]
	  etc_analog_output_2_3 = Etc_Buffer_Out.LANFloat[7];
 8001562:	4bb2      	ldr	r3, [pc, #712]	@ (800182c <main+0x42c>)
 8001564:	edd3 7a07 	vldr	s15, [r3, #28]
 8001568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800156c:	ee17 2a90 	vmov	r2, s15
 8001570:	4bb1      	ldr	r3, [pc, #708]	@ (8001838 <main+0x438>)
 8001572:	601a      	str	r2, [r3, #0]

	  // Split the 32-bit floats into two 16-bit outputs each
	  etc_analog_output_0 = (uint16_t)(((uint32_t)etc_analog_output_0_1) & 0xFFFF);
 8001574:	4baf      	ldr	r3, [pc, #700]	@ (8001834 <main+0x434>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	b29a      	uxth	r2, r3
 800157a:	4bb0      	ldr	r3, [pc, #704]	@ (800183c <main+0x43c>)
 800157c:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_1 = (uint16_t)((((uint32_t)etc_analog_output_0_1) >> 16) & 0xFFFF);
 800157e:	4bad      	ldr	r3, [pc, #692]	@ (8001834 <main+0x434>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0c1b      	lsrs	r3, r3, #16
 8001584:	b29a      	uxth	r2, r3
 8001586:	4bae      	ldr	r3, [pc, #696]	@ (8001840 <main+0x440>)
 8001588:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_2 = (uint16_t)(((uint32_t)etc_analog_output_2_3) & 0xFFFF);
 800158a:	4bab      	ldr	r3, [pc, #684]	@ (8001838 <main+0x438>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29a      	uxth	r2, r3
 8001590:	4bac      	ldr	r3, [pc, #688]	@ (8001844 <main+0x444>)
 8001592:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_3 = (uint16_t)((((uint32_t)etc_analog_output_2_3) >> 16) & 0xFFFF);
 8001594:	4ba8      	ldr	r3, [pc, #672]	@ (8001838 <main+0x438>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0c1b      	lsrs	r3, r3, #16
 800159a:	b29a      	uxth	r2, r3
 800159c:	4baa      	ldr	r3, [pc, #680]	@ (8001848 <main+0x448>)
 800159e:	801a      	strh	r2, [r3, #0]

	  /*---------------------------PROCESS REECIVED COMMAND AND DATA-----------------------------------------*/

	  if (set_command_flag) {
 80015a0:	4baa      	ldr	r3, [pc, #680]	@ (800184c <main+0x44c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 833b 	beq.w	8001c20 <main+0x820>
		  if ((etc_old_command != etc_new_command) || (etc_old_data != etc_new_data)) {
 80015aa:	4ba9      	ldr	r3, [pc, #676]	@ (8001850 <main+0x450>)
 80015ac:	881a      	ldrh	r2, [r3, #0]
 80015ae:	4ba9      	ldr	r3, [pc, #676]	@ (8001854 <main+0x454>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d106      	bne.n	80015c4 <main+0x1c4>
 80015b6:	4ba8      	ldr	r3, [pc, #672]	@ (8001858 <main+0x458>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4ba8      	ldr	r3, [pc, #672]	@ (800185c <main+0x45c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	f000 860b 	beq.w	80021da <main+0xdda>
				switch (etc_new_command) {
 80015c4:	4ba3      	ldr	r3, [pc, #652]	@ (8001854 <main+0x454>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	2b69      	cmp	r3, #105	@ 0x69
 80015ca:	f200 830e 	bhi.w	8001bea <main+0x7ea>
 80015ce:	a201      	add	r2, pc, #4	@ (adr r2, 80015d4 <main+0x1d4>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	0800177d 	.word	0x0800177d
 80015d8:	0800178d 	.word	0x0800178d
 80015dc:	080017c3 	.word	0x080017c3
 80015e0:	080017f7 	.word	0x080017f7
 80015e4:	08001879 	.word	0x08001879
 80015e8:	080018a7 	.word	0x080018a7
 80015ec:	080018d3 	.word	0x080018d3
 80015f0:	080018fd 	.word	0x080018fd
 80015f4:	08001929 	.word	0x08001929
 80015f8:	08001955 	.word	0x08001955
 80015fc:	0800197f 	.word	0x0800197f
 8001600:	080019a9 	.word	0x080019a9
 8001604:	080019d5 	.word	0x080019d5
 8001608:	08001a01 	.word	0x08001a01
 800160c:	08001a2d 	.word	0x08001a2d
 8001610:	08001a59 	.word	0x08001a59
 8001614:	08001a85 	.word	0x08001a85
 8001618:	08001ac5 	.word	0x08001ac5
 800161c:	08001af1 	.word	0x08001af1
 8001620:	08001b23 	.word	0x08001b23
 8001624:	08001beb 	.word	0x08001beb
 8001628:	08001beb 	.word	0x08001beb
 800162c:	08001beb 	.word	0x08001beb
 8001630:	08001beb 	.word	0x08001beb
 8001634:	08001beb 	.word	0x08001beb
 8001638:	08001beb 	.word	0x08001beb
 800163c:	08001beb 	.word	0x08001beb
 8001640:	08001beb 	.word	0x08001beb
 8001644:	08001beb 	.word	0x08001beb
 8001648:	08001beb 	.word	0x08001beb
 800164c:	08001beb 	.word	0x08001beb
 8001650:	08001beb 	.word	0x08001beb
 8001654:	08001beb 	.word	0x08001beb
 8001658:	08001beb 	.word	0x08001beb
 800165c:	08001beb 	.word	0x08001beb
 8001660:	08001beb 	.word	0x08001beb
 8001664:	08001beb 	.word	0x08001beb
 8001668:	08001beb 	.word	0x08001beb
 800166c:	08001beb 	.word	0x08001beb
 8001670:	08001beb 	.word	0x08001beb
 8001674:	08001beb 	.word	0x08001beb
 8001678:	08001beb 	.word	0x08001beb
 800167c:	08001beb 	.word	0x08001beb
 8001680:	08001beb 	.word	0x08001beb
 8001684:	08001beb 	.word	0x08001beb
 8001688:	08001beb 	.word	0x08001beb
 800168c:	08001beb 	.word	0x08001beb
 8001690:	08001beb 	.word	0x08001beb
 8001694:	08001beb 	.word	0x08001beb
 8001698:	08001beb 	.word	0x08001beb
 800169c:	08001beb 	.word	0x08001beb
 80016a0:	08001beb 	.word	0x08001beb
 80016a4:	08001beb 	.word	0x08001beb
 80016a8:	08001beb 	.word	0x08001beb
 80016ac:	08001beb 	.word	0x08001beb
 80016b0:	08001beb 	.word	0x08001beb
 80016b4:	08001beb 	.word	0x08001beb
 80016b8:	08001beb 	.word	0x08001beb
 80016bc:	08001beb 	.word	0x08001beb
 80016c0:	08001beb 	.word	0x08001beb
 80016c4:	08001beb 	.word	0x08001beb
 80016c8:	08001beb 	.word	0x08001beb
 80016cc:	08001beb 	.word	0x08001beb
 80016d0:	08001beb 	.word	0x08001beb
 80016d4:	08001beb 	.word	0x08001beb
 80016d8:	08001beb 	.word	0x08001beb
 80016dc:	08001beb 	.word	0x08001beb
 80016e0:	08001beb 	.word	0x08001beb
 80016e4:	08001beb 	.word	0x08001beb
 80016e8:	08001beb 	.word	0x08001beb
 80016ec:	08001beb 	.word	0x08001beb
 80016f0:	08001beb 	.word	0x08001beb
 80016f4:	08001beb 	.word	0x08001beb
 80016f8:	08001beb 	.word	0x08001beb
 80016fc:	08001beb 	.word	0x08001beb
 8001700:	08001beb 	.word	0x08001beb
 8001704:	08001beb 	.word	0x08001beb
 8001708:	08001beb 	.word	0x08001beb
 800170c:	08001beb 	.word	0x08001beb
 8001710:	08001beb 	.word	0x08001beb
 8001714:	08001beb 	.word	0x08001beb
 8001718:	08001beb 	.word	0x08001beb
 800171c:	08001beb 	.word	0x08001beb
 8001720:	08001beb 	.word	0x08001beb
 8001724:	08001beb 	.word	0x08001beb
 8001728:	08001beb 	.word	0x08001beb
 800172c:	08001beb 	.word	0x08001beb
 8001730:	08001beb 	.word	0x08001beb
 8001734:	08001beb 	.word	0x08001beb
 8001738:	08001beb 	.word	0x08001beb
 800173c:	08001beb 	.word	0x08001beb
 8001740:	08001beb 	.word	0x08001beb
 8001744:	08001beb 	.word	0x08001beb
 8001748:	08001beb 	.word	0x08001beb
 800174c:	08001beb 	.word	0x08001beb
 8001750:	08001beb 	.word	0x08001beb
 8001754:	08001beb 	.word	0x08001beb
 8001758:	08001beb 	.word	0x08001beb
 800175c:	08001beb 	.word	0x08001beb
 8001760:	08001beb 	.word	0x08001beb
 8001764:	08001b55 	.word	0x08001b55
 8001768:	08001b7d 	.word	0x08001b7d
 800176c:	08001b93 	.word	0x08001b93
 8001770:	08001ba9 	.word	0x08001ba9
 8001774:	08001bbf 	.word	0x08001bbf
 8001778:	08001bd5 	.word	0x08001bd5
				case 0:
					TxData = etc_new_data;
 800177c:	4b37      	ldr	r3, [pc, #220]	@ (800185c <main+0x45c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a37      	ldr	r2, [pc, #220]	@ (8001860 <main+0x460>)
 8001782:	6013      	str	r3, [r2, #0]
					continuous_tx_flag = false;
 8001784:	4b37      	ldr	r3, [pc, #220]	@ (8001864 <main+0x464>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
					break;
 800178a:	e22f      	b.n	8001bec <main+0x7ec>

				case 1:
					TxData = etc_new_data;
 800178c:	4b33      	ldr	r3, [pc, #204]	@ (800185c <main+0x45c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a33      	ldr	r2, [pc, #204]	@ (8001860 <main+0x460>)
 8001792:	6013      	str	r3, [r2, #0]
					set_Execution_count++;
 8001794:	4b34      	ldr	r3, [pc, #208]	@ (8001868 <main+0x468>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b32      	ldr	r3, [pc, #200]	@ (8001868 <main+0x468>)
 800179e:	701a      	strb	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 1000000)) {
 80017a0:	4b2e      	ldr	r3, [pc, #184]	@ (800185c <main+0x45c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <main+0x3b2>
 80017a8:	4b2c      	ldr	r3, [pc, #176]	@ (800185c <main+0x45c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2f      	ldr	r2, [pc, #188]	@ (800186c <main+0x46c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d903      	bls.n	80017ba <main+0x3ba>
						setWrongCommandFlag(&tmc4671_controller, true);
 80017b2:	2101      	movs	r1, #1
 80017b4:	482e      	ldr	r0, [pc, #184]	@ (8001870 <main+0x470>)
 80017b6:	f001 fd19 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setEncoderResolution(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80017ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001864 <main+0x464>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
					break;
 80017c0:	e214      	b.n	8001bec <main+0x7ec>

				case 2:
					TxData = etc_new_data;
 80017c2:	4b26      	ldr	r3, [pc, #152]	@ (800185c <main+0x45c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a26      	ldr	r2, [pc, #152]	@ (8001860 <main+0x460>)
 80017c8:	6013      	str	r3, [r2, #0]
					set_Execution_count++;
 80017ca:	4b27      	ldr	r3, [pc, #156]	@ (8001868 <main+0x468>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <main+0x468>)
 80017d4:	701a      	strb	r2, [r3, #0]
					if ((etc_new_data != 0) && (etc_new_data != 1)) {//cannot be anything other than 0 or 1
 80017d6:	4b21      	ldr	r3, [pc, #132]	@ (800185c <main+0x45c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <main+0x3ee>
 80017de:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <main+0x45c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d003      	beq.n	80017ee <main+0x3ee>
						setWrongCommandFlag(&tmc4671_controller, true);
 80017e6:	2101      	movs	r1, #1
 80017e8:	4821      	ldr	r0, [pc, #132]	@ (8001870 <main+0x470>)
 80017ea:	f001 fcff 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setEncoderDirection(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80017ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <main+0x464>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
					break;
 80017f4:	e1fa      	b.n	8001bec <main+0x7ec>

				case 3:
					TxData = etc_new_data;
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <main+0x45c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a19      	ldr	r2, [pc, #100]	@ (8001860 <main+0x460>)
 80017fc:	6013      	str	r3, [r2, #0]
					if (((int32_t) etc_new_data <= -5000) || ((int32_t) etc_new_data >= 5000)) {//cannot be less than -5000um = -5mm or greater than 5000um = 5mm
 80017fe:	4b17      	ldr	r3, [pc, #92]	@ (800185c <main+0x45c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <main+0x474>)
 8001806:	429a      	cmp	r2, r3
 8001808:	db06      	blt.n	8001818 <main+0x418>
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <main+0x45c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	f241 3387 	movw	r3, #4999	@ 0x1387
 8001814:	429a      	cmp	r2, r3
 8001816:	dd03      	ble.n	8001820 <main+0x420>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001818:	2101      	movs	r1, #1
 800181a:	4815      	ldr	r0, [pc, #84]	@ (8001870 <main+0x470>)
 800181c:	f001 fce6 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setZeroOffset(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001820:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <main+0x464>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
					break;
 8001826:	e1e1      	b.n	8001bec <main+0x7ec>
 8001828:	2000031f 	.word	0x2000031f
 800182c:	20000084 	.word	0x20000084
 8001830:	20000330 	.word	0x20000330
 8001834:	20000334 	.word	0x20000334
 8001838:	20000338 	.word	0x20000338
 800183c:	2000033c 	.word	0x2000033c
 8001840:	2000033e 	.word	0x2000033e
 8001844:	20000340 	.word	0x20000340
 8001848:	20000342 	.word	0x20000342
 800184c:	2000031c 	.word	0x2000031c
 8001850:	20000320 	.word	0x20000320
 8001854:	20000328 	.word	0x20000328
 8001858:	20000324 	.word	0x20000324
 800185c:	2000032c 	.word	0x2000032c
 8001860:	20000344 	.word	0x20000344
 8001864:	2000031e 	.word	0x2000031e
 8001868:	2000034b 	.word	0x2000034b
 800186c:	000f4240 	.word	0x000f4240
 8001870:	200002c0 	.word	0x200002c0
 8001874:	ffffec79 	.word	0xffffec79

				case 4:
					TxData = etc_new_data;
 8001878:	4b8d      	ldr	r3, [pc, #564]	@ (8001ab0 <main+0x6b0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a8d      	ldr	r2, [pc, #564]	@ (8001ab4 <main+0x6b4>)
 800187e:	6013      	str	r3, [r2, #0]
					if (((int32_t) etc_new_data <= 0) || ((int32_t) etc_new_data > 12000)) {//cannot be 0, negative number or more than 12000um = 12mm
 8001880:	4b8b      	ldr	r3, [pc, #556]	@ (8001ab0 <main+0x6b0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	dd06      	ble.n	8001896 <main+0x496>
 8001888:	4b89      	ldr	r3, [pc, #548]	@ (8001ab0 <main+0x6b0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001892:	429a      	cmp	r2, r3
 8001894:	dd03      	ble.n	800189e <main+0x49e>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001896:	2101      	movs	r1, #1
 8001898:	4887      	ldr	r0, [pc, #540]	@ (8001ab8 <main+0x6b8>)
 800189a:	f001 fca7 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setSoftPositiveLimit(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 800189e:	4b87      	ldr	r3, [pc, #540]	@ (8001abc <main+0x6bc>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
					break;
 80018a4:	e1a2      	b.n	8001bec <main+0x7ec>

				case 5:
					TxData = etc_new_data;
 80018a6:	4b82      	ldr	r3, [pc, #520]	@ (8001ab0 <main+0x6b0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a82      	ldr	r2, [pc, #520]	@ (8001ab4 <main+0x6b4>)
 80018ac:	6013      	str	r3, [r2, #0]
					if (((int32_t) etc_new_data >= 0) || ((int32_t) etc_new_data < -12000)) {	//cannot be 0, positive number or less than -12000um = -12mm
 80018ae:	4b80      	ldr	r3, [pc, #512]	@ (8001ab0 <main+0x6b0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da05      	bge.n	80018c2 <main+0x4c2>
 80018b6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ab0 <main+0x6b0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b80      	ldr	r3, [pc, #512]	@ (8001ac0 <main+0x6c0>)
 80018be:	429a      	cmp	r2, r3
 80018c0:	da03      	bge.n	80018ca <main+0x4ca>
						setWrongCommandFlag(&tmc4671_controller, true);
 80018c2:	2101      	movs	r1, #1
 80018c4:	487c      	ldr	r0, [pc, #496]	@ (8001ab8 <main+0x6b8>)
 80018c6:	f001 fc91 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setSoftNegativeLimit(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80018ca:	4b7c      	ldr	r3, [pc, #496]	@ (8001abc <main+0x6bc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
					break;
 80018d0:	e18c      	b.n	8001bec <main+0x7ec>

				case 6:
					TxData = etc_new_data;
 80018d2:	4b77      	ldr	r3, [pc, #476]	@ (8001ab0 <main+0x6b0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a77      	ldr	r2, [pc, #476]	@ (8001ab4 <main+0x6b4>)
 80018d8:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 2000)) {	//cannot be 0, negative number or more than 2000um = 2mm
 80018da:	4b75      	ldr	r3, [pc, #468]	@ (8001ab0 <main+0x6b0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d004      	beq.n	80018ec <main+0x4ec>
 80018e2:	4b73      	ldr	r3, [pc, #460]	@ (8001ab0 <main+0x6b0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80018ea:	d903      	bls.n	80018f4 <main+0x4f4>
						setWrongCommandFlag(&tmc4671_controller, true);
 80018ec:	2101      	movs	r1, #1
 80018ee:	4872      	ldr	r0, [pc, #456]	@ (8001ab8 <main+0x6b8>)
 80018f0:	f001 fc7c 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setMaxPositionError(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80018f4:	4b71      	ldr	r3, [pc, #452]	@ (8001abc <main+0x6bc>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
					break;
 80018fa:	e177      	b.n	8001bec <main+0x7ec>

				case 7:
					TxData = etc_new_data;
 80018fc:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab0 <main+0x6b0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6c      	ldr	r2, [pc, #432]	@ (8001ab4 <main+0x6b4>)
 8001902:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 5000)) {	//cannot be 0, negative number or more than 5000
 8001904:	4b6a      	ldr	r3, [pc, #424]	@ (8001ab0 <main+0x6b0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <main+0x518>
 800190c:	4b68      	ldr	r3, [pc, #416]	@ (8001ab0 <main+0x6b0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001914:	4293      	cmp	r3, r2
 8001916:	d903      	bls.n	8001920 <main+0x520>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001918:	2101      	movs	r1, #1
 800191a:	4867      	ldr	r0, [pc, #412]	@ (8001ab8 <main+0x6b8>)
 800191c:	f001 fc66 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setCurrentLimitHoming(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001920:	4b66      	ldr	r3, [pc, #408]	@ (8001abc <main+0x6bc>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
					break;
 8001926:	e161      	b.n	8001bec <main+0x7ec>

				case 8:
					TxData = etc_new_data;
 8001928:	4b61      	ldr	r3, [pc, #388]	@ (8001ab0 <main+0x6b0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a61      	ldr	r2, [pc, #388]	@ (8001ab4 <main+0x6b4>)
 800192e:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 15000)) {//cannot be 0, negative number or more than 15000
 8001930:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab0 <main+0x6b0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <main+0x544>
 8001938:	4b5d      	ldr	r3, [pc, #372]	@ (8001ab0 <main+0x6b0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001940:	4293      	cmp	r3, r2
 8001942:	d903      	bls.n	800194c <main+0x54c>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001944:	2101      	movs	r1, #1
 8001946:	485c      	ldr	r0, [pc, #368]	@ (8001ab8 <main+0x6b8>)
 8001948:	f001 fc50 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setCurrentLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 800194c:	4b5b      	ldr	r3, [pc, #364]	@ (8001abc <main+0x6bc>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
					break;
 8001952:	e14b      	b.n	8001bec <main+0x7ec>

				case 9:
					TxData = etc_new_data;
 8001954:	4b56      	ldr	r3, [pc, #344]	@ (8001ab0 <main+0x6b0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a56      	ldr	r2, [pc, #344]	@ (8001ab4 <main+0x6b4>)
 800195a:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 8000)) {	//cannot be 0, negative number or more than 8000
 800195c:	4b54      	ldr	r3, [pc, #336]	@ (8001ab0 <main+0x6b0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <main+0x56e>
 8001964:	4b52      	ldr	r3, [pc, #328]	@ (8001ab0 <main+0x6b0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800196c:	d903      	bls.n	8001976 <main+0x576>
						setWrongCommandFlag(&tmc4671_controller, true);
 800196e:	2101      	movs	r1, #1
 8001970:	4851      	ldr	r0, [pc, #324]	@ (8001ab8 <main+0x6b8>)
 8001972:	f001 fc3b 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setVoltageLimitHoming(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001976:	4b51      	ldr	r3, [pc, #324]	@ (8001abc <main+0x6bc>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
					break;
 800197c:	e136      	b.n	8001bec <main+0x7ec>

				case 10:
					TxData = etc_new_data;
 800197e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab0 <main+0x6b0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a4c      	ldr	r2, [pc, #304]	@ (8001ab4 <main+0x6b4>)
 8001984:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 500)) {//cannot be 0, negative number or more than 500
 8001986:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab0 <main+0x6b0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <main+0x598>
 800198e:	4b48      	ldr	r3, [pc, #288]	@ (8001ab0 <main+0x6b0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001996:	d903      	bls.n	80019a0 <main+0x5a0>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001998:	2101      	movs	r1, #1
 800199a:	4847      	ldr	r0, [pc, #284]	@ (8001ab8 <main+0x6b8>)
 800199c:	f001 fc26 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setVelocityLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80019a0:	4b46      	ldr	r3, [pc, #280]	@ (8001abc <main+0x6bc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
					break;
 80019a6:	e121      	b.n	8001bec <main+0x7ec>

				case 11:
					TxData = etc_new_data;
 80019a8:	4b41      	ldr	r3, [pc, #260]	@ (8001ab0 <main+0x6b0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a41      	ldr	r2, [pc, #260]	@ (8001ab4 <main+0x6b4>)
 80019ae:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 30000)) {//cannot be 0, negative number or more than 30000
 80019b0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab0 <main+0x6b0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <main+0x5c4>
 80019b8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <main+0x6b0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f247 5230 	movw	r2, #30000	@ 0x7530
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d903      	bls.n	80019cc <main+0x5cc>
						setWrongCommandFlag(&tmc4671_controller, true);
 80019c4:	2101      	movs	r1, #1
 80019c6:	483c      	ldr	r0, [pc, #240]	@ (8001ab8 <main+0x6b8>)
 80019c8:	f001 fc10 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setTorqueLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80019cc:	4b3b      	ldr	r3, [pc, #236]	@ (8001abc <main+0x6bc>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
					break;
 80019d2:	e10b      	b.n	8001bec <main+0x7ec>

				case 12:
					TxData = etc_new_data;
 80019d4:	4b36      	ldr	r3, [pc, #216]	@ (8001ab0 <main+0x6b0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a36      	ldr	r2, [pc, #216]	@ (8001ab4 <main+0x6b4>)
 80019da:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 80019dc:	4b34      	ldr	r3, [pc, #208]	@ (8001ab0 <main+0x6b0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <main+0x5f0>
 80019e4:	4b32      	ldr	r3, [pc, #200]	@ (8001ab0 <main+0x6b0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d903      	bls.n	80019f8 <main+0x5f8>
						setWrongCommandFlag(&tmc4671_controller, true);
 80019f0:	2101      	movs	r1, #1
 80019f2:	4831      	ldr	r0, [pc, #196]	@ (8001ab8 <main+0x6b8>)
 80019f4:	f001 fbfa 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setCurrentGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80019f8:	4b30      	ldr	r3, [pc, #192]	@ (8001abc <main+0x6bc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
					break;
 80019fe:	e0f5      	b.n	8001bec <main+0x7ec>

				case 13:
					TxData = etc_new_data;
 8001a00:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab0 <main+0x6b0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2b      	ldr	r2, [pc, #172]	@ (8001ab4 <main+0x6b4>)
 8001a06:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a08:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <main+0x6b0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <main+0x61c>
 8001a10:	4b27      	ldr	r3, [pc, #156]	@ (8001ab0 <main+0x6b0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d903      	bls.n	8001a24 <main+0x624>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4826      	ldr	r0, [pc, #152]	@ (8001ab8 <main+0x6b8>)
 8001a20:	f001 fbe4 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setCurrentGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a24:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <main+0x6bc>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
					break;
 8001a2a:	e0df      	b.n	8001bec <main+0x7ec>

				case 14:
					TxData = etc_new_data;
 8001a2c:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <main+0x6b0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a20      	ldr	r2, [pc, #128]	@ (8001ab4 <main+0x6b4>)
 8001a32:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a34:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <main+0x6b0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <main+0x648>
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <main+0x6b0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d903      	bls.n	8001a50 <main+0x650>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a48:	2101      	movs	r1, #1
 8001a4a:	481b      	ldr	r0, [pc, #108]	@ (8001ab8 <main+0x6b8>)
 8001a4c:	f001 fbce 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setVelocityGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <main+0x6bc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
					break;
 8001a56:	e0c9      	b.n	8001bec <main+0x7ec>

				case 15:
					TxData = etc_new_data;
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <main+0x6b0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a15      	ldr	r2, [pc, #84]	@ (8001ab4 <main+0x6b4>)
 8001a5e:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a60:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <main+0x6b0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <main+0x674>
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <main+0x6b0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d903      	bls.n	8001a7c <main+0x67c>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a74:	2101      	movs	r1, #1
 8001a76:	4810      	ldr	r0, [pc, #64]	@ (8001ab8 <main+0x6b8>)
 8001a78:	f001 fbb8 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setVelocityGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <main+0x6bc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
					break;
 8001a82:	e0b3      	b.n	8001bec <main+0x7ec>

				case 16:
					TxData = etc_new_data;
 8001a84:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <main+0x6b0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <main+0x6b4>)
 8001a8a:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <main+0x6b0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <main+0x6a0>
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <main+0x6b0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d903      	bls.n	8001aa8 <main+0x6a8>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <main+0x6b8>)
 8001aa4:	f001 fba2 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setPositionGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <main+0x6bc>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
					break;
 8001aae:	e09d      	b.n	8001bec <main+0x7ec>
 8001ab0:	2000032c 	.word	0x2000032c
 8001ab4:	20000344 	.word	0x20000344
 8001ab8:	200002c0 	.word	0x200002c0
 8001abc:	2000031e 	.word	0x2000031e
 8001ac0:	ffffd120 	.word	0xffffd120

				case 17:
					TxData = etc_new_data;
 8001ac4:	4b4e      	ldr	r3, [pc, #312]	@ (8001c00 <main+0x800>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a4e      	ldr	r2, [pc, #312]	@ (8001c04 <main+0x804>)
 8001aca:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001acc:	4b4c      	ldr	r3, [pc, #304]	@ (8001c00 <main+0x800>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <main+0x6e0>
 8001ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8001c00 <main+0x800>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d903      	bls.n	8001ae8 <main+0x6e8>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4849      	ldr	r0, [pc, #292]	@ (8001c08 <main+0x808>)
 8001ae4:	f001 fb82 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setPositionGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001ae8:	4b48      	ldr	r3, [pc, #288]	@ (8001c0c <main+0x80c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
					break;
 8001aee:	e07d      	b.n	8001bec <main+0x7ec>

				case 18:
					TxData = etc_new_data;
 8001af0:	4b43      	ldr	r3, [pc, #268]	@ (8001c00 <main+0x800>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a43      	ldr	r2, [pc, #268]	@ (8001c04 <main+0x804>)
 8001af6:	6013      	str	r3, [r2, #0]
					if (((int32_t) etc_new_data < -12000) || ((int32_t) etc_new_data > 12000)) {//cannot be less than -12000um = -12mm or greater than 12000um = 12mm
 8001af8:	4b41      	ldr	r3, [pc, #260]	@ (8001c00 <main+0x800>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b44      	ldr	r3, [pc, #272]	@ (8001c10 <main+0x810>)
 8001b00:	429a      	cmp	r2, r3
 8001b02:	db06      	blt.n	8001b12 <main+0x712>
 8001b04:	4b3e      	ldr	r3, [pc, #248]	@ (8001c00 <main+0x800>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dd03      	ble.n	8001b1a <main+0x71a>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001b12:	2101      	movs	r1, #1
 8001b14:	483c      	ldr	r0, [pc, #240]	@ (8001c08 <main+0x808>)
 8001b16:	f001 fb69 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setAbsoluteTargetPosition(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c0c <main+0x80c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
					break;
 8001b20:	e064      	b.n	8001bec <main+0x7ec>

				case 19:
					TxData = etc_new_data;
 8001b22:	4b37      	ldr	r3, [pc, #220]	@ (8001c00 <main+0x800>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a37      	ldr	r2, [pc, #220]	@ (8001c04 <main+0x804>)
 8001b28:	6013      	str	r3, [r2, #0]
					if (((int32_t) etc_new_data < -12000) || ((int32_t) etc_new_data > 12000)) {//cannot be less than -12000um = -12mm or greater than 12000um = 12mm
 8001b2a:	4b35      	ldr	r3, [pc, #212]	@ (8001c00 <main+0x800>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b37      	ldr	r3, [pc, #220]	@ (8001c10 <main+0x810>)
 8001b32:	429a      	cmp	r2, r3
 8001b34:	db06      	blt.n	8001b44 <main+0x744>
 8001b36:	4b32      	ldr	r3, [pc, #200]	@ (8001c00 <main+0x800>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dd03      	ble.n	8001b4c <main+0x74c>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001b44:	2101      	movs	r1, #1
 8001b46:	4830      	ldr	r0, [pc, #192]	@ (8001c08 <main+0x808>)
 8001b48:	f001 fb50 	bl	80031ec <setWrongCommandFlag>
					} else {
//						setIncrementalTargetPosition(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c0c <main+0x80c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
					break;
 8001b52:	e04b      	b.n	8001bec <main+0x7ec>

				case 100:
					TxData = etc_new_data;
 8001b54:	4b2a      	ldr	r3, [pc, #168]	@ (8001c00 <main+0x800>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2a      	ldr	r2, [pc, #168]	@ (8001c04 <main+0x804>)
 8001b5a:	6013      	str	r3, [r2, #0]
					if ((etc_new_data != 0) && (etc_new_data != 1)) {//cannot be anything other than 0 or 1
 8001b5c:	4b28      	ldr	r3, [pc, #160]	@ (8001c00 <main+0x800>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <main+0x774>
 8001b64:	4b26      	ldr	r3, [pc, #152]	@ (8001c00 <main+0x800>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d003      	beq.n	8001b74 <main+0x774>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4826      	ldr	r0, [pc, #152]	@ (8001c08 <main+0x808>)
 8001b70:	f001 fb3c 	bl	80031ec <setWrongCommandFlag>
					} else {
//						servoEnable(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001b74:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <main+0x80c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
					break;
 8001b7a:	e037      	b.n	8001bec <main+0x7ec>

				case 101:
					TxData = 0;
 8001b7c:	4b21      	ldr	r3, [pc, #132]	@ (8001c04 <main+0x804>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
//					startHoming(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b82:	2100      	movs	r1, #0
 8001b84:	4820      	ldr	r0, [pc, #128]	@ (8001c08 <main+0x808>)
 8001b86:	f001 fb31 	bl	80031ec <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <main+0x80c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
					break;
 8001b90:	e02c      	b.n	8001bec <main+0x7ec>

				case 102:
					TxData = 0;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <main+0x804>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
//					clearFaults(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	481b      	ldr	r0, [pc, #108]	@ (8001c08 <main+0x808>)
 8001b9c:	f001 fb26 	bl	80031ec <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <main+0x80c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
					break;
 8001ba6:	e021      	b.n	8001bec <main+0x7ec>

				case 103:
					TxData = 0;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <main+0x804>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
					//saveParameters(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4815      	ldr	r0, [pc, #84]	@ (8001c08 <main+0x808>)
 8001bb2:	f001 fb1b 	bl	80031ec <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <main+0x80c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
					break;
 8001bbc:	e016      	b.n	8001bec <main+0x7ec>

				case 104:
					TxData = 0;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <main+0x804>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
					//loadDefaultParameters(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4810      	ldr	r0, [pc, #64]	@ (8001c08 <main+0x808>)
 8001bc8:	f001 fb10 	bl	80031ec <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <main+0x80c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
					break;
 8001bd2:	e00b      	b.n	8001bec <main+0x7ec>

				case 105:
					TxData = 0;
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <main+0x804>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
					//stopMovement(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001bda:	2100      	movs	r1, #0
 8001bdc:	480a      	ldr	r0, [pc, #40]	@ (8001c08 <main+0x808>)
 8001bde:	f001 fb05 	bl	80031ec <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <main+0x80c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
					break;
 8001be8:	e000      	b.n	8001bec <main+0x7ec>

				default:
					break;
 8001bea:	bf00      	nop
				}
				etc_old_command = etc_new_command;
 8001bec:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <main+0x814>)
 8001bee:	881a      	ldrh	r2, [r3, #0]
 8001bf0:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <main+0x818>)
 8001bf2:	801a      	strh	r2, [r3, #0]
				etc_old_data = etc_new_data;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	@ (8001c00 <main+0x800>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a08      	ldr	r2, [pc, #32]	@ (8001c1c <main+0x81c>)
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	e2ed      	b.n	80021da <main+0xdda>
 8001bfe:	bf00      	nop
 8001c00:	2000032c 	.word	0x2000032c
 8001c04:	20000344 	.word	0x20000344
 8001c08:	200002c0 	.word	0x200002c0
 8001c0c:	2000031e 	.word	0x2000031e
 8001c10:	ffffd120 	.word	0xffffd120
 8001c14:	20000328 	.word	0x20000328
 8001c18:	20000320 	.word	0x20000320
 8001c1c:	20000324 	.word	0x20000324
		  }
	  } else if (get_command_flag) {
 8001c20:	4bd8      	ldr	r3, [pc, #864]	@ (8001f84 <main+0xb84>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 8270 	beq.w	800210a <main+0xd0a>
		  switch(etc_new_command) {
 8001c2a:	4bd7      	ldr	r3, [pc, #860]	@ (8001f88 <main+0xb88>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	3b32      	subs	r3, #50	@ 0x32
 8001c30:	2b96      	cmp	r3, #150	@ 0x96
 8001c32:	f200 8258 	bhi.w	80020e6 <main+0xce6>
 8001c36:	a201      	add	r2, pc, #4	@ (adr r2, 8001c3c <main+0x83c>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001e99 	.word	0x08001e99
 8001c40:	08001ea9 	.word	0x08001ea9
 8001c44:	08001ec7 	.word	0x08001ec7
 8001c48:	08001ed7 	.word	0x08001ed7
 8001c4c:	08001ee7 	.word	0x08001ee7
 8001c50:	08001ef7 	.word	0x08001ef7
 8001c54:	08001f13 	.word	0x08001f13
 8001c58:	08001f2f 	.word	0x08001f2f
 8001c5c:	08001f4b 	.word	0x08001f4b
 8001c60:	08001f67 	.word	0x08001f67
 8001c64:	08001f99 	.word	0x08001f99
 8001c68:	08001fb5 	.word	0x08001fb5
 8001c6c:	08001fd1 	.word	0x08001fd1
 8001c70:	08001fed 	.word	0x08001fed
 8001c74:	08002009 	.word	0x08002009
 8001c78:	08002025 	.word	0x08002025
 8001c7c:	08002041 	.word	0x08002041
 8001c80:	0800205d 	.word	0x0800205d
 8001c84:	0800206d 	.word	0x0800206d
 8001c88:	0800207d 	.word	0x0800207d
 8001c8c:	08002099 	.word	0x08002099
 8001c90:	080020e7 	.word	0x080020e7
 8001c94:	080020e7 	.word	0x080020e7
 8001c98:	080020e7 	.word	0x080020e7
 8001c9c:	080020e7 	.word	0x080020e7
 8001ca0:	080020e7 	.word	0x080020e7
 8001ca4:	080020e7 	.word	0x080020e7
 8001ca8:	080020e7 	.word	0x080020e7
 8001cac:	080020e7 	.word	0x080020e7
 8001cb0:	080020e7 	.word	0x080020e7
 8001cb4:	080020e7 	.word	0x080020e7
 8001cb8:	080020e7 	.word	0x080020e7
 8001cbc:	080020e7 	.word	0x080020e7
 8001cc0:	080020e7 	.word	0x080020e7
 8001cc4:	080020e7 	.word	0x080020e7
 8001cc8:	080020e7 	.word	0x080020e7
 8001ccc:	080020e7 	.word	0x080020e7
 8001cd0:	080020e7 	.word	0x080020e7
 8001cd4:	080020e7 	.word	0x080020e7
 8001cd8:	080020e7 	.word	0x080020e7
 8001cdc:	080020e7 	.word	0x080020e7
 8001ce0:	080020e7 	.word	0x080020e7
 8001ce4:	080020e7 	.word	0x080020e7
 8001ce8:	080020e7 	.word	0x080020e7
 8001cec:	080020e7 	.word	0x080020e7
 8001cf0:	080020e7 	.word	0x080020e7
 8001cf4:	080020e7 	.word	0x080020e7
 8001cf8:	080020e7 	.word	0x080020e7
 8001cfc:	080020e7 	.word	0x080020e7
 8001d00:	080020e7 	.word	0x080020e7
 8001d04:	080020e7 	.word	0x080020e7
 8001d08:	080020e7 	.word	0x080020e7
 8001d0c:	080020e7 	.word	0x080020e7
 8001d10:	080020e7 	.word	0x080020e7
 8001d14:	080020e7 	.word	0x080020e7
 8001d18:	080020e7 	.word	0x080020e7
 8001d1c:	080020e7 	.word	0x080020e7
 8001d20:	080020e7 	.word	0x080020e7
 8001d24:	080020e7 	.word	0x080020e7
 8001d28:	080020e7 	.word	0x080020e7
 8001d2c:	080020e7 	.word	0x080020e7
 8001d30:	080020e7 	.word	0x080020e7
 8001d34:	080020e7 	.word	0x080020e7
 8001d38:	080020e7 	.word	0x080020e7
 8001d3c:	080020e7 	.word	0x080020e7
 8001d40:	080020e7 	.word	0x080020e7
 8001d44:	080020e7 	.word	0x080020e7
 8001d48:	080020e7 	.word	0x080020e7
 8001d4c:	080020e7 	.word	0x080020e7
 8001d50:	080020e7 	.word	0x080020e7
 8001d54:	080020e7 	.word	0x080020e7
 8001d58:	080020e7 	.word	0x080020e7
 8001d5c:	080020e7 	.word	0x080020e7
 8001d60:	080020e7 	.word	0x080020e7
 8001d64:	080020e7 	.word	0x080020e7
 8001d68:	080020e7 	.word	0x080020e7
 8001d6c:	080020e7 	.word	0x080020e7
 8001d70:	080020e7 	.word	0x080020e7
 8001d74:	080020e7 	.word	0x080020e7
 8001d78:	080020e7 	.word	0x080020e7
 8001d7c:	080020e7 	.word	0x080020e7
 8001d80:	080020e7 	.word	0x080020e7
 8001d84:	080020e7 	.word	0x080020e7
 8001d88:	080020e7 	.word	0x080020e7
 8001d8c:	080020e7 	.word	0x080020e7
 8001d90:	080020e7 	.word	0x080020e7
 8001d94:	080020e7 	.word	0x080020e7
 8001d98:	080020e7 	.word	0x080020e7
 8001d9c:	080020e7 	.word	0x080020e7
 8001da0:	080020e7 	.word	0x080020e7
 8001da4:	080020e7 	.word	0x080020e7
 8001da8:	080020e7 	.word	0x080020e7
 8001dac:	080020e7 	.word	0x080020e7
 8001db0:	080020e7 	.word	0x080020e7
 8001db4:	080020e7 	.word	0x080020e7
 8001db8:	080020e7 	.word	0x080020e7
 8001dbc:	080020e7 	.word	0x080020e7
 8001dc0:	080020e7 	.word	0x080020e7
 8001dc4:	080020e7 	.word	0x080020e7
 8001dc8:	080020e7 	.word	0x080020e7
 8001dcc:	080020e7 	.word	0x080020e7
 8001dd0:	080020e7 	.word	0x080020e7
 8001dd4:	080020e7 	.word	0x080020e7
 8001dd8:	080020e7 	.word	0x080020e7
 8001ddc:	080020e7 	.word	0x080020e7
 8001de0:	080020e7 	.word	0x080020e7
 8001de4:	080020e7 	.word	0x080020e7
 8001de8:	080020e7 	.word	0x080020e7
 8001dec:	080020e7 	.word	0x080020e7
 8001df0:	080020e7 	.word	0x080020e7
 8001df4:	080020e7 	.word	0x080020e7
 8001df8:	080020e7 	.word	0x080020e7
 8001dfc:	080020e7 	.word	0x080020e7
 8001e00:	080020e7 	.word	0x080020e7
 8001e04:	080020e7 	.word	0x080020e7
 8001e08:	080020e7 	.word	0x080020e7
 8001e0c:	080020e7 	.word	0x080020e7
 8001e10:	080020e7 	.word	0x080020e7
 8001e14:	080020e7 	.word	0x080020e7
 8001e18:	080020e7 	.word	0x080020e7
 8001e1c:	080020e7 	.word	0x080020e7
 8001e20:	080020e7 	.word	0x080020e7
 8001e24:	080020e7 	.word	0x080020e7
 8001e28:	080020e7 	.word	0x080020e7
 8001e2c:	080020e7 	.word	0x080020e7
 8001e30:	080020e7 	.word	0x080020e7
 8001e34:	080020e7 	.word	0x080020e7
 8001e38:	080020e7 	.word	0x080020e7
 8001e3c:	080020e7 	.word	0x080020e7
 8001e40:	080020e7 	.word	0x080020e7
 8001e44:	080020e7 	.word	0x080020e7
 8001e48:	080020e7 	.word	0x080020e7
 8001e4c:	080020e7 	.word	0x080020e7
 8001e50:	080020e7 	.word	0x080020e7
 8001e54:	080020e7 	.word	0x080020e7
 8001e58:	080020e7 	.word	0x080020e7
 8001e5c:	080020e7 	.word	0x080020e7
 8001e60:	080020e7 	.word	0x080020e7
 8001e64:	080020e7 	.word	0x080020e7
 8001e68:	080020e7 	.word	0x080020e7
 8001e6c:	080020e7 	.word	0x080020e7
 8001e70:	080020e7 	.word	0x080020e7
 8001e74:	080020e7 	.word	0x080020e7
 8001e78:	080020e7 	.word	0x080020e7
 8001e7c:	080020e7 	.word	0x080020e7
 8001e80:	080020e7 	.word	0x080020e7
 8001e84:	080020e7 	.word	0x080020e7
 8001e88:	080020e7 	.word	0x080020e7
 8001e8c:	080020e7 	.word	0x080020e7
 8001e90:	080020e7 	.word	0x080020e7
 8001e94:	080020b5 	.word	0x080020b5
			case 50:
				//TxData = getEncoderResolution(&tmc4671_controller);
				setWrongCommandFlag(&tmc4671_controller, false);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	483c      	ldr	r0, [pc, #240]	@ (8001f8c <main+0xb8c>)
 8001e9c:	f001 f9a6 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8001f90 <main+0xb90>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
				break;
 8001ea6:	e129      	b.n	80020fc <main+0xcfc>

			case 51:
				TxData = getEncoderDirection(&tmc4671_controller);
 8001ea8:	4838      	ldr	r0, [pc, #224]	@ (8001f8c <main+0xb8c>)
 8001eaa:	f001 fa4d 	bl	8003348 <getEncoderDirection>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <main+0xb94>)
 8001eb4:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4834      	ldr	r0, [pc, #208]	@ (8001f8c <main+0xb8c>)
 8001eba:	f001 f997 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ebe:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <main+0xb90>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
				break;
 8001ec4:	e11a      	b.n	80020fc <main+0xcfc>

			case 52:
				// int32_t zero_offset = getZeroOffset(&tmc4671_controller);
				// TxData = (uint32_t) zero_offset;  // Cast int32_t to uint32_t
				 setWrongCommandFlag(&tmc4671_controller, false);
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4830      	ldr	r0, [pc, #192]	@ (8001f8c <main+0xb8c>)
 8001eca:	f001 f98f 	bl	80031ec <setWrongCommandFlag>
				 continuous_tx_flag = true;
 8001ece:	4b30      	ldr	r3, [pc, #192]	@ (8001f90 <main+0xb90>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
				 break;
 8001ed4:	e112      	b.n	80020fc <main+0xcfc>

			case 53:
			//	int32_t soft_pos_limit = getSoftPositiveLimit(&tmc4671_controller);
			//	TxData = (uint32_t) soft_pos_limit;  // Cast int32_t to uint32_t
				setWrongCommandFlag(&tmc4671_controller, false);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	482c      	ldr	r0, [pc, #176]	@ (8001f8c <main+0xb8c>)
 8001eda:	f001 f987 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ede:	4b2c      	ldr	r3, [pc, #176]	@ (8001f90 <main+0xb90>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
				break;
 8001ee4:	e10a      	b.n	80020fc <main+0xcfc>


			case 54:
			//	int32_t soft_neg_limit = getSoftNegativeLimit(&tmc4671_controller);
			//	TxData = (uint32_t) soft_neg_limit;  // Cast int32_t to uint32_t
				setWrongCommandFlag(&tmc4671_controller, false);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4828      	ldr	r0, [pc, #160]	@ (8001f8c <main+0xb8c>)
 8001eea:	f001 f97f 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001eee:	4b28      	ldr	r3, [pc, #160]	@ (8001f90 <main+0xb90>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
				break;
 8001ef4:	e102      	b.n	80020fc <main+0xcfc>

			case 55:
				TxData = getMaxPositionError(&tmc4671_controller);
 8001ef6:	4825      	ldr	r0, [pc, #148]	@ (8001f8c <main+0xb8c>)
 8001ef8:	f001 fa82 	bl	8003400 <getMaxPositionError>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4a25      	ldr	r2, [pc, #148]	@ (8001f94 <main+0xb94>)
 8001f00:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f02:	2100      	movs	r1, #0
 8001f04:	4821      	ldr	r0, [pc, #132]	@ (8001f8c <main+0xb8c>)
 8001f06:	f001 f971 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f0a:	4b21      	ldr	r3, [pc, #132]	@ (8001f90 <main+0xb90>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
				break;
 8001f10:	e0f4      	b.n	80020fc <main+0xcfc>

			case 56:
				TxData = getCurrentLimitHoming(&tmc4671_controller);
 8001f12:	481e      	ldr	r0, [pc, #120]	@ (8001f8c <main+0xb8c>)
 8001f14:	f001 fa35 	bl	8003382 <getCurrentLimitHoming>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f94 <main+0xb94>)
 8001f1c:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	481a      	ldr	r0, [pc, #104]	@ (8001f8c <main+0xb8c>)
 8001f22:	f001 f963 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <main+0xb90>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
				break;
 8001f2c:	e0e6      	b.n	80020fc <main+0xcfc>

			case 57:
				TxData = getCurrentLimitServo(&tmc4671_controller);
 8001f2e:	4817      	ldr	r0, [pc, #92]	@ (8001f8c <main+0xb8c>)
 8001f30:	f001 fa33 	bl	800339a <getCurrentLimitServo>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a17      	ldr	r2, [pc, #92]	@ (8001f94 <main+0xb94>)
 8001f38:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4813      	ldr	r0, [pc, #76]	@ (8001f8c <main+0xb8c>)
 8001f3e:	f001 f955 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f42:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <main+0xb90>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
				break;
 8001f48:	e0d8      	b.n	80020fc <main+0xcfc>

			case 58:
				TxData = getVoltageLimitHoming(&tmc4671_controller);
 8001f4a:	4810      	ldr	r0, [pc, #64]	@ (8001f8c <main+0xb8c>)
 8001f4c:	f001 fa31 	bl	80033b2 <getVoltageLimitHoming>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4a10      	ldr	r2, [pc, #64]	@ (8001f94 <main+0xb94>)
 8001f54:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f56:	2100      	movs	r1, #0
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <main+0xb8c>)
 8001f5a:	f001 f947 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <main+0xb90>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
				break;
 8001f64:	e0ca      	b.n	80020fc <main+0xcfc>

			case 59:
				TxData = getVelocityLimitServo(&tmc4671_controller);
 8001f66:	4809      	ldr	r0, [pc, #36]	@ (8001f8c <main+0xb8c>)
 8001f68:	f001 fa2f 	bl	80033ca <getVelocityLimitServo>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4a09      	ldr	r2, [pc, #36]	@ (8001f94 <main+0xb94>)
 8001f70:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f72:	2100      	movs	r1, #0
 8001f74:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <main+0xb8c>)
 8001f76:	f001 f939 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f7a:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <main+0xb90>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
				break;
 8001f80:	e0bc      	b.n	80020fc <main+0xcfc>
 8001f82:	bf00      	nop
 8001f84:	2000031d 	.word	0x2000031d
 8001f88:	20000328 	.word	0x20000328
 8001f8c:	200002c0 	.word	0x200002c0
 8001f90:	2000031e 	.word	0x2000031e
 8001f94:	20000344 	.word	0x20000344

			case 60:
				TxData = getTorqueLimitServo(&tmc4671_controller);
 8001f98:	487b      	ldr	r0, [pc, #492]	@ (8002188 <main+0xd88>)
 8001f9a:	f001 fa22 	bl	80033e2 <getTorqueLimitServo>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4a7a      	ldr	r2, [pc, #488]	@ (800218c <main+0xd8c>)
 8001fa2:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4878      	ldr	r0, [pc, #480]	@ (8002188 <main+0xd88>)
 8001fa8:	f001 f920 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001fac:	4b78      	ldr	r3, [pc, #480]	@ (8002190 <main+0xd90>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
				break;
 8001fb2:	e0a3      	b.n	80020fc <main+0xcfc>

			case 61:
				TxData = getCurrentGainP(&tmc4671_controller);
 8001fb4:	4874      	ldr	r0, [pc, #464]	@ (8002188 <main+0xd88>)
 8001fb6:	f001 fa51 	bl	800345c <getCurrentGainP>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4a73      	ldr	r2, [pc, #460]	@ (800218c <main+0xd8c>)
 8001fbe:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4871      	ldr	r0, [pc, #452]	@ (8002188 <main+0xd88>)
 8001fc4:	f001 f912 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001fc8:	4b71      	ldr	r3, [pc, #452]	@ (8002190 <main+0xd90>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
				break;
 8001fce:	e095      	b.n	80020fc <main+0xcfc>

			case 62:
				TxData = getCurrentGainI(&tmc4671_controller);
 8001fd0:	486d      	ldr	r0, [pc, #436]	@ (8002188 <main+0xd88>)
 8001fd2:	f001 fa4f 	bl	8003474 <getCurrentGainI>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4a6c      	ldr	r2, [pc, #432]	@ (800218c <main+0xd8c>)
 8001fda:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fdc:	2100      	movs	r1, #0
 8001fde:	486a      	ldr	r0, [pc, #424]	@ (8002188 <main+0xd88>)
 8001fe0:	f001 f904 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8002190 <main+0xd90>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
				break;
 8001fea:	e087      	b.n	80020fc <main+0xcfc>

			case 63:
				TxData = getVelocityGainP(&tmc4671_controller);
 8001fec:	4866      	ldr	r0, [pc, #408]	@ (8002188 <main+0xd88>)
 8001fee:	f001 fa4d 	bl	800348c <getVelocityGainP>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4a65      	ldr	r2, [pc, #404]	@ (800218c <main+0xd8c>)
 8001ff6:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4863      	ldr	r0, [pc, #396]	@ (8002188 <main+0xd88>)
 8001ffc:	f001 f8f6 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002000:	4b63      	ldr	r3, [pc, #396]	@ (8002190 <main+0xd90>)
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
				break;
 8002006:	e079      	b.n	80020fc <main+0xcfc>

			case 64:
				TxData = getVelocityGainI(&tmc4671_controller);
 8002008:	485f      	ldr	r0, [pc, #380]	@ (8002188 <main+0xd88>)
 800200a:	f001 fa4b 	bl	80034a4 <getVelocityGainI>
 800200e:	4603      	mov	r3, r0
 8002010:	4a5e      	ldr	r2, [pc, #376]	@ (800218c <main+0xd8c>)
 8002012:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002014:	2100      	movs	r1, #0
 8002016:	485c      	ldr	r0, [pc, #368]	@ (8002188 <main+0xd88>)
 8002018:	f001 f8e8 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 800201c:	4b5c      	ldr	r3, [pc, #368]	@ (8002190 <main+0xd90>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
				break;
 8002022:	e06b      	b.n	80020fc <main+0xcfc>

			case 65:
				TxData = getPositionGainP(&tmc4671_controller);
 8002024:	4858      	ldr	r0, [pc, #352]	@ (8002188 <main+0xd88>)
 8002026:	f001 fa49 	bl	80034bc <getPositionGainP>
 800202a:	4603      	mov	r3, r0
 800202c:	4a57      	ldr	r2, [pc, #348]	@ (800218c <main+0xd8c>)
 800202e:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002030:	2100      	movs	r1, #0
 8002032:	4855      	ldr	r0, [pc, #340]	@ (8002188 <main+0xd88>)
 8002034:	f001 f8da 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002038:	4b55      	ldr	r3, [pc, #340]	@ (8002190 <main+0xd90>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
				break;
 800203e:	e05d      	b.n	80020fc <main+0xcfc>

			case 66:
				TxData = getPositionGainI(&tmc4671_controller);
 8002040:	4851      	ldr	r0, [pc, #324]	@ (8002188 <main+0xd88>)
 8002042:	f001 fa47 	bl	80034d4 <getPositionGainI>
 8002046:	4603      	mov	r3, r0
 8002048:	4a50      	ldr	r2, [pc, #320]	@ (800218c <main+0xd8c>)
 800204a:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 800204c:	2100      	movs	r1, #0
 800204e:	484e      	ldr	r0, [pc, #312]	@ (8002188 <main+0xd88>)
 8002050:	f001 f8cc 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002054:	4b4e      	ldr	r3, [pc, #312]	@ (8002190 <main+0xd90>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
				break;
 800205a:	e04f      	b.n	80020fc <main+0xcfc>

			case 67:
			//	int32_t target_position = getTargetPosition(&tmc4671_controller);
			//	TxData = (uint32_t) target_position;  // Cast int32_t to uint32_t
				setWrongCommandFlag(&tmc4671_controller, false);
 800205c:	2100      	movs	r1, #0
 800205e:	484a      	ldr	r0, [pc, #296]	@ (8002188 <main+0xd88>)
 8002060:	f001 f8c4 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002064:	4b4a      	ldr	r3, [pc, #296]	@ (8002190 <main+0xd90>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
				break;
 800206a:	e047      	b.n	80020fc <main+0xcfc>

			case 68:
			//	int32_t actual_position = getActualPosition(&tmc4671_controller);
			//	TxData = (uint32_t) actual_position;  // Cast int32_t to uint32_t
				setWrongCommandFlag(&tmc4671_controller, false);
 800206c:	2100      	movs	r1, #0
 800206e:	4846      	ldr	r0, [pc, #280]	@ (8002188 <main+0xd88>)
 8002070:	f001 f8bc 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002074:	4b46      	ldr	r3, [pc, #280]	@ (8002190 <main+0xd90>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
				break;
 800207a:	e03f      	b.n	80020fc <main+0xcfc>

			case 69:
				TxData = getCoilCurrent(&tmc4671_controller);
 800207c:	4842      	ldr	r0, [pc, #264]	@ (8002188 <main+0xd88>)
 800207e:	f001 f974 	bl	800336a <getCoilCurrent>
 8002082:	4603      	mov	r3, r0
 8002084:	4a41      	ldr	r2, [pc, #260]	@ (800218c <main+0xd8c>)
 8002086:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002088:	2100      	movs	r1, #0
 800208a:	483f      	ldr	r0, [pc, #252]	@ (8002188 <main+0xd88>)
 800208c:	f001 f8ae 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002090:	4b3f      	ldr	r3, [pc, #252]	@ (8002190 <main+0xd90>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
				break;
 8002096:	e031      	b.n	80020fc <main+0xcfc>

			case 70:
				TxData = getFirmwareVersion(&tmc4671_controller);
 8002098:	483b      	ldr	r0, [pc, #236]	@ (8002188 <main+0xd88>)
 800209a:	f001 fa27 	bl	80034ec <getFirmwareVersion>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a3a      	ldr	r2, [pc, #232]	@ (800218c <main+0xd8c>)
 80020a2:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 80020a4:	2100      	movs	r1, #0
 80020a6:	4838      	ldr	r0, [pc, #224]	@ (8002188 <main+0xd88>)
 80020a8:	f001 f8a0 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = true;
 80020ac:	4b38      	ldr	r3, [pc, #224]	@ (8002190 <main+0xd90>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
				break;
 80020b2:	e023      	b.n	80020fc <main+0xcfc>

			case 200:
				TxData = 0;
 80020b4:	4b35      	ldr	r3, [pc, #212]	@ (800218c <main+0xd8c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
				get_Execution_count++;
 80020ba:	4b36      	ldr	r3, [pc, #216]	@ (8002194 <main+0xd94>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	3301      	adds	r3, #1
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b34      	ldr	r3, [pc, #208]	@ (8002194 <main+0xd94>)
 80020c4:	701a      	strb	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 80020c6:	2100      	movs	r1, #0
 80020c8:	482f      	ldr	r0, [pc, #188]	@ (8002188 <main+0xd88>)
 80020ca:	f001 f88f 	bl	80031ec <setWrongCommandFlag>
				TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 80020ce:	4932      	ldr	r1, [pc, #200]	@ (8002198 <main+0xd98>)
 80020d0:	482d      	ldr	r0, [pc, #180]	@ (8002188 <main+0xd88>)
 80020d2:	f001 f89b 	bl	800320c <getEventStatusWord>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	4b30      	ldr	r3, [pc, #192]	@ (800219c <main+0xd9c>)
 80020dc:	801a      	strh	r2, [r3, #0]
				continuous_tx_flag = false;
 80020de:	4b2c      	ldr	r3, [pc, #176]	@ (8002190 <main+0xd90>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
				break;
 80020e4:	e00a      	b.n	80020fc <main+0xcfc>

			default:
				TxData = 0;
 80020e6:	4b29      	ldr	r3, [pc, #164]	@ (800218c <main+0xd8c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, true);
 80020ec:	2101      	movs	r1, #1
 80020ee:	4826      	ldr	r0, [pc, #152]	@ (8002188 <main+0xd88>)
 80020f0:	f001 f87c 	bl	80031ec <setWrongCommandFlag>
				continuous_tx_flag = false;
 80020f4:	4b26      	ldr	r3, [pc, #152]	@ (8002190 <main+0xd90>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
				break;
 80020fa:	bf00      	nop
		  }
		  etc_old_command = 0;
 80020fc:	4b28      	ldr	r3, [pc, #160]	@ (80021a0 <main+0xda0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	801a      	strh	r2, [r3, #0]
		  etc_old_data = 0;
 8002102:	4b28      	ldr	r3, [pc, #160]	@ (80021a4 <main+0xda4>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e067      	b.n	80021da <main+0xdda>
	  } else if (accelerometer_flag) {
 800210a:	4b27      	ldr	r3, [pc, #156]	@ (80021a8 <main+0xda8>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d063      	beq.n	80021da <main+0xdda>
		  switch(etc_new_command) {
 8002112:	4b26      	ldr	r3, [pc, #152]	@ (80021ac <main+0xdac>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	f240 122f 	movw	r2, #303	@ 0x12f
 800211a:	4293      	cmp	r3, r2
 800211c:	d048      	beq.n	80021b0 <main+0xdb0>
 800211e:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8002122:	da54      	bge.n	80021ce <main+0xdce>
 8002124:	f240 122d 	movw	r2, #301	@ 0x12d
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <main+0xd34>
 800212c:	f5b3 7f97 	cmp.w	r3, #302	@ 0x12e
 8002130:	d015      	beq.n	800215e <main+0xd5e>
 8002132:	e04c      	b.n	80021ce <main+0xdce>
		  case 301:
			  get_Execution_count++;
 8002134:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <main+0xd94>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <main+0xd94>)
 800213e:	701a      	strb	r2, [r3, #0]
			  setWrongCommandFlag(&tmc4671_controller, false);
 8002140:	2100      	movs	r1, #0
 8002142:	4811      	ldr	r0, [pc, #68]	@ (8002188 <main+0xd88>)
 8002144:	f001 f852 	bl	80031ec <setWrongCommandFlag>
			  int32_t Accel_x = getAcceleration('X');
 8002148:	2058      	movs	r0, #88	@ 0x58
 800214a:	f7fe fe95 	bl	8000e78 <getAcceleration>
 800214e:	6078      	str	r0, [r7, #4]
			  TxData = (uint32_t) Accel_x;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a0e      	ldr	r2, [pc, #56]	@ (800218c <main+0xd8c>)
 8002154:	6013      	str	r3, [r2, #0]
			  continuous_tx_flag = true;
 8002156:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <main+0xd90>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
			  break;
 800215c:	e037      	b.n	80021ce <main+0xdce>

		  case 302:
			  get_Execution_count++;
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <main+0xd94>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <main+0xd94>)
 8002168:	701a      	strb	r2, [r3, #0]
			  setWrongCommandFlag(&tmc4671_controller, false);
 800216a:	2100      	movs	r1, #0
 800216c:	4806      	ldr	r0, [pc, #24]	@ (8002188 <main+0xd88>)
 800216e:	f001 f83d 	bl	80031ec <setWrongCommandFlag>
			  int32_t Accel_y = getAcceleration('Y');
 8002172:	2059      	movs	r0, #89	@ 0x59
 8002174:	f7fe fe80 	bl	8000e78 <getAcceleration>
 8002178:	60b8      	str	r0, [r7, #8]
			  TxData = (uint32_t) Accel_y;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	4a03      	ldr	r2, [pc, #12]	@ (800218c <main+0xd8c>)
 800217e:	6013      	str	r3, [r2, #0]
			  continuous_tx_flag = true;
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <main+0xd90>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
			  break;
 8002186:	e022      	b.n	80021ce <main+0xdce>
 8002188:	200002c0 	.word	0x200002c0
 800218c:	20000344 	.word	0x20000344
 8002190:	2000031e 	.word	0x2000031e
 8002194:	2000034c 	.word	0x2000034c
 8002198:	2000034a 	.word	0x2000034a
 800219c:	20000348 	.word	0x20000348
 80021a0:	20000320 	.word	0x20000320
 80021a4:	20000324 	.word	0x20000324
 80021a8:	2000031f 	.word	0x2000031f
 80021ac:	20000328 	.word	0x20000328

		  case 303:
			  setWrongCommandFlag(&tmc4671_controller, false);
 80021b0:	2100      	movs	r1, #0
 80021b2:	483d      	ldr	r0, [pc, #244]	@ (80022a8 <main+0xea8>)
 80021b4:	f001 f81a 	bl	80031ec <setWrongCommandFlag>
			  int32_t Accel_z = getAcceleration('Z');
 80021b8:	205a      	movs	r0, #90	@ 0x5a
 80021ba:	f7fe fe5d 	bl	8000e78 <getAcceleration>
 80021be:	60f8      	str	r0, [r7, #12]
			  TxData = (uint32_t) Accel_z;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a3a      	ldr	r2, [pc, #232]	@ (80022ac <main+0xeac>)
 80021c4:	6013      	str	r3, [r2, #0]
			  continuous_tx_flag = true;
 80021c6:	4b3a      	ldr	r3, [pc, #232]	@ (80022b0 <main+0xeb0>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
			  break;
 80021cc:	bf00      	nop
		  }
		  etc_old_command = 0;
 80021ce:	4b39      	ldr	r3, [pc, #228]	@ (80022b4 <main+0xeb4>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	801a      	strh	r2, [r3, #0]
		  etc_old_data = 0;
 80021d4:	4b38      	ldr	r3, [pc, #224]	@ (80022b8 <main+0xeb8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
		  no_error_drive = true;
	  }*/

	  /*---------------------------TRANSMIT DATA TO ETHERCAT ---------------------------------------------*/

	  if (set_command_flag) {
 80021da:	4b38      	ldr	r3, [pc, #224]	@ (80022bc <main+0xebc>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d023      	beq.n	800222a <main+0xe2a>
		  if (!continuous_tx_flag) {
 80021e2:	4b33      	ldr	r3, [pc, #204]	@ (80022b0 <main+0xeb0>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	f083 0301 	eor.w	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01c      	beq.n	800222a <main+0xe2a>
			  set_sent_count++;
 80021f0:	4b33      	ldr	r3, [pc, #204]	@ (80022c0 <main+0xec0>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	4b31      	ldr	r3, [pc, #196]	@ (80022c0 <main+0xec0>)
 80021fa:	701a      	strb	r2, [r3, #0]
			  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 80021fc:	4931      	ldr	r1, [pc, #196]	@ (80022c4 <main+0xec4>)
 80021fe:	482a      	ldr	r0, [pc, #168]	@ (80022a8 <main+0xea8>)
 8002200:	f001 f804 	bl	800320c <getEventStatusWord>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	4b2f      	ldr	r3, [pc, #188]	@ (80022c8 <main+0xec8>)
 800220a:	801a      	strh	r2, [r3, #0]
			  Etc_Buffer_In.LANLong[0] = ((uint32_t)TxStatus << 16) | (uint32_t)etc_new_command;
 800220c:	4b2e      	ldr	r3, [pc, #184]	@ (80022c8 <main+0xec8>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	041b      	lsls	r3, r3, #16
 8002212:	4a2e      	ldr	r2, [pc, #184]	@ (80022cc <main+0xecc>)
 8002214:	8812      	ldrh	r2, [r2, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	4a2d      	ldr	r2, [pc, #180]	@ (80022d0 <main+0xed0>)
 800221a:	6013      	str	r3, [r2, #0]
			  Etc_Buffer_In.LANLong[1] = TxData;
 800221c:	4b23      	ldr	r3, [pc, #140]	@ (80022ac <main+0xeac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2b      	ldr	r2, [pc, #172]	@ (80022d0 <main+0xed0>)
 8002222:	6053      	str	r3, [r2, #4]
			  continuous_tx_flag = true;  // Mark that data has been sent
 8002224:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <main+0xeb0>)
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if (get_command_flag) {
 800222a:	4b2a      	ldr	r3, [pc, #168]	@ (80022d4 <main+0xed4>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d019      	beq.n	8002266 <main+0xe66>
		  get_sent_count++;
 8002232:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <main+0xed8>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b27      	ldr	r3, [pc, #156]	@ (80022d8 <main+0xed8>)
 800223c:	701a      	strb	r2, [r3, #0]
		  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 800223e:	4921      	ldr	r1, [pc, #132]	@ (80022c4 <main+0xec4>)
 8002240:	4819      	ldr	r0, [pc, #100]	@ (80022a8 <main+0xea8>)
 8002242:	f000 ffe3 	bl	800320c <getEventStatusWord>
 8002246:	4603      	mov	r3, r0
 8002248:	461a      	mov	r2, r3
 800224a:	4b1f      	ldr	r3, [pc, #124]	@ (80022c8 <main+0xec8>)
 800224c:	801a      	strh	r2, [r3, #0]
		  Etc_Buffer_In.LANLong[0] = ((uint32_t) TxStatus << 16) | (uint32_t) etc_new_command;
 800224e:	4b1e      	ldr	r3, [pc, #120]	@ (80022c8 <main+0xec8>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	4a1d      	ldr	r2, [pc, #116]	@ (80022cc <main+0xecc>)
 8002256:	8812      	ldrh	r2, [r2, #0]
 8002258:	4313      	orrs	r3, r2
 800225a:	4a1d      	ldr	r2, [pc, #116]	@ (80022d0 <main+0xed0>)
 800225c:	6013      	str	r3, [r2, #0]
		  Etc_Buffer_In.LANLong[1] = TxData;
 800225e:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <main+0xeac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1b      	ldr	r2, [pc, #108]	@ (80022d0 <main+0xed0>)
 8002264:	6053      	str	r3, [r2, #4]
	  }

	  if(accelerometer_flag) {
 8002266:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <main+0xedc>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f43f a8f2 	beq.w	8001454 <main+0x54>
		  adxl_sent_count++;
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <main+0xee0>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <main+0xee0>)
 800227a:	701a      	strb	r2, [r3, #0]
		  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 800227c:	4911      	ldr	r1, [pc, #68]	@ (80022c4 <main+0xec4>)
 800227e:	480a      	ldr	r0, [pc, #40]	@ (80022a8 <main+0xea8>)
 8002280:	f000 ffc4 	bl	800320c <getEventStatusWord>
 8002284:	4603      	mov	r3, r0
 8002286:	461a      	mov	r2, r3
 8002288:	4b0f      	ldr	r3, [pc, #60]	@ (80022c8 <main+0xec8>)
 800228a:	801a      	strh	r2, [r3, #0]
		  Etc_Buffer_In.LANLong[0] = ((uint32_t) TxStatus << 16) | (uint32_t) etc_new_command;
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <main+0xec8>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	4a0e      	ldr	r2, [pc, #56]	@ (80022cc <main+0xecc>)
 8002294:	8812      	ldrh	r2, [r2, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	4a0d      	ldr	r2, [pc, #52]	@ (80022d0 <main+0xed0>)
 800229a:	6013      	str	r3, [r2, #0]
		  Etc_Buffer_In.LANLong[1] = TxData;
 800229c:	4b03      	ldr	r3, [pc, #12]	@ (80022ac <main+0xeac>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0b      	ldr	r2, [pc, #44]	@ (80022d0 <main+0xed0>)
 80022a2:	6053      	str	r3, [r2, #4]
	  if (pcap_init_ok) {
 80022a4:	f7ff b8d6 	b.w	8001454 <main+0x54>
 80022a8:	200002c0 	.word	0x200002c0
 80022ac:	20000344 	.word	0x20000344
 80022b0:	2000031e 	.word	0x2000031e
 80022b4:	20000320 	.word	0x20000320
 80022b8:	20000324 	.word	0x20000324
 80022bc:	2000031c 	.word	0x2000031c
 80022c0:	2000034d 	.word	0x2000034d
 80022c4:	2000034a 	.word	0x2000034a
 80022c8:	20000348 	.word	0x20000348
 80022cc:	20000328 	.word	0x20000328
 80022d0:	200000a4 	.word	0x200000a4
 80022d4:	2000031d 	.word	0x2000031d
 80022d8:	2000034e 	.word	0x2000034e
 80022dc:	2000031f 	.word	0x2000031f
 80022e0:	2000034f 	.word	0x2000034f

080022e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b094      	sub	sp, #80	@ 0x50
 80022e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ea:	f107 0320 	add.w	r3, r7, #32
 80022ee:	2230      	movs	r2, #48	@ 0x30
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f004 feb6 	bl	8007064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	4b27      	ldr	r3, [pc, #156]	@ (80023ac <SystemClock_Config+0xc8>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	4a26      	ldr	r2, [pc, #152]	@ (80023ac <SystemClock_Config+0xc8>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002316:	6413      	str	r3, [r2, #64]	@ 0x40
 8002318:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <SystemClock_Config+0xc8>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002324:	2300      	movs	r3, #0
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	4b21      	ldr	r3, [pc, #132]	@ (80023b0 <SystemClock_Config+0xcc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a20      	ldr	r2, [pc, #128]	@ (80023b0 <SystemClock_Config+0xcc>)
 800232e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <SystemClock_Config+0xcc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002340:	2301      	movs	r3, #1
 8002342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002344:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800234a:	2302      	movs	r3, #2
 800234c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800234e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002354:	2319      	movs	r3, #25
 8002356:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002358:	23c0      	movs	r3, #192	@ 0xc0
 800235a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800235c:	2302      	movs	r3, #2
 800235e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002360:	2304      	movs	r3, #4
 8002362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002364:	f107 0320 	add.w	r3, r7, #32
 8002368:	4618      	mov	r0, r3
 800236a:	f002 ff2b 	bl	80051c4 <HAL_RCC_OscConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002374:	f000 fa1e 	bl	80027b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002378:	230f      	movs	r3, #15
 800237a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800237c:	2302      	movs	r3, #2
 800237e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	2103      	movs	r1, #3
 8002394:	4618      	mov	r0, r3
 8002396:	f003 f98d 	bl	80056b4 <HAL_RCC_ClockConfig>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80023a0:	f000 fa08 	bl	80027b4 <Error_Handler>
  }
}
 80023a4:	bf00      	nop
 80023a6:	3750      	adds	r7, #80	@ 0x50
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40007000 	.word	0x40007000

080023b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023b8:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023ba:	4a13      	ldr	r2, [pc, #76]	@ (8002408 <MX_I2C1_Init+0x54>)
 80023bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023be:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023c0:	4a12      	ldr	r2, [pc, #72]	@ (800240c <MX_I2C1_Init+0x58>)
 80023c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023da:	2200      	movs	r2, #0
 80023dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023e4:	4b07      	ldr	r3, [pc, #28]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023f0:	4804      	ldr	r0, [pc, #16]	@ (8002404 <MX_I2C1_Init+0x50>)
 80023f2:	f001 fbd3 	bl	8003b9c <HAL_I2C_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023fc:	f000 f9da 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200000c4 	.word	0x200000c4
 8002408:	40005400 	.word	0x40005400
 800240c:	000186a0 	.word	0x000186a0

08002410 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002414:	4b12      	ldr	r3, [pc, #72]	@ (8002460 <MX_I2C2_Init+0x50>)
 8002416:	4a13      	ldr	r2, [pc, #76]	@ (8002464 <MX_I2C2_Init+0x54>)
 8002418:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800241a:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <MX_I2C2_Init+0x50>)
 800241c:	4a12      	ldr	r2, [pc, #72]	@ (8002468 <MX_I2C2_Init+0x58>)
 800241e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002420:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <MX_I2C2_Init+0x50>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002426:	4b0e      	ldr	r3, [pc, #56]	@ (8002460 <MX_I2C2_Init+0x50>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <MX_I2C2_Init+0x50>)
 800242e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002432:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002434:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <MX_I2C2_Init+0x50>)
 8002436:	2200      	movs	r2, #0
 8002438:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800243a:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <MX_I2C2_Init+0x50>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002440:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <MX_I2C2_Init+0x50>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <MX_I2C2_Init+0x50>)
 8002448:	2200      	movs	r2, #0
 800244a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800244c:	4804      	ldr	r0, [pc, #16]	@ (8002460 <MX_I2C2_Init+0x50>)
 800244e:	f001 fba5 	bl	8003b9c <HAL_I2C_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002458:	f000 f9ac 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000118 	.word	0x20000118
 8002464:	40005800 	.word	0x40005800
 8002468:	000186a0 	.word	0x000186a0

0800246c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002470:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <MX_SPI1_Init+0x64>)
 8002472:	4a18      	ldr	r2, [pc, #96]	@ (80024d4 <MX_SPI1_Init+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002476:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <MX_SPI1_Init+0x64>)
 8002478:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800247c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800247e:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <MX_SPI1_Init+0x64>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002484:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <MX_SPI1_Init+0x64>)
 8002486:	2200      	movs	r2, #0
 8002488:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800248a:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <MX_SPI1_Init+0x64>)
 800248c:	2202      	movs	r2, #2
 800248e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002490:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <MX_SPI1_Init+0x64>)
 8002492:	2201      	movs	r2, #1
 8002494:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002496:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <MX_SPI1_Init+0x64>)
 8002498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800249e:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <MX_SPI1_Init+0x64>)
 80024a0:	2220      	movs	r2, #32
 80024a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <MX_SPI1_Init+0x64>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <MX_SPI1_Init+0x64>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b0:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <MX_SPI1_Init+0x64>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <MX_SPI1_Init+0x64>)
 80024b8:	220a      	movs	r2, #10
 80024ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	@ (80024d0 <MX_SPI1_Init+0x64>)
 80024be:	f003 fac5 	bl	8005a4c <HAL_SPI_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024c8:	f000 f974 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	2000016c 	.word	0x2000016c
 80024d4:	40013000 	.word	0x40013000

080024d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80024dc:	4b17      	ldr	r3, [pc, #92]	@ (800253c <MX_SPI2_Init+0x64>)
 80024de:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <MX_SPI2_Init+0x68>)
 80024e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024e2:	4b16      	ldr	r3, [pc, #88]	@ (800253c <MX_SPI2_Init+0x64>)
 80024e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024ea:	4b14      	ldr	r3, [pc, #80]	@ (800253c <MX_SPI2_Init+0x64>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f0:	4b12      	ldr	r3, [pc, #72]	@ (800253c <MX_SPI2_Init+0x64>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80024f6:	4b11      	ldr	r3, [pc, #68]	@ (800253c <MX_SPI2_Init+0x64>)
 80024f8:	2202      	movs	r2, #2
 80024fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <MX_SPI2_Init+0x64>)
 80024fe:	2201      	movs	r2, #1
 8002500:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002502:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <MX_SPI2_Init+0x64>)
 8002504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002508:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800250a:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <MX_SPI2_Init+0x64>)
 800250c:	2218      	movs	r2, #24
 800250e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002510:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <MX_SPI2_Init+0x64>)
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002516:	4b09      	ldr	r3, [pc, #36]	@ (800253c <MX_SPI2_Init+0x64>)
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <MX_SPI2_Init+0x64>)
 800251e:	2200      	movs	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002522:	4b06      	ldr	r3, [pc, #24]	@ (800253c <MX_SPI2_Init+0x64>)
 8002524:	220a      	movs	r2, #10
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002528:	4804      	ldr	r0, [pc, #16]	@ (800253c <MX_SPI2_Init+0x64>)
 800252a:	f003 fa8f 	bl	8005a4c <HAL_SPI_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002534:	f000 f93e 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200001c4 	.word	0x200001c4
 8002540:	40003800 	.word	0x40003800

08002544 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002548:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <MX_SPI5_Init+0x64>)
 800254a:	4a18      	ldr	r2, [pc, #96]	@ (80025ac <MX_SPI5_Init+0x68>)
 800254c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800254e:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <MX_SPI5_Init+0x64>)
 8002550:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002554:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002556:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <MX_SPI5_Init+0x64>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800255c:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <MX_SPI5_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <MX_SPI5_Init+0x64>)
 8002564:	2202      	movs	r2, #2
 8002566:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002568:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <MX_SPI5_Init+0x64>)
 800256a:	2201      	movs	r2, #1
 800256c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <MX_SPI5_Init+0x64>)
 8002570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002574:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <MX_SPI5_Init+0x64>)
 8002578:	2208      	movs	r2, #8
 800257a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800257c:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <MX_SPI5_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002582:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <MX_SPI5_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002588:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <MX_SPI5_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <MX_SPI5_Init+0x64>)
 8002590:	220a      	movs	r2, #10
 8002592:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002594:	4804      	ldr	r0, [pc, #16]	@ (80025a8 <MX_SPI5_Init+0x64>)
 8002596:	f003 fa59 	bl	8005a4c <HAL_SPI_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80025a0:	f000 f908 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	2000021c 	.word	0x2000021c
 80025ac:	40015000 	.word	0x40015000

080025b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c4:	463b      	mov	r3, r7
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <MX_TIM4_Init+0x94>)
 80025ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002648 <MX_TIM4_Init+0x98>)
 80025d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 80025d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002644 <MX_TIM4_Init+0x94>)
 80025d4:	225f      	movs	r2, #95	@ 0x5f
 80025d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002644 <MX_TIM4_Init+0x94>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80025de:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <MX_TIM4_Init+0x94>)
 80025e0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80025e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e6:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <MX_TIM4_Init+0x94>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ec:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <MX_TIM4_Init+0x94>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025f2:	4814      	ldr	r0, [pc, #80]	@ (8002644 <MX_TIM4_Init+0x94>)
 80025f4:	f004 f800 	bl	80065f8 <HAL_TIM_Base_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80025fe:	f000 f8d9 	bl	80027b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002606:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002608:	f107 0308 	add.w	r3, r7, #8
 800260c:	4619      	mov	r1, r3
 800260e:	480d      	ldr	r0, [pc, #52]	@ (8002644 <MX_TIM4_Init+0x94>)
 8002610:	f004 f8c3 	bl	800679a <HAL_TIM_ConfigClockSource>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800261a:	f000 f8cb 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002626:	463b      	mov	r3, r7
 8002628:	4619      	mov	r1, r3
 800262a:	4806      	ldr	r0, [pc, #24]	@ (8002644 <MX_TIM4_Init+0x94>)
 800262c:	f004 faa2 	bl	8006b74 <HAL_TIMEx_MasterConfigSynchronization>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002636:	f000 f8bd 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000274 	.word	0x20000274
 8002648:	40000800 	.word	0x40000800

0800264c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	@ 0x28
 8002650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4b4f      	ldr	r3, [pc, #316]	@ (80027a4 <MX_GPIO_Init+0x158>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a4e      	ldr	r2, [pc, #312]	@ (80027a4 <MX_GPIO_Init+0x158>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b4c      	ldr	r3, [pc, #304]	@ (80027a4 <MX_GPIO_Init+0x158>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b48      	ldr	r3, [pc, #288]	@ (80027a4 <MX_GPIO_Init+0x158>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	4a47      	ldr	r2, [pc, #284]	@ (80027a4 <MX_GPIO_Init+0x158>)
 8002688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800268c:	6313      	str	r3, [r2, #48]	@ 0x30
 800268e:	4b45      	ldr	r3, [pc, #276]	@ (80027a4 <MX_GPIO_Init+0x158>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	4b41      	ldr	r3, [pc, #260]	@ (80027a4 <MX_GPIO_Init+0x158>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a40      	ldr	r2, [pc, #256]	@ (80027a4 <MX_GPIO_Init+0x158>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b3e      	ldr	r3, [pc, #248]	@ (80027a4 <MX_GPIO_Init+0x158>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	4b3a      	ldr	r3, [pc, #232]	@ (80027a4 <MX_GPIO_Init+0x158>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	4a39      	ldr	r2, [pc, #228]	@ (80027a4 <MX_GPIO_Init+0x158>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c6:	4b37      	ldr	r3, [pc, #220]	@ (80027a4 <MX_GPIO_Init+0x158>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80026d2:	2200      	movs	r2, #0
 80026d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026d8:	4833      	ldr	r0, [pc, #204]	@ (80027a8 <MX_GPIO_Init+0x15c>)
 80026da:	f001 fa45 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TMC4671_CS_Pin|ADXL345_CS_Pin|LAN9252_CS_Pin, GPIO_PIN_RESET);
 80026de:	2200      	movs	r2, #0
 80026e0:	f640 2108 	movw	r1, #2568	@ 0xa08
 80026e4:	4831      	ldr	r0, [pc, #196]	@ (80027ac <MX_GPIO_Init+0x160>)
 80026e6:	f001 fa3f 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CTRL_EN_Pin, GPIO_PIN_RESET);
 80026ea:	2200      	movs	r2, #0
 80026ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026f0:	482f      	ldr	r0, [pc, #188]	@ (80027b0 <MX_GPIO_Init+0x164>)
 80026f2:	f001 fa39 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80026f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fc:	2301      	movs	r3, #1
 80026fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2300      	movs	r3, #0
 8002706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	4826      	ldr	r0, [pc, #152]	@ (80027a8 <MX_GPIO_Init+0x15c>)
 8002710:	f001 f8a6 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC4671_CS_Pin ADXL345_CS_Pin LAN9252_CS_Pin */
  GPIO_InitStruct.Pin = TMC4671_CS_Pin|ADXL345_CS_Pin|LAN9252_CS_Pin;
 8002714:	f640 2308 	movw	r3, #2568	@ 0xa08
 8002718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271a:	2301      	movs	r3, #1
 800271c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	481f      	ldr	r0, [pc, #124]	@ (80027ac <MX_GPIO_Init+0x160>)
 800272e:	f001 f897 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC6100_CS_Pin */
  GPIO_InitStruct.Pin = TMC6100_CS_Pin;
 8002732:	2310      	movs	r3, #16
 8002734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMC6100_CS_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	4819      	ldr	r0, [pc, #100]	@ (80027ac <MX_GPIO_Init+0x160>)
 8002746:	f001 f88b 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC_STATUS_Pin */
  GPIO_InitStruct.Pin = TMC_STATUS_Pin;
 800274a:	2302      	movs	r3, #2
 800274c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMC_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4814      	ldr	r0, [pc, #80]	@ (80027b0 <MX_GPIO_Init+0x164>)
 800275e:	f001 f87f 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_INDEX_Pin */
  GPIO_InitStruct.Pin = ENC_INDEX_Pin;
 8002762:	2304      	movs	r3, #4
 8002764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002766:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800276a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_INDEX_GPIO_Port, &GPIO_InitStruct);
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4619      	mov	r1, r3
 8002776:	480e      	ldr	r0, [pc, #56]	@ (80027b0 <MX_GPIO_Init+0x164>)
 8002778:	f001 f872 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTRL_EN_Pin */
  GPIO_InitStruct.Pin = CTRL_EN_Pin;
 800277c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002782:	2301      	movs	r3, #1
 8002784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CTRL_EN_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4619      	mov	r1, r3
 8002794:	4806      	ldr	r0, [pc, #24]	@ (80027b0 <MX_GPIO_Init+0x164>)
 8002796:	f001 f863 	bl	8003860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800279a:	bf00      	nop
 800279c:	3728      	adds	r7, #40	@ 0x28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020000 	.word	0x40020000
 80027b0:	40020400 	.word	0x40020400

080027b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b8:	b672      	cpsid	i
}
 80027ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <Error_Handler+0x8>

080027c0 <initMovingAverage>:
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	e007      	b.n	80027de <initMovingAverage+0x1e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	2100      	movs	r1, #0
 80027d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3301      	adds	r3, #1
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b0e      	cmp	r3, #14
 80027e2:	ddf4      	ble.n	80027ce <initMovingAverage+0xe>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <updateMovingAverage>:
 800280a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	8f89      	ldrh	r1, [r1, #60]	@ 0x3c
 8002820:	4608      	mov	r0, r1
 8002822:	68f9      	ldr	r1, [r7, #12]
 8002824:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002828:	2000      	movs	r0, #0
 800282a:	4688      	mov	r8, r1
 800282c:	4681      	mov	r9, r0
 800282e:	ebb2 0108 	subs.w	r1, r2, r8
 8002832:	6039      	str	r1, [r7, #0]
 8002834:	eb63 0309 	sbc.w	r3, r3, r9
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002840:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002848:	4619      	mov	r1, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	2000      	movs	r0, #0
 800285c:	460c      	mov	r4, r1
 800285e:	4605      	mov	r5, r0
 8002860:	eb12 0a04 	adds.w	sl, r2, r4
 8002864:	eb43 0b05 	adc.w	fp, r3, r5
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	e9c3 ab12 	strd	sl, fp, [r3, #72]	@ 0x48
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002872:	3301      	adds	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800287e:	2b0e      	cmp	r3, #14
 8002880:	d902      	bls.n	8002888 <updateMovingAverage+0x7e>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800288e:	f04f 020f 	mov.w	r2, #15
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	f7fe f909 	bl	8000aac <__aeabi_uldivmod>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080028ac <pcap_init>:
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	f107 0308 	add.w	r3, r7, #8
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	809a      	strh	r2, [r3, #4]
 80028c0:	237e      	movs	r3, #126	@ 0x7e
 80028c2:	713b      	strb	r3, [r7, #4]
 80028c4:	1d3a      	adds	r2, r7, #4
 80028c6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2301      	movs	r3, #1
 80028ce:	2150      	movs	r1, #80	@ 0x50
 80028d0:	481c      	ldr	r0, [pc, #112]	@ (8002944 <pcap_init+0x98>)
 80028d2:	f001 faa7 	bl	8003e24 <HAL_I2C_Master_Transmit>
 80028d6:	4603      	mov	r3, r0
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <pcap_init+0x42>
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	4619      	mov	r1, r3
 80028e4:	4818      	ldr	r0, [pc, #96]	@ (8002948 <pcap_init+0x9c>)
 80028e6:	f004 fa75 	bl	8006dd4 <iprintf>
 80028ea:	2300      	movs	r3, #0
 80028ec:	e025      	b.n	800293a <pcap_init+0x8e>
 80028ee:	1d3a      	adds	r2, r7, #4
 80028f0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2301      	movs	r3, #1
 80028f8:	2150      	movs	r1, #80	@ 0x50
 80028fa:	4812      	ldr	r0, [pc, #72]	@ (8002944 <pcap_init+0x98>)
 80028fc:	f001 fb90 	bl	8004020 <HAL_I2C_Master_Receive>
 8002900:	4603      	mov	r3, r0
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <pcap_init+0x6c>
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	4619      	mov	r1, r3
 800290e:	480f      	ldr	r0, [pc, #60]	@ (800294c <pcap_init+0xa0>)
 8002910:	f004 fa60 	bl	8006dd4 <iprintf>
 8002914:	2300      	movs	r3, #0
 8002916:	e010      	b.n	800293a <pcap_init+0x8e>
 8002918:	793b      	ldrb	r3, [r7, #4]
 800291a:	2b11      	cmp	r3, #17
 800291c:	d006      	beq.n	800292c <pcap_init+0x80>
 800291e:	793b      	ldrb	r3, [r7, #4]
 8002920:	4619      	mov	r1, r3
 8002922:	480b      	ldr	r0, [pc, #44]	@ (8002950 <pcap_init+0xa4>)
 8002924:	f004 fa56 	bl	8006dd4 <iprintf>
 8002928:	2300      	movs	r3, #0
 800292a:	e006      	b.n	800293a <pcap_init+0x8e>
 800292c:	4809      	ldr	r0, [pc, #36]	@ (8002954 <pcap_init+0xa8>)
 800292e:	f7ff ff47 	bl	80027c0 <initMovingAverage>
 8002932:	4809      	ldr	r0, [pc, #36]	@ (8002958 <pcap_init+0xac>)
 8002934:	f004 fab6 	bl	8006ea4 <puts>
 8002938:	2301      	movs	r3, #1
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200000c4 	.word	0x200000c4
 8002948:	08007b84 	.word	0x08007b84
 800294c:	08007bb0 	.word	0x08007bb0
 8002950:	08007bf4 	.word	0x08007bf4
 8002954:	20000350 	.word	0x20000350
 8002958:	08007c38 	.word	0x08007c38

0800295c <pcap_scan>:
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af02      	add	r7, sp, #8
 8002962:	2300      	movs	r3, #0
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	809a      	strh	r2, [r3, #4]
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	2361      	movs	r3, #97	@ 0x61
 8002974:	703b      	strb	r3, [r7, #0]
 8002976:	463a      	mov	r2, r7
 8002978:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2301      	movs	r3, #1
 8002980:	2150      	movs	r1, #80	@ 0x50
 8002982:	48a5      	ldr	r0, [pc, #660]	@ (8002c18 <pcap_scan+0x2bc>)
 8002984:	f001 fa4e 	bl	8003e24 <HAL_I2C_Master_Transmit>
 8002988:	4603      	mov	r3, r0
 800298a:	73bb      	strb	r3, [r7, #14]
 800298c:	7bbb      	ldrb	r3, [r7, #14]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <pcap_scan+0x4a>
 8002992:	7bbb      	ldrb	r3, [r7, #14]
 8002994:	4619      	mov	r1, r3
 8002996:	48a1      	ldr	r0, [pc, #644]	@ (8002c1c <pcap_scan+0x2c0>)
 8002998:	f004 fa1c 	bl	8006dd4 <iprintf>
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	e133      	b.n	8002c0e <pcap_scan+0x2b2>
 80029a6:	463a      	mov	r2, r7
 80029a8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2302      	movs	r3, #2
 80029b0:	2150      	movs	r1, #80	@ 0x50
 80029b2:	4899      	ldr	r0, [pc, #612]	@ (8002c18 <pcap_scan+0x2bc>)
 80029b4:	f001 fb34 	bl	8004020 <HAL_I2C_Master_Receive>
 80029b8:	4603      	mov	r3, r0
 80029ba:	73bb      	strb	r3, [r7, #14]
 80029bc:	7bbb      	ldrb	r3, [r7, #14]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <pcap_scan+0x7a>
 80029c2:	7bbb      	ldrb	r3, [r7, #14]
 80029c4:	4619      	mov	r1, r3
 80029c6:	4896      	ldr	r0, [pc, #600]	@ (8002c20 <pcap_scan+0x2c4>)
 80029c8:	f004 fa04 	bl	8006dd4 <iprintf>
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	e11b      	b.n	8002c0e <pcap_scan+0x2b2>
 80029d6:	787b      	ldrb	r3, [r7, #1]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	b21a      	sxth	r2, r3
 80029dc:	783b      	ldrb	r3, [r7, #0]
 80029de:	b21b      	sxth	r3, r3
 80029e0:	4313      	orrs	r3, r2
 80029e2:	b21b      	sxth	r3, r3
 80029e4:	81bb      	strh	r3, [r7, #12]
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	89bb      	ldrh	r3, [r7, #12]
 80029ec:	4619      	mov	r1, r3
 80029ee:	488d      	ldr	r0, [pc, #564]	@ (8002c24 <pcap_scan+0x2c8>)
 80029f0:	f004 f9f0 	bl	8006dd4 <iprintf>
 80029f4:	2340      	movs	r3, #64	@ 0x40
 80029f6:	703b      	strb	r3, [r7, #0]
 80029f8:	2300      	movs	r3, #0
 80029fa:	707b      	strb	r3, [r7, #1]
 80029fc:	463a      	mov	r2, r7
 80029fe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	2301      	movs	r3, #1
 8002a06:	2150      	movs	r1, #80	@ 0x50
 8002a08:	4883      	ldr	r0, [pc, #524]	@ (8002c18 <pcap_scan+0x2bc>)
 8002a0a:	f001 fa0b 	bl	8003e24 <HAL_I2C_Master_Transmit>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	73bb      	strb	r3, [r7, #14]
 8002a12:	7bbb      	ldrb	r3, [r7, #14]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00c      	beq.n	8002a32 <pcap_scan+0xd6>
 8002a18:	7bbb      	ldrb	r3, [r7, #14]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4882      	ldr	r0, [pc, #520]	@ (8002c28 <pcap_scan+0x2cc>)
 8002a1e:	f004 f9d9 	bl	8006dd4 <iprintf>
 8002a22:	4b82      	ldr	r3, [pc, #520]	@ (8002c2c <pcap_scan+0x2d0>)
 8002a24:	795b      	ldrb	r3, [r3, #5]
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b7f      	ldr	r3, [pc, #508]	@ (8002c2c <pcap_scan+0x2d0>)
 8002a2e:	715a      	strb	r2, [r3, #5]
 8002a30:	e0ed      	b.n	8002c0e <pcap_scan+0x2b2>
 8002a32:	463a      	mov	r2, r7
 8002a34:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	2150      	movs	r1, #80	@ 0x50
 8002a3e:	4876      	ldr	r0, [pc, #472]	@ (8002c18 <pcap_scan+0x2bc>)
 8002a40:	f001 faee 	bl	8004020 <HAL_I2C_Master_Receive>
 8002a44:	4603      	mov	r3, r0
 8002a46:	73bb      	strb	r3, [r7, #14]
 8002a48:	7bbb      	ldrb	r3, [r7, #14]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <pcap_scan+0x106>
 8002a4e:	7bbb      	ldrb	r3, [r7, #14]
 8002a50:	4619      	mov	r1, r3
 8002a52:	4877      	ldr	r0, [pc, #476]	@ (8002c30 <pcap_scan+0x2d4>)
 8002a54:	f004 f9be 	bl	8006dd4 <iprintf>
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e0d5      	b.n	8002c0e <pcap_scan+0x2b2>
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	061a      	lsls	r2, r3, #24
 8002a66:	78bb      	ldrb	r3, [r7, #2]
 8002a68:	041b      	lsls	r3, r3, #16
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	787b      	ldrb	r3, [r7, #1]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	4313      	orrs	r3, r2
 8002a72:	783a      	ldrb	r2, [r7, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	4a6f      	ldr	r2, [pc, #444]	@ (8002c34 <pcap_scan+0x2d8>)
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	2096      	movs	r0, #150	@ 0x96
 8002a7c:	f000 f8ee 	bl	8002c5c <delay_us>
 8002a80:	2340      	movs	r3, #64	@ 0x40
 8002a82:	703b      	strb	r3, [r7, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	707b      	strb	r3, [r7, #1]
 8002a88:	463a      	mov	r2, r7
 8002a8a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2301      	movs	r3, #1
 8002a92:	2150      	movs	r1, #80	@ 0x50
 8002a94:	4860      	ldr	r0, [pc, #384]	@ (8002c18 <pcap_scan+0x2bc>)
 8002a96:	f001 f9c5 	bl	8003e24 <HAL_I2C_Master_Transmit>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	73bb      	strb	r3, [r7, #14]
 8002a9e:	7bbb      	ldrb	r3, [r7, #14]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <pcap_scan+0x15c>
 8002aa4:	7bbb      	ldrb	r3, [r7, #14]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	485f      	ldr	r0, [pc, #380]	@ (8002c28 <pcap_scan+0x2cc>)
 8002aaa:	f004 f993 	bl	8006dd4 <iprintf>
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	e0aa      	b.n	8002c0e <pcap_scan+0x2b2>
 8002ab8:	463a      	mov	r2, r7
 8002aba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	2150      	movs	r1, #80	@ 0x50
 8002ac4:	4854      	ldr	r0, [pc, #336]	@ (8002c18 <pcap_scan+0x2bc>)
 8002ac6:	f001 faab 	bl	8004020 <HAL_I2C_Master_Receive>
 8002aca:	4603      	mov	r3, r0
 8002acc:	73bb      	strb	r3, [r7, #14]
 8002ace:	7bbb      	ldrb	r3, [r7, #14]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <pcap_scan+0x18c>
 8002ad4:	7bbb      	ldrb	r3, [r7, #14]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4855      	ldr	r0, [pc, #340]	@ (8002c30 <pcap_scan+0x2d4>)
 8002ada:	f004 f97b 	bl	8006dd4 <iprintf>
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	e092      	b.n	8002c0e <pcap_scan+0x2b2>
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	061a      	lsls	r2, r3, #24
 8002aec:	78bb      	ldrb	r3, [r7, #2]
 8002aee:	041b      	lsls	r3, r3, #16
 8002af0:	431a      	orrs	r2, r3
 8002af2:	787b      	ldrb	r3, [r7, #1]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	4313      	orrs	r3, r2
 8002af8:	783a      	ldrb	r2, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	4a4e      	ldr	r2, [pc, #312]	@ (8002c38 <pcap_scan+0x2dc>)
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b4c      	ldr	r3, [pc, #304]	@ (8002c34 <pcap_scan+0x2d8>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b4c      	ldr	r3, [pc, #304]	@ (8002c38 <pcap_scan+0x2dc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c3c <pcap_scan+0x2e0>)
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	db33      	blt.n	8002b7a <pcap_scan+0x21e>
 8002b12:	4b48      	ldr	r3, [pc, #288]	@ (8002c34 <pcap_scan+0x2d8>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b48      	ldr	r3, [pc, #288]	@ (8002c38 <pcap_scan+0x2dc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b48      	ldr	r3, [pc, #288]	@ (8002c40 <pcap_scan+0x2e4>)
 8002b20:	429a      	cmp	r2, r3
 8002b22:	dc2a      	bgt.n	8002b7a <pcap_scan+0x21e>
 8002b24:	4b44      	ldr	r3, [pc, #272]	@ (8002c38 <pcap_scan+0x2dc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a46      	ldr	r2, [pc, #280]	@ (8002c44 <pcap_scan+0x2e8>)
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b45      	ldr	r3, [pc, #276]	@ (8002c44 <pcap_scan+0x2e8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a45      	ldr	r2, [pc, #276]	@ (8002c48 <pcap_scan+0x2ec>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d904      	bls.n	8002b40 <pcap_scan+0x1e4>
 8002b36:	4b43      	ldr	r3, [pc, #268]	@ (8002c44 <pcap_scan+0x2e8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a3c      	ldr	r2, [pc, #240]	@ (8002c2c <pcap_scan+0x2d0>)
 8002b3c:	6093      	str	r3, [r2, #8]
 8002b3e:	e01c      	b.n	8002b7a <pcap_scan+0x21e>
 8002b40:	4b40      	ldr	r3, [pc, #256]	@ (8002c44 <pcap_scan+0x2e8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	4841      	ldr	r0, [pc, #260]	@ (8002c4c <pcap_scan+0x2f0>)
 8002b48:	f7ff fe5f 	bl	800280a <updateMovingAverage>
 8002b4c:	4b3f      	ldr	r3, [pc, #252]	@ (8002c4c <pcap_scan+0x2f0>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	4a3f      	ldr	r2, [pc, #252]	@ (8002c50 <pcap_scan+0x2f4>)
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b3e      	ldr	r3, [pc, #248]	@ (8002c50 <pcap_scan+0x2f4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a34      	ldr	r2, [pc, #208]	@ (8002c2c <pcap_scan+0x2d0>)
 8002b5a:	6093      	str	r3, [r2, #8]
 8002b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c50 <pcap_scan+0x2f4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d103      	bne.n	8002b6e <pcap_scan+0x212>
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	f043 0302 	orr.w	r3, r3, #2
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	4b38      	ldr	r3, [pc, #224]	@ (8002c50 <pcap_scan+0x2f4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	4837      	ldr	r0, [pc, #220]	@ (8002c54 <pcap_scan+0x2f8>)
 8002b76:	f004 f92d 	bl	8006dd4 <iprintf>
 8002b7a:	2358      	movs	r3, #88	@ 0x58
 8002b7c:	703b      	strb	r3, [r7, #0]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	707b      	strb	r3, [r7, #1]
 8002b82:	2300      	movs	r3, #0
 8002b84:	70bb      	strb	r3, [r7, #2]
 8002b86:	2300      	movs	r3, #0
 8002b88:	70fb      	strb	r3, [r7, #3]
 8002b8a:	463a      	mov	r2, r7
 8002b8c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	2301      	movs	r3, #1
 8002b94:	2150      	movs	r1, #80	@ 0x50
 8002b96:	4820      	ldr	r0, [pc, #128]	@ (8002c18 <pcap_scan+0x2bc>)
 8002b98:	f001 f944 	bl	8003e24 <HAL_I2C_Master_Transmit>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	73bb      	strb	r3, [r7, #14]
 8002ba0:	7bbb      	ldrb	r3, [r7, #14]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <pcap_scan+0x25e>
 8002ba6:	7bbb      	ldrb	r3, [r7, #14]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	481f      	ldr	r0, [pc, #124]	@ (8002c28 <pcap_scan+0x2cc>)
 8002bac:	f004 f912 	bl	8006dd4 <iprintf>
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e029      	b.n	8002c0e <pcap_scan+0x2b2>
 8002bba:	463a      	mov	r2, r7
 8002bbc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	2150      	movs	r1, #80	@ 0x50
 8002bc6:	4814      	ldr	r0, [pc, #80]	@ (8002c18 <pcap_scan+0x2bc>)
 8002bc8:	f001 fa2a 	bl	8004020 <HAL_I2C_Master_Receive>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	73bb      	strb	r3, [r7, #14]
 8002bd0:	7bbb      	ldrb	r3, [r7, #14]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <pcap_scan+0x28e>
 8002bd6:	7bbb      	ldrb	r3, [r7, #14]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4815      	ldr	r0, [pc, #84]	@ (8002c30 <pcap_scan+0x2d4>)
 8002bdc:	f004 f8fa 	bl	8006dd4 <iprintf>
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e011      	b.n	8002c0e <pcap_scan+0x2b2>
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	061a      	lsls	r2, r3, #24
 8002bee:	78bb      	ldrb	r3, [r7, #2]
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	787b      	ldrb	r3, [r7, #1]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	783a      	ldrb	r2, [r7, #0]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	4a16      	ldr	r2, [pc, #88]	@ (8002c58 <pcap_scan+0x2fc>)
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <pcap_scan+0x2fc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a09      	ldr	r2, [pc, #36]	@ (8002c2c <pcap_scan+0x2d0>)
 8002c08:	60d3      	str	r3, [r2, #12]
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	e7ff      	b.n	8002c0e <pcap_scan+0x2b2>
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200000c4 	.word	0x200000c4
 8002c1c:	08007c54 	.word	0x08007c54
 8002c20:	08007c80 	.word	0x08007c80
 8002c24:	08007cc0 	.word	0x08007cc0
 8002c28:	08007cd0 	.word	0x08007cd0
 8002c2c:	200000a4 	.word	0x200000a4
 8002c30:	08007cfc 	.word	0x08007cfc
 8002c34:	200003a8 	.word	0x200003a8
 8002c38:	200003ac 	.word	0x200003ac
 8002c3c:	fa0a1f01 	.word	0xfa0a1f01
 8002c40:	05f5e0ff 	.word	0x05f5e0ff
 8002c44:	200003a0 	.word	0x200003a0
 8002c48:	05f5e100 	.word	0x05f5e100
 8002c4c:	20000350 	.word	0x20000350
 8002c50:	200003b0 	.word	0x200003b0
 8002c54:	08007d3c 	.word	0x08007d3c
 8002c58:	200003a4 	.word	0x200003a4

08002c5c <delay_us>:
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	80fb      	strh	r3, [r7, #6]
 8002c66:	480a      	ldr	r0, [pc, #40]	@ (8002c90 <delay_us+0x34>)
 8002c68:	f003 fd16 	bl	8006698 <HAL_TIM_Base_Start>
 8002c6c:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <delay_us+0x34>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2200      	movs	r2, #0
 8002c72:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c74:	bf00      	nop
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <delay_us+0x34>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d3f9      	bcc.n	8002c76 <delay_us+0x1a>
 8002c82:	4803      	ldr	r0, [pc, #12]	@ (8002c90 <delay_us+0x34>)
 8002c84:	f003 fd62 	bl	800674c <HAL_TIM_Base_Stop>
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000274 	.word	0x20000274

08002c94 <HAL_MspInit>:
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002caa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	4a08      	ldr	r2, [pc, #32]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cc6:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_MspInit+0x4c>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <HAL_I2C_MspInit>:
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	@ 0x30
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a3b      	ldr	r2, [pc, #236]	@ (8002df0 <HAL_I2C_MspInit+0x10c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d12c      	bne.n	8002d60 <HAL_I2C_MspInit+0x7c>
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002df4 <HAL_I2C_MspInit+0x110>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4a39      	ldr	r2, [pc, #228]	@ (8002df4 <HAL_I2C_MspInit+0x110>)
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4b37      	ldr	r3, [pc, #220]	@ (8002df4 <HAL_I2C_MspInit+0x110>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	23c0      	movs	r3, #192	@ 0xc0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	2312      	movs	r3, #18
 8002d28:	623b      	str	r3, [r7, #32]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2e:	2303      	movs	r3, #3
 8002d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d32:	2304      	movs	r3, #4
 8002d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d36:	f107 031c 	add.w	r3, r7, #28
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	482e      	ldr	r0, [pc, #184]	@ (8002df8 <HAL_I2C_MspInit+0x114>)
 8002d3e:	f000 fd8f 	bl	8003860 <HAL_GPIO_Init>
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	4b2b      	ldr	r3, [pc, #172]	@ (8002df4 <HAL_I2C_MspInit+0x110>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8002df4 <HAL_I2C_MspInit+0x110>)
 8002d4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d52:	4b28      	ldr	r3, [pc, #160]	@ (8002df4 <HAL_I2C_MspInit+0x110>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	e042      	b.n	8002de6 <HAL_I2C_MspInit+0x102>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a25      	ldr	r2, [pc, #148]	@ (8002dfc <HAL_I2C_MspInit+0x118>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d13d      	bne.n	8002de6 <HAL_I2C_MspInit+0x102>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	4b21      	ldr	r3, [pc, #132]	@ (8002df4 <HAL_I2C_MspInit+0x110>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	4a20      	ldr	r2, [pc, #128]	@ (8002df4 <HAL_I2C_MspInit+0x110>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002df4 <HAL_I2C_MspInit+0x110>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	2312      	movs	r3, #18
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d94:	2303      	movs	r3, #3
 8002d96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d98:	2304      	movs	r3, #4
 8002d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	4619      	mov	r1, r3
 8002da2:	4815      	ldr	r0, [pc, #84]	@ (8002df8 <HAL_I2C_MspInit+0x114>)
 8002da4:	f000 fd5c 	bl	8003860 <HAL_GPIO_Init>
 8002da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	2312      	movs	r3, #18
 8002db0:	623b      	str	r3, [r7, #32]
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db6:	2303      	movs	r3, #3
 8002db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dba:	2309      	movs	r3, #9
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dbe:	f107 031c 	add.w	r3, r7, #28
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	480c      	ldr	r0, [pc, #48]	@ (8002df8 <HAL_I2C_MspInit+0x114>)
 8002dc6:	f000 fd4b 	bl	8003860 <HAL_GPIO_Init>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <HAL_I2C_MspInit+0x110>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	4a08      	ldr	r2, [pc, #32]	@ (8002df4 <HAL_I2C_MspInit+0x110>)
 8002dd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dda:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <HAL_I2C_MspInit+0x110>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	bf00      	nop
 8002de8:	3730      	adds	r7, #48	@ 0x30
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40005400 	.word	0x40005400
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020400 	.word	0x40020400
 8002dfc:	40005800 	.word	0x40005800

08002e00 <HAL_SPI_MspInit>:
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b090      	sub	sp, #64	@ 0x40
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6a      	ldr	r2, [pc, #424]	@ (8002fc8 <HAL_SPI_MspInit+0x1c8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d14a      	bne.n	8002eb8 <HAL_SPI_MspInit+0xb8>
 8002e22:	2300      	movs	r3, #0
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e26:	4b69      	ldr	r3, [pc, #420]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	4a68      	ldr	r2, [pc, #416]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002e2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e32:	4b66      	ldr	r3, [pc, #408]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e42:	4b62      	ldr	r3, [pc, #392]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	4a61      	ldr	r2, [pc, #388]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	4a5a      	ldr	r2, [pc, #360]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6a:	4b58      	ldr	r3, [pc, #352]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	2320      	movs	r3, #32
 8002e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e7e:	2300      	movs	r3, #0
 8002e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e82:	2303      	movs	r3, #3
 8002e84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e86:	2305      	movs	r3, #5
 8002e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e8e:	4619      	mov	r1, r3
 8002e90:	484f      	ldr	r0, [pc, #316]	@ (8002fd0 <HAL_SPI_MspInit+0x1d0>)
 8002e92:	f000 fce5 	bl	8003860 <HAL_GPIO_Init>
 8002e96:	2330      	movs	r3, #48	@ 0x30
 8002e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ea6:	2305      	movs	r3, #5
 8002ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4848      	ldr	r0, [pc, #288]	@ (8002fd4 <HAL_SPI_MspInit+0x1d4>)
 8002eb2:	f000 fcd5 	bl	8003860 <HAL_GPIO_Init>
 8002eb6:	e082      	b.n	8002fbe <HAL_SPI_MspInit+0x1be>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a46      	ldr	r2, [pc, #280]	@ (8002fd8 <HAL_SPI_MspInit+0x1d8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d12d      	bne.n	8002f1e <HAL_SPI_MspInit+0x11e>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	4b41      	ldr	r3, [pc, #260]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	4a40      	ldr	r2, [pc, #256]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	4a39      	ldr	r2, [pc, #228]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eee:	4b37      	ldr	r3, [pc, #220]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f00:	2302      	movs	r3, #2
 8002f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f04:	2300      	movs	r3, #0
 8002f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f08:	2303      	movs	r3, #3
 8002f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f0c:	2305      	movs	r3, #5
 8002f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f14:	4619      	mov	r1, r3
 8002f16:	482f      	ldr	r0, [pc, #188]	@ (8002fd4 <HAL_SPI_MspInit+0x1d4>)
 8002f18:	f000 fca2 	bl	8003860 <HAL_GPIO_Init>
 8002f1c:	e04f      	b.n	8002fbe <HAL_SPI_MspInit+0x1be>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2e      	ldr	r2, [pc, #184]	@ (8002fdc <HAL_SPI_MspInit+0x1dc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d14a      	bne.n	8002fbe <HAL_SPI_MspInit+0x1be>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	4b27      	ldr	r3, [pc, #156]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f30:	4a26      	ldr	r2, [pc, #152]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002f32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f36:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f38:	4b24      	ldr	r3, [pc, #144]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	4b20      	ldr	r3, [pc, #128]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002f4e:	f043 0302 	orr.w	r3, r3, #2
 8002f52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f54:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	4a18      	ldr	r2, [pc, #96]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f70:	4b16      	ldr	r3, [pc, #88]	@ (8002fcc <HAL_SPI_MspInit+0x1cc>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f80:	2302      	movs	r3, #2
 8002f82:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f84:	2300      	movs	r3, #0
 8002f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f88:	2303      	movs	r3, #3
 8002f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f8c:	2306      	movs	r3, #6
 8002f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f94:	4619      	mov	r1, r3
 8002f96:	480f      	ldr	r0, [pc, #60]	@ (8002fd4 <HAL_SPI_MspInit+0x1d4>)
 8002f98:	f000 fc62 	bl	8003860 <HAL_GPIO_Init>
 8002f9c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002faa:	2303      	movs	r3, #3
 8002fac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fae:	2306      	movs	r3, #6
 8002fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4805      	ldr	r0, [pc, #20]	@ (8002fd0 <HAL_SPI_MspInit+0x1d0>)
 8002fba:	f000 fc51 	bl	8003860 <HAL_GPIO_Init>
 8002fbe:	bf00      	nop
 8002fc0:	3740      	adds	r7, #64	@ 0x40
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40013000 	.word	0x40013000
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40003800 	.word	0x40003800
 8002fdc:	40015000 	.word	0x40015000

08002fe0 <HAL_TIM_Base_MspInit>:
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0b      	ldr	r2, [pc, #44]	@ (800301c <HAL_TIM_Base_MspInit+0x3c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10d      	bne.n	800300e <HAL_TIM_Base_MspInit+0x2e>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_TIM_Base_MspInit+0x40>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	4a09      	ldr	r2, [pc, #36]	@ (8003020 <HAL_TIM_Base_MspInit+0x40>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	6413      	str	r3, [r2, #64]	@ 0x40
 8003002:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <HAL_TIM_Base_MspInit+0x40>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40000800 	.word	0x40000800
 8003020:	40023800 	.word	0x40023800

08003024 <NMI_Handler>:
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <NMI_Handler+0x4>

0800302c <HardFault_Handler>:
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <HardFault_Handler+0x4>

08003034 <MemManage_Handler>:
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <MemManage_Handler+0x4>

0800303c <BusFault_Handler>:
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
 8003040:	bf00      	nop
 8003042:	e7fd      	b.n	8003040 <BusFault_Handler+0x4>

08003044 <UsageFault_Handler>:
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <UsageFault_Handler+0x4>

0800304c <SVC_Handler>:
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <DebugMon_Handler>:
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0
 800305e:	bf00      	nop
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <PendSV_Handler>:
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <SysTick_Handler>:
 8003076:	b580      	push	{r7, lr}
 8003078:	af00      	add	r7, sp, #0
 800307a:	f000 fac7 	bl	800360c <HAL_IncTick>
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}

08003082 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b086      	sub	sp, #24
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e00a      	b.n	80030aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003094:	f3af 8000 	nop.w
 8003098:	4601      	mov	r1, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	60ba      	str	r2, [r7, #8]
 80030a0:	b2ca      	uxtb	r2, r1
 80030a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	3301      	adds	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	dbf0      	blt.n	8003094 <_read+0x12>
  }

  return len;
 80030b2:	687b      	ldr	r3, [r7, #4]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	e009      	b.n	80030e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	60ba      	str	r2, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	3301      	adds	r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	dbf1      	blt.n	80030ce <_write+0x12>
  }
  return len;
 80030ea:	687b      	ldr	r3, [r7, #4]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <_close>:

int _close(int file)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800311c:	605a      	str	r2, [r3, #4]
  return 0;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <_isatty>:

int _isatty(int file)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003134:	2301      	movs	r3, #1
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003164:	4a14      	ldr	r2, [pc, #80]	@ (80031b8 <_sbrk+0x5c>)
 8003166:	4b15      	ldr	r3, [pc, #84]	@ (80031bc <_sbrk+0x60>)
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003170:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <_sbrk+0x64>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003178:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <_sbrk+0x64>)
 800317a:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <_sbrk+0x68>)
 800317c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800317e:	4b10      	ldr	r3, [pc, #64]	@ (80031c0 <_sbrk+0x64>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	429a      	cmp	r2, r3
 800318a:	d207      	bcs.n	800319c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800318c:	f003 ffb8 	bl	8007100 <__errno>
 8003190:	4603      	mov	r3, r0
 8003192:	220c      	movs	r2, #12
 8003194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	e009      	b.n	80031b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800319c:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031a2:	4b07      	ldr	r3, [pc, #28]	@ (80031c0 <_sbrk+0x64>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	4a05      	ldr	r2, [pc, #20]	@ (80031c0 <_sbrk+0x64>)
 80031ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20020000 	.word	0x20020000
 80031bc:	00000400 	.word	0x00000400
 80031c0:	200003b4 	.word	0x200003b4
 80031c4:	20000508 	.word	0x20000508

080031c8 <SystemInit>:
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <SystemInit+0x20>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d2:	4a05      	ldr	r2, [pc, #20]	@ (80031e8 <SystemInit+0x20>)
 80031d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <setWrongCommandFlag>:
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	70fb      	strb	r3, [r7, #3]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <getEventStatusWord>:
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	2300      	movs	r3, #0
 8003218:	81fb      	strh	r3, [r7, #14]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003220:	2b04      	cmp	r3, #4
 8003222:	d821      	bhi.n	8003268 <getEventStatusWord+0x5c>
 8003224:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <getEventStatusWord+0x20>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	08003269 	.word	0x08003269
 8003230:	0800325f 	.word	0x0800325f
 8003234:	08003255 	.word	0x08003255
 8003238:	0800324b 	.word	0x0800324b
 800323c:	08003241 	.word	0x08003241
 8003240:	89fb      	ldrh	r3, [r7, #14]
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	81fb      	strh	r3, [r7, #14]
 8003248:	e00e      	b.n	8003268 <getEventStatusWord+0x5c>
 800324a:	89fb      	ldrh	r3, [r7, #14]
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	81fb      	strh	r3, [r7, #14]
 8003252:	e009      	b.n	8003268 <getEventStatusWord+0x5c>
 8003254:	89fb      	ldrh	r3, [r7, #14]
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	81fb      	strh	r3, [r7, #14]
 800325c:	e004      	b.n	8003268 <getEventStatusWord+0x5c>
 800325e:	89fb      	ldrh	r3, [r7, #14]
 8003260:	f043 0308 	orr.w	r3, r3, #8
 8003264:	81fb      	strh	r3, [r7, #14]
 8003266:	bf00      	nop
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <getEventStatusWord+0x6e>
 8003272:	89fb      	ldrh	r3, [r7, #14]
 8003274:	f043 0310 	orr.w	r3, r3, #16
 8003278:	81fb      	strh	r3, [r7, #14]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <getEventStatusWord+0x80>
 8003284:	89fb      	ldrh	r3, [r7, #14]
 8003286:	f043 0320 	orr.w	r3, r3, #32
 800328a:	81fb      	strh	r3, [r7, #14]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <getEventStatusWord+0x92>
 8003296:	89fb      	ldrh	r3, [r7, #14]
 8003298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800329c:	81fb      	strh	r3, [r7, #14]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <getEventStatusWord+0xa4>
 80032a8:	89fb      	ldrh	r3, [r7, #14]
 80032aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032ae:	81fb      	strh	r3, [r7, #14]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d820      	bhi.n	80032fc <getEventStatusWord+0xf0>
 80032ba:	a201      	add	r2, pc, #4	@ (adr r2, 80032c0 <getEventStatusWord+0xb4>)
 80032bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c0:	080032fd 	.word	0x080032fd
 80032c4:	080032f3 	.word	0x080032f3
 80032c8:	080032e9 	.word	0x080032e9
 80032cc:	080032df 	.word	0x080032df
 80032d0:	080032d5 	.word	0x080032d5
 80032d4:	89fb      	ldrh	r3, [r7, #14]
 80032d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032da:	81fb      	strh	r3, [r7, #14]
 80032dc:	e00e      	b.n	80032fc <getEventStatusWord+0xf0>
 80032de:	89fb      	ldrh	r3, [r7, #14]
 80032e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032e4:	81fb      	strh	r3, [r7, #14]
 80032e6:	e009      	b.n	80032fc <getEventStatusWord+0xf0>
 80032e8:	89fb      	ldrh	r3, [r7, #14]
 80032ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032ee:	81fb      	strh	r3, [r7, #14]
 80032f0:	e004      	b.n	80032fc <getEventStatusWord+0xf0>
 80032f2:	89fb      	ldrh	r3, [r7, #14]
 80032f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80032f8:	81fb      	strh	r3, [r7, #14]
 80032fa:	bf00      	nop
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <getEventStatusWord+0x102>
 8003306:	89fb      	ldrh	r3, [r7, #14]
 8003308:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800330c:	81fb      	strh	r3, [r7, #14]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d00a      	beq.n	800332c <getEventStatusWord+0x120>
 8003316:	2b02      	cmp	r3, #2
 8003318:	dc0e      	bgt.n	8003338 <getEventStatusWord+0x12c>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <getEventStatusWord+0x12a>
 800331e:	2b01      	cmp	r3, #1
 8003320:	d10a      	bne.n	8003338 <getEventStatusWord+0x12c>
 8003322:	89fb      	ldrh	r3, [r7, #14]
 8003324:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003328:	81fb      	strh	r3, [r7, #14]
 800332a:	e005      	b.n	8003338 <getEventStatusWord+0x12c>
 800332c:	89fb      	ldrh	r3, [r7, #14]
 800332e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003332:	81fb      	strh	r3, [r7, #14]
 8003334:	e000      	b.n	8003338 <getEventStatusWord+0x12c>
 8003336:	bf00      	nop
 8003338:	89fb      	ldrh	r3, [r7, #14]
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop

08003348 <getEncoderDirection>:
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <getEncoderDirection+0x14>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <getEncoderDirection+0x16>
 800335c:	2300      	movs	r3, #0
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <getCoilCurrent>:
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <getCurrentLimitHoming>:
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <getCurrentLimitServo>:
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <getVoltageLimitHoming>:
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <getVelocityLimitServo>:
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <getTorqueLimitServo>:
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	0000      	movs	r0, r0
 80033fc:	0000      	movs	r0, r0
	...

08003400 <getMaxPositionError>:
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7fd f878 	bl	8000504 <__aeabi_ui2d>
 8003414:	a30f      	add	r3, pc, #60	@ (adr r3, 8003454 <getMaxPositionError+0x54>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f8ed 	bl	80005f8 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	4b09      	ldr	r3, [pc, #36]	@ (8003450 <getMaxPositionError+0x50>)
 800342c:	f7fd fa0e 	bl	800084c <__aeabi_ddiv>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	f7fd fb18 	bl	8000a6c <__aeabi_d2uiz>
 800343c:	4603      	mov	r3, r0
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	f3af 8000 	nop.w
 8003450:	40f00000 	.word	0x40f00000
 8003454:	00000000 	.word	0x00000000
 8003458:	40d38800 	.word	0x40d38800

0800345c <getCurrentGainP>:
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <getCurrentGainI>:
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <getVelocityGainP>:
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <getVelocityGainI>:
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <getPositionGainP>:
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <getPositionGainI>:
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <getFirmwareVersion>:
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	463b      	mov	r3, r7
 80034f4:	2204      	movs	r2, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	f44f 7022 	mov.w	r0, #648	@ 0x288
 80034fc:	f7fd fd18 	bl	8000f30 <EEPROM_Read>
 8003500:	463b      	mov	r3, r7
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fd32 	bl	8000f6c <bytes2uInt>
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003514:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800354c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003518:	f7ff fe56 	bl	80031c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800351c:	480c      	ldr	r0, [pc, #48]	@ (8003550 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800351e:	490d      	ldr	r1, [pc, #52]	@ (8003554 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003520:	4a0d      	ldr	r2, [pc, #52]	@ (8003558 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003524:	e002      	b.n	800352c <LoopCopyDataInit>

08003526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800352a:	3304      	adds	r3, #4

0800352c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800352c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800352e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003530:	d3f9      	bcc.n	8003526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003532:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003534:	4c0a      	ldr	r4, [pc, #40]	@ (8003560 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003538:	e001      	b.n	800353e <LoopFillZerobss>

0800353a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800353a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800353c:	3204      	adds	r2, #4

0800353e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800353e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003540:	d3fb      	bcc.n	800353a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003542:	f003 fde3 	bl	800710c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003546:	f7fd ff5b 	bl	8001400 <main>
  bx  lr    
 800354a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800354c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003554:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003558:	08007dbc 	.word	0x08007dbc
  ldr r2, =_sbss
 800355c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003560:	20000508 	.word	0x20000508

08003564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003564:	e7fe      	b.n	8003564 <ADC_IRQHandler>
	...

08003568 <HAL_Init>:
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
 800356c:	4b0e      	ldr	r3, [pc, #56]	@ (80035a8 <HAL_Init+0x40>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0d      	ldr	r2, [pc, #52]	@ (80035a8 <HAL_Init+0x40>)
 8003572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <HAL_Init+0x40>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0a      	ldr	r2, [pc, #40]	@ (80035a8 <HAL_Init+0x40>)
 800357e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b08      	ldr	r3, [pc, #32]	@ (80035a8 <HAL_Init+0x40>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a07      	ldr	r2, [pc, #28]	@ (80035a8 <HAL_Init+0x40>)
 800358a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	2003      	movs	r0, #3
 8003592:	f000 f931 	bl	80037f8 <HAL_NVIC_SetPriorityGrouping>
 8003596:	200f      	movs	r0, #15
 8003598:	f000 f808 	bl	80035ac <HAL_InitTick>
 800359c:	f7ff fb7a 	bl	8002c94 <HAL_MspInit>
 80035a0:	2300      	movs	r3, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023c00 	.word	0x40023c00

080035ac <HAL_InitTick>:
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	4b12      	ldr	r3, [pc, #72]	@ (8003600 <HAL_InitTick+0x54>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b12      	ldr	r3, [pc, #72]	@ (8003604 <HAL_InitTick+0x58>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	4619      	mov	r1, r3
 80035be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80035c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f93b 	bl	8003846 <HAL_SYSTICK_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_InitTick+0x2e>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e00e      	b.n	80035f8 <HAL_InitTick+0x4c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b0f      	cmp	r3, #15
 80035de:	d80a      	bhi.n	80035f6 <HAL_InitTick+0x4a>
 80035e0:	2200      	movs	r2, #0
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	f04f 30ff 	mov.w	r0, #4294967295
 80035e8:	f000 f911 	bl	800380e <HAL_NVIC_SetPriority>
 80035ec:	4a06      	ldr	r2, [pc, #24]	@ (8003608 <HAL_InitTick+0x5c>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	2300      	movs	r3, #0
 80035f4:	e000      	b.n	80035f8 <HAL_InitTick+0x4c>
 80035f6:	2301      	movs	r3, #1
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000000 	.word	0x20000000
 8003604:	20000008 	.word	0x20000008
 8003608:	20000004 	.word	0x20000004

0800360c <HAL_IncTick>:
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
 8003610:	4b06      	ldr	r3, [pc, #24]	@ (800362c <HAL_IncTick+0x20>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <HAL_IncTick+0x24>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4413      	add	r3, r2
 800361c:	4a04      	ldr	r2, [pc, #16]	@ (8003630 <HAL_IncTick+0x24>)
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000008 	.word	0x20000008
 8003630:	200003b8 	.word	0x200003b8

08003634 <HAL_GetTick>:
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
 8003638:	4b03      	ldr	r3, [pc, #12]	@ (8003648 <HAL_GetTick+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	200003b8 	.word	0x200003b8

0800364c <HAL_Delay>:
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	f7ff ffee 	bl	8003634 <HAL_GetTick>
 8003658:	60b8      	str	r0, [r7, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d005      	beq.n	8003672 <HAL_Delay+0x26>
 8003666:	4b0a      	ldr	r3, [pc, #40]	@ (8003690 <HAL_Delay+0x44>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	bf00      	nop
 8003674:	f7ff ffde 	bl	8003634 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	429a      	cmp	r2, r3
 8003682:	d8f7      	bhi.n	8003674 <HAL_Delay+0x28>
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000008 	.word	0x20000008

08003694 <__NVIC_SetPriorityGrouping>:
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036b0:	4013      	ands	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	021a      	lsls	r2, r3, #8
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	4a04      	ldr	r2, [pc, #16]	@ (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	60d3      	str	r3, [r2, #12]
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <__NVIC_GetPriorityGrouping>:
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <__NVIC_GetPriorityGrouping+0x18>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	4618      	mov	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_SetPriority>:
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	6039      	str	r1, [r7, #0]
 8003702:	71fb      	strb	r3, [r7, #7]
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	2b00      	cmp	r3, #0
 800370a:	db0a      	blt.n	8003722 <__NVIC_SetPriority+0x2a>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	490c      	ldr	r1, [pc, #48]	@ (8003744 <__NVIC_SetPriority+0x4c>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	440b      	add	r3, r1
 800371c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8003720:	e00a      	b.n	8003738 <__NVIC_SetPriority+0x40>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4908      	ldr	r1, [pc, #32]	@ (8003748 <__NVIC_SetPriority+0x50>)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	3b04      	subs	r3, #4
 8003730:	0112      	lsls	r2, r2, #4
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	440b      	add	r3, r1
 8003736:	761a      	strb	r2, [r3, #24]
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	e000e100 	.word	0xe000e100
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <NVIC_EncodePriority>:
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	@ 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f1c3 0307 	rsb	r3, r3, #7
 8003766:	2b04      	cmp	r3, #4
 8003768:	bf28      	it	cs
 800376a:	2304      	movcs	r3, #4
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3304      	adds	r3, #4
 8003772:	2b06      	cmp	r3, #6
 8003774:	d902      	bls.n	800377c <NVIC_EncodePriority+0x30>
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3b03      	subs	r3, #3
 800377a:	e000      	b.n	800377e <NVIC_EncodePriority+0x32>
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	f04f 32ff 	mov.w	r2, #4294967295
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43da      	mvns	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	401a      	ands	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	409a      	lsls	r2, r3
 8003794:	f04f 31ff 	mov.w	r1, #4294967295
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	43d9      	mvns	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	400b      	ands	r3, r1
 80037a4:	4313      	orrs	r3, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	3724      	adds	r7, #36	@ 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <SysTick_Config>:
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3b01      	subs	r3, #1
 80037c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037c4:	d301      	bcc.n	80037ca <SysTick_Config+0x16>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e00f      	b.n	80037ea <SysTick_Config+0x36>
 80037ca:	4a0a      	ldr	r2, [pc, #40]	@ (80037f4 <SysTick_Config+0x40>)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	6053      	str	r3, [r2, #4]
 80037d2:	210f      	movs	r1, #15
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	f7ff ff8e 	bl	80036f8 <__NVIC_SetPriority>
 80037dc:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <SysTick_Config+0x40>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
 80037e2:	4b04      	ldr	r3, [pc, #16]	@ (80037f4 <SysTick_Config+0x40>)
 80037e4:	2207      	movs	r2, #7
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	2300      	movs	r3, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	e000e010 	.word	0xe000e010

080037f8 <HAL_NVIC_SetPriorityGrouping>:
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ff47 	bl	8003694 <__NVIC_SetPriorityGrouping>
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_NVIC_SetPriority>:
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	4603      	mov	r3, r0
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	f7ff ff5c 	bl	80036dc <__NVIC_GetPriorityGrouping>
 8003824:	6178      	str	r0, [r7, #20]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	6978      	ldr	r0, [r7, #20]
 800382c:	f7ff ff8e 	bl	800374c <NVIC_EncodePriority>
 8003830:	4602      	mov	r2, r0
 8003832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff5d 	bl	80036f8 <__NVIC_SetPriority>
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_SYSTICK_Config>:
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ffb0 	bl	80037b4 <SysTick_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	@ 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e159      	b.n	8003b30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800387c:	2201      	movs	r2, #1
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	429a      	cmp	r2, r3
 8003896:	f040 8148 	bne.w	8003b2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d005      	beq.n	80038b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d130      	bne.n	8003914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	2203      	movs	r2, #3
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e8:	2201      	movs	r2, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 0201 	and.w	r2, r3, #1
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b03      	cmp	r3, #3
 800391e:	d017      	beq.n	8003950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2203      	movs	r2, #3
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d123      	bne.n	80039a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	08da      	lsrs	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3208      	adds	r2, #8
 8003964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	220f      	movs	r2, #15
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	08da      	lsrs	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3208      	adds	r2, #8
 800399e:	69b9      	ldr	r1, [r7, #24]
 80039a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	2203      	movs	r2, #3
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0203 	and.w	r2, r3, #3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80a2 	beq.w	8003b2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	4b57      	ldr	r3, [pc, #348]	@ (8003b48 <HAL_GPIO_Init+0x2e8>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	4a56      	ldr	r2, [pc, #344]	@ (8003b48 <HAL_GPIO_Init+0x2e8>)
 80039f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039f6:	4b54      	ldr	r3, [pc, #336]	@ (8003b48 <HAL_GPIO_Init+0x2e8>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a02:	4a52      	ldr	r2, [pc, #328]	@ (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	089b      	lsrs	r3, r3, #2
 8003a08:	3302      	adds	r3, #2
 8003a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	220f      	movs	r2, #15
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a49      	ldr	r2, [pc, #292]	@ (8003b50 <HAL_GPIO_Init+0x2f0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d019      	beq.n	8003a62 <HAL_GPIO_Init+0x202>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a48      	ldr	r2, [pc, #288]	@ (8003b54 <HAL_GPIO_Init+0x2f4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_GPIO_Init+0x1fe>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a47      	ldr	r2, [pc, #284]	@ (8003b58 <HAL_GPIO_Init+0x2f8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00d      	beq.n	8003a5a <HAL_GPIO_Init+0x1fa>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a46      	ldr	r2, [pc, #280]	@ (8003b5c <HAL_GPIO_Init+0x2fc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <HAL_GPIO_Init+0x1f6>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a45      	ldr	r2, [pc, #276]	@ (8003b60 <HAL_GPIO_Init+0x300>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_GPIO_Init+0x1f2>
 8003a4e:	2304      	movs	r3, #4
 8003a50:	e008      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a52:	2307      	movs	r3, #7
 8003a54:	e006      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a56:	2303      	movs	r3, #3
 8003a58:	e004      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e002      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a62:	2300      	movs	r3, #0
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	f002 0203 	and.w	r2, r2, #3
 8003a6a:	0092      	lsls	r2, r2, #2
 8003a6c:	4093      	lsls	r3, r2
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a74:	4935      	ldr	r1, [pc, #212]	@ (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	3302      	adds	r3, #2
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a82:	4b38      	ldr	r3, [pc, #224]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aac:	4b2d      	ldr	r3, [pc, #180]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad0:	4a24      	ldr	r2, [pc, #144]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ad6:	4b23      	ldr	r3, [pc, #140]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003afa:	4a1a      	ldr	r2, [pc, #104]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b00:	4b18      	ldr	r3, [pc, #96]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b24:	4a0f      	ldr	r2, [pc, #60]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b0f      	cmp	r3, #15
 8003b34:	f67f aea2 	bls.w	800387c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	3724      	adds	r7, #36	@ 0x24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40013800 	.word	0x40013800
 8003b50:	40020000 	.word	0x40020000
 8003b54:	40020400 	.word	0x40020400
 8003b58:	40020800 	.word	0x40020800
 8003b5c:	40020c00 	.word	0x40020c00
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40013c00 	.word	0x40013c00

08003b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
 8003b74:	4613      	mov	r3, r2
 8003b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b78:	787b      	ldrb	r3, [r7, #1]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7e:	887a      	ldrh	r2, [r7, #2]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b84:	e003      	b.n	8003b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	041a      	lsls	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	619a      	str	r2, [r3, #24]
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e12b      	b.n	8003e06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff f88e 	bl	8002ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2224      	movs	r2, #36	@ 0x24
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c00:	f001 ff10 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 8003c04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4a81      	ldr	r2, [pc, #516]	@ (8003e10 <HAL_I2C_Init+0x274>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d807      	bhi.n	8003c20 <HAL_I2C_Init+0x84>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a80      	ldr	r2, [pc, #512]	@ (8003e14 <HAL_I2C_Init+0x278>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	bf94      	ite	ls
 8003c18:	2301      	movls	r3, #1
 8003c1a:	2300      	movhi	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e006      	b.n	8003c2e <HAL_I2C_Init+0x92>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a7d      	ldr	r2, [pc, #500]	@ (8003e18 <HAL_I2C_Init+0x27c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	bf94      	ite	ls
 8003c28:	2301      	movls	r3, #1
 8003c2a:	2300      	movhi	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e0e7      	b.n	8003e06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a78      	ldr	r2, [pc, #480]	@ (8003e1c <HAL_I2C_Init+0x280>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	0c9b      	lsrs	r3, r3, #18
 8003c40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a6a      	ldr	r2, [pc, #424]	@ (8003e10 <HAL_I2C_Init+0x274>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d802      	bhi.n	8003c70 <HAL_I2C_Init+0xd4>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	e009      	b.n	8003c84 <HAL_I2C_Init+0xe8>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	4a69      	ldr	r2, [pc, #420]	@ (8003e20 <HAL_I2C_Init+0x284>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	3301      	adds	r3, #1
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	495c      	ldr	r1, [pc, #368]	@ (8003e10 <HAL_I2C_Init+0x274>)
 8003ca0:	428b      	cmp	r3, r1
 8003ca2:	d819      	bhi.n	8003cd8 <HAL_I2C_Init+0x13c>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1e59      	subs	r1, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb2:	1c59      	adds	r1, r3, #1
 8003cb4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cb8:	400b      	ands	r3, r1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_I2C_Init+0x138>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1e59      	subs	r1, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd2:	e051      	b.n	8003d78 <HAL_I2C_Init+0x1dc>
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	e04f      	b.n	8003d78 <HAL_I2C_Init+0x1dc>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d111      	bne.n	8003d04 <HAL_I2C_Init+0x168>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1e58      	subs	r0, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	440b      	add	r3, r1
 8003cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	e012      	b.n	8003d2a <HAL_I2C_Init+0x18e>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1e58      	subs	r0, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6859      	ldr	r1, [r3, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	0099      	lsls	r1, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Init+0x196>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e022      	b.n	8003d78 <HAL_I2C_Init+0x1dc>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10e      	bne.n	8003d58 <HAL_I2C_Init+0x1bc>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1e58      	subs	r0, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	440b      	add	r3, r1
 8003d48:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d56:	e00f      	b.n	8003d78 <HAL_I2C_Init+0x1dc>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1e58      	subs	r0, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	0099      	lsls	r1, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	6809      	ldr	r1, [r1, #0]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69da      	ldr	r2, [r3, #28]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003da6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6911      	ldr	r1, [r2, #16]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	4311      	orrs	r1, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	430b      	orrs	r3, r1
 8003dba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	000186a0 	.word	0x000186a0
 8003e14:	001e847f 	.word	0x001e847f
 8003e18:	003d08ff 	.word	0x003d08ff
 8003e1c:	431bde83 	.word	0x431bde83
 8003e20:	10624dd3 	.word	0x10624dd3

08003e24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	607a      	str	r2, [r7, #4]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	460b      	mov	r3, r1
 8003e32:	817b      	strh	r3, [r7, #10]
 8003e34:	4613      	mov	r3, r2
 8003e36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e38:	f7ff fbfc 	bl	8003634 <HAL_GetTick>
 8003e3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	f040 80e0 	bne.w	800400c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	2319      	movs	r3, #25
 8003e52:	2201      	movs	r2, #1
 8003e54:	4970      	ldr	r1, [pc, #448]	@ (8004018 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 ff7e 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
 8003e64:	e0d3      	b.n	800400e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_I2C_Master_Transmit+0x50>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e0cc      	b.n	800400e <HAL_I2C_Master_Transmit+0x1ea>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d007      	beq.n	8003e9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0201 	orr.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ea8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2221      	movs	r2, #33	@ 0x21
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	893a      	ldrh	r2, [r7, #8]
 8003eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a50      	ldr	r2, [pc, #320]	@ (800401c <HAL_I2C_Master_Transmit+0x1f8>)
 8003eda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003edc:	8979      	ldrh	r1, [r7, #10]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	6a3a      	ldr	r2, [r7, #32]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fd00 	bl	80048e8 <I2C_MasterRequestWrite>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e08d      	b.n	800400e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f08:	e066      	b.n	8003fd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	6a39      	ldr	r1, [r7, #32]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f001 f83c 	bl	8004f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00d      	beq.n	8003f36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d107      	bne.n	8003f32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e06b      	b.n	800400e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	781a      	ldrb	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d11b      	bne.n	8003fac <HAL_I2C_Master_Transmit+0x188>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d017      	beq.n	8003fac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	6a39      	ldr	r1, [r7, #32]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f001 f833 	bl	800501c <I2C_WaitOnBTFFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00d      	beq.n	8003fd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d107      	bne.n	8003fd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e01a      	b.n	800400e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d194      	bne.n	8003f0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e000      	b.n	800400e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	00100002 	.word	0x00100002
 800401c:	ffff0000 	.word	0xffff0000

08004020 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08c      	sub	sp, #48	@ 0x30
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	461a      	mov	r2, r3
 800402c:	460b      	mov	r3, r1
 800402e:	817b      	strh	r3, [r7, #10]
 8004030:	4613      	mov	r3, r2
 8004032:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004034:	f7ff fafe 	bl	8003634 <HAL_GetTick>
 8004038:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b20      	cmp	r3, #32
 8004044:	f040 8217 	bne.w	8004476 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2319      	movs	r3, #25
 800404e:	2201      	movs	r2, #1
 8004050:	497c      	ldr	r1, [pc, #496]	@ (8004244 <HAL_I2C_Master_Receive+0x224>)
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fe80 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
 8004060:	e20a      	b.n	8004478 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_I2C_Master_Receive+0x50>
 800406c:	2302      	movs	r3, #2
 800406e:	e203      	b.n	8004478 <HAL_I2C_Master_Receive+0x458>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b01      	cmp	r3, #1
 8004084:	d007      	beq.n	8004096 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0201 	orr.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2222      	movs	r2, #34	@ 0x22
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2210      	movs	r2, #16
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	893a      	ldrh	r2, [r7, #8]
 80040c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a5c      	ldr	r2, [pc, #368]	@ (8004248 <HAL_I2C_Master_Receive+0x228>)
 80040d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040d8:	8979      	ldrh	r1, [r7, #10]
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fc84 	bl	80049ec <I2C_MasterRequestRead>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e1c4      	b.n	8004478 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d113      	bne.n	800411e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f6:	2300      	movs	r3, #0
 80040f8:	623b      	str	r3, [r7, #32]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	623b      	str	r3, [r7, #32]
 800410a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e198      	b.n	8004450 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004122:	2b01      	cmp	r3, #1
 8004124:	d11b      	bne.n	800415e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e178      	b.n	8004450 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004162:	2b02      	cmp	r3, #2
 8004164:	d11b      	bne.n	800419e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004174:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004184:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004186:	2300      	movs	r3, #0
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	e158      	b.n	8004450 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041c4:	e144      	b.n	8004450 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	f200 80f1 	bhi.w	80043b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d123      	bne.n	8004220 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 ff65 	bl	80050ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e145      	b.n	8004478 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800421e:	e117      	b.n	8004450 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004224:	2b02      	cmp	r3, #2
 8004226:	d14e      	bne.n	80042c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422e:	2200      	movs	r2, #0
 8004230:	4906      	ldr	r1, [pc, #24]	@ (800424c <HAL_I2C_Master_Receive+0x22c>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fd90 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e11a      	b.n	8004478 <HAL_I2C_Master_Receive+0x458>
 8004242:	bf00      	nop
 8004244:	00100002 	.word	0x00100002
 8004248:	ffff0000 	.word	0xffff0000
 800424c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800425e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042c4:	e0c4      	b.n	8004450 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042cc:	2200      	movs	r2, #0
 80042ce:	496c      	ldr	r1, [pc, #432]	@ (8004480 <HAL_I2C_Master_Receive+0x460>)
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fd41 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0cb      	b.n	8004478 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	2200      	movs	r2, #0
 800432a:	4955      	ldr	r1, [pc, #340]	@ (8004480 <HAL_I2C_Master_Receive+0x460>)
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fd13 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e09d      	b.n	8004478 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800434a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043b0:	e04e      	b.n	8004450 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fe78 	bl	80050ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e058      	b.n	8004478 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d124      	bne.n	8004450 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440a:	2b03      	cmp	r3, #3
 800440c:	d107      	bne.n	800441e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800441c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004454:	2b00      	cmp	r3, #0
 8004456:	f47f aeb6 	bne.w	80041c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e000      	b.n	8004478 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004476:	2302      	movs	r3, #2
  }
}
 8004478:	4618      	mov	r0, r3
 800447a:	3728      	adds	r7, #40	@ 0x28
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	00010004 	.word	0x00010004

08004484 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08c      	sub	sp, #48	@ 0x30
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	4608      	mov	r0, r1
 800448e:	4611      	mov	r1, r2
 8004490:	461a      	mov	r2, r3
 8004492:	4603      	mov	r3, r0
 8004494:	817b      	strh	r3, [r7, #10]
 8004496:	460b      	mov	r3, r1
 8004498:	813b      	strh	r3, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800449e:	f7ff f8c9 	bl	8003634 <HAL_GetTick>
 80044a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	f040 8214 	bne.w	80048da <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2319      	movs	r3, #25
 80044b8:	2201      	movs	r2, #1
 80044ba:	497b      	ldr	r1, [pc, #492]	@ (80046a8 <HAL_I2C_Mem_Read+0x224>)
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 fc4b 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
 80044ca:	e207      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_I2C_Mem_Read+0x56>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e200      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d007      	beq.n	8004500 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800450e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2222      	movs	r2, #34	@ 0x22
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2240      	movs	r2, #64	@ 0x40
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800452a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004530:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a5b      	ldr	r2, [pc, #364]	@ (80046ac <HAL_I2C_Mem_Read+0x228>)
 8004540:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004542:	88f8      	ldrh	r0, [r7, #6]
 8004544:	893a      	ldrh	r2, [r7, #8]
 8004546:	8979      	ldrh	r1, [r7, #10]
 8004548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	4603      	mov	r3, r0
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fb18 	bl	8004b88 <I2C_RequestMemoryRead>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e1bc      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	d113      	bne.n	8004592 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456a:	2300      	movs	r3, #0
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	623b      	str	r3, [r7, #32]
 800457e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e190      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004596:	2b01      	cmp	r3, #1
 8004598:	d11b      	bne.n	80045d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	e170      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d11b      	bne.n	8004612 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	e150      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004628:	e144      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462e:	2b03      	cmp	r3, #3
 8004630:	f200 80f1 	bhi.w	8004816 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004638:	2b01      	cmp	r3, #1
 800463a:	d123      	bne.n	8004684 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fd33 	bl	80050ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e145      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004682:	e117      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004688:	2b02      	cmp	r3, #2
 800468a:	d14e      	bne.n	800472a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004692:	2200      	movs	r2, #0
 8004694:	4906      	ldr	r1, [pc, #24]	@ (80046b0 <HAL_I2C_Mem_Read+0x22c>)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fb5e 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e11a      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
 80046a6:	bf00      	nop
 80046a8:	00100002 	.word	0x00100002
 80046ac:	ffff0000 	.word	0xffff0000
 80046b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004728:	e0c4      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004730:	2200      	movs	r2, #0
 8004732:	496c      	ldr	r1, [pc, #432]	@ (80048e4 <HAL_I2C_Mem_Read+0x460>)
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fb0f 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0cb      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478c:	2200      	movs	r2, #0
 800478e:	4955      	ldr	r1, [pc, #340]	@ (80048e4 <HAL_I2C_Mem_Read+0x460>)
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 fae1 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e09d      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004814:	e04e      	b.n	80048b4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004818:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fc46 	bl	80050ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e058      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b04      	cmp	r3, #4
 8004868:	d124      	bne.n	80048b4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486e:	2b03      	cmp	r3, #3
 8004870:	d107      	bne.n	8004882 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004880:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f47f aeb6 	bne.w	800462a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e000      	b.n	80048dc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3728      	adds	r7, #40	@ 0x28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	00010004 	.word	0x00010004

080048e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	460b      	mov	r3, r1
 80048f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d006      	beq.n	8004912 <I2C_MasterRequestWrite+0x2a>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d003      	beq.n	8004912 <I2C_MasterRequestWrite+0x2a>
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004910:	d108      	bne.n	8004924 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e00b      	b.n	800493c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	2b12      	cmp	r3, #18
 800492a:	d107      	bne.n	800493c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800493a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fa05 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004962:	d103      	bne.n	800496c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e035      	b.n	80049dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004978:	d108      	bne.n	800498c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800497a:	897b      	ldrh	r3, [r7, #10]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004988:	611a      	str	r2, [r3, #16]
 800498a:	e01b      	b.n	80049c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800498c:	897b      	ldrh	r3, [r7, #10]
 800498e:	11db      	asrs	r3, r3, #7
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 0306 	and.w	r3, r3, #6
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f063 030f 	orn	r3, r3, #15
 800499c:	b2da      	uxtb	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	490e      	ldr	r1, [pc, #56]	@ (80049e4 <I2C_MasterRequestWrite+0xfc>)
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fa4e 	bl	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e010      	b.n	80049dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049ba:	897b      	ldrh	r3, [r7, #10]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4907      	ldr	r1, [pc, #28]	@ (80049e8 <I2C_MasterRequestWrite+0x100>)
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fa3e 	bl	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	00010008 	.word	0x00010008
 80049e8:	00010002 	.word	0x00010002

080049ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	607a      	str	r2, [r7, #4]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	460b      	mov	r3, r1
 80049fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a00:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a10:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d006      	beq.n	8004a26 <I2C_MasterRequestRead+0x3a>
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d003      	beq.n	8004a26 <I2C_MasterRequestRead+0x3a>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a24:	d108      	bne.n	8004a38 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e00b      	b.n	8004a50 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3c:	2b11      	cmp	r3, #17
 8004a3e:	d107      	bne.n	8004a50 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f97b 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00d      	beq.n	8004a84 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a76:	d103      	bne.n	8004a80 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e079      	b.n	8004b78 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a8c:	d108      	bne.n	8004aa0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a8e:	897b      	ldrh	r3, [r7, #10]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	611a      	str	r2, [r3, #16]
 8004a9e:	e05f      	b.n	8004b60 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004aa0:	897b      	ldrh	r3, [r7, #10]
 8004aa2:	11db      	asrs	r3, r3, #7
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f003 0306 	and.w	r3, r3, #6
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f063 030f 	orn	r3, r3, #15
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	4930      	ldr	r1, [pc, #192]	@ (8004b80 <I2C_MasterRequestRead+0x194>)
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f9c4 	bl	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e054      	b.n	8004b78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ace:	897b      	ldrh	r3, [r7, #10]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4929      	ldr	r1, [pc, #164]	@ (8004b84 <I2C_MasterRequestRead+0x198>)
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f9b4 	bl	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e044      	b.n	8004b78 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aee:	2300      	movs	r3, #0
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b12:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f919 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00d      	beq.n	8004b48 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b3a:	d103      	bne.n	8004b44 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b42:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e017      	b.n	8004b78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b48:	897b      	ldrh	r3, [r7, #10]
 8004b4a:	11db      	asrs	r3, r3, #7
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	f003 0306 	and.w	r3, r3, #6
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	f063 030e 	orn	r3, r3, #14
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4907      	ldr	r1, [pc, #28]	@ (8004b84 <I2C_MasterRequestRead+0x198>)
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f970 	bl	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	00010008 	.word	0x00010008
 8004b84:	00010002 	.word	0x00010002

08004b88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	4608      	mov	r0, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	461a      	mov	r2, r3
 8004b96:	4603      	mov	r3, r0
 8004b98:	817b      	strh	r3, [r7, #10]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	813b      	strh	r3, [r7, #8]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f8c2 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00d      	beq.n	8004bf6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be8:	d103      	bne.n	8004bf2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e0aa      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bf6:	897b      	ldrh	r3, [r7, #10]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	6a3a      	ldr	r2, [r7, #32]
 8004c0a:	4952      	ldr	r1, [pc, #328]	@ (8004d54 <I2C_RequestMemoryRead+0x1cc>)
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f91d 	bl	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e097      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c34:	6a39      	ldr	r1, [r7, #32]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f9a8 	bl	8004f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00d      	beq.n	8004c5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d107      	bne.n	8004c5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e076      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d105      	bne.n	8004c70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c64:	893b      	ldrh	r3, [r7, #8]
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	611a      	str	r2, [r3, #16]
 8004c6e:	e021      	b.n	8004cb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c70:	893b      	ldrh	r3, [r7, #8]
 8004c72:	0a1b      	lsrs	r3, r3, #8
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c80:	6a39      	ldr	r1, [r7, #32]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f982 	bl	8004f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d107      	bne.n	8004ca6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e050      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004caa:	893b      	ldrh	r3, [r7, #8]
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb6:	6a39      	ldr	r1, [r7, #32]
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f967 	bl	8004f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00d      	beq.n	8004ce0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d107      	bne.n	8004cdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e035      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f82b 	bl	8004d58 <I2C_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00d      	beq.n	8004d24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d16:	d103      	bne.n	8004d20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e013      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d24:	897b      	ldrh	r3, [r7, #10]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	6a3a      	ldr	r2, [r7, #32]
 8004d38:	4906      	ldr	r1, [pc, #24]	@ (8004d54 <I2C_RequestMemoryRead+0x1cc>)
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f886 	bl	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	00010002 	.word	0x00010002

08004d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d68:	e048      	b.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d044      	beq.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d72:	f7fe fc5f 	bl	8003634 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d302      	bcc.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d139      	bne.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	0c1b      	lsrs	r3, r3, #16
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d10d      	bne.n	8004dae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	43da      	mvns	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	e00c      	b.n	8004dc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	43da      	mvns	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d116      	bne.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de8:	f043 0220 	orr.w	r2, r3, #32
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e023      	b.n	8004e44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10d      	bne.n	8004e22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	43da      	mvns	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4013      	ands	r3, r2
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf0c      	ite	eq
 8004e18:	2301      	moveq	r3, #1
 8004e1a:	2300      	movne	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	e00c      	b.n	8004e3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	43da      	mvns	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf0c      	ite	eq
 8004e34:	2301      	moveq	r3, #1
 8004e36:	2300      	movne	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d093      	beq.n	8004d6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e5a:	e071      	b.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e6a:	d123      	bne.n	8004eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea0:	f043 0204 	orr.w	r2, r3, #4
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e067      	b.n	8004f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eba:	d041      	beq.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ebc:	f7fe fbba 	bl	8003634 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d302      	bcc.n	8004ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d136      	bne.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	0c1b      	lsrs	r3, r3, #16
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d10c      	bne.n	8004ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	43da      	mvns	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bf14      	ite	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	2300      	moveq	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	e00b      	b.n	8004f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	43da      	mvns	r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4013      	ands	r3, r2
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d016      	beq.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e021      	b.n	8004f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d10c      	bne.n	8004f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	43da      	mvns	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e00b      	b.n	8004f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bf14      	ite	ne
 8004f76:	2301      	movne	r3, #1
 8004f78:	2300      	moveq	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f47f af6d 	bne.w	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f98:	e034      	b.n	8005004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f8e3 	bl	8005166 <I2C_IsAcknowledgeFailed>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e034      	b.n	8005014 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d028      	beq.n	8005004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb2:	f7fe fb3f 	bl	8003634 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d302      	bcc.n	8004fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d11d      	bne.n	8005004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd2:	2b80      	cmp	r3, #128	@ 0x80
 8004fd4:	d016      	beq.n	8005004 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e007      	b.n	8005014 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500e:	2b80      	cmp	r3, #128	@ 0x80
 8005010:	d1c3      	bne.n	8004f9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005028:	e034      	b.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f89b 	bl	8005166 <I2C_IsAcknowledgeFailed>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e034      	b.n	80050a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d028      	beq.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005042:	f7fe faf7 	bl	8003634 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	429a      	cmp	r2, r3
 8005050:	d302      	bcc.n	8005058 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d11d      	bne.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b04      	cmp	r3, #4
 8005064:	d016      	beq.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005080:	f043 0220 	orr.w	r2, r3, #32
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e007      	b.n	80050a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d1c3      	bne.n	800502a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050b8:	e049      	b.n	800514e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d119      	bne.n	80050fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0210 	mvn.w	r2, #16
 80050d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e030      	b.n	800515e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fc:	f7fe fa9a 	bl	8003634 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	429a      	cmp	r2, r3
 800510a:	d302      	bcc.n	8005112 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d11d      	bne.n	800514e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511c:	2b40      	cmp	r3, #64	@ 0x40
 800511e:	d016      	beq.n	800514e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e007      	b.n	800515e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005158:	2b40      	cmp	r3, #64	@ 0x40
 800515a:	d1ae      	bne.n	80050ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517c:	d11b      	bne.n	80051b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005186:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	f043 0204 	orr.w	r2, r3, #4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e267      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d075      	beq.n	80052ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051e2:	4b88      	ldr	r3, [pc, #544]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d00c      	beq.n	8005208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ee:	4b85      	ldr	r3, [pc, #532]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d112      	bne.n	8005220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051fa:	4b82      	ldr	r3, [pc, #520]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005202:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005206:	d10b      	bne.n	8005220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005208:	4b7e      	ldr	r3, [pc, #504]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d05b      	beq.n	80052cc <HAL_RCC_OscConfig+0x108>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d157      	bne.n	80052cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e242      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005228:	d106      	bne.n	8005238 <HAL_RCC_OscConfig+0x74>
 800522a:	4b76      	ldr	r3, [pc, #472]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a75      	ldr	r2, [pc, #468]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	e01d      	b.n	8005274 <HAL_RCC_OscConfig+0xb0>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005240:	d10c      	bne.n	800525c <HAL_RCC_OscConfig+0x98>
 8005242:	4b70      	ldr	r3, [pc, #448]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a6f      	ldr	r2, [pc, #444]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	4b6d      	ldr	r3, [pc, #436]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a6c      	ldr	r2, [pc, #432]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e00b      	b.n	8005274 <HAL_RCC_OscConfig+0xb0>
 800525c:	4b69      	ldr	r3, [pc, #420]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a68      	ldr	r2, [pc, #416]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	4b66      	ldr	r3, [pc, #408]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a65      	ldr	r2, [pc, #404]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 800526e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d013      	beq.n	80052a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7fe f9da 	bl	8003634 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005284:	f7fe f9d6 	bl	8003634 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b64      	cmp	r3, #100	@ 0x64
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e207      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005296:	4b5b      	ldr	r3, [pc, #364]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCC_OscConfig+0xc0>
 80052a2:	e014      	b.n	80052ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a4:	f7fe f9c6 	bl	8003634 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ac:	f7fe f9c2 	bl	8003634 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b64      	cmp	r3, #100	@ 0x64
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e1f3      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052be:	4b51      	ldr	r3, [pc, #324]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0xe8>
 80052ca:	e000      	b.n	80052ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d063      	beq.n	80053a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052da:	4b4a      	ldr	r3, [pc, #296]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 030c 	and.w	r3, r3, #12
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052e6:	4b47      	ldr	r3, [pc, #284]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d11c      	bne.n	800532c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052f2:	4b44      	ldr	r3, [pc, #272]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d116      	bne.n	800532c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052fe:	4b41      	ldr	r3, [pc, #260]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <HAL_RCC_OscConfig+0x152>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d001      	beq.n	8005316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e1c7      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005316:	4b3b      	ldr	r3, [pc, #236]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	4937      	ldr	r1, [pc, #220]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005326:	4313      	orrs	r3, r2
 8005328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800532a:	e03a      	b.n	80053a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d020      	beq.n	8005376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005334:	4b34      	ldr	r3, [pc, #208]	@ (8005408 <HAL_RCC_OscConfig+0x244>)
 8005336:	2201      	movs	r2, #1
 8005338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533a:	f7fe f97b 	bl	8003634 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005342:	f7fe f977 	bl	8003634 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e1a8      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005354:	4b2b      	ldr	r3, [pc, #172]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f0      	beq.n	8005342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005360:	4b28      	ldr	r3, [pc, #160]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	4925      	ldr	r1, [pc, #148]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005370:	4313      	orrs	r3, r2
 8005372:	600b      	str	r3, [r1, #0]
 8005374:	e015      	b.n	80053a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005376:	4b24      	ldr	r3, [pc, #144]	@ (8005408 <HAL_RCC_OscConfig+0x244>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fe f95a 	bl	8003634 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005384:	f7fe f956 	bl	8003634 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e187      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005396:	4b1b      	ldr	r3, [pc, #108]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d036      	beq.n	800541c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d016      	beq.n	80053e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053b6:	4b15      	ldr	r3, [pc, #84]	@ (800540c <HAL_RCC_OscConfig+0x248>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053bc:	f7fe f93a 	bl	8003634 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c4:	f7fe f936 	bl	8003634 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e167      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <HAL_RCC_OscConfig+0x240>)
 80053d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0f0      	beq.n	80053c4 <HAL_RCC_OscConfig+0x200>
 80053e2:	e01b      	b.n	800541c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e4:	4b09      	ldr	r3, [pc, #36]	@ (800540c <HAL_RCC_OscConfig+0x248>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ea:	f7fe f923 	bl	8003634 <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f0:	e00e      	b.n	8005410 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053f2:	f7fe f91f 	bl	8003634 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d907      	bls.n	8005410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e150      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
 8005404:	40023800 	.word	0x40023800
 8005408:	42470000 	.word	0x42470000
 800540c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005410:	4b88      	ldr	r3, [pc, #544]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 8005412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1ea      	bne.n	80053f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8097 	beq.w	8005558 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800542a:	2300      	movs	r3, #0
 800542c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800542e:	4b81      	ldr	r3, [pc, #516]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10f      	bne.n	800545a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	4b7d      	ldr	r3, [pc, #500]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005442:	4a7c      	ldr	r2, [pc, #496]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 8005444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005448:	6413      	str	r3, [r2, #64]	@ 0x40
 800544a:	4b7a      	ldr	r3, [pc, #488]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005456:	2301      	movs	r3, #1
 8005458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545a:	4b77      	ldr	r3, [pc, #476]	@ (8005638 <HAL_RCC_OscConfig+0x474>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005462:	2b00      	cmp	r3, #0
 8005464:	d118      	bne.n	8005498 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005466:	4b74      	ldr	r3, [pc, #464]	@ (8005638 <HAL_RCC_OscConfig+0x474>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a73      	ldr	r2, [pc, #460]	@ (8005638 <HAL_RCC_OscConfig+0x474>)
 800546c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005472:	f7fe f8df 	bl	8003634 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547a:	f7fe f8db 	bl	8003634 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e10c      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548c:	4b6a      	ldr	r3, [pc, #424]	@ (8005638 <HAL_RCC_OscConfig+0x474>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f0      	beq.n	800547a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d106      	bne.n	80054ae <HAL_RCC_OscConfig+0x2ea>
 80054a0:	4b64      	ldr	r3, [pc, #400]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 80054a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a4:	4a63      	ldr	r2, [pc, #396]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 80054a6:	f043 0301 	orr.w	r3, r3, #1
 80054aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80054ac:	e01c      	b.n	80054e8 <HAL_RCC_OscConfig+0x324>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2b05      	cmp	r3, #5
 80054b4:	d10c      	bne.n	80054d0 <HAL_RCC_OscConfig+0x30c>
 80054b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 80054b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ba:	4a5e      	ldr	r2, [pc, #376]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 80054bc:	f043 0304 	orr.w	r3, r3, #4
 80054c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80054c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 80054c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 80054c8:	f043 0301 	orr.w	r3, r3, #1
 80054cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80054ce:	e00b      	b.n	80054e8 <HAL_RCC_OscConfig+0x324>
 80054d0:	4b58      	ldr	r3, [pc, #352]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 80054d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d4:	4a57      	ldr	r2, [pc, #348]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	6713      	str	r3, [r2, #112]	@ 0x70
 80054dc:	4b55      	ldr	r3, [pc, #340]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 80054de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054e0:	4a54      	ldr	r2, [pc, #336]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 80054e2:	f023 0304 	bic.w	r3, r3, #4
 80054e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d015      	beq.n	800551c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f0:	f7fe f8a0 	bl	8003634 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f6:	e00a      	b.n	800550e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f8:	f7fe f89c 	bl	8003634 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005506:	4293      	cmp	r3, r2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e0cb      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550e:	4b49      	ldr	r3, [pc, #292]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 8005510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0ee      	beq.n	80054f8 <HAL_RCC_OscConfig+0x334>
 800551a:	e014      	b.n	8005546 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800551c:	f7fe f88a 	bl	8003634 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005522:	e00a      	b.n	800553a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005524:	f7fe f886 	bl	8003634 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e0b5      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800553a:	4b3e      	ldr	r3, [pc, #248]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1ee      	bne.n	8005524 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005546:	7dfb      	ldrb	r3, [r7, #23]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d105      	bne.n	8005558 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800554c:	4b39      	ldr	r3, [pc, #228]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	4a38      	ldr	r2, [pc, #224]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 8005552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005556:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80a1 	beq.w	80056a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005562:	4b34      	ldr	r3, [pc, #208]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	2b08      	cmp	r3, #8
 800556c:	d05c      	beq.n	8005628 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d141      	bne.n	80055fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005576:	4b31      	ldr	r3, [pc, #196]	@ (800563c <HAL_RCC_OscConfig+0x478>)
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557c:	f7fe f85a 	bl	8003634 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005584:	f7fe f856 	bl	8003634 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e087      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005596:	4b27      	ldr	r3, [pc, #156]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69da      	ldr	r2, [r3, #28]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b0:	019b      	lsls	r3, r3, #6
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	3b01      	subs	r3, #1
 80055bc:	041b      	lsls	r3, r3, #16
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c4:	061b      	lsls	r3, r3, #24
 80055c6:	491b      	ldr	r1, [pc, #108]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055cc:	4b1b      	ldr	r3, [pc, #108]	@ (800563c <HAL_RCC_OscConfig+0x478>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d2:	f7fe f82f 	bl	8003634 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055da:	f7fe f82b 	bl	8003634 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e05c      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ec:	4b11      	ldr	r3, [pc, #68]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0f0      	beq.n	80055da <HAL_RCC_OscConfig+0x416>
 80055f8:	e054      	b.n	80056a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055fa:	4b10      	ldr	r3, [pc, #64]	@ (800563c <HAL_RCC_OscConfig+0x478>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005600:	f7fe f818 	bl	8003634 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005608:	f7fe f814 	bl	8003634 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e045      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561a:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <HAL_RCC_OscConfig+0x470>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0x444>
 8005626:	e03d      	b.n	80056a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d107      	bne.n	8005640 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e038      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
 8005634:	40023800 	.word	0x40023800
 8005638:	40007000 	.word	0x40007000
 800563c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005640:	4b1b      	ldr	r3, [pc, #108]	@ (80056b0 <HAL_RCC_OscConfig+0x4ec>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d028      	beq.n	80056a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005658:	429a      	cmp	r2, r3
 800565a:	d121      	bne.n	80056a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005666:	429a      	cmp	r2, r3
 8005668:	d11a      	bne.n	80056a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005670:	4013      	ands	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005676:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005678:	4293      	cmp	r3, r2
 800567a:	d111      	bne.n	80056a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005686:	085b      	lsrs	r3, r3, #1
 8005688:	3b01      	subs	r3, #1
 800568a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800568c:	429a      	cmp	r2, r3
 800568e:	d107      	bne.n	80056a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800569c:	429a      	cmp	r2, r3
 800569e:	d001      	beq.n	80056a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40023800 	.word	0x40023800

080056b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0cc      	b.n	8005862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056c8:	4b68      	ldr	r3, [pc, #416]	@ (800586c <HAL_RCC_ClockConfig+0x1b8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d90c      	bls.n	80056f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d6:	4b65      	ldr	r3, [pc, #404]	@ (800586c <HAL_RCC_ClockConfig+0x1b8>)
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	4b63      	ldr	r3, [pc, #396]	@ (800586c <HAL_RCC_ClockConfig+0x1b8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0b8      	b.n	8005862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d020      	beq.n	800573e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005708:	4b59      	ldr	r3, [pc, #356]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	4a58      	ldr	r2, [pc, #352]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005712:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005720:	4b53      	ldr	r3, [pc, #332]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	4a52      	ldr	r2, [pc, #328]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800572a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800572c:	4b50      	ldr	r3, [pc, #320]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	494d      	ldr	r1, [pc, #308]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d044      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d107      	bne.n	8005762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005752:	4b47      	ldr	r3, [pc, #284]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d119      	bne.n	8005792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e07f      	b.n	8005862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d003      	beq.n	8005772 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800576e:	2b03      	cmp	r3, #3
 8005770:	d107      	bne.n	8005782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005772:	4b3f      	ldr	r3, [pc, #252]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e06f      	b.n	8005862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005782:	4b3b      	ldr	r3, [pc, #236]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e067      	b.n	8005862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005792:	4b37      	ldr	r3, [pc, #220]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f023 0203 	bic.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4934      	ldr	r1, [pc, #208]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057a4:	f7fd ff46 	bl	8003634 <HAL_GetTick>
 80057a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057aa:	e00a      	b.n	80057c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ac:	f7fd ff42 	bl	8003634 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e04f      	b.n	8005862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 020c 	and.w	r2, r3, #12
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d1eb      	bne.n	80057ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057d4:	4b25      	ldr	r3, [pc, #148]	@ (800586c <HAL_RCC_ClockConfig+0x1b8>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d20c      	bcs.n	80057fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e2:	4b22      	ldr	r3, [pc, #136]	@ (800586c <HAL_RCC_ClockConfig+0x1b8>)
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ea:	4b20      	ldr	r3, [pc, #128]	@ (800586c <HAL_RCC_ClockConfig+0x1b8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d001      	beq.n	80057fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e032      	b.n	8005862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d008      	beq.n	800581a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005808:	4b19      	ldr	r3, [pc, #100]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4916      	ldr	r1, [pc, #88]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	4313      	orrs	r3, r2
 8005818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d009      	beq.n	800583a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005826:	4b12      	ldr	r3, [pc, #72]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	490e      	ldr	r1, [pc, #56]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	4313      	orrs	r3, r2
 8005838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800583a:	f000 f821 	bl	8005880 <HAL_RCC_GetSysClockFreq>
 800583e:	4602      	mov	r2, r0
 8005840:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	490a      	ldr	r1, [pc, #40]	@ (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 800584c:	5ccb      	ldrb	r3, [r1, r3]
 800584e:	fa22 f303 	lsr.w	r3, r2, r3
 8005852:	4a09      	ldr	r2, [pc, #36]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005856:	4b09      	ldr	r3, [pc, #36]	@ (800587c <HAL_RCC_ClockConfig+0x1c8>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f7fd fea6 	bl	80035ac <HAL_InitTick>

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40023c00 	.word	0x40023c00
 8005870:	40023800 	.word	0x40023800
 8005874:	08007d60 	.word	0x08007d60
 8005878:	20000000 	.word	0x20000000
 800587c:	20000004 	.word	0x20000004

08005880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005884:	b090      	sub	sp, #64	@ 0x40
 8005886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	637b      	str	r3, [r7, #52]	@ 0x34
 800588c:	2300      	movs	r3, #0
 800588e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005890:	2300      	movs	r3, #0
 8005892:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005898:	4b59      	ldr	r3, [pc, #356]	@ (8005a00 <HAL_RCC_GetSysClockFreq+0x180>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f003 030c 	and.w	r3, r3, #12
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d00d      	beq.n	80058c0 <HAL_RCC_GetSysClockFreq+0x40>
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	f200 80a1 	bhi.w	80059ec <HAL_RCC_GetSysClockFreq+0x16c>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_RCC_GetSysClockFreq+0x34>
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d003      	beq.n	80058ba <HAL_RCC_GetSysClockFreq+0x3a>
 80058b2:	e09b      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058b4:	4b53      	ldr	r3, [pc, #332]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x184>)
 80058b6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80058b8:	e09b      	b.n	80059f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058ba:	4b53      	ldr	r3, [pc, #332]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0x188>)
 80058bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80058be:	e098      	b.n	80059f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d028      	beq.n	8005928 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	099b      	lsrs	r3, r3, #6
 80058dc:	2200      	movs	r2, #0
 80058de:	623b      	str	r3, [r7, #32]
 80058e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80058e8:	2100      	movs	r1, #0
 80058ea:	4b47      	ldr	r3, [pc, #284]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0x188>)
 80058ec:	fb03 f201 	mul.w	r2, r3, r1
 80058f0:	2300      	movs	r3, #0
 80058f2:	fb00 f303 	mul.w	r3, r0, r3
 80058f6:	4413      	add	r3, r2
 80058f8:	4a43      	ldr	r2, [pc, #268]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0x188>)
 80058fa:	fba0 1202 	umull	r1, r2, r0, r2
 80058fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005900:	460a      	mov	r2, r1
 8005902:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005906:	4413      	add	r3, r2
 8005908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800590a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590c:	2200      	movs	r2, #0
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	61fa      	str	r2, [r7, #28]
 8005912:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005916:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800591a:	f7fb f8c7 	bl	8000aac <__aeabi_uldivmod>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4613      	mov	r3, r2
 8005924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005926:	e053      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005928:	4b35      	ldr	r3, [pc, #212]	@ (8005a00 <HAL_RCC_GetSysClockFreq+0x180>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	099b      	lsrs	r3, r3, #6
 800592e:	2200      	movs	r2, #0
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	617a      	str	r2, [r7, #20]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800593a:	f04f 0b00 	mov.w	fp, #0
 800593e:	4652      	mov	r2, sl
 8005940:	465b      	mov	r3, fp
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f04f 0100 	mov.w	r1, #0
 800594a:	0159      	lsls	r1, r3, #5
 800594c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005950:	0150      	lsls	r0, r2, #5
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	ebb2 080a 	subs.w	r8, r2, sl
 800595a:	eb63 090b 	sbc.w	r9, r3, fp
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800596a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800596e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005972:	ebb2 0408 	subs.w	r4, r2, r8
 8005976:	eb63 0509 	sbc.w	r5, r3, r9
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	f04f 0300 	mov.w	r3, #0
 8005982:	00eb      	lsls	r3, r5, #3
 8005984:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005988:	00e2      	lsls	r2, r4, #3
 800598a:	4614      	mov	r4, r2
 800598c:	461d      	mov	r5, r3
 800598e:	eb14 030a 	adds.w	r3, r4, sl
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	eb45 030b 	adc.w	r3, r5, fp
 8005998:	607b      	str	r3, [r7, #4]
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059a6:	4629      	mov	r1, r5
 80059a8:	028b      	lsls	r3, r1, #10
 80059aa:	4621      	mov	r1, r4
 80059ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059b0:	4621      	mov	r1, r4
 80059b2:	028a      	lsls	r2, r1, #10
 80059b4:	4610      	mov	r0, r2
 80059b6:	4619      	mov	r1, r3
 80059b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ba:	2200      	movs	r2, #0
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	60fa      	str	r2, [r7, #12]
 80059c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059c4:	f7fb f872 	bl	8000aac <__aeabi_uldivmod>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4613      	mov	r3, r2
 80059ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	0c1b      	lsrs	r3, r3, #16
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	3301      	adds	r3, #1
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80059e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059ea:	e002      	b.n	80059f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059ec:	4b05      	ldr	r3, [pc, #20]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x184>)
 80059ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3740      	adds	r7, #64	@ 0x40
 80059f8:	46bd      	mov	sp, r7
 80059fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059fe:	bf00      	nop
 8005a00:	40023800 	.word	0x40023800
 8005a04:	00f42400 	.word	0x00f42400
 8005a08:	017d7840 	.word	0x017d7840

08005a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a10:	4b03      	ldr	r3, [pc, #12]	@ (8005a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a12:	681b      	ldr	r3, [r3, #0]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	20000000 	.word	0x20000000

08005a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a28:	f7ff fff0 	bl	8005a0c <HAL_RCC_GetHCLKFreq>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	0a9b      	lsrs	r3, r3, #10
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	4903      	ldr	r1, [pc, #12]	@ (8005a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a3a:	5ccb      	ldrb	r3, [r1, r3]
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40023800 	.word	0x40023800
 8005a48:	08007d70 	.word	0x08007d70

08005a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e07b      	b.n	8005b56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d108      	bne.n	8005a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a6e:	d009      	beq.n	8005a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	61da      	str	r2, [r3, #28]
 8005a76:	e005      	b.n	8005a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fd f9ae 	bl	8002e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b08:	ea42 0103 	orr.w	r1, r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	f003 0104 	and.w	r1, r3, #4
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2a:	f003 0210 	and.w	r2, r3, #16
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69da      	ldr	r2, [r3, #28]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b088      	sub	sp, #32
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	60b9      	str	r1, [r7, #8]
 8005b68:	603b      	str	r3, [r7, #0]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_SPI_Transmit+0x22>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e12d      	b.n	8005ddc <HAL_SPI_Transmit+0x27e>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b88:	f7fd fd54 	bl	8003634 <HAL_GetTick>
 8005b8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b8e:	88fb      	ldrh	r3, [r7, #6]
 8005b90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d002      	beq.n	8005ba4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ba2:	e116      	b.n	8005dd2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_SPI_Transmit+0x52>
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bb4:	e10d      	b.n	8005dd2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2203      	movs	r2, #3
 8005bba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	88fa      	ldrh	r2, [r7, #6]
 8005bce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	88fa      	ldrh	r2, [r7, #6]
 8005bd4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bfc:	d10f      	bne.n	8005c1e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c28:	2b40      	cmp	r3, #64	@ 0x40
 8005c2a:	d007      	beq.n	8005c3c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c44:	d14f      	bne.n	8005ce6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_SPI_Transmit+0xf6>
 8005c4e:	8afb      	ldrh	r3, [r7, #22]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d142      	bne.n	8005cda <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c58:	881a      	ldrh	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c64:	1c9a      	adds	r2, r3, #2
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c78:	e02f      	b.n	8005cda <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d112      	bne.n	8005cae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8c:	881a      	ldrh	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c98:	1c9a      	adds	r2, r3, #2
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005cac:	e015      	b.n	8005cda <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cae:	f7fd fcc1 	bl	8003634 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d803      	bhi.n	8005cc6 <HAL_SPI_Transmit+0x168>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d102      	bne.n	8005ccc <HAL_SPI_Transmit+0x16e>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d106      	bne.n	8005cda <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005cd8:	e07b      	b.n	8005dd2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1ca      	bne.n	8005c7a <HAL_SPI_Transmit+0x11c>
 8005ce4:	e050      	b.n	8005d88 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <HAL_SPI_Transmit+0x196>
 8005cee:	8afb      	ldrh	r3, [r7, #22]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d144      	bne.n	8005d7e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	7812      	ldrb	r2, [r2, #0]
 8005d00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d1a:	e030      	b.n	8005d7e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d113      	bne.n	8005d52 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	330c      	adds	r3, #12
 8005d34:	7812      	ldrb	r2, [r2, #0]
 8005d36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005d50:	e015      	b.n	8005d7e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d52:	f7fd fc6f 	bl	8003634 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d803      	bhi.n	8005d6a <HAL_SPI_Transmit+0x20c>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d68:	d102      	bne.n	8005d70 <HAL_SPI_Transmit+0x212>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d106      	bne.n	8005d7e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005d7c:	e029      	b.n	8005dd2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1c9      	bne.n	8005d1c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fbdf 	bl	8006550 <SPI_EndRxTxTransaction>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005da6:	2300      	movs	r3, #0
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e003      	b.n	8005dd2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005dda:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3720      	adds	r7, #32
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d002      	beq.n	8005e0a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
 8005e06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e08:	e0fb      	b.n	8006002 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e12:	d112      	bne.n	8005e3a <HAL_SPI_Receive+0x56>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10e      	bne.n	8005e3a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2204      	movs	r2, #4
 8005e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e24:	88fa      	ldrh	r2, [r7, #6]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f8ef 	bl	8006014 <HAL_SPI_TransmitReceive>
 8005e36:	4603      	mov	r3, r0
 8005e38:	e0e8      	b.n	800600c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_SPI_Receive+0x64>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e0e1      	b.n	800600c <HAL_SPI_Receive+0x228>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e50:	f7fd fbf0 	bl	8003634 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_SPI_Receive+0x7e>
 8005e5c:	88fb      	ldrh	r3, [r7, #6]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e66:	e0cc      	b.n	8006002 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	88fa      	ldrh	r2, [r7, #6]
 8005e80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	88fa      	ldrh	r2, [r7, #6]
 8005e86:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eae:	d10f      	bne.n	8005ed0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ebe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ece:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eda:	2b40      	cmp	r3, #64	@ 0x40
 8005edc:	d007      	beq.n	8005eee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d16a      	bne.n	8005fcc <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ef6:	e032      	b.n	8005f5e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d115      	bne.n	8005f32 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f103 020c 	add.w	r2, r3, #12
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f12:	7812      	ldrb	r2, [r2, #0]
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f30:	e015      	b.n	8005f5e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f32:	f7fd fb7f 	bl	8003634 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d803      	bhi.n	8005f4a <HAL_SPI_Receive+0x166>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d102      	bne.n	8005f50 <HAL_SPI_Receive+0x16c>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d106      	bne.n	8005f5e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005f5c:	e051      	b.n	8006002 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1c7      	bne.n	8005ef8 <HAL_SPI_Receive+0x114>
 8005f68:	e035      	b.n	8005fd6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d113      	bne.n	8005fa0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f82:	b292      	uxth	r2, r2
 8005f84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8a:	1c9a      	adds	r2, r3, #2
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f9e:	e015      	b.n	8005fcc <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fa0:	f7fd fb48 	bl	8003634 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d803      	bhi.n	8005fb8 <HAL_SPI_Receive+0x1d4>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb6:	d102      	bne.n	8005fbe <HAL_SPI_Receive+0x1da>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005fca:	e01a      	b.n	8006002 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1c9      	bne.n	8005f6a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 fa52 	bl	8006484 <SPI_EndRxTransaction>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]
 8005ff8:	e003      	b.n	8006002 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800600a:	7dfb      	ldrb	r3, [r7, #23]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08c      	sub	sp, #48	@ 0x30
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006022:	2301      	movs	r3, #1
 8006024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_SPI_TransmitReceive+0x26>
 8006036:	2302      	movs	r3, #2
 8006038:	e198      	b.n	800636c <HAL_SPI_TransmitReceive+0x358>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006042:	f7fd faf7 	bl	8003634 <HAL_GetTick>
 8006046:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800604e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006058:	887b      	ldrh	r3, [r7, #2]
 800605a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800605c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006060:	2b01      	cmp	r3, #1
 8006062:	d00f      	beq.n	8006084 <HAL_SPI_TransmitReceive+0x70>
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800606a:	d107      	bne.n	800607c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d103      	bne.n	800607c <HAL_SPI_TransmitReceive+0x68>
 8006074:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006078:	2b04      	cmp	r3, #4
 800607a:	d003      	beq.n	8006084 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800607c:	2302      	movs	r3, #2
 800607e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006082:	e16d      	b.n	8006360 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_SPI_TransmitReceive+0x82>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <HAL_SPI_TransmitReceive+0x82>
 8006090:	887b      	ldrh	r3, [r7, #2]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d103      	bne.n	800609e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800609c:	e160      	b.n	8006360 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d003      	beq.n	80060b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2205      	movs	r2, #5
 80060ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	887a      	ldrh	r2, [r7, #2]
 80060c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	887a      	ldrh	r2, [r7, #2]
 80060c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	887a      	ldrh	r2, [r7, #2]
 80060d4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	887a      	ldrh	r2, [r7, #2]
 80060da:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f2:	2b40      	cmp	r3, #64	@ 0x40
 80060f4:	d007      	beq.n	8006106 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800610e:	d17c      	bne.n	800620a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_SPI_TransmitReceive+0x10a>
 8006118:	8b7b      	ldrh	r3, [r7, #26]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d16a      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006122:	881a      	ldrh	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612e:	1c9a      	adds	r2, r3, #2
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006142:	e057      	b.n	80061f4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d11b      	bne.n	800618a <HAL_SPI_TransmitReceive+0x176>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d016      	beq.n	800618a <HAL_SPI_TransmitReceive+0x176>
 800615c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d113      	bne.n	800618a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006166:	881a      	ldrh	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006172:	1c9a      	adds	r2, r3, #2
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b01      	cmp	r3, #1
 8006196:	d119      	bne.n	80061cc <HAL_SPI_TransmitReceive+0x1b8>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d014      	beq.n	80061cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ac:	b292      	uxth	r2, r2
 80061ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b4:	1c9a      	adds	r2, r3, #2
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061c8:	2301      	movs	r3, #1
 80061ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061cc:	f7fd fa32 	bl	8003634 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061d8:	429a      	cmp	r2, r3
 80061da:	d80b      	bhi.n	80061f4 <HAL_SPI_TransmitReceive+0x1e0>
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e2:	d007      	beq.n	80061f4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80061f2:	e0b5      	b.n	8006360 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1a2      	bne.n	8006144 <HAL_SPI_TransmitReceive+0x130>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d19d      	bne.n	8006144 <HAL_SPI_TransmitReceive+0x130>
 8006208:	e080      	b.n	800630c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <HAL_SPI_TransmitReceive+0x204>
 8006212:	8b7b      	ldrh	r3, [r7, #26]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d16f      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	7812      	ldrb	r2, [r2, #0]
 8006224:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800623e:	e05b      	b.n	80062f8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b02      	cmp	r3, #2
 800624c:	d11c      	bne.n	8006288 <HAL_SPI_TransmitReceive+0x274>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006252:	b29b      	uxth	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d017      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x274>
 8006258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d114      	bne.n	8006288 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	330c      	adds	r3, #12
 8006268:	7812      	ldrb	r2, [r2, #0]
 800626a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b01      	cmp	r3, #1
 8006294:	d119      	bne.n	80062ca <HAL_SPI_TransmitReceive+0x2b6>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d014      	beq.n	80062ca <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062c6:	2301      	movs	r3, #1
 80062c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062ca:	f7fd f9b3 	bl	8003634 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d803      	bhi.n	80062e2 <HAL_SPI_TransmitReceive+0x2ce>
 80062da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d102      	bne.n	80062e8 <HAL_SPI_TransmitReceive+0x2d4>
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d107      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80062f6:	e033      	b.n	8006360 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d19e      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x22c>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d199      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800630c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f91d 	bl	8006550 <SPI_EndRxTxTransaction>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d006      	beq.n	800632a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006328:	e01a      	b.n	8006360 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006356:	e003      	b.n	8006360 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006368:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800636c:	4618      	mov	r0, r3
 800636e:	3730      	adds	r7, #48	@ 0x30
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	4613      	mov	r3, r2
 8006382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006384:	f7fd f956 	bl	8003634 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	4413      	add	r3, r2
 8006392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006394:	f7fd f94e 	bl	8003634 <HAL_GetTick>
 8006398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800639a:	4b39      	ldr	r3, [pc, #228]	@ (8006480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	015b      	lsls	r3, r3, #5
 80063a0:	0d1b      	lsrs	r3, r3, #20
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	fb02 f303 	mul.w	r3, r2, r3
 80063a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063aa:	e054      	b.n	8006456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d050      	beq.n	8006456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063b4:	f7fd f93e 	bl	8003634 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d902      	bls.n	80063ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d13d      	bne.n	8006446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063e2:	d111      	bne.n	8006408 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ec:	d004      	beq.n	80063f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f6:	d107      	bne.n	8006408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006410:	d10f      	bne.n	8006432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e017      	b.n	8006476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	3b01      	subs	r3, #1
 8006454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4013      	ands	r3, r2
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	429a      	cmp	r2, r3
 8006464:	bf0c      	ite	eq
 8006466:	2301      	moveq	r3, #1
 8006468:	2300      	movne	r3, #0
 800646a:	b2db      	uxtb	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	429a      	cmp	r2, r3
 8006472:	d19b      	bne.n	80063ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3720      	adds	r7, #32
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000000 	.word	0x20000000

08006484 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006498:	d111      	bne.n	80064be <SPI_EndRxTransaction+0x3a>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a2:	d004      	beq.n	80064ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ac:	d107      	bne.n	80064be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064c6:	d12a      	bne.n	800651e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d0:	d012      	beq.n	80064f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2200      	movs	r2, #0
 80064da:	2180      	movs	r1, #128	@ 0x80
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff ff49 	bl	8006374 <SPI_WaitFlagStateUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d02d      	beq.n	8006544 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ec:	f043 0220 	orr.w	r2, r3, #32
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e026      	b.n	8006546 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2200      	movs	r2, #0
 8006500:	2101      	movs	r1, #1
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff ff36 	bl	8006374 <SPI_WaitFlagStateUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d01a      	beq.n	8006544 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006512:	f043 0220 	orr.w	r2, r3, #32
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e013      	b.n	8006546 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2200      	movs	r2, #0
 8006526:	2101      	movs	r1, #1
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f7ff ff23 	bl	8006374 <SPI_WaitFlagStateUntilTimeout>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006538:	f043 0220 	orr.w	r2, r3, #32
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e000      	b.n	8006546 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2201      	movs	r2, #1
 8006564:	2102      	movs	r1, #2
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff ff04 	bl	8006374 <SPI_WaitFlagStateUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006576:	f043 0220 	orr.w	r2, r3, #32
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e032      	b.n	80065e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006582:	4b1b      	ldr	r3, [pc, #108]	@ (80065f0 <SPI_EndRxTxTransaction+0xa0>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1b      	ldr	r2, [pc, #108]	@ (80065f4 <SPI_EndRxTxTransaction+0xa4>)
 8006588:	fba2 2303 	umull	r2, r3, r2, r3
 800658c:	0d5b      	lsrs	r3, r3, #21
 800658e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065a0:	d112      	bne.n	80065c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2200      	movs	r2, #0
 80065aa:	2180      	movs	r1, #128	@ 0x80
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f7ff fee1 	bl	8006374 <SPI_WaitFlagStateUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d016      	beq.n	80065e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065bc:	f043 0220 	orr.w	r2, r3, #32
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e00f      	b.n	80065e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065de:	2b80      	cmp	r3, #128	@ 0x80
 80065e0:	d0f2      	beq.n	80065c8 <SPI_EndRxTxTransaction+0x78>
 80065e2:	e000      	b.n	80065e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80065e4:	bf00      	nop
  }

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000000 	.word	0x20000000
 80065f4:	165e9f81 	.word	0x165e9f81

080065f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e041      	b.n	800668e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fc fcde 	bl	8002fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3304      	adds	r3, #4
 8006634:	4619      	mov	r1, r3
 8006636:	4610      	mov	r0, r2
 8006638:	f000 f976 	bl	8006928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d001      	beq.n	80066b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e03c      	b.n	800672a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006738 <HAL_TIM_Base_Start+0xa0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d018      	beq.n	80066f4 <HAL_TIM_Base_Start+0x5c>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ca:	d013      	beq.n	80066f4 <HAL_TIM_Base_Start+0x5c>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1a      	ldr	r2, [pc, #104]	@ (800673c <HAL_TIM_Base_Start+0xa4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d00e      	beq.n	80066f4 <HAL_TIM_Base_Start+0x5c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a19      	ldr	r2, [pc, #100]	@ (8006740 <HAL_TIM_Base_Start+0xa8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d009      	beq.n	80066f4 <HAL_TIM_Base_Start+0x5c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a17      	ldr	r2, [pc, #92]	@ (8006744 <HAL_TIM_Base_Start+0xac>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d004      	beq.n	80066f4 <HAL_TIM_Base_Start+0x5c>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a16      	ldr	r2, [pc, #88]	@ (8006748 <HAL_TIM_Base_Start+0xb0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d111      	bne.n	8006718 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b06      	cmp	r3, #6
 8006704:	d010      	beq.n	8006728 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f042 0201 	orr.w	r2, r2, #1
 8006714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006716:	e007      	b.n	8006728 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0201 	orr.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40010000 	.word	0x40010000
 800673c:	40000400 	.word	0x40000400
 8006740:	40000800 	.word	0x40000800
 8006744:	40000c00 	.word	0x40000c00
 8006748:	40014000 	.word	0x40014000

0800674c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6a1a      	ldr	r2, [r3, #32]
 800675a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800675e:	4013      	ands	r3, r2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10f      	bne.n	8006784 <HAL_TIM_Base_Stop+0x38>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6a1a      	ldr	r2, [r3, #32]
 800676a:	f240 4344 	movw	r3, #1092	@ 0x444
 800676e:	4013      	ands	r3, r2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d107      	bne.n	8006784 <HAL_TIM_Base_Stop+0x38>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0201 	bic.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <HAL_TIM_ConfigClockSource+0x1c>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e0b4      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x186>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80067d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ee:	d03e      	beq.n	800686e <HAL_TIM_ConfigClockSource+0xd4>
 80067f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067f4:	f200 8087 	bhi.w	8006906 <HAL_TIM_ConfigClockSource+0x16c>
 80067f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067fc:	f000 8086 	beq.w	800690c <HAL_TIM_ConfigClockSource+0x172>
 8006800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006804:	d87f      	bhi.n	8006906 <HAL_TIM_ConfigClockSource+0x16c>
 8006806:	2b70      	cmp	r3, #112	@ 0x70
 8006808:	d01a      	beq.n	8006840 <HAL_TIM_ConfigClockSource+0xa6>
 800680a:	2b70      	cmp	r3, #112	@ 0x70
 800680c:	d87b      	bhi.n	8006906 <HAL_TIM_ConfigClockSource+0x16c>
 800680e:	2b60      	cmp	r3, #96	@ 0x60
 8006810:	d050      	beq.n	80068b4 <HAL_TIM_ConfigClockSource+0x11a>
 8006812:	2b60      	cmp	r3, #96	@ 0x60
 8006814:	d877      	bhi.n	8006906 <HAL_TIM_ConfigClockSource+0x16c>
 8006816:	2b50      	cmp	r3, #80	@ 0x50
 8006818:	d03c      	beq.n	8006894 <HAL_TIM_ConfigClockSource+0xfa>
 800681a:	2b50      	cmp	r3, #80	@ 0x50
 800681c:	d873      	bhi.n	8006906 <HAL_TIM_ConfigClockSource+0x16c>
 800681e:	2b40      	cmp	r3, #64	@ 0x40
 8006820:	d058      	beq.n	80068d4 <HAL_TIM_ConfigClockSource+0x13a>
 8006822:	2b40      	cmp	r3, #64	@ 0x40
 8006824:	d86f      	bhi.n	8006906 <HAL_TIM_ConfigClockSource+0x16c>
 8006826:	2b30      	cmp	r3, #48	@ 0x30
 8006828:	d064      	beq.n	80068f4 <HAL_TIM_ConfigClockSource+0x15a>
 800682a:	2b30      	cmp	r3, #48	@ 0x30
 800682c:	d86b      	bhi.n	8006906 <HAL_TIM_ConfigClockSource+0x16c>
 800682e:	2b20      	cmp	r3, #32
 8006830:	d060      	beq.n	80068f4 <HAL_TIM_ConfigClockSource+0x15a>
 8006832:	2b20      	cmp	r3, #32
 8006834:	d867      	bhi.n	8006906 <HAL_TIM_ConfigClockSource+0x16c>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d05c      	beq.n	80068f4 <HAL_TIM_ConfigClockSource+0x15a>
 800683a:	2b10      	cmp	r3, #16
 800683c:	d05a      	beq.n	80068f4 <HAL_TIM_ConfigClockSource+0x15a>
 800683e:	e062      	b.n	8006906 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006850:	f000 f970 	bl	8006b34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006862:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	609a      	str	r2, [r3, #8]
      break;
 800686c:	e04f      	b.n	800690e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800687e:	f000 f959 	bl	8006b34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006890:	609a      	str	r2, [r3, #8]
      break;
 8006892:	e03c      	b.n	800690e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a0:	461a      	mov	r2, r3
 80068a2:	f000 f8cd 	bl	8006a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2150      	movs	r1, #80	@ 0x50
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 f926 	bl	8006afe <TIM_ITRx_SetConfig>
      break;
 80068b2:	e02c      	b.n	800690e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068c0:	461a      	mov	r2, r3
 80068c2:	f000 f8ec 	bl	8006a9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2160      	movs	r1, #96	@ 0x60
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 f916 	bl	8006afe <TIM_ITRx_SetConfig>
      break;
 80068d2:	e01c      	b.n	800690e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e0:	461a      	mov	r2, r3
 80068e2:	f000 f8ad 	bl	8006a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2140      	movs	r1, #64	@ 0x40
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 f906 	bl	8006afe <TIM_ITRx_SetConfig>
      break;
 80068f2:	e00c      	b.n	800690e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4619      	mov	r1, r3
 80068fe:	4610      	mov	r0, r2
 8006900:	f000 f8fd 	bl	8006afe <TIM_ITRx_SetConfig>
      break;
 8006904:	e003      	b.n	800690e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	73fb      	strb	r3, [r7, #15]
      break;
 800690a:	e000      	b.n	800690e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800690c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a3a      	ldr	r2, [pc, #232]	@ (8006a24 <TIM_Base_SetConfig+0xfc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00f      	beq.n	8006960 <TIM_Base_SetConfig+0x38>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006946:	d00b      	beq.n	8006960 <TIM_Base_SetConfig+0x38>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a37      	ldr	r2, [pc, #220]	@ (8006a28 <TIM_Base_SetConfig+0x100>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d007      	beq.n	8006960 <TIM_Base_SetConfig+0x38>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a36      	ldr	r2, [pc, #216]	@ (8006a2c <TIM_Base_SetConfig+0x104>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_Base_SetConfig+0x38>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a35      	ldr	r2, [pc, #212]	@ (8006a30 <TIM_Base_SetConfig+0x108>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d108      	bne.n	8006972 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a2b      	ldr	r2, [pc, #172]	@ (8006a24 <TIM_Base_SetConfig+0xfc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d01b      	beq.n	80069b2 <TIM_Base_SetConfig+0x8a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006980:	d017      	beq.n	80069b2 <TIM_Base_SetConfig+0x8a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a28      	ldr	r2, [pc, #160]	@ (8006a28 <TIM_Base_SetConfig+0x100>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <TIM_Base_SetConfig+0x8a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a27      	ldr	r2, [pc, #156]	@ (8006a2c <TIM_Base_SetConfig+0x104>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00f      	beq.n	80069b2 <TIM_Base_SetConfig+0x8a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a26      	ldr	r2, [pc, #152]	@ (8006a30 <TIM_Base_SetConfig+0x108>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00b      	beq.n	80069b2 <TIM_Base_SetConfig+0x8a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a25      	ldr	r2, [pc, #148]	@ (8006a34 <TIM_Base_SetConfig+0x10c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d007      	beq.n	80069b2 <TIM_Base_SetConfig+0x8a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a24      	ldr	r2, [pc, #144]	@ (8006a38 <TIM_Base_SetConfig+0x110>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d003      	beq.n	80069b2 <TIM_Base_SetConfig+0x8a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a23      	ldr	r2, [pc, #140]	@ (8006a3c <TIM_Base_SetConfig+0x114>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d108      	bne.n	80069c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a0e      	ldr	r2, [pc, #56]	@ (8006a24 <TIM_Base_SetConfig+0xfc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d103      	bne.n	80069f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d105      	bne.n	8006a16 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f023 0201 	bic.w	r2, r3, #1
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	611a      	str	r2, [r3, #16]
  }
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40000400 	.word	0x40000400
 8006a2c:	40000800 	.word	0x40000800
 8006a30:	40000c00 	.word	0x40000c00
 8006a34:	40014000 	.word	0x40014000
 8006a38:	40014400 	.word	0x40014400
 8006a3c:	40014800 	.word	0x40014800

08006a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f023 0201 	bic.w	r2, r3, #1
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f023 030a 	bic.w	r3, r3, #10
 8006a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	621a      	str	r2, [r3, #32]
}
 8006a92:	bf00      	nop
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b087      	sub	sp, #28
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	f023 0210 	bic.w	r2, r3, #16
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	031b      	lsls	r3, r3, #12
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ada:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	621a      	str	r2, [r3, #32]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f043 0307 	orr.w	r3, r3, #7
 8006b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	609a      	str	r2, [r3, #8]
}
 8006b28:	bf00      	nop
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	021a      	lsls	r2, r3, #8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	609a      	str	r2, [r3, #8]
}
 8006b68:	bf00      	nop
 8006b6a:	371c      	adds	r7, #28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e050      	b.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1c      	ldr	r2, [pc, #112]	@ (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d018      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd8:	d013      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a18      	ldr	r2, [pc, #96]	@ (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00e      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a16      	ldr	r2, [pc, #88]	@ (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d009      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a15      	ldr	r2, [pc, #84]	@ (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d004      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a13      	ldr	r2, [pc, #76]	@ (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d10c      	bne.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40010000 	.word	0x40010000
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40000800 	.word	0x40000800
 8006c48:	40000c00 	.word	0x40000c00
 8006c4c:	40014000 	.word	0x40014000

08006c50 <std>:
 8006c50:	2300      	movs	r3, #0
 8006c52:	b510      	push	{r4, lr}
 8006c54:	4604      	mov	r4, r0
 8006c56:	e9c0 3300 	strd	r3, r3, [r0]
 8006c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c5e:	6083      	str	r3, [r0, #8]
 8006c60:	8181      	strh	r1, [r0, #12]
 8006c62:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c64:	81c2      	strh	r2, [r0, #14]
 8006c66:	6183      	str	r3, [r0, #24]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	2208      	movs	r2, #8
 8006c6c:	305c      	adds	r0, #92	@ 0x5c
 8006c6e:	f000 f9f9 	bl	8007064 <memset>
 8006c72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca8 <std+0x58>)
 8006c74:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c76:	4b0d      	ldr	r3, [pc, #52]	@ (8006cac <std+0x5c>)
 8006c78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb0 <std+0x60>)
 8006c7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb4 <std+0x64>)
 8006c80:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c82:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb8 <std+0x68>)
 8006c84:	6224      	str	r4, [r4, #32]
 8006c86:	429c      	cmp	r4, r3
 8006c88:	d006      	beq.n	8006c98 <std+0x48>
 8006c8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c8e:	4294      	cmp	r4, r2
 8006c90:	d002      	beq.n	8006c98 <std+0x48>
 8006c92:	33d0      	adds	r3, #208	@ 0xd0
 8006c94:	429c      	cmp	r4, r3
 8006c96:	d105      	bne.n	8006ca4 <std+0x54>
 8006c98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca0:	f000 ba58 	b.w	8007154 <__retarget_lock_init_recursive>
 8006ca4:	bd10      	pop	{r4, pc}
 8006ca6:	bf00      	nop
 8006ca8:	08006eb5 	.word	0x08006eb5
 8006cac:	08006ed7 	.word	0x08006ed7
 8006cb0:	08006f0f 	.word	0x08006f0f
 8006cb4:	08006f33 	.word	0x08006f33
 8006cb8:	200003bc 	.word	0x200003bc

08006cbc <stdio_exit_handler>:
 8006cbc:	4a02      	ldr	r2, [pc, #8]	@ (8006cc8 <stdio_exit_handler+0xc>)
 8006cbe:	4903      	ldr	r1, [pc, #12]	@ (8006ccc <stdio_exit_handler+0x10>)
 8006cc0:	4803      	ldr	r0, [pc, #12]	@ (8006cd0 <stdio_exit_handler+0x14>)
 8006cc2:	f000 b869 	b.w	8006d98 <_fwalk_sglue>
 8006cc6:	bf00      	nop
 8006cc8:	2000000c 	.word	0x2000000c
 8006ccc:	080079f5 	.word	0x080079f5
 8006cd0:	2000001c 	.word	0x2000001c

08006cd4 <cleanup_stdio>:
 8006cd4:	6841      	ldr	r1, [r0, #4]
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8006d08 <cleanup_stdio+0x34>)
 8006cd8:	4299      	cmp	r1, r3
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	4604      	mov	r4, r0
 8006cde:	d001      	beq.n	8006ce4 <cleanup_stdio+0x10>
 8006ce0:	f000 fe88 	bl	80079f4 <_fflush_r>
 8006ce4:	68a1      	ldr	r1, [r4, #8]
 8006ce6:	4b09      	ldr	r3, [pc, #36]	@ (8006d0c <cleanup_stdio+0x38>)
 8006ce8:	4299      	cmp	r1, r3
 8006cea:	d002      	beq.n	8006cf2 <cleanup_stdio+0x1e>
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 fe81 	bl	80079f4 <_fflush_r>
 8006cf2:	68e1      	ldr	r1, [r4, #12]
 8006cf4:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <cleanup_stdio+0x3c>)
 8006cf6:	4299      	cmp	r1, r3
 8006cf8:	d004      	beq.n	8006d04 <cleanup_stdio+0x30>
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d00:	f000 be78 	b.w	80079f4 <_fflush_r>
 8006d04:	bd10      	pop	{r4, pc}
 8006d06:	bf00      	nop
 8006d08:	200003bc 	.word	0x200003bc
 8006d0c:	20000424 	.word	0x20000424
 8006d10:	2000048c 	.word	0x2000048c

08006d14 <global_stdio_init.part.0>:
 8006d14:	b510      	push	{r4, lr}
 8006d16:	4b0b      	ldr	r3, [pc, #44]	@ (8006d44 <global_stdio_init.part.0+0x30>)
 8006d18:	4c0b      	ldr	r4, [pc, #44]	@ (8006d48 <global_stdio_init.part.0+0x34>)
 8006d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8006d4c <global_stdio_init.part.0+0x38>)
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	2200      	movs	r2, #0
 8006d22:	2104      	movs	r1, #4
 8006d24:	f7ff ff94 	bl	8006c50 <std>
 8006d28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	2109      	movs	r1, #9
 8006d30:	f7ff ff8e 	bl	8006c50 <std>
 8006d34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d38:	2202      	movs	r2, #2
 8006d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d3e:	2112      	movs	r1, #18
 8006d40:	f7ff bf86 	b.w	8006c50 <std>
 8006d44:	200004f4 	.word	0x200004f4
 8006d48:	200003bc 	.word	0x200003bc
 8006d4c:	08006cbd 	.word	0x08006cbd

08006d50 <__sfp_lock_acquire>:
 8006d50:	4801      	ldr	r0, [pc, #4]	@ (8006d58 <__sfp_lock_acquire+0x8>)
 8006d52:	f000 ba00 	b.w	8007156 <__retarget_lock_acquire_recursive>
 8006d56:	bf00      	nop
 8006d58:	200004fd 	.word	0x200004fd

08006d5c <__sfp_lock_release>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	@ (8006d64 <__sfp_lock_release+0x8>)
 8006d5e:	f000 b9fb 	b.w	8007158 <__retarget_lock_release_recursive>
 8006d62:	bf00      	nop
 8006d64:	200004fd 	.word	0x200004fd

08006d68 <__sinit>:
 8006d68:	b510      	push	{r4, lr}
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	f7ff fff0 	bl	8006d50 <__sfp_lock_acquire>
 8006d70:	6a23      	ldr	r3, [r4, #32]
 8006d72:	b11b      	cbz	r3, 8006d7c <__sinit+0x14>
 8006d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d78:	f7ff bff0 	b.w	8006d5c <__sfp_lock_release>
 8006d7c:	4b04      	ldr	r3, [pc, #16]	@ (8006d90 <__sinit+0x28>)
 8006d7e:	6223      	str	r3, [r4, #32]
 8006d80:	4b04      	ldr	r3, [pc, #16]	@ (8006d94 <__sinit+0x2c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1f5      	bne.n	8006d74 <__sinit+0xc>
 8006d88:	f7ff ffc4 	bl	8006d14 <global_stdio_init.part.0>
 8006d8c:	e7f2      	b.n	8006d74 <__sinit+0xc>
 8006d8e:	bf00      	nop
 8006d90:	08006cd5 	.word	0x08006cd5
 8006d94:	200004f4 	.word	0x200004f4

08006d98 <_fwalk_sglue>:
 8006d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d9c:	4607      	mov	r7, r0
 8006d9e:	4688      	mov	r8, r1
 8006da0:	4614      	mov	r4, r2
 8006da2:	2600      	movs	r6, #0
 8006da4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006da8:	f1b9 0901 	subs.w	r9, r9, #1
 8006dac:	d505      	bpl.n	8006dba <_fwalk_sglue+0x22>
 8006dae:	6824      	ldr	r4, [r4, #0]
 8006db0:	2c00      	cmp	r4, #0
 8006db2:	d1f7      	bne.n	8006da4 <_fwalk_sglue+0xc>
 8006db4:	4630      	mov	r0, r6
 8006db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dba:	89ab      	ldrh	r3, [r5, #12]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d907      	bls.n	8006dd0 <_fwalk_sglue+0x38>
 8006dc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	d003      	beq.n	8006dd0 <_fwalk_sglue+0x38>
 8006dc8:	4629      	mov	r1, r5
 8006dca:	4638      	mov	r0, r7
 8006dcc:	47c0      	blx	r8
 8006dce:	4306      	orrs	r6, r0
 8006dd0:	3568      	adds	r5, #104	@ 0x68
 8006dd2:	e7e9      	b.n	8006da8 <_fwalk_sglue+0x10>

08006dd4 <iprintf>:
 8006dd4:	b40f      	push	{r0, r1, r2, r3}
 8006dd6:	b507      	push	{r0, r1, r2, lr}
 8006dd8:	4906      	ldr	r1, [pc, #24]	@ (8006df4 <iprintf+0x20>)
 8006dda:	ab04      	add	r3, sp, #16
 8006ddc:	6808      	ldr	r0, [r1, #0]
 8006dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de2:	6881      	ldr	r1, [r0, #8]
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	f000 fadb 	bl	80073a0 <_vfiprintf_r>
 8006dea:	b003      	add	sp, #12
 8006dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006df0:	b004      	add	sp, #16
 8006df2:	4770      	bx	lr
 8006df4:	20000018 	.word	0x20000018

08006df8 <_puts_r>:
 8006df8:	6a03      	ldr	r3, [r0, #32]
 8006dfa:	b570      	push	{r4, r5, r6, lr}
 8006dfc:	6884      	ldr	r4, [r0, #8]
 8006dfe:	4605      	mov	r5, r0
 8006e00:	460e      	mov	r6, r1
 8006e02:	b90b      	cbnz	r3, 8006e08 <_puts_r+0x10>
 8006e04:	f7ff ffb0 	bl	8006d68 <__sinit>
 8006e08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e0a:	07db      	lsls	r3, r3, #31
 8006e0c:	d405      	bmi.n	8006e1a <_puts_r+0x22>
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	0598      	lsls	r0, r3, #22
 8006e12:	d402      	bmi.n	8006e1a <_puts_r+0x22>
 8006e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e16:	f000 f99e 	bl	8007156 <__retarget_lock_acquire_recursive>
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	0719      	lsls	r1, r3, #28
 8006e1e:	d502      	bpl.n	8006e26 <_puts_r+0x2e>
 8006e20:	6923      	ldr	r3, [r4, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d135      	bne.n	8006e92 <_puts_r+0x9a>
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 f8c5 	bl	8006fb8 <__swsetup_r>
 8006e2e:	b380      	cbz	r0, 8006e92 <_puts_r+0x9a>
 8006e30:	f04f 35ff 	mov.w	r5, #4294967295
 8006e34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e36:	07da      	lsls	r2, r3, #31
 8006e38:	d405      	bmi.n	8006e46 <_puts_r+0x4e>
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	059b      	lsls	r3, r3, #22
 8006e3e:	d402      	bmi.n	8006e46 <_puts_r+0x4e>
 8006e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e42:	f000 f989 	bl	8007158 <__retarget_lock_release_recursive>
 8006e46:	4628      	mov	r0, r5
 8006e48:	bd70      	pop	{r4, r5, r6, pc}
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	da04      	bge.n	8006e58 <_puts_r+0x60>
 8006e4e:	69a2      	ldr	r2, [r4, #24]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	dc17      	bgt.n	8006e84 <_puts_r+0x8c>
 8006e54:	290a      	cmp	r1, #10
 8006e56:	d015      	beq.n	8006e84 <_puts_r+0x8c>
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	6022      	str	r2, [r4, #0]
 8006e5e:	7019      	strb	r1, [r3, #0]
 8006e60:	68a3      	ldr	r3, [r4, #8]
 8006e62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e66:	3b01      	subs	r3, #1
 8006e68:	60a3      	str	r3, [r4, #8]
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	d1ed      	bne.n	8006e4a <_puts_r+0x52>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	da11      	bge.n	8006e96 <_puts_r+0x9e>
 8006e72:	4622      	mov	r2, r4
 8006e74:	210a      	movs	r1, #10
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 f85f 	bl	8006f3a <__swbuf_r>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d0d7      	beq.n	8006e30 <_puts_r+0x38>
 8006e80:	250a      	movs	r5, #10
 8006e82:	e7d7      	b.n	8006e34 <_puts_r+0x3c>
 8006e84:	4622      	mov	r2, r4
 8006e86:	4628      	mov	r0, r5
 8006e88:	f000 f857 	bl	8006f3a <__swbuf_r>
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d1e7      	bne.n	8006e60 <_puts_r+0x68>
 8006e90:	e7ce      	b.n	8006e30 <_puts_r+0x38>
 8006e92:	3e01      	subs	r6, #1
 8006e94:	e7e4      	b.n	8006e60 <_puts_r+0x68>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	6022      	str	r2, [r4, #0]
 8006e9c:	220a      	movs	r2, #10
 8006e9e:	701a      	strb	r2, [r3, #0]
 8006ea0:	e7ee      	b.n	8006e80 <_puts_r+0x88>
	...

08006ea4 <puts>:
 8006ea4:	4b02      	ldr	r3, [pc, #8]	@ (8006eb0 <puts+0xc>)
 8006ea6:	4601      	mov	r1, r0
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	f7ff bfa5 	b.w	8006df8 <_puts_r>
 8006eae:	bf00      	nop
 8006eb0:	20000018 	.word	0x20000018

08006eb4 <__sread>:
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebc:	f000 f8fc 	bl	80070b8 <_read_r>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	bfab      	itete	ge
 8006ec4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ec8:	181b      	addge	r3, r3, r0
 8006eca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ece:	bfac      	ite	ge
 8006ed0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ed2:	81a3      	strhlt	r3, [r4, #12]
 8006ed4:	bd10      	pop	{r4, pc}

08006ed6 <__swrite>:
 8006ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eda:	461f      	mov	r7, r3
 8006edc:	898b      	ldrh	r3, [r1, #12]
 8006ede:	05db      	lsls	r3, r3, #23
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	d505      	bpl.n	8006ef4 <__swrite+0x1e>
 8006ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eec:	2302      	movs	r3, #2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f000 f8d0 	bl	8007094 <_lseek_r>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006efa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	4632      	mov	r2, r6
 8006f02:	463b      	mov	r3, r7
 8006f04:	4628      	mov	r0, r5
 8006f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0a:	f000 b8e7 	b.w	80070dc <_write_r>

08006f0e <__sseek>:
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	460c      	mov	r4, r1
 8006f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f16:	f000 f8bd 	bl	8007094 <_lseek_r>
 8006f1a:	1c43      	adds	r3, r0, #1
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	bf15      	itete	ne
 8006f20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f2a:	81a3      	strheq	r3, [r4, #12]
 8006f2c:	bf18      	it	ne
 8006f2e:	81a3      	strhne	r3, [r4, #12]
 8006f30:	bd10      	pop	{r4, pc}

08006f32 <__sclose>:
 8006f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f36:	f000 b89d 	b.w	8007074 <_close_r>

08006f3a <__swbuf_r>:
 8006f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3c:	460e      	mov	r6, r1
 8006f3e:	4614      	mov	r4, r2
 8006f40:	4605      	mov	r5, r0
 8006f42:	b118      	cbz	r0, 8006f4c <__swbuf_r+0x12>
 8006f44:	6a03      	ldr	r3, [r0, #32]
 8006f46:	b90b      	cbnz	r3, 8006f4c <__swbuf_r+0x12>
 8006f48:	f7ff ff0e 	bl	8006d68 <__sinit>
 8006f4c:	69a3      	ldr	r3, [r4, #24]
 8006f4e:	60a3      	str	r3, [r4, #8]
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	071a      	lsls	r2, r3, #28
 8006f54:	d501      	bpl.n	8006f5a <__swbuf_r+0x20>
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	b943      	cbnz	r3, 8006f6c <__swbuf_r+0x32>
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f000 f82b 	bl	8006fb8 <__swsetup_r>
 8006f62:	b118      	cbz	r0, 8006f6c <__swbuf_r+0x32>
 8006f64:	f04f 37ff 	mov.w	r7, #4294967295
 8006f68:	4638      	mov	r0, r7
 8006f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	6922      	ldr	r2, [r4, #16]
 8006f70:	1a98      	subs	r0, r3, r2
 8006f72:	6963      	ldr	r3, [r4, #20]
 8006f74:	b2f6      	uxtb	r6, r6
 8006f76:	4283      	cmp	r3, r0
 8006f78:	4637      	mov	r7, r6
 8006f7a:	dc05      	bgt.n	8006f88 <__swbuf_r+0x4e>
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f000 fd38 	bl	80079f4 <_fflush_r>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d1ed      	bne.n	8006f64 <__swbuf_r+0x2a>
 8006f88:	68a3      	ldr	r3, [r4, #8]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	60a3      	str	r3, [r4, #8]
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	6022      	str	r2, [r4, #0]
 8006f94:	701e      	strb	r6, [r3, #0]
 8006f96:	6962      	ldr	r2, [r4, #20]
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d004      	beq.n	8006fa8 <__swbuf_r+0x6e>
 8006f9e:	89a3      	ldrh	r3, [r4, #12]
 8006fa0:	07db      	lsls	r3, r3, #31
 8006fa2:	d5e1      	bpl.n	8006f68 <__swbuf_r+0x2e>
 8006fa4:	2e0a      	cmp	r6, #10
 8006fa6:	d1df      	bne.n	8006f68 <__swbuf_r+0x2e>
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 fd22 	bl	80079f4 <_fflush_r>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d0d9      	beq.n	8006f68 <__swbuf_r+0x2e>
 8006fb4:	e7d6      	b.n	8006f64 <__swbuf_r+0x2a>
	...

08006fb8 <__swsetup_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4b29      	ldr	r3, [pc, #164]	@ (8007060 <__swsetup_r+0xa8>)
 8006fbc:	4605      	mov	r5, r0
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	b118      	cbz	r0, 8006fcc <__swsetup_r+0x14>
 8006fc4:	6a03      	ldr	r3, [r0, #32]
 8006fc6:	b90b      	cbnz	r3, 8006fcc <__swsetup_r+0x14>
 8006fc8:	f7ff fece 	bl	8006d68 <__sinit>
 8006fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fd0:	0719      	lsls	r1, r3, #28
 8006fd2:	d422      	bmi.n	800701a <__swsetup_r+0x62>
 8006fd4:	06da      	lsls	r2, r3, #27
 8006fd6:	d407      	bmi.n	8006fe8 <__swsetup_r+0x30>
 8006fd8:	2209      	movs	r2, #9
 8006fda:	602a      	str	r2, [r5, #0]
 8006fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe0:	81a3      	strh	r3, [r4, #12]
 8006fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe6:	e033      	b.n	8007050 <__swsetup_r+0x98>
 8006fe8:	0758      	lsls	r0, r3, #29
 8006fea:	d512      	bpl.n	8007012 <__swsetup_r+0x5a>
 8006fec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fee:	b141      	cbz	r1, 8007002 <__swsetup_r+0x4a>
 8006ff0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ff4:	4299      	cmp	r1, r3
 8006ff6:	d002      	beq.n	8006ffe <__swsetup_r+0x46>
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f000 f8af 	bl	800715c <_free_r>
 8006ffe:	2300      	movs	r3, #0
 8007000:	6363      	str	r3, [r4, #52]	@ 0x34
 8007002:	89a3      	ldrh	r3, [r4, #12]
 8007004:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007008:	81a3      	strh	r3, [r4, #12]
 800700a:	2300      	movs	r3, #0
 800700c:	6063      	str	r3, [r4, #4]
 800700e:	6923      	ldr	r3, [r4, #16]
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	f043 0308 	orr.w	r3, r3, #8
 8007018:	81a3      	strh	r3, [r4, #12]
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	b94b      	cbnz	r3, 8007032 <__swsetup_r+0x7a>
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007028:	d003      	beq.n	8007032 <__swsetup_r+0x7a>
 800702a:	4621      	mov	r1, r4
 800702c:	4628      	mov	r0, r5
 800702e:	f000 fd2f 	bl	8007a90 <__smakebuf_r>
 8007032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007036:	f013 0201 	ands.w	r2, r3, #1
 800703a:	d00a      	beq.n	8007052 <__swsetup_r+0x9a>
 800703c:	2200      	movs	r2, #0
 800703e:	60a2      	str	r2, [r4, #8]
 8007040:	6962      	ldr	r2, [r4, #20]
 8007042:	4252      	negs	r2, r2
 8007044:	61a2      	str	r2, [r4, #24]
 8007046:	6922      	ldr	r2, [r4, #16]
 8007048:	b942      	cbnz	r2, 800705c <__swsetup_r+0xa4>
 800704a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800704e:	d1c5      	bne.n	8006fdc <__swsetup_r+0x24>
 8007050:	bd38      	pop	{r3, r4, r5, pc}
 8007052:	0799      	lsls	r1, r3, #30
 8007054:	bf58      	it	pl
 8007056:	6962      	ldrpl	r2, [r4, #20]
 8007058:	60a2      	str	r2, [r4, #8]
 800705a:	e7f4      	b.n	8007046 <__swsetup_r+0x8e>
 800705c:	2000      	movs	r0, #0
 800705e:	e7f7      	b.n	8007050 <__swsetup_r+0x98>
 8007060:	20000018 	.word	0x20000018

08007064 <memset>:
 8007064:	4402      	add	r2, r0
 8007066:	4603      	mov	r3, r0
 8007068:	4293      	cmp	r3, r2
 800706a:	d100      	bne.n	800706e <memset+0xa>
 800706c:	4770      	bx	lr
 800706e:	f803 1b01 	strb.w	r1, [r3], #1
 8007072:	e7f9      	b.n	8007068 <memset+0x4>

08007074 <_close_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d06      	ldr	r5, [pc, #24]	@ (8007090 <_close_r+0x1c>)
 8007078:	2300      	movs	r3, #0
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	602b      	str	r3, [r5, #0]
 8007080:	f7fc f838 	bl	80030f4 <_close>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_close_r+0x1a>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_close_r+0x1a>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	200004f8 	.word	0x200004f8

08007094 <_lseek_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4d07      	ldr	r5, [pc, #28]	@ (80070b4 <_lseek_r+0x20>)
 8007098:	4604      	mov	r4, r0
 800709a:	4608      	mov	r0, r1
 800709c:	4611      	mov	r1, r2
 800709e:	2200      	movs	r2, #0
 80070a0:	602a      	str	r2, [r5, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f7fc f84d 	bl	8003142 <_lseek>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_lseek_r+0x1e>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_lseek_r+0x1e>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	200004f8 	.word	0x200004f8

080070b8 <_read_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d07      	ldr	r5, [pc, #28]	@ (80070d8 <_read_r+0x20>)
 80070bc:	4604      	mov	r4, r0
 80070be:	4608      	mov	r0, r1
 80070c0:	4611      	mov	r1, r2
 80070c2:	2200      	movs	r2, #0
 80070c4:	602a      	str	r2, [r5, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7fb ffdb 	bl	8003082 <_read>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_read_r+0x1e>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_read_r+0x1e>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	200004f8 	.word	0x200004f8

080070dc <_write_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d07      	ldr	r5, [pc, #28]	@ (80070fc <_write_r+0x20>)
 80070e0:	4604      	mov	r4, r0
 80070e2:	4608      	mov	r0, r1
 80070e4:	4611      	mov	r1, r2
 80070e6:	2200      	movs	r2, #0
 80070e8:	602a      	str	r2, [r5, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f7fb ffe6 	bl	80030bc <_write>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_write_r+0x1e>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_write_r+0x1e>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	200004f8 	.word	0x200004f8

08007100 <__errno>:
 8007100:	4b01      	ldr	r3, [pc, #4]	@ (8007108 <__errno+0x8>)
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	20000018 	.word	0x20000018

0800710c <__libc_init_array>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	4d0d      	ldr	r5, [pc, #52]	@ (8007144 <__libc_init_array+0x38>)
 8007110:	4c0d      	ldr	r4, [pc, #52]	@ (8007148 <__libc_init_array+0x3c>)
 8007112:	1b64      	subs	r4, r4, r5
 8007114:	10a4      	asrs	r4, r4, #2
 8007116:	2600      	movs	r6, #0
 8007118:	42a6      	cmp	r6, r4
 800711a:	d109      	bne.n	8007130 <__libc_init_array+0x24>
 800711c:	4d0b      	ldr	r5, [pc, #44]	@ (800714c <__libc_init_array+0x40>)
 800711e:	4c0c      	ldr	r4, [pc, #48]	@ (8007150 <__libc_init_array+0x44>)
 8007120:	f000 fd24 	bl	8007b6c <_init>
 8007124:	1b64      	subs	r4, r4, r5
 8007126:	10a4      	asrs	r4, r4, #2
 8007128:	2600      	movs	r6, #0
 800712a:	42a6      	cmp	r6, r4
 800712c:	d105      	bne.n	800713a <__libc_init_array+0x2e>
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	f855 3b04 	ldr.w	r3, [r5], #4
 8007134:	4798      	blx	r3
 8007136:	3601      	adds	r6, #1
 8007138:	e7ee      	b.n	8007118 <__libc_init_array+0xc>
 800713a:	f855 3b04 	ldr.w	r3, [r5], #4
 800713e:	4798      	blx	r3
 8007140:	3601      	adds	r6, #1
 8007142:	e7f2      	b.n	800712a <__libc_init_array+0x1e>
 8007144:	08007db4 	.word	0x08007db4
 8007148:	08007db4 	.word	0x08007db4
 800714c:	08007db4 	.word	0x08007db4
 8007150:	08007db8 	.word	0x08007db8

08007154 <__retarget_lock_init_recursive>:
 8007154:	4770      	bx	lr

08007156 <__retarget_lock_acquire_recursive>:
 8007156:	4770      	bx	lr

08007158 <__retarget_lock_release_recursive>:
 8007158:	4770      	bx	lr
	...

0800715c <_free_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4605      	mov	r5, r0
 8007160:	2900      	cmp	r1, #0
 8007162:	d041      	beq.n	80071e8 <_free_r+0x8c>
 8007164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007168:	1f0c      	subs	r4, r1, #4
 800716a:	2b00      	cmp	r3, #0
 800716c:	bfb8      	it	lt
 800716e:	18e4      	addlt	r4, r4, r3
 8007170:	f000 f8e0 	bl	8007334 <__malloc_lock>
 8007174:	4a1d      	ldr	r2, [pc, #116]	@ (80071ec <_free_r+0x90>)
 8007176:	6813      	ldr	r3, [r2, #0]
 8007178:	b933      	cbnz	r3, 8007188 <_free_r+0x2c>
 800717a:	6063      	str	r3, [r4, #4]
 800717c:	6014      	str	r4, [r2, #0]
 800717e:	4628      	mov	r0, r5
 8007180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007184:	f000 b8dc 	b.w	8007340 <__malloc_unlock>
 8007188:	42a3      	cmp	r3, r4
 800718a:	d908      	bls.n	800719e <_free_r+0x42>
 800718c:	6820      	ldr	r0, [r4, #0]
 800718e:	1821      	adds	r1, r4, r0
 8007190:	428b      	cmp	r3, r1
 8007192:	bf01      	itttt	eq
 8007194:	6819      	ldreq	r1, [r3, #0]
 8007196:	685b      	ldreq	r3, [r3, #4]
 8007198:	1809      	addeq	r1, r1, r0
 800719a:	6021      	streq	r1, [r4, #0]
 800719c:	e7ed      	b.n	800717a <_free_r+0x1e>
 800719e:	461a      	mov	r2, r3
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	b10b      	cbz	r3, 80071a8 <_free_r+0x4c>
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	d9fa      	bls.n	800719e <_free_r+0x42>
 80071a8:	6811      	ldr	r1, [r2, #0]
 80071aa:	1850      	adds	r0, r2, r1
 80071ac:	42a0      	cmp	r0, r4
 80071ae:	d10b      	bne.n	80071c8 <_free_r+0x6c>
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	4401      	add	r1, r0
 80071b4:	1850      	adds	r0, r2, r1
 80071b6:	4283      	cmp	r3, r0
 80071b8:	6011      	str	r1, [r2, #0]
 80071ba:	d1e0      	bne.n	800717e <_free_r+0x22>
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	6053      	str	r3, [r2, #4]
 80071c2:	4408      	add	r0, r1
 80071c4:	6010      	str	r0, [r2, #0]
 80071c6:	e7da      	b.n	800717e <_free_r+0x22>
 80071c8:	d902      	bls.n	80071d0 <_free_r+0x74>
 80071ca:	230c      	movs	r3, #12
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	e7d6      	b.n	800717e <_free_r+0x22>
 80071d0:	6820      	ldr	r0, [r4, #0]
 80071d2:	1821      	adds	r1, r4, r0
 80071d4:	428b      	cmp	r3, r1
 80071d6:	bf04      	itt	eq
 80071d8:	6819      	ldreq	r1, [r3, #0]
 80071da:	685b      	ldreq	r3, [r3, #4]
 80071dc:	6063      	str	r3, [r4, #4]
 80071de:	bf04      	itt	eq
 80071e0:	1809      	addeq	r1, r1, r0
 80071e2:	6021      	streq	r1, [r4, #0]
 80071e4:	6054      	str	r4, [r2, #4]
 80071e6:	e7ca      	b.n	800717e <_free_r+0x22>
 80071e8:	bd38      	pop	{r3, r4, r5, pc}
 80071ea:	bf00      	nop
 80071ec:	20000504 	.word	0x20000504

080071f0 <sbrk_aligned>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	4e0f      	ldr	r6, [pc, #60]	@ (8007230 <sbrk_aligned+0x40>)
 80071f4:	460c      	mov	r4, r1
 80071f6:	6831      	ldr	r1, [r6, #0]
 80071f8:	4605      	mov	r5, r0
 80071fa:	b911      	cbnz	r1, 8007202 <sbrk_aligned+0x12>
 80071fc:	f000 fca6 	bl	8007b4c <_sbrk_r>
 8007200:	6030      	str	r0, [r6, #0]
 8007202:	4621      	mov	r1, r4
 8007204:	4628      	mov	r0, r5
 8007206:	f000 fca1 	bl	8007b4c <_sbrk_r>
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	d103      	bne.n	8007216 <sbrk_aligned+0x26>
 800720e:	f04f 34ff 	mov.w	r4, #4294967295
 8007212:	4620      	mov	r0, r4
 8007214:	bd70      	pop	{r4, r5, r6, pc}
 8007216:	1cc4      	adds	r4, r0, #3
 8007218:	f024 0403 	bic.w	r4, r4, #3
 800721c:	42a0      	cmp	r0, r4
 800721e:	d0f8      	beq.n	8007212 <sbrk_aligned+0x22>
 8007220:	1a21      	subs	r1, r4, r0
 8007222:	4628      	mov	r0, r5
 8007224:	f000 fc92 	bl	8007b4c <_sbrk_r>
 8007228:	3001      	adds	r0, #1
 800722a:	d1f2      	bne.n	8007212 <sbrk_aligned+0x22>
 800722c:	e7ef      	b.n	800720e <sbrk_aligned+0x1e>
 800722e:	bf00      	nop
 8007230:	20000500 	.word	0x20000500

08007234 <_malloc_r>:
 8007234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007238:	1ccd      	adds	r5, r1, #3
 800723a:	f025 0503 	bic.w	r5, r5, #3
 800723e:	3508      	adds	r5, #8
 8007240:	2d0c      	cmp	r5, #12
 8007242:	bf38      	it	cc
 8007244:	250c      	movcc	r5, #12
 8007246:	2d00      	cmp	r5, #0
 8007248:	4606      	mov	r6, r0
 800724a:	db01      	blt.n	8007250 <_malloc_r+0x1c>
 800724c:	42a9      	cmp	r1, r5
 800724e:	d904      	bls.n	800725a <_malloc_r+0x26>
 8007250:	230c      	movs	r3, #12
 8007252:	6033      	str	r3, [r6, #0]
 8007254:	2000      	movs	r0, #0
 8007256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800725a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007330 <_malloc_r+0xfc>
 800725e:	f000 f869 	bl	8007334 <__malloc_lock>
 8007262:	f8d8 3000 	ldr.w	r3, [r8]
 8007266:	461c      	mov	r4, r3
 8007268:	bb44      	cbnz	r4, 80072bc <_malloc_r+0x88>
 800726a:	4629      	mov	r1, r5
 800726c:	4630      	mov	r0, r6
 800726e:	f7ff ffbf 	bl	80071f0 <sbrk_aligned>
 8007272:	1c43      	adds	r3, r0, #1
 8007274:	4604      	mov	r4, r0
 8007276:	d158      	bne.n	800732a <_malloc_r+0xf6>
 8007278:	f8d8 4000 	ldr.w	r4, [r8]
 800727c:	4627      	mov	r7, r4
 800727e:	2f00      	cmp	r7, #0
 8007280:	d143      	bne.n	800730a <_malloc_r+0xd6>
 8007282:	2c00      	cmp	r4, #0
 8007284:	d04b      	beq.n	800731e <_malloc_r+0xea>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	4639      	mov	r1, r7
 800728a:	4630      	mov	r0, r6
 800728c:	eb04 0903 	add.w	r9, r4, r3
 8007290:	f000 fc5c 	bl	8007b4c <_sbrk_r>
 8007294:	4581      	cmp	r9, r0
 8007296:	d142      	bne.n	800731e <_malloc_r+0xea>
 8007298:	6821      	ldr	r1, [r4, #0]
 800729a:	1a6d      	subs	r5, r5, r1
 800729c:	4629      	mov	r1, r5
 800729e:	4630      	mov	r0, r6
 80072a0:	f7ff ffa6 	bl	80071f0 <sbrk_aligned>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d03a      	beq.n	800731e <_malloc_r+0xea>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	442b      	add	r3, r5
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	f8d8 3000 	ldr.w	r3, [r8]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	bb62      	cbnz	r2, 8007310 <_malloc_r+0xdc>
 80072b6:	f8c8 7000 	str.w	r7, [r8]
 80072ba:	e00f      	b.n	80072dc <_malloc_r+0xa8>
 80072bc:	6822      	ldr	r2, [r4, #0]
 80072be:	1b52      	subs	r2, r2, r5
 80072c0:	d420      	bmi.n	8007304 <_malloc_r+0xd0>
 80072c2:	2a0b      	cmp	r2, #11
 80072c4:	d917      	bls.n	80072f6 <_malloc_r+0xc2>
 80072c6:	1961      	adds	r1, r4, r5
 80072c8:	42a3      	cmp	r3, r4
 80072ca:	6025      	str	r5, [r4, #0]
 80072cc:	bf18      	it	ne
 80072ce:	6059      	strne	r1, [r3, #4]
 80072d0:	6863      	ldr	r3, [r4, #4]
 80072d2:	bf08      	it	eq
 80072d4:	f8c8 1000 	streq.w	r1, [r8]
 80072d8:	5162      	str	r2, [r4, r5]
 80072da:	604b      	str	r3, [r1, #4]
 80072dc:	4630      	mov	r0, r6
 80072de:	f000 f82f 	bl	8007340 <__malloc_unlock>
 80072e2:	f104 000b 	add.w	r0, r4, #11
 80072e6:	1d23      	adds	r3, r4, #4
 80072e8:	f020 0007 	bic.w	r0, r0, #7
 80072ec:	1ac2      	subs	r2, r0, r3
 80072ee:	bf1c      	itt	ne
 80072f0:	1a1b      	subne	r3, r3, r0
 80072f2:	50a3      	strne	r3, [r4, r2]
 80072f4:	e7af      	b.n	8007256 <_malloc_r+0x22>
 80072f6:	6862      	ldr	r2, [r4, #4]
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	bf0c      	ite	eq
 80072fc:	f8c8 2000 	streq.w	r2, [r8]
 8007300:	605a      	strne	r2, [r3, #4]
 8007302:	e7eb      	b.n	80072dc <_malloc_r+0xa8>
 8007304:	4623      	mov	r3, r4
 8007306:	6864      	ldr	r4, [r4, #4]
 8007308:	e7ae      	b.n	8007268 <_malloc_r+0x34>
 800730a:	463c      	mov	r4, r7
 800730c:	687f      	ldr	r7, [r7, #4]
 800730e:	e7b6      	b.n	800727e <_malloc_r+0x4a>
 8007310:	461a      	mov	r2, r3
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	42a3      	cmp	r3, r4
 8007316:	d1fb      	bne.n	8007310 <_malloc_r+0xdc>
 8007318:	2300      	movs	r3, #0
 800731a:	6053      	str	r3, [r2, #4]
 800731c:	e7de      	b.n	80072dc <_malloc_r+0xa8>
 800731e:	230c      	movs	r3, #12
 8007320:	6033      	str	r3, [r6, #0]
 8007322:	4630      	mov	r0, r6
 8007324:	f000 f80c 	bl	8007340 <__malloc_unlock>
 8007328:	e794      	b.n	8007254 <_malloc_r+0x20>
 800732a:	6005      	str	r5, [r0, #0]
 800732c:	e7d6      	b.n	80072dc <_malloc_r+0xa8>
 800732e:	bf00      	nop
 8007330:	20000504 	.word	0x20000504

08007334 <__malloc_lock>:
 8007334:	4801      	ldr	r0, [pc, #4]	@ (800733c <__malloc_lock+0x8>)
 8007336:	f7ff bf0e 	b.w	8007156 <__retarget_lock_acquire_recursive>
 800733a:	bf00      	nop
 800733c:	200004fc 	.word	0x200004fc

08007340 <__malloc_unlock>:
 8007340:	4801      	ldr	r0, [pc, #4]	@ (8007348 <__malloc_unlock+0x8>)
 8007342:	f7ff bf09 	b.w	8007158 <__retarget_lock_release_recursive>
 8007346:	bf00      	nop
 8007348:	200004fc 	.word	0x200004fc

0800734c <__sfputc_r>:
 800734c:	6893      	ldr	r3, [r2, #8]
 800734e:	3b01      	subs	r3, #1
 8007350:	2b00      	cmp	r3, #0
 8007352:	b410      	push	{r4}
 8007354:	6093      	str	r3, [r2, #8]
 8007356:	da08      	bge.n	800736a <__sfputc_r+0x1e>
 8007358:	6994      	ldr	r4, [r2, #24]
 800735a:	42a3      	cmp	r3, r4
 800735c:	db01      	blt.n	8007362 <__sfputc_r+0x16>
 800735e:	290a      	cmp	r1, #10
 8007360:	d103      	bne.n	800736a <__sfputc_r+0x1e>
 8007362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007366:	f7ff bde8 	b.w	8006f3a <__swbuf_r>
 800736a:	6813      	ldr	r3, [r2, #0]
 800736c:	1c58      	adds	r0, r3, #1
 800736e:	6010      	str	r0, [r2, #0]
 8007370:	7019      	strb	r1, [r3, #0]
 8007372:	4608      	mov	r0, r1
 8007374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007378:	4770      	bx	lr

0800737a <__sfputs_r>:
 800737a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737c:	4606      	mov	r6, r0
 800737e:	460f      	mov	r7, r1
 8007380:	4614      	mov	r4, r2
 8007382:	18d5      	adds	r5, r2, r3
 8007384:	42ac      	cmp	r4, r5
 8007386:	d101      	bne.n	800738c <__sfputs_r+0x12>
 8007388:	2000      	movs	r0, #0
 800738a:	e007      	b.n	800739c <__sfputs_r+0x22>
 800738c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007390:	463a      	mov	r2, r7
 8007392:	4630      	mov	r0, r6
 8007394:	f7ff ffda 	bl	800734c <__sfputc_r>
 8007398:	1c43      	adds	r3, r0, #1
 800739a:	d1f3      	bne.n	8007384 <__sfputs_r+0xa>
 800739c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073a0 <_vfiprintf_r>:
 80073a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a4:	460d      	mov	r5, r1
 80073a6:	b09d      	sub	sp, #116	@ 0x74
 80073a8:	4614      	mov	r4, r2
 80073aa:	4698      	mov	r8, r3
 80073ac:	4606      	mov	r6, r0
 80073ae:	b118      	cbz	r0, 80073b8 <_vfiprintf_r+0x18>
 80073b0:	6a03      	ldr	r3, [r0, #32]
 80073b2:	b90b      	cbnz	r3, 80073b8 <_vfiprintf_r+0x18>
 80073b4:	f7ff fcd8 	bl	8006d68 <__sinit>
 80073b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073ba:	07d9      	lsls	r1, r3, #31
 80073bc:	d405      	bmi.n	80073ca <_vfiprintf_r+0x2a>
 80073be:	89ab      	ldrh	r3, [r5, #12]
 80073c0:	059a      	lsls	r2, r3, #22
 80073c2:	d402      	bmi.n	80073ca <_vfiprintf_r+0x2a>
 80073c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073c6:	f7ff fec6 	bl	8007156 <__retarget_lock_acquire_recursive>
 80073ca:	89ab      	ldrh	r3, [r5, #12]
 80073cc:	071b      	lsls	r3, r3, #28
 80073ce:	d501      	bpl.n	80073d4 <_vfiprintf_r+0x34>
 80073d0:	692b      	ldr	r3, [r5, #16]
 80073d2:	b99b      	cbnz	r3, 80073fc <_vfiprintf_r+0x5c>
 80073d4:	4629      	mov	r1, r5
 80073d6:	4630      	mov	r0, r6
 80073d8:	f7ff fdee 	bl	8006fb8 <__swsetup_r>
 80073dc:	b170      	cbz	r0, 80073fc <_vfiprintf_r+0x5c>
 80073de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073e0:	07dc      	lsls	r4, r3, #31
 80073e2:	d504      	bpl.n	80073ee <_vfiprintf_r+0x4e>
 80073e4:	f04f 30ff 	mov.w	r0, #4294967295
 80073e8:	b01d      	add	sp, #116	@ 0x74
 80073ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ee:	89ab      	ldrh	r3, [r5, #12]
 80073f0:	0598      	lsls	r0, r3, #22
 80073f2:	d4f7      	bmi.n	80073e4 <_vfiprintf_r+0x44>
 80073f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073f6:	f7ff feaf 	bl	8007158 <__retarget_lock_release_recursive>
 80073fa:	e7f3      	b.n	80073e4 <_vfiprintf_r+0x44>
 80073fc:	2300      	movs	r3, #0
 80073fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007400:	2320      	movs	r3, #32
 8007402:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007406:	f8cd 800c 	str.w	r8, [sp, #12]
 800740a:	2330      	movs	r3, #48	@ 0x30
 800740c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075bc <_vfiprintf_r+0x21c>
 8007410:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007414:	f04f 0901 	mov.w	r9, #1
 8007418:	4623      	mov	r3, r4
 800741a:	469a      	mov	sl, r3
 800741c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007420:	b10a      	cbz	r2, 8007426 <_vfiprintf_r+0x86>
 8007422:	2a25      	cmp	r2, #37	@ 0x25
 8007424:	d1f9      	bne.n	800741a <_vfiprintf_r+0x7a>
 8007426:	ebba 0b04 	subs.w	fp, sl, r4
 800742a:	d00b      	beq.n	8007444 <_vfiprintf_r+0xa4>
 800742c:	465b      	mov	r3, fp
 800742e:	4622      	mov	r2, r4
 8007430:	4629      	mov	r1, r5
 8007432:	4630      	mov	r0, r6
 8007434:	f7ff ffa1 	bl	800737a <__sfputs_r>
 8007438:	3001      	adds	r0, #1
 800743a:	f000 80a7 	beq.w	800758c <_vfiprintf_r+0x1ec>
 800743e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007440:	445a      	add	r2, fp
 8007442:	9209      	str	r2, [sp, #36]	@ 0x24
 8007444:	f89a 3000 	ldrb.w	r3, [sl]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 809f 	beq.w	800758c <_vfiprintf_r+0x1ec>
 800744e:	2300      	movs	r3, #0
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007458:	f10a 0a01 	add.w	sl, sl, #1
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	9307      	str	r3, [sp, #28]
 8007460:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007464:	931a      	str	r3, [sp, #104]	@ 0x68
 8007466:	4654      	mov	r4, sl
 8007468:	2205      	movs	r2, #5
 800746a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746e:	4853      	ldr	r0, [pc, #332]	@ (80075bc <_vfiprintf_r+0x21c>)
 8007470:	f7f8 feb6 	bl	80001e0 <memchr>
 8007474:	9a04      	ldr	r2, [sp, #16]
 8007476:	b9d8      	cbnz	r0, 80074b0 <_vfiprintf_r+0x110>
 8007478:	06d1      	lsls	r1, r2, #27
 800747a:	bf44      	itt	mi
 800747c:	2320      	movmi	r3, #32
 800747e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007482:	0713      	lsls	r3, r2, #28
 8007484:	bf44      	itt	mi
 8007486:	232b      	movmi	r3, #43	@ 0x2b
 8007488:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800748c:	f89a 3000 	ldrb.w	r3, [sl]
 8007490:	2b2a      	cmp	r3, #42	@ 0x2a
 8007492:	d015      	beq.n	80074c0 <_vfiprintf_r+0x120>
 8007494:	9a07      	ldr	r2, [sp, #28]
 8007496:	4654      	mov	r4, sl
 8007498:	2000      	movs	r0, #0
 800749a:	f04f 0c0a 	mov.w	ip, #10
 800749e:	4621      	mov	r1, r4
 80074a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074a4:	3b30      	subs	r3, #48	@ 0x30
 80074a6:	2b09      	cmp	r3, #9
 80074a8:	d94b      	bls.n	8007542 <_vfiprintf_r+0x1a2>
 80074aa:	b1b0      	cbz	r0, 80074da <_vfiprintf_r+0x13a>
 80074ac:	9207      	str	r2, [sp, #28]
 80074ae:	e014      	b.n	80074da <_vfiprintf_r+0x13a>
 80074b0:	eba0 0308 	sub.w	r3, r0, r8
 80074b4:	fa09 f303 	lsl.w	r3, r9, r3
 80074b8:	4313      	orrs	r3, r2
 80074ba:	9304      	str	r3, [sp, #16]
 80074bc:	46a2      	mov	sl, r4
 80074be:	e7d2      	b.n	8007466 <_vfiprintf_r+0xc6>
 80074c0:	9b03      	ldr	r3, [sp, #12]
 80074c2:	1d19      	adds	r1, r3, #4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	9103      	str	r1, [sp, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bfbb      	ittet	lt
 80074cc:	425b      	neglt	r3, r3
 80074ce:	f042 0202 	orrlt.w	r2, r2, #2
 80074d2:	9307      	strge	r3, [sp, #28]
 80074d4:	9307      	strlt	r3, [sp, #28]
 80074d6:	bfb8      	it	lt
 80074d8:	9204      	strlt	r2, [sp, #16]
 80074da:	7823      	ldrb	r3, [r4, #0]
 80074dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80074de:	d10a      	bne.n	80074f6 <_vfiprintf_r+0x156>
 80074e0:	7863      	ldrb	r3, [r4, #1]
 80074e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80074e4:	d132      	bne.n	800754c <_vfiprintf_r+0x1ac>
 80074e6:	9b03      	ldr	r3, [sp, #12]
 80074e8:	1d1a      	adds	r2, r3, #4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	9203      	str	r2, [sp, #12]
 80074ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074f2:	3402      	adds	r4, #2
 80074f4:	9305      	str	r3, [sp, #20]
 80074f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075cc <_vfiprintf_r+0x22c>
 80074fa:	7821      	ldrb	r1, [r4, #0]
 80074fc:	2203      	movs	r2, #3
 80074fe:	4650      	mov	r0, sl
 8007500:	f7f8 fe6e 	bl	80001e0 <memchr>
 8007504:	b138      	cbz	r0, 8007516 <_vfiprintf_r+0x176>
 8007506:	9b04      	ldr	r3, [sp, #16]
 8007508:	eba0 000a 	sub.w	r0, r0, sl
 800750c:	2240      	movs	r2, #64	@ 0x40
 800750e:	4082      	lsls	r2, r0
 8007510:	4313      	orrs	r3, r2
 8007512:	3401      	adds	r4, #1
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800751a:	4829      	ldr	r0, [pc, #164]	@ (80075c0 <_vfiprintf_r+0x220>)
 800751c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007520:	2206      	movs	r2, #6
 8007522:	f7f8 fe5d 	bl	80001e0 <memchr>
 8007526:	2800      	cmp	r0, #0
 8007528:	d03f      	beq.n	80075aa <_vfiprintf_r+0x20a>
 800752a:	4b26      	ldr	r3, [pc, #152]	@ (80075c4 <_vfiprintf_r+0x224>)
 800752c:	bb1b      	cbnz	r3, 8007576 <_vfiprintf_r+0x1d6>
 800752e:	9b03      	ldr	r3, [sp, #12]
 8007530:	3307      	adds	r3, #7
 8007532:	f023 0307 	bic.w	r3, r3, #7
 8007536:	3308      	adds	r3, #8
 8007538:	9303      	str	r3, [sp, #12]
 800753a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800753c:	443b      	add	r3, r7
 800753e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007540:	e76a      	b.n	8007418 <_vfiprintf_r+0x78>
 8007542:	fb0c 3202 	mla	r2, ip, r2, r3
 8007546:	460c      	mov	r4, r1
 8007548:	2001      	movs	r0, #1
 800754a:	e7a8      	b.n	800749e <_vfiprintf_r+0xfe>
 800754c:	2300      	movs	r3, #0
 800754e:	3401      	adds	r4, #1
 8007550:	9305      	str	r3, [sp, #20]
 8007552:	4619      	mov	r1, r3
 8007554:	f04f 0c0a 	mov.w	ip, #10
 8007558:	4620      	mov	r0, r4
 800755a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800755e:	3a30      	subs	r2, #48	@ 0x30
 8007560:	2a09      	cmp	r2, #9
 8007562:	d903      	bls.n	800756c <_vfiprintf_r+0x1cc>
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0c6      	beq.n	80074f6 <_vfiprintf_r+0x156>
 8007568:	9105      	str	r1, [sp, #20]
 800756a:	e7c4      	b.n	80074f6 <_vfiprintf_r+0x156>
 800756c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007570:	4604      	mov	r4, r0
 8007572:	2301      	movs	r3, #1
 8007574:	e7f0      	b.n	8007558 <_vfiprintf_r+0x1b8>
 8007576:	ab03      	add	r3, sp, #12
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	462a      	mov	r2, r5
 800757c:	4b12      	ldr	r3, [pc, #72]	@ (80075c8 <_vfiprintf_r+0x228>)
 800757e:	a904      	add	r1, sp, #16
 8007580:	4630      	mov	r0, r6
 8007582:	f3af 8000 	nop.w
 8007586:	4607      	mov	r7, r0
 8007588:	1c78      	adds	r0, r7, #1
 800758a:	d1d6      	bne.n	800753a <_vfiprintf_r+0x19a>
 800758c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800758e:	07d9      	lsls	r1, r3, #31
 8007590:	d405      	bmi.n	800759e <_vfiprintf_r+0x1fe>
 8007592:	89ab      	ldrh	r3, [r5, #12]
 8007594:	059a      	lsls	r2, r3, #22
 8007596:	d402      	bmi.n	800759e <_vfiprintf_r+0x1fe>
 8007598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800759a:	f7ff fddd 	bl	8007158 <__retarget_lock_release_recursive>
 800759e:	89ab      	ldrh	r3, [r5, #12]
 80075a0:	065b      	lsls	r3, r3, #25
 80075a2:	f53f af1f 	bmi.w	80073e4 <_vfiprintf_r+0x44>
 80075a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075a8:	e71e      	b.n	80073e8 <_vfiprintf_r+0x48>
 80075aa:	ab03      	add	r3, sp, #12
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	462a      	mov	r2, r5
 80075b0:	4b05      	ldr	r3, [pc, #20]	@ (80075c8 <_vfiprintf_r+0x228>)
 80075b2:	a904      	add	r1, sp, #16
 80075b4:	4630      	mov	r0, r6
 80075b6:	f000 f879 	bl	80076ac <_printf_i>
 80075ba:	e7e4      	b.n	8007586 <_vfiprintf_r+0x1e6>
 80075bc:	08007d78 	.word	0x08007d78
 80075c0:	08007d82 	.word	0x08007d82
 80075c4:	00000000 	.word	0x00000000
 80075c8:	0800737b 	.word	0x0800737b
 80075cc:	08007d7e 	.word	0x08007d7e

080075d0 <_printf_common>:
 80075d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d4:	4616      	mov	r6, r2
 80075d6:	4698      	mov	r8, r3
 80075d8:	688a      	ldr	r2, [r1, #8]
 80075da:	690b      	ldr	r3, [r1, #16]
 80075dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075e0:	4293      	cmp	r3, r2
 80075e2:	bfb8      	it	lt
 80075e4:	4613      	movlt	r3, r2
 80075e6:	6033      	str	r3, [r6, #0]
 80075e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075ec:	4607      	mov	r7, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	b10a      	cbz	r2, 80075f6 <_printf_common+0x26>
 80075f2:	3301      	adds	r3, #1
 80075f4:	6033      	str	r3, [r6, #0]
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	0699      	lsls	r1, r3, #26
 80075fa:	bf42      	ittt	mi
 80075fc:	6833      	ldrmi	r3, [r6, #0]
 80075fe:	3302      	addmi	r3, #2
 8007600:	6033      	strmi	r3, [r6, #0]
 8007602:	6825      	ldr	r5, [r4, #0]
 8007604:	f015 0506 	ands.w	r5, r5, #6
 8007608:	d106      	bne.n	8007618 <_printf_common+0x48>
 800760a:	f104 0a19 	add.w	sl, r4, #25
 800760e:	68e3      	ldr	r3, [r4, #12]
 8007610:	6832      	ldr	r2, [r6, #0]
 8007612:	1a9b      	subs	r3, r3, r2
 8007614:	42ab      	cmp	r3, r5
 8007616:	dc26      	bgt.n	8007666 <_printf_common+0x96>
 8007618:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800761c:	6822      	ldr	r2, [r4, #0]
 800761e:	3b00      	subs	r3, #0
 8007620:	bf18      	it	ne
 8007622:	2301      	movne	r3, #1
 8007624:	0692      	lsls	r2, r2, #26
 8007626:	d42b      	bmi.n	8007680 <_printf_common+0xb0>
 8007628:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800762c:	4641      	mov	r1, r8
 800762e:	4638      	mov	r0, r7
 8007630:	47c8      	blx	r9
 8007632:	3001      	adds	r0, #1
 8007634:	d01e      	beq.n	8007674 <_printf_common+0xa4>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	6922      	ldr	r2, [r4, #16]
 800763a:	f003 0306 	and.w	r3, r3, #6
 800763e:	2b04      	cmp	r3, #4
 8007640:	bf02      	ittt	eq
 8007642:	68e5      	ldreq	r5, [r4, #12]
 8007644:	6833      	ldreq	r3, [r6, #0]
 8007646:	1aed      	subeq	r5, r5, r3
 8007648:	68a3      	ldr	r3, [r4, #8]
 800764a:	bf0c      	ite	eq
 800764c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007650:	2500      	movne	r5, #0
 8007652:	4293      	cmp	r3, r2
 8007654:	bfc4      	itt	gt
 8007656:	1a9b      	subgt	r3, r3, r2
 8007658:	18ed      	addgt	r5, r5, r3
 800765a:	2600      	movs	r6, #0
 800765c:	341a      	adds	r4, #26
 800765e:	42b5      	cmp	r5, r6
 8007660:	d11a      	bne.n	8007698 <_printf_common+0xc8>
 8007662:	2000      	movs	r0, #0
 8007664:	e008      	b.n	8007678 <_printf_common+0xa8>
 8007666:	2301      	movs	r3, #1
 8007668:	4652      	mov	r2, sl
 800766a:	4641      	mov	r1, r8
 800766c:	4638      	mov	r0, r7
 800766e:	47c8      	blx	r9
 8007670:	3001      	adds	r0, #1
 8007672:	d103      	bne.n	800767c <_printf_common+0xac>
 8007674:	f04f 30ff 	mov.w	r0, #4294967295
 8007678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800767c:	3501      	adds	r5, #1
 800767e:	e7c6      	b.n	800760e <_printf_common+0x3e>
 8007680:	18e1      	adds	r1, r4, r3
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	2030      	movs	r0, #48	@ 0x30
 8007686:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800768a:	4422      	add	r2, r4
 800768c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007690:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007694:	3302      	adds	r3, #2
 8007696:	e7c7      	b.n	8007628 <_printf_common+0x58>
 8007698:	2301      	movs	r3, #1
 800769a:	4622      	mov	r2, r4
 800769c:	4641      	mov	r1, r8
 800769e:	4638      	mov	r0, r7
 80076a0:	47c8      	blx	r9
 80076a2:	3001      	adds	r0, #1
 80076a4:	d0e6      	beq.n	8007674 <_printf_common+0xa4>
 80076a6:	3601      	adds	r6, #1
 80076a8:	e7d9      	b.n	800765e <_printf_common+0x8e>
	...

080076ac <_printf_i>:
 80076ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b0:	7e0f      	ldrb	r7, [r1, #24]
 80076b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076b4:	2f78      	cmp	r7, #120	@ 0x78
 80076b6:	4691      	mov	r9, r2
 80076b8:	4680      	mov	r8, r0
 80076ba:	460c      	mov	r4, r1
 80076bc:	469a      	mov	sl, r3
 80076be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076c2:	d807      	bhi.n	80076d4 <_printf_i+0x28>
 80076c4:	2f62      	cmp	r7, #98	@ 0x62
 80076c6:	d80a      	bhi.n	80076de <_printf_i+0x32>
 80076c8:	2f00      	cmp	r7, #0
 80076ca:	f000 80d2 	beq.w	8007872 <_printf_i+0x1c6>
 80076ce:	2f58      	cmp	r7, #88	@ 0x58
 80076d0:	f000 80b9 	beq.w	8007846 <_printf_i+0x19a>
 80076d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076dc:	e03a      	b.n	8007754 <_printf_i+0xa8>
 80076de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076e2:	2b15      	cmp	r3, #21
 80076e4:	d8f6      	bhi.n	80076d4 <_printf_i+0x28>
 80076e6:	a101      	add	r1, pc, #4	@ (adr r1, 80076ec <_printf_i+0x40>)
 80076e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076ec:	08007745 	.word	0x08007745
 80076f0:	08007759 	.word	0x08007759
 80076f4:	080076d5 	.word	0x080076d5
 80076f8:	080076d5 	.word	0x080076d5
 80076fc:	080076d5 	.word	0x080076d5
 8007700:	080076d5 	.word	0x080076d5
 8007704:	08007759 	.word	0x08007759
 8007708:	080076d5 	.word	0x080076d5
 800770c:	080076d5 	.word	0x080076d5
 8007710:	080076d5 	.word	0x080076d5
 8007714:	080076d5 	.word	0x080076d5
 8007718:	08007859 	.word	0x08007859
 800771c:	08007783 	.word	0x08007783
 8007720:	08007813 	.word	0x08007813
 8007724:	080076d5 	.word	0x080076d5
 8007728:	080076d5 	.word	0x080076d5
 800772c:	0800787b 	.word	0x0800787b
 8007730:	080076d5 	.word	0x080076d5
 8007734:	08007783 	.word	0x08007783
 8007738:	080076d5 	.word	0x080076d5
 800773c:	080076d5 	.word	0x080076d5
 8007740:	0800781b 	.word	0x0800781b
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	1d1a      	adds	r2, r3, #4
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6032      	str	r2, [r6, #0]
 800774c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007754:	2301      	movs	r3, #1
 8007756:	e09d      	b.n	8007894 <_printf_i+0x1e8>
 8007758:	6833      	ldr	r3, [r6, #0]
 800775a:	6820      	ldr	r0, [r4, #0]
 800775c:	1d19      	adds	r1, r3, #4
 800775e:	6031      	str	r1, [r6, #0]
 8007760:	0606      	lsls	r6, r0, #24
 8007762:	d501      	bpl.n	8007768 <_printf_i+0xbc>
 8007764:	681d      	ldr	r5, [r3, #0]
 8007766:	e003      	b.n	8007770 <_printf_i+0xc4>
 8007768:	0645      	lsls	r5, r0, #25
 800776a:	d5fb      	bpl.n	8007764 <_printf_i+0xb8>
 800776c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007770:	2d00      	cmp	r5, #0
 8007772:	da03      	bge.n	800777c <_printf_i+0xd0>
 8007774:	232d      	movs	r3, #45	@ 0x2d
 8007776:	426d      	negs	r5, r5
 8007778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800777c:	4859      	ldr	r0, [pc, #356]	@ (80078e4 <_printf_i+0x238>)
 800777e:	230a      	movs	r3, #10
 8007780:	e011      	b.n	80077a6 <_printf_i+0xfa>
 8007782:	6821      	ldr	r1, [r4, #0]
 8007784:	6833      	ldr	r3, [r6, #0]
 8007786:	0608      	lsls	r0, r1, #24
 8007788:	f853 5b04 	ldr.w	r5, [r3], #4
 800778c:	d402      	bmi.n	8007794 <_printf_i+0xe8>
 800778e:	0649      	lsls	r1, r1, #25
 8007790:	bf48      	it	mi
 8007792:	b2ad      	uxthmi	r5, r5
 8007794:	2f6f      	cmp	r7, #111	@ 0x6f
 8007796:	4853      	ldr	r0, [pc, #332]	@ (80078e4 <_printf_i+0x238>)
 8007798:	6033      	str	r3, [r6, #0]
 800779a:	bf14      	ite	ne
 800779c:	230a      	movne	r3, #10
 800779e:	2308      	moveq	r3, #8
 80077a0:	2100      	movs	r1, #0
 80077a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077a6:	6866      	ldr	r6, [r4, #4]
 80077a8:	60a6      	str	r6, [r4, #8]
 80077aa:	2e00      	cmp	r6, #0
 80077ac:	bfa2      	ittt	ge
 80077ae:	6821      	ldrge	r1, [r4, #0]
 80077b0:	f021 0104 	bicge.w	r1, r1, #4
 80077b4:	6021      	strge	r1, [r4, #0]
 80077b6:	b90d      	cbnz	r5, 80077bc <_printf_i+0x110>
 80077b8:	2e00      	cmp	r6, #0
 80077ba:	d04b      	beq.n	8007854 <_printf_i+0x1a8>
 80077bc:	4616      	mov	r6, r2
 80077be:	fbb5 f1f3 	udiv	r1, r5, r3
 80077c2:	fb03 5711 	mls	r7, r3, r1, r5
 80077c6:	5dc7      	ldrb	r7, [r0, r7]
 80077c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077cc:	462f      	mov	r7, r5
 80077ce:	42bb      	cmp	r3, r7
 80077d0:	460d      	mov	r5, r1
 80077d2:	d9f4      	bls.n	80077be <_printf_i+0x112>
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d10b      	bne.n	80077f0 <_printf_i+0x144>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	07df      	lsls	r7, r3, #31
 80077dc:	d508      	bpl.n	80077f0 <_printf_i+0x144>
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	6861      	ldr	r1, [r4, #4]
 80077e2:	4299      	cmp	r1, r3
 80077e4:	bfde      	ittt	le
 80077e6:	2330      	movle	r3, #48	@ 0x30
 80077e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077f0:	1b92      	subs	r2, r2, r6
 80077f2:	6122      	str	r2, [r4, #16]
 80077f4:	f8cd a000 	str.w	sl, [sp]
 80077f8:	464b      	mov	r3, r9
 80077fa:	aa03      	add	r2, sp, #12
 80077fc:	4621      	mov	r1, r4
 80077fe:	4640      	mov	r0, r8
 8007800:	f7ff fee6 	bl	80075d0 <_printf_common>
 8007804:	3001      	adds	r0, #1
 8007806:	d14a      	bne.n	800789e <_printf_i+0x1f2>
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	b004      	add	sp, #16
 800780e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	f043 0320 	orr.w	r3, r3, #32
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	4833      	ldr	r0, [pc, #204]	@ (80078e8 <_printf_i+0x23c>)
 800781c:	2778      	movs	r7, #120	@ 0x78
 800781e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	6831      	ldr	r1, [r6, #0]
 8007826:	061f      	lsls	r7, r3, #24
 8007828:	f851 5b04 	ldr.w	r5, [r1], #4
 800782c:	d402      	bmi.n	8007834 <_printf_i+0x188>
 800782e:	065f      	lsls	r7, r3, #25
 8007830:	bf48      	it	mi
 8007832:	b2ad      	uxthmi	r5, r5
 8007834:	6031      	str	r1, [r6, #0]
 8007836:	07d9      	lsls	r1, r3, #31
 8007838:	bf44      	itt	mi
 800783a:	f043 0320 	orrmi.w	r3, r3, #32
 800783e:	6023      	strmi	r3, [r4, #0]
 8007840:	b11d      	cbz	r5, 800784a <_printf_i+0x19e>
 8007842:	2310      	movs	r3, #16
 8007844:	e7ac      	b.n	80077a0 <_printf_i+0xf4>
 8007846:	4827      	ldr	r0, [pc, #156]	@ (80078e4 <_printf_i+0x238>)
 8007848:	e7e9      	b.n	800781e <_printf_i+0x172>
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	f023 0320 	bic.w	r3, r3, #32
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	e7f6      	b.n	8007842 <_printf_i+0x196>
 8007854:	4616      	mov	r6, r2
 8007856:	e7bd      	b.n	80077d4 <_printf_i+0x128>
 8007858:	6833      	ldr	r3, [r6, #0]
 800785a:	6825      	ldr	r5, [r4, #0]
 800785c:	6961      	ldr	r1, [r4, #20]
 800785e:	1d18      	adds	r0, r3, #4
 8007860:	6030      	str	r0, [r6, #0]
 8007862:	062e      	lsls	r6, r5, #24
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	d501      	bpl.n	800786c <_printf_i+0x1c0>
 8007868:	6019      	str	r1, [r3, #0]
 800786a:	e002      	b.n	8007872 <_printf_i+0x1c6>
 800786c:	0668      	lsls	r0, r5, #25
 800786e:	d5fb      	bpl.n	8007868 <_printf_i+0x1bc>
 8007870:	8019      	strh	r1, [r3, #0]
 8007872:	2300      	movs	r3, #0
 8007874:	6123      	str	r3, [r4, #16]
 8007876:	4616      	mov	r6, r2
 8007878:	e7bc      	b.n	80077f4 <_printf_i+0x148>
 800787a:	6833      	ldr	r3, [r6, #0]
 800787c:	1d1a      	adds	r2, r3, #4
 800787e:	6032      	str	r2, [r6, #0]
 8007880:	681e      	ldr	r6, [r3, #0]
 8007882:	6862      	ldr	r2, [r4, #4]
 8007884:	2100      	movs	r1, #0
 8007886:	4630      	mov	r0, r6
 8007888:	f7f8 fcaa 	bl	80001e0 <memchr>
 800788c:	b108      	cbz	r0, 8007892 <_printf_i+0x1e6>
 800788e:	1b80      	subs	r0, r0, r6
 8007890:	6060      	str	r0, [r4, #4]
 8007892:	6863      	ldr	r3, [r4, #4]
 8007894:	6123      	str	r3, [r4, #16]
 8007896:	2300      	movs	r3, #0
 8007898:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800789c:	e7aa      	b.n	80077f4 <_printf_i+0x148>
 800789e:	6923      	ldr	r3, [r4, #16]
 80078a0:	4632      	mov	r2, r6
 80078a2:	4649      	mov	r1, r9
 80078a4:	4640      	mov	r0, r8
 80078a6:	47d0      	blx	sl
 80078a8:	3001      	adds	r0, #1
 80078aa:	d0ad      	beq.n	8007808 <_printf_i+0x15c>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	079b      	lsls	r3, r3, #30
 80078b0:	d413      	bmi.n	80078da <_printf_i+0x22e>
 80078b2:	68e0      	ldr	r0, [r4, #12]
 80078b4:	9b03      	ldr	r3, [sp, #12]
 80078b6:	4298      	cmp	r0, r3
 80078b8:	bfb8      	it	lt
 80078ba:	4618      	movlt	r0, r3
 80078bc:	e7a6      	b.n	800780c <_printf_i+0x160>
 80078be:	2301      	movs	r3, #1
 80078c0:	4632      	mov	r2, r6
 80078c2:	4649      	mov	r1, r9
 80078c4:	4640      	mov	r0, r8
 80078c6:	47d0      	blx	sl
 80078c8:	3001      	adds	r0, #1
 80078ca:	d09d      	beq.n	8007808 <_printf_i+0x15c>
 80078cc:	3501      	adds	r5, #1
 80078ce:	68e3      	ldr	r3, [r4, #12]
 80078d0:	9903      	ldr	r1, [sp, #12]
 80078d2:	1a5b      	subs	r3, r3, r1
 80078d4:	42ab      	cmp	r3, r5
 80078d6:	dcf2      	bgt.n	80078be <_printf_i+0x212>
 80078d8:	e7eb      	b.n	80078b2 <_printf_i+0x206>
 80078da:	2500      	movs	r5, #0
 80078dc:	f104 0619 	add.w	r6, r4, #25
 80078e0:	e7f5      	b.n	80078ce <_printf_i+0x222>
 80078e2:	bf00      	nop
 80078e4:	08007d89 	.word	0x08007d89
 80078e8:	08007d9a 	.word	0x08007d9a

080078ec <__sflush_r>:
 80078ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f4:	0716      	lsls	r6, r2, #28
 80078f6:	4605      	mov	r5, r0
 80078f8:	460c      	mov	r4, r1
 80078fa:	d454      	bmi.n	80079a6 <__sflush_r+0xba>
 80078fc:	684b      	ldr	r3, [r1, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	dc02      	bgt.n	8007908 <__sflush_r+0x1c>
 8007902:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007904:	2b00      	cmp	r3, #0
 8007906:	dd48      	ble.n	800799a <__sflush_r+0xae>
 8007908:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800790a:	2e00      	cmp	r6, #0
 800790c:	d045      	beq.n	800799a <__sflush_r+0xae>
 800790e:	2300      	movs	r3, #0
 8007910:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007914:	682f      	ldr	r7, [r5, #0]
 8007916:	6a21      	ldr	r1, [r4, #32]
 8007918:	602b      	str	r3, [r5, #0]
 800791a:	d030      	beq.n	800797e <__sflush_r+0x92>
 800791c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	0759      	lsls	r1, r3, #29
 8007922:	d505      	bpl.n	8007930 <__sflush_r+0x44>
 8007924:	6863      	ldr	r3, [r4, #4]
 8007926:	1ad2      	subs	r2, r2, r3
 8007928:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800792a:	b10b      	cbz	r3, 8007930 <__sflush_r+0x44>
 800792c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800792e:	1ad2      	subs	r2, r2, r3
 8007930:	2300      	movs	r3, #0
 8007932:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007934:	6a21      	ldr	r1, [r4, #32]
 8007936:	4628      	mov	r0, r5
 8007938:	47b0      	blx	r6
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	d106      	bne.n	800794e <__sflush_r+0x62>
 8007940:	6829      	ldr	r1, [r5, #0]
 8007942:	291d      	cmp	r1, #29
 8007944:	d82b      	bhi.n	800799e <__sflush_r+0xb2>
 8007946:	4a2a      	ldr	r2, [pc, #168]	@ (80079f0 <__sflush_r+0x104>)
 8007948:	410a      	asrs	r2, r1
 800794a:	07d6      	lsls	r6, r2, #31
 800794c:	d427      	bmi.n	800799e <__sflush_r+0xb2>
 800794e:	2200      	movs	r2, #0
 8007950:	6062      	str	r2, [r4, #4]
 8007952:	04d9      	lsls	r1, r3, #19
 8007954:	6922      	ldr	r2, [r4, #16]
 8007956:	6022      	str	r2, [r4, #0]
 8007958:	d504      	bpl.n	8007964 <__sflush_r+0x78>
 800795a:	1c42      	adds	r2, r0, #1
 800795c:	d101      	bne.n	8007962 <__sflush_r+0x76>
 800795e:	682b      	ldr	r3, [r5, #0]
 8007960:	b903      	cbnz	r3, 8007964 <__sflush_r+0x78>
 8007962:	6560      	str	r0, [r4, #84]	@ 0x54
 8007964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007966:	602f      	str	r7, [r5, #0]
 8007968:	b1b9      	cbz	r1, 800799a <__sflush_r+0xae>
 800796a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800796e:	4299      	cmp	r1, r3
 8007970:	d002      	beq.n	8007978 <__sflush_r+0x8c>
 8007972:	4628      	mov	r0, r5
 8007974:	f7ff fbf2 	bl	800715c <_free_r>
 8007978:	2300      	movs	r3, #0
 800797a:	6363      	str	r3, [r4, #52]	@ 0x34
 800797c:	e00d      	b.n	800799a <__sflush_r+0xae>
 800797e:	2301      	movs	r3, #1
 8007980:	4628      	mov	r0, r5
 8007982:	47b0      	blx	r6
 8007984:	4602      	mov	r2, r0
 8007986:	1c50      	adds	r0, r2, #1
 8007988:	d1c9      	bne.n	800791e <__sflush_r+0x32>
 800798a:	682b      	ldr	r3, [r5, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0c6      	beq.n	800791e <__sflush_r+0x32>
 8007990:	2b1d      	cmp	r3, #29
 8007992:	d001      	beq.n	8007998 <__sflush_r+0xac>
 8007994:	2b16      	cmp	r3, #22
 8007996:	d11e      	bne.n	80079d6 <__sflush_r+0xea>
 8007998:	602f      	str	r7, [r5, #0]
 800799a:	2000      	movs	r0, #0
 800799c:	e022      	b.n	80079e4 <__sflush_r+0xf8>
 800799e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079a2:	b21b      	sxth	r3, r3
 80079a4:	e01b      	b.n	80079de <__sflush_r+0xf2>
 80079a6:	690f      	ldr	r7, [r1, #16]
 80079a8:	2f00      	cmp	r7, #0
 80079aa:	d0f6      	beq.n	800799a <__sflush_r+0xae>
 80079ac:	0793      	lsls	r3, r2, #30
 80079ae:	680e      	ldr	r6, [r1, #0]
 80079b0:	bf08      	it	eq
 80079b2:	694b      	ldreq	r3, [r1, #20]
 80079b4:	600f      	str	r7, [r1, #0]
 80079b6:	bf18      	it	ne
 80079b8:	2300      	movne	r3, #0
 80079ba:	eba6 0807 	sub.w	r8, r6, r7
 80079be:	608b      	str	r3, [r1, #8]
 80079c0:	f1b8 0f00 	cmp.w	r8, #0
 80079c4:	dde9      	ble.n	800799a <__sflush_r+0xae>
 80079c6:	6a21      	ldr	r1, [r4, #32]
 80079c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079ca:	4643      	mov	r3, r8
 80079cc:	463a      	mov	r2, r7
 80079ce:	4628      	mov	r0, r5
 80079d0:	47b0      	blx	r6
 80079d2:	2800      	cmp	r0, #0
 80079d4:	dc08      	bgt.n	80079e8 <__sflush_r+0xfc>
 80079d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079de:	81a3      	strh	r3, [r4, #12]
 80079e0:	f04f 30ff 	mov.w	r0, #4294967295
 80079e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e8:	4407      	add	r7, r0
 80079ea:	eba8 0800 	sub.w	r8, r8, r0
 80079ee:	e7e7      	b.n	80079c0 <__sflush_r+0xd4>
 80079f0:	dfbffffe 	.word	0xdfbffffe

080079f4 <_fflush_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	690b      	ldr	r3, [r1, #16]
 80079f8:	4605      	mov	r5, r0
 80079fa:	460c      	mov	r4, r1
 80079fc:	b913      	cbnz	r3, 8007a04 <_fflush_r+0x10>
 80079fe:	2500      	movs	r5, #0
 8007a00:	4628      	mov	r0, r5
 8007a02:	bd38      	pop	{r3, r4, r5, pc}
 8007a04:	b118      	cbz	r0, 8007a0e <_fflush_r+0x1a>
 8007a06:	6a03      	ldr	r3, [r0, #32]
 8007a08:	b90b      	cbnz	r3, 8007a0e <_fflush_r+0x1a>
 8007a0a:	f7ff f9ad 	bl	8006d68 <__sinit>
 8007a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0f3      	beq.n	80079fe <_fflush_r+0xa>
 8007a16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a18:	07d0      	lsls	r0, r2, #31
 8007a1a:	d404      	bmi.n	8007a26 <_fflush_r+0x32>
 8007a1c:	0599      	lsls	r1, r3, #22
 8007a1e:	d402      	bmi.n	8007a26 <_fflush_r+0x32>
 8007a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a22:	f7ff fb98 	bl	8007156 <__retarget_lock_acquire_recursive>
 8007a26:	4628      	mov	r0, r5
 8007a28:	4621      	mov	r1, r4
 8007a2a:	f7ff ff5f 	bl	80078ec <__sflush_r>
 8007a2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a30:	07da      	lsls	r2, r3, #31
 8007a32:	4605      	mov	r5, r0
 8007a34:	d4e4      	bmi.n	8007a00 <_fflush_r+0xc>
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	059b      	lsls	r3, r3, #22
 8007a3a:	d4e1      	bmi.n	8007a00 <_fflush_r+0xc>
 8007a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a3e:	f7ff fb8b 	bl	8007158 <__retarget_lock_release_recursive>
 8007a42:	e7dd      	b.n	8007a00 <_fflush_r+0xc>

08007a44 <__swhatbuf_r>:
 8007a44:	b570      	push	{r4, r5, r6, lr}
 8007a46:	460c      	mov	r4, r1
 8007a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a4c:	2900      	cmp	r1, #0
 8007a4e:	b096      	sub	sp, #88	@ 0x58
 8007a50:	4615      	mov	r5, r2
 8007a52:	461e      	mov	r6, r3
 8007a54:	da0d      	bge.n	8007a72 <__swhatbuf_r+0x2e>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a5c:	f04f 0100 	mov.w	r1, #0
 8007a60:	bf14      	ite	ne
 8007a62:	2340      	movne	r3, #64	@ 0x40
 8007a64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a68:	2000      	movs	r0, #0
 8007a6a:	6031      	str	r1, [r6, #0]
 8007a6c:	602b      	str	r3, [r5, #0]
 8007a6e:	b016      	add	sp, #88	@ 0x58
 8007a70:	bd70      	pop	{r4, r5, r6, pc}
 8007a72:	466a      	mov	r2, sp
 8007a74:	f000 f848 	bl	8007b08 <_fstat_r>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	dbec      	blt.n	8007a56 <__swhatbuf_r+0x12>
 8007a7c:	9901      	ldr	r1, [sp, #4]
 8007a7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a86:	4259      	negs	r1, r3
 8007a88:	4159      	adcs	r1, r3
 8007a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a8e:	e7eb      	b.n	8007a68 <__swhatbuf_r+0x24>

08007a90 <__smakebuf_r>:
 8007a90:	898b      	ldrh	r3, [r1, #12]
 8007a92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a94:	079d      	lsls	r5, r3, #30
 8007a96:	4606      	mov	r6, r0
 8007a98:	460c      	mov	r4, r1
 8007a9a:	d507      	bpl.n	8007aac <__smakebuf_r+0x1c>
 8007a9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	6123      	str	r3, [r4, #16]
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	6163      	str	r3, [r4, #20]
 8007aa8:	b003      	add	sp, #12
 8007aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aac:	ab01      	add	r3, sp, #4
 8007aae:	466a      	mov	r2, sp
 8007ab0:	f7ff ffc8 	bl	8007a44 <__swhatbuf_r>
 8007ab4:	9f00      	ldr	r7, [sp, #0]
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	4639      	mov	r1, r7
 8007aba:	4630      	mov	r0, r6
 8007abc:	f7ff fbba 	bl	8007234 <_malloc_r>
 8007ac0:	b948      	cbnz	r0, 8007ad6 <__smakebuf_r+0x46>
 8007ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac6:	059a      	lsls	r2, r3, #22
 8007ac8:	d4ee      	bmi.n	8007aa8 <__smakebuf_r+0x18>
 8007aca:	f023 0303 	bic.w	r3, r3, #3
 8007ace:	f043 0302 	orr.w	r3, r3, #2
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	e7e2      	b.n	8007a9c <__smakebuf_r+0xc>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	6020      	str	r0, [r4, #0]
 8007ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ade:	81a3      	strh	r3, [r4, #12]
 8007ae0:	9b01      	ldr	r3, [sp, #4]
 8007ae2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ae6:	b15b      	cbz	r3, 8007b00 <__smakebuf_r+0x70>
 8007ae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aec:	4630      	mov	r0, r6
 8007aee:	f000 f81d 	bl	8007b2c <_isatty_r>
 8007af2:	b128      	cbz	r0, 8007b00 <__smakebuf_r+0x70>
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	f023 0303 	bic.w	r3, r3, #3
 8007afa:	f043 0301 	orr.w	r3, r3, #1
 8007afe:	81a3      	strh	r3, [r4, #12]
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	431d      	orrs	r5, r3
 8007b04:	81a5      	strh	r5, [r4, #12]
 8007b06:	e7cf      	b.n	8007aa8 <__smakebuf_r+0x18>

08007b08 <_fstat_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	@ (8007b28 <_fstat_r+0x20>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	4611      	mov	r1, r2
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	f7fb faf9 	bl	800310c <_fstat>
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	d102      	bne.n	8007b24 <_fstat_r+0x1c>
 8007b1e:	682b      	ldr	r3, [r5, #0]
 8007b20:	b103      	cbz	r3, 8007b24 <_fstat_r+0x1c>
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	bd38      	pop	{r3, r4, r5, pc}
 8007b26:	bf00      	nop
 8007b28:	200004f8 	.word	0x200004f8

08007b2c <_isatty_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d06      	ldr	r5, [pc, #24]	@ (8007b48 <_isatty_r+0x1c>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	4604      	mov	r4, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	602b      	str	r3, [r5, #0]
 8007b38:	f7fb faf8 	bl	800312c <_isatty>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_isatty_r+0x1a>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_isatty_r+0x1a>
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	200004f8 	.word	0x200004f8

08007b4c <_sbrk_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d06      	ldr	r5, [pc, #24]	@ (8007b68 <_sbrk_r+0x1c>)
 8007b50:	2300      	movs	r3, #0
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	602b      	str	r3, [r5, #0]
 8007b58:	f7fb fb00 	bl	800315c <_sbrk>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_sbrk_r+0x1a>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_sbrk_r+0x1a>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	200004f8 	.word	0x200004f8

08007b6c <_init>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	bf00      	nop
 8007b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b72:	bc08      	pop	{r3}
 8007b74:	469e      	mov	lr, r3
 8007b76:	4770      	bx	lr

08007b78 <_fini>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	bf00      	nop
 8007b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7e:	bc08      	pop	{r3}
 8007b80:	469e      	mov	lr, r3
 8007b82:	4770      	bx	lr

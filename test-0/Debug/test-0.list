
test-0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ad4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007c74  08007c74  00008c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e9c  08007e9c  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007e9c  08007e9c  00008e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ea4  08007ea4  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ea4  08007ea4  00008ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ea8  08007ea8  00008ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007eac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000068  08007f14  00009068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08007f14  00009508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011edc  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a98  00000000  00000000  0001af74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0001da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2e  00000000  00000000  0001ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b19  00000000  00000000  0001fa86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016316  00000000  00000000  0003959f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966b4  00000000  00000000  0004f8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e5f69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  000e5ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000eb654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c5c 	.word	0x08007c5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007c5c 	.word	0x08007c5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <adxl_write>:
#define CS_SET() 	HAL_GPIO_WritePin(ADXL345_CS_GPIO_Port, ADXL345_CS_Pin, GPIO_PIN_SET)
#define CS_RESET() 	HAL_GPIO_WritePin(ADXL345_CS_GPIO_Port, ADXL345_CS_Pin, GPIO_PIN_RESET)


void adxl_write (uint8_t address, uint8_t value)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	460a      	mov	r2, r1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = address | ADXL_SPI_MULTI_BYTE;  // multibyte write enabled
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	737b      	strb	r3, [r7, #13]
	CS_RESET();     // pull the cs pin low to enable the slave
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc0:	4809      	ldr	r0, [pc, #36]	@ (8000de8 <adxl_write+0x4c>)
 8000dc2:	f002 ff49 	bl	8003c58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ADXL345_PORT, data, 2, 100);  // transmit the address and data
 8000dc6:	f107 010c 	add.w	r1, r7, #12
 8000dca:	2364      	movs	r3, #100	@ 0x64
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4807      	ldr	r0, [pc, #28]	@ (8000dec <adxl_write+0x50>)
 8000dd0:	f004 ff3d 	bl	8005c4e <HAL_SPI_Transmit>
	CS_SET(); // pull the cs pin high to disable the slave
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dda:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <adxl_write+0x4c>)
 8000ddc:	f002 ff3c 	bl	8003c58 <HAL_GPIO_WritePin>
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40020000 	.word	0x40020000
 8000dec:	200001c4 	.word	0x200001c4

08000df0 <adxl_read>:


void adxl_read(uint8_t address, uint8_t* data_rec) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
    address |= ADXL_SPI_READ;  // read operation
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	71fb      	strb	r3, [r7, #7]
    address |= ADXL_SPI_MULTI_BYTE;  // multibyte read
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	71fb      	strb	r3, [r7, #7]
    CS_RESET();  // pull the cs pin low to enable the slave
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e16:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <adxl_read+0x58>)
 8000e18:	f002 ff1e 	bl	8003c58 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ADXL345_PORT, &address, 1, 100);  // send the address from where you want to read data
 8000e1c:	1df9      	adds	r1, r7, #7
 8000e1e:	2364      	movs	r3, #100	@ 0x64
 8000e20:	2201      	movs	r2, #1
 8000e22:	480a      	ldr	r0, [pc, #40]	@ (8000e4c <adxl_read+0x5c>)
 8000e24:	f004 ff13 	bl	8005c4e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&ADXL345_PORT, data_rec, 6, 100);  // read 6 bytes of data
 8000e28:	2364      	movs	r3, #100	@ 0x64
 8000e2a:	2206      	movs	r2, #6
 8000e2c:	6839      	ldr	r1, [r7, #0]
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <adxl_read+0x5c>)
 8000e30:	f005 f850 	bl	8005ed4 <HAL_SPI_Receive>
    CS_SET();  // pull the cs pin high to disable the slave
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3a:	4803      	ldr	r0, [pc, #12]	@ (8000e48 <adxl_read+0x58>)
 8000e3c:	f002 ff0c 	bl	8003c58 <HAL_GPIO_WritePin>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	200001c4 	.word	0x200001c4

08000e50 <Adxl345_init>:

bool Adxl345_init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	adxl_write (ADXL_REG_DATA_FORMAT, ADXL_RANGE_4G);  // data_format range= +- 4g
 8000e54:	2101      	movs	r1, #1
 8000e56:	2031      	movs	r0, #49	@ 0x31
 8000e58:	f7ff ffa0 	bl	8000d9c <adxl_write>
	adxl_write (ADXL_REG_POWER_CTL, ADXL_RES_10BIT);  // reset all bits
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	202d      	movs	r0, #45	@ 0x2d
 8000e60:	f7ff ff9c 	bl	8000d9c <adxl_write>
	adxl_write (ADXL_REG_POWER_CTL, ADXL_FULL_RES);  // power_cntl measure and wake up 8hz
 8000e64:	2108      	movs	r1, #8
 8000e66:	202d      	movs	r0, #45	@ 0x2d
 8000e68:	f7ff ff98 	bl	8000d9c <adxl_write>
	return true;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	0000      	movs	r0, r0
 8000e74:	0000      	movs	r0, r0
	...

08000e78 <getAcceleration>:

int32_t getAcceleration(char axis) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
    uint8_t accel_data[6];  // Buffer to store raw acceleration data from the ADXL345
    int16_t raw_accel_x, raw_accel_y, raw_accel_z;  // Raw acceleration values for the X, Y, and Z axes
    int16_t raw_accel;  // Declare raw_accel to store the selected axis value

    // Read acceleration data from ADXL345
    adxl_read(ADXL_REG_DATAX0, accel_data);
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	4619      	mov	r1, r3
 8000e88:	2032      	movs	r0, #50	@ 0x32
 8000e8a:	f7ff ffb1 	bl	8000df0 <adxl_read>

    raw_accel_x = ((accel_data[1] << 8) | accel_data[0]);
 8000e8e:	7b7b      	ldrb	r3, [r7, #13]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	7b3b      	ldrb	r3, [r7, #12]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	83bb      	strh	r3, [r7, #28]
    raw_accel_y = ((accel_data[3] << 8) | accel_data[2]);
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	837b      	strh	r3, [r7, #26]
    raw_accel_z = ((accel_data[5] << 8) | accel_data[4]);
 8000eaa:	7c7b      	ldrb	r3, [r7, #17]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	7c3b      	ldrb	r3, [r7, #16]
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	833b      	strh	r3, [r7, #24]

    // Select the correct axis based on the input character 'X', 'Y', or 'Z'
    switch (axis) {
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ebc:	d00c      	beq.n	8000ed8 <getAcceleration+0x60>
 8000ebe:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ec0:	dc0d      	bgt.n	8000ede <getAcceleration+0x66>
 8000ec2:	2b58      	cmp	r3, #88	@ 0x58
 8000ec4:	d002      	beq.n	8000ecc <getAcceleration+0x54>
 8000ec6:	2b59      	cmp	r3, #89	@ 0x59
 8000ec8:	d003      	beq.n	8000ed2 <getAcceleration+0x5a>
            break;
        case 'Z':
            raw_accel = raw_accel_z;
            break;
        default:
            break;
 8000eca:	e008      	b.n	8000ede <getAcceleration+0x66>
            raw_accel = raw_accel_x;
 8000ecc:	8bbb      	ldrh	r3, [r7, #28]
 8000ece:	83fb      	strh	r3, [r7, #30]
            break;
 8000ed0:	e006      	b.n	8000ee0 <getAcceleration+0x68>
            raw_accel = raw_accel_y;
 8000ed2:	8b7b      	ldrh	r3, [r7, #26]
 8000ed4:	83fb      	strh	r3, [r7, #30]
            break;
 8000ed6:	e003      	b.n	8000ee0 <getAcceleration+0x68>
            raw_accel = raw_accel_z;
 8000ed8:	8b3b      	ldrh	r3, [r7, #24]
 8000eda:	83fb      	strh	r3, [r7, #30]
            break;
 8000edc:	e000      	b.n	8000ee0 <getAcceleration+0x68>
            break;
 8000ede:	bf00      	nop
    }

    // Convert the raw value to g and apply offset encoding to store as uint32_t
    int32_t accel_g = ((raw_accel * ADXL345_SCALE_FACTOR_4G) * ACCEL_SCALING_FACTOR);
 8000ee0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb1d 	bl	8000524 <__aeabi_i2d>
 8000eea:	a30d      	add	r3, pc, #52	@ (adr r3, 8000f20 <getAcceleration+0xa8>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fb82 	bl	80005f8 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	a30a      	add	r3, pc, #40	@ (adr r3, 8000f28 <getAcceleration+0xb0>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff fb79 	bl	80005f8 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f7ff fd85 	bl	8000a1c <__aeabi_d2iz>
 8000f12:	4603      	mov	r3, r0
 8000f14:	617b      	str	r3, [r7, #20]

    return accel_g;
 8000f16:	697b      	ldr	r3, [r7, #20]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	8e8a71de 	.word	0x8e8a71de
 8000f24:	3f7ff2e4 	.word	0x3f7ff2e4
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	40c38800 	.word	0x40c38800

08000f30 <EEPROM_Read>:
    HAL_I2C_Mem_Write(&EEPROM_PORT, EEPROM_ADDRESS_WRITE, addr, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
    HAL_Delay(5);
}

// This function helps to read from EEPROM
void EEPROM_Read(uint16_t addr, uint8_t *data, uint16_t size) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af04      	add	r7, sp, #16
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	80fb      	strh	r3, [r7, #6]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&EEPROM_PORT, EEPROM_ADDRESS_READ, addr, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
 8000f40:	88fa      	ldrh	r2, [r7, #6]
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2310      	movs	r3, #16
 8000f52:	21a1      	movs	r1, #161	@ 0xa1
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <EEPROM_Read+0x38>)
 8000f56:	f003 fb0d 	bl	8004574 <HAL_I2C_Mem_Read>
    HAL_Delay(5);
 8000f5a:	2005      	movs	r0, #5
 8000f5c:	f002 fbee 	bl	800373c <HAL_Delay>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000118 	.word	0x20000118

08000f6c <bytes2uInt>:
    for (uint8_t i = 0; i < 4; i++) {
      bytes_data[i] = DataMem.b_data[i];
    }
}

uint32_t bytes2uInt(uint8_t *bytes_data){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
    union {
      uint32_t f_data;
      uint8_t b_data[4];
    }DataMem;

    for (uint8_t i = 0; i < 4; i++) {
 8000f74:	2300      	movs	r3, #0
 8000f76:	75fb      	strb	r3, [r7, #23]
 8000f78:	e00b      	b.n	8000f92 <bytes2uInt+0x26>
    	DataMem.b_data[i] = bytes_data[i];
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	441a      	add	r2, r3
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	3318      	adds	r3, #24
 8000f86:	443b      	add	r3, r7
 8000f88:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d9f0      	bls.n	8000f7a <bytes2uInt+0xe>
    }

   uint32_t variable =  DataMem.f_data;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	613b      	str	r3, [r7, #16]
   return variable;
 8000f9c:	693b      	ldr	r3, [r7, #16]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	371c      	adds	r7, #28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <Etc_Read_Reg>:
PROCBUFFER Etc_Buffer_Out = {.LANByte = 0};
PROCBUFFER Etc_Buffer_In = {.LANByte = 0};

//reads a directly addressable register
//address = register to read, length = number of bytes to read (1,2,3,4), long is returned but only the requested bytes are meaningful, starting from LsByte
uint32_t Etc_Read_Reg(uint16_t address, uint8_t length){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	80fb      	strh	r3, [r7, #6]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	717b      	strb	r3, [r7, #5]
	ULONG Result;
	UWORD Addr;
	uint8_t i;
	uint8_t xfrbuf[7];				//buffer for spi xfr

	Addr.LANWord = address;
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	82bb      	strh	r3, [r7, #20]
	xfrbuf[0] = COMM_SPI_READ;		//SPI read command
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	733b      	strb	r3, [r7, #12]
	xfrbuf[1] = Addr.LANByte[1];	//address of the register
 8000fc4:	7d7b      	ldrb	r3, [r7, #21]
 8000fc6:	737b      	strb	r3, [r7, #13]
	xfrbuf[2] = Addr.LANByte[0];	//to read MSByte first
 8000fc8:	7d3b      	ldrb	r3, [r7, #20]
 8000fca:	73bb      	strb	r3, [r7, #14]
	for(i=0; i< length; i++){		//fill dummy bytes
 8000fcc:	2300      	movs	r3, #0
 8000fce:	77fb      	strb	r3, [r7, #31]
 8000fd0:	e009      	b.n	8000fe6 <Etc_Read_Reg+0x3a>
		xfrbuf[i+3] = DUMMY_BYTE;
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	3320      	adds	r3, #32
 8000fd8:	443b      	add	r3, r7
 8000fda:	22ff      	movs	r2, #255	@ 0xff
 8000fdc:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i=0; i< length; i++){		//fill dummy bytes
 8000fe0:	7ffb      	ldrb	r3, [r7, #31]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	77fb      	strb	r3, [r7, #31]
 8000fe6:	7ffa      	ldrb	r2, [r7, #31]
 8000fe8:	797b      	ldrb	r3, [r7, #5]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d3f1      	bcc.n	8000fd2 <Etc_Read_Reg+0x26>
	}

	CS_SET();						//send L+3 bytes and get back into same buffer
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ff4:	4819      	ldr	r0, [pc, #100]	@ (800105c <Etc_Read_Reg+0xb0>)
 8000ff6:	f002 fe2f 	bl	8003c58 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&LAN9252_PORT, xfrbuf, xfrbuf, length+3, HAL_MAX_DELAY);
 8000ffa:	797b      	ldrb	r3, [r7, #5]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	3303      	adds	r3, #3
 8001000:	b29b      	uxth	r3, r3
 8001002:	f107 020c 	add.w	r2, r7, #12
 8001006:	f107 010c 	add.w	r1, r7, #12
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	9000      	str	r0, [sp, #0]
 8001010:	4813      	ldr	r0, [pc, #76]	@ (8001060 <Etc_Read_Reg+0xb4>)
 8001012:	f005 f877 	bl	8006104 <HAL_SPI_TransmitReceive>
	CS_RESET();
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800101c:	480f      	ldr	r0, [pc, #60]	@ (800105c <Etc_Read_Reg+0xb0>)
 800101e:	f002 fe1b 	bl	8003c58 <HAL_GPIO_WritePin>

	Result.LANLong = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
	for(i=0; i<length; i++){		//read the requested number of bytes LSByte first
 8001026:	2300      	movs	r3, #0
 8001028:	77fb      	strb	r3, [r7, #31]
 800102a:	e00d      	b.n	8001048 <Etc_Read_Reg+0x9c>
		Result.LANByte[i] = xfrbuf[i+3];
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	1cda      	adds	r2, r3, #3
 8001030:	7ffb      	ldrb	r3, [r7, #31]
 8001032:	3220      	adds	r2, #32
 8001034:	443a      	add	r2, r7
 8001036:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800103a:	3320      	adds	r3, #32
 800103c:	443b      	add	r3, r7
 800103e:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<length; i++){		//read the requested number of bytes LSByte first
 8001042:	7ffb      	ldrb	r3, [r7, #31]
 8001044:	3301      	adds	r3, #1
 8001046:	77fb      	strb	r3, [r7, #31]
 8001048:	7ffa      	ldrb	r2, [r7, #31]
 800104a:	797b      	ldrb	r3, [r7, #5]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3ed      	bcc.n	800102c <Etc_Read_Reg+0x80>
	}
	return Result.LANLong;
 8001050:	69bb      	ldr	r3, [r7, #24]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020000 	.word	0x40020000
 8001060:	2000021c 	.word	0x2000021c

08001064 <Etc_Write_Reg>:

// write a directly addressable register, 4 bytes always
// Address = register to write, DataOut = data to write
void Etc_Write_Reg(uint16_t address, uint32_t DataOut)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	80fb      	strh	r3, [r7, #6]
	ULONG Data;
	UWORD Addr;
	uint8_t i;
	uint8_t xfrbuf[7]; 				// buffer for spi xfr

	Addr.LANWord = address;
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	82bb      	strh	r3, [r7, #20]
	Data.LANLong = DataOut;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	61bb      	str	r3, [r7, #24]
	xfrbuf[0] = COMM_SPI_WRITE;     // SPI write command
 8001078:	2302      	movs	r3, #2
 800107a:	733b      	strb	r3, [r7, #12]
	xfrbuf[1] = Addr.LANByte[1];    // address of the register
 800107c:	7d7b      	ldrb	r3, [r7, #21]
 800107e:	737b      	strb	r3, [r7, #13]
	xfrbuf[2] = Addr.LANByte[0];    // to read, MsByte first
 8001080:	7d3b      	ldrb	r3, [r7, #20]
 8001082:	73bb      	strb	r3, [r7, #14]
	for (i=0; i<4; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	77fb      	strb	r3, [r7, #31]
 8001088:	e00d      	b.n	80010a6 <Etc_Write_Reg+0x42>
	{
		xfrbuf[i+3] = Data.LANByte[i];	// fill bytes to send, lsb first
 800108a:	7ffa      	ldrb	r2, [r7, #31]
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	3303      	adds	r3, #3
 8001090:	3220      	adds	r2, #32
 8001092:	443a      	add	r2, r7
 8001094:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8001098:	3320      	adds	r3, #32
 800109a:	443b      	add	r3, r7
 800109c:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i=0; i<4; i++)
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	3301      	adds	r3, #1
 80010a4:	77fb      	strb	r3, [r7, #31]
 80010a6:	7ffb      	ldrb	r3, [r7, #31]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d9ee      	bls.n	800108a <Etc_Write_Reg+0x26>
	}

	CS_SET();						//send 7 bytes and get back into same bfr
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010b2:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <Etc_Write_Reg+0x80>)
 80010b4:	f002 fdd0 	bl	8003c58 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&LAN9252_PORT, xfrbuf, xfrbuf, 7, HAL_MAX_DELAY);
 80010b8:	f107 020c 	add.w	r2, r7, #12
 80010bc:	f107 010c 	add.w	r1, r7, #12
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2307      	movs	r3, #7
 80010c8:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <Etc_Write_Reg+0x84>)
 80010ca:	f005 f81b 	bl	8006104 <HAL_SPI_TransmitReceive>
	CS_RESET();
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <Etc_Write_Reg+0x80>)
 80010d6:	f002 fdbf 	bl	8003c58 <HAL_GPIO_WritePin>
}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40020000 	.word	0x40020000
 80010e8:	2000021c 	.word	0x2000021c

080010ec <Etc_Read_Reg_Wait>:

// read an indirectly addressable register
uint32_t Etc_Read_Reg_Wait(uint16_t address, uint8_t length)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	80fb      	strh	r3, [r7, #6]
 80010f8:	4613      	mov	r3, r2
 80010fa:	717b      	strb	r3, [r7, #5]
	ULONG TempLong;
	UWORD Addr;

	Addr.LANWord = address;
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	813b      	strh	r3, [r7, #8]
	TempLong.LANByte[0] = Addr.LANByte[0];    				//address of the register
 8001100:	7a3b      	ldrb	r3, [r7, #8]
 8001102:	733b      	strb	r3, [r7, #12]
	TempLong.LANByte[1] = Addr.LANByte[1];    				//to read, LsByte first
 8001104:	7a7b      	ldrb	r3, [r7, #9]
 8001106:	737b      	strb	r3, [r7, #13]
	TempLong.LANByte[2] = length;                 			//number of bytes to read
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	73bb      	strb	r3, [r7, #14]
	TempLong.LANByte[3] = ESC_READ;               			// ESC read
 800110c:	23c0      	movs	r3, #192	@ 0xc0
 800110e:	73fb      	strb	r3, [r7, #15]

	Etc_Write_Reg(ECAT_CSR_CMD, TempLong.LANLong);			// write the command
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4619      	mov	r1, r3
 8001114:	f44f 7041 	mov.w	r0, #772	@ 0x304
 8001118:	f7ff ffa4 	bl	8001064 <Etc_Write_Reg>
	TempLong.LANByte[3] = ECAT_CSR_BUSY;
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	73fb      	strb	r3, [r7, #15]

	do{														// wait for command execution
		TempLong.LANLong = Etc_Read_Reg(ECAT_CSR_CMD, 4);
 8001120:	2104      	movs	r1, #4
 8001122:	f44f 7041 	mov.w	r0, #772	@ 0x304
 8001126:	f7ff ff41 	bl	8000fac <Etc_Read_Reg>
 800112a:	4603      	mov	r3, r0
 800112c:	60fb      	str	r3, [r7, #12]
	}while(TempLong.LANByte[3] & ECAT_CSR_BUSY);
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	b25b      	sxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	dbf4      	blt.n	8001120 <Etc_Read_Reg_Wait+0x34>

	TempLong.LANLong = Etc_Read_Reg(ECAT_CSR_DATA, length);   // read the requested register
 8001136:	797b      	ldrb	r3, [r7, #5]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800113e:	f7ff ff35 	bl	8000fac <Etc_Read_Reg>
 8001142:	4603      	mov	r3, r0
 8001144:	60fb      	str	r3, [r7, #12]

	return TempLong.LANLong;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <Etc_Read_Fifo>:
	}while(TempLong.LANByte[3] & ECAT_CSR_BUSY);
}

// read from process ram fifo
void Etc_Read_Fifo()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	@ 0x38
 8001154:	af02      	add	r7, sp, #8
	ULONG TempLong;
	uint8_t xfrbuf[35]; 										// buffer for spi xfr
	uint8_t i;

	Etc_Write_Reg(ECAT_PRAM_RD_ADDR_LEN, 0x00201000);   		// we always read 32 bytes (0x0020), output process ram offset 0x1000
 8001156:	4935      	ldr	r1, [pc, #212]	@ (800122c <Etc_Read_Fifo+0xdc>)
 8001158:	f44f 7042 	mov.w	r0, #776	@ 0x308
 800115c:	f7ff ff82 	bl	8001064 <Etc_Write_Reg>
	Etc_Write_Reg(ECAT_PRAM_RD_CMD, 0x80000000);        		// start command
 8001160:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001164:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 8001168:	f7ff ff7c 	bl	8001064 <Etc_Write_Reg>
	TempLong.LANLong = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
	do{                                                   		// wait for data to be transferred                                                   // from the output process ram
		TempLong.LANLong = Etc_Read_Reg(ECAT_PRAM_RD_CMD, 4); 	// to the read fifo
 8001170:	2104      	movs	r1, #4
 8001172:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 8001176:	f7ff ff19 	bl	8000fac <Etc_Read_Reg>
 800117a:	4603      	mov	r3, r0
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
	}while (!(TempLong.LANByte[0] & PRAM_READ_AVAIL) || (TempLong.LANByte[1] != 8));
 800117e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f2      	beq.n	8001170 <Etc_Read_Fifo+0x20>
 800118a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800118e:	2b08      	cmp	r3, #8
 8001190:	d1ee      	bne.n	8001170 <Etc_Read_Fifo+0x20>

	xfrbuf[0] = COMM_SPI_READ;                                	// SPI read command
 8001192:	2303      	movs	r3, #3
 8001194:	713b      	strb	r3, [r7, #4]
	xfrbuf[1] = 0x00;                                         	// address of the read
 8001196:	2300      	movs	r3, #0
 8001198:	717b      	strb	r3, [r7, #5]
	xfrbuf[2] = 0x00;                                         	// fifo MsByte first
 800119a:	2300      	movs	r3, #0
 800119c:	71bb      	strb	r3, [r7, #6]
	for (i=0; i<32; i++)                                      	// 32 bytes dummy data
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011a4:	e00c      	b.n	80011c0 <Etc_Read_Fifo+0x70>
	{
		xfrbuf[i+3] = DUMMY_BYTE;
 80011a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011aa:	3303      	adds	r3, #3
 80011ac:	3330      	adds	r3, #48	@ 0x30
 80011ae:	443b      	add	r3, r7
 80011b0:	22ff      	movs	r2, #255	@ 0xff
 80011b2:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i=0; i<32; i++)                                      	// 32 bytes dummy data
 80011b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011ba:	3301      	adds	r3, #1
 80011bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011c4:	2b1f      	cmp	r3, #31
 80011c6:	d9ee      	bls.n	80011a6 <Etc_Read_Fifo+0x56>
	}

	CS_SET();													//send 35 bytes and get back into same buffer
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011ce:	4818      	ldr	r0, [pc, #96]	@ (8001230 <Etc_Read_Fifo+0xe0>)
 80011d0:	f002 fd42 	bl	8003c58 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&LAN9252_PORT, xfrbuf, xfrbuf, 35, HAL_MAX_DELAY);
 80011d4:	1d3a      	adds	r2, r7, #4
 80011d6:	1d39      	adds	r1, r7, #4
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2323      	movs	r3, #35	@ 0x23
 80011e0:	4814      	ldr	r0, [pc, #80]	@ (8001234 <Etc_Read_Fifo+0xe4>)
 80011e2:	f004 ff8f 	bl	8006104 <HAL_SPI_TransmitReceive>
	CS_RESET();
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011ec:	4810      	ldr	r0, [pc, #64]	@ (8001230 <Etc_Read_Fifo+0xe0>)
 80011ee:	f002 fd33 	bl	8003c58 <HAL_GPIO_WritePin>

	for (i=0; i<32; i++)                                   		// 32 bytes read data to usable buffer
 80011f2:	2300      	movs	r3, #0
 80011f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011f8:	e00f      	b.n	800121a <Etc_Read_Fifo+0xca>
	{
		Etc_Buffer_Out.LANByte[i] = xfrbuf[i+3];
 80011fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011fe:	1cda      	adds	r2, r3, #3
 8001200:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001204:	3230      	adds	r2, #48	@ 0x30
 8001206:	443a      	add	r2, r7
 8001208:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 800120c:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <Etc_Read_Fifo+0xe8>)
 800120e:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<32; i++)                                   		// 32 bytes read data to usable buffer
 8001210:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001214:	3301      	adds	r3, #1
 8001216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800121a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800121e:	2b1f      	cmp	r3, #31
 8001220:	d9eb      	bls.n	80011fa <Etc_Read_Fifo+0xaa>
	}
}
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	3730      	adds	r7, #48	@ 0x30
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	00201000 	.word	0x00201000
 8001230:	40020000 	.word	0x40020000
 8001234:	2000021c 	.word	0x2000021c
 8001238:	20000084 	.word	0x20000084

0800123c <Etc_Write_Fifo>:

// write to the process ram fifo
void Etc_Write_Fifo()    										// write 32 bytes to the input process ram, through the fifo
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af02      	add	r7, sp, #8
	ULONG TempLong;
	uint8_t xfrbuf[35]; // buffer for spi xfr
	uint8_t i;

	Etc_Write_Reg(ECAT_PRAM_WR_ADDR_LEN, 0x00201200);   		// we always write 32 bytes (0x0020), input process ram offset 0x1200
 8001242:	492a      	ldr	r1, [pc, #168]	@ (80012ec <Etc_Write_Fifo+0xb0>)
 8001244:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001248:	f7ff ff0c 	bl	8001064 <Etc_Write_Reg>
	Etc_Write_Reg(ECAT_PRAM_WR_CMD, 0x80000000);        		// start command
 800124c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001250:	f44f 7045 	mov.w	r0, #788	@ 0x314
 8001254:	f7ff ff06 	bl	8001064 <Etc_Write_Reg>
	TempLong.LANLong = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
	do{                                                   		// check fifo has available space
		TempLong.LANLong = Etc_Read_Reg(ECAT_PRAM_WR_CMD, 4);	// for data to be written
 800125c:	2104      	movs	r1, #4
 800125e:	f44f 7045 	mov.w	r0, #788	@ 0x314
 8001262:	f7ff fea3 	bl	8000fac <Etc_Read_Reg>
 8001266:	4603      	mov	r3, r0
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	while(!(TempLong.LANByte[0] & PRAM_WRITE_AVAIL) || (TempLong.LANByte[1] < 8));
 800126a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f2      	beq.n	800125c <Etc_Write_Fifo+0x20>
 8001276:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800127a:	2b07      	cmp	r3, #7
 800127c:	d9ee      	bls.n	800125c <Etc_Write_Fifo+0x20>

	xfrbuf[0] = COMM_SPI_WRITE;                               	// SPI write command
 800127e:	2302      	movs	r3, #2
 8001280:	713b      	strb	r3, [r7, #4]
	xfrbuf[1] = 0x00;                                         	// address of the write fifo
 8001282:	2300      	movs	r3, #0
 8001284:	717b      	strb	r3, [r7, #5]
	xfrbuf[2] = 0x20;                                         	// MsByte first
 8001286:	2320      	movs	r3, #32
 8001288:	71bb      	strb	r3, [r7, #6]
	for (i=0; i<32; i++)                                      	// 32 bytes write loop
 800128a:	2300      	movs	r3, #0
 800128c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001290:	e00f      	b.n	80012b2 <Etc_Write_Fifo+0x76>
	{
		xfrbuf[i+3] = Etc_Buffer_In.LANByte[i];
 8001292:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800129a:	3303      	adds	r3, #3
 800129c:	4914      	ldr	r1, [pc, #80]	@ (80012f0 <Etc_Write_Fifo+0xb4>)
 800129e:	5c8a      	ldrb	r2, [r1, r2]
 80012a0:	3330      	adds	r3, #48	@ 0x30
 80012a2:	443b      	add	r3, r7
 80012a4:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i=0; i<32; i++)                                      	// 32 bytes write loop
 80012a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012ac:	3301      	adds	r3, #1
 80012ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012b6:	2b1f      	cmp	r3, #31
 80012b8:	d9eb      	bls.n	8001292 <Etc_Write_Fifo+0x56>
	}

	CS_SET();													//send 35 bytes and get back into same buffer
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <Etc_Write_Fifo+0xb8>)
 80012c2:	f002 fcc9 	bl	8003c58 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&LAN9252_PORT, xfrbuf, xfrbuf, 35, HAL_MAX_DELAY);
 80012c6:	1d3a      	adds	r2, r7, #4
 80012c8:	1d39      	adds	r1, r7, #4
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2323      	movs	r3, #35	@ 0x23
 80012d2:	4809      	ldr	r0, [pc, #36]	@ (80012f8 <Etc_Write_Fifo+0xbc>)
 80012d4:	f004 ff16 	bl	8006104 <HAL_SPI_TransmitReceive>
	CS_RESET();
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <Etc_Write_Fifo+0xb8>)
 80012e0:	f002 fcba 	bl	8003c58 <HAL_GPIO_WritePin>
}
 80012e4:	bf00      	nop
 80012e6:	3730      	adds	r7, #48	@ 0x30
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	00201200 	.word	0x00201200
 80012f0:	200000a4 	.word	0x200000a4
 80012f4:	40020000 	.word	0x40020000
 80012f8:	2000021c 	.word	0x2000021c

080012fc <etc_init>:

// initialize / check the etc interface on SPI, return true if initialization is ok
bool etc_init()
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	ULONG TempLong;

	Etc_Write_Reg(RESET_CTL, (DIGITAL_RST & ETHERCAT_RST)); 	// LAN9252 reset
 8001302:	2100      	movs	r1, #0
 8001304:	f44f 70fc 	mov.w	r0, #504	@ 0x1f8
 8001308:	f7ff feac 	bl	8001064 <Etc_Write_Reg>
	HAL_Delay(100);
 800130c:	2064      	movs	r0, #100	@ 0x64
 800130e:	f002 fa15 	bl	800373c <HAL_Delay>
	TempLong.LANLong = Etc_Read_Reg(BYTE_TEST, 4);             	// read test register
 8001312:	2104      	movs	r1, #4
 8001314:	2064      	movs	r0, #100	@ 0x64
 8001316:	f7ff fe49 	bl	8000fac <Etc_Read_Reg>
 800131a:	4603      	mov	r3, r0
 800131c:	607b      	str	r3, [r7, #4]

	if(TempLong.LANLong != 0x87654321)                     		// if the test register is not ok
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <etc_init+0x54>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d001      	beq.n	800132a <etc_init+0x2e>
	{
		/*printf("Bad response received from Etc Test command, data received = ");
		printf("%ld\n", TempLong.LANLong);*/
		return false;
 8001326:	2300      	movs	r3, #0
 8001328:	e00d      	b.n	8001346 <etc_init+0x4a>
	}

	TempLong.LANLong = Etc_Read_Reg(HW_CFG, 4);              	// check also the READY flag
 800132a:	2104      	movs	r1, #4
 800132c:	2074      	movs	r0, #116	@ 0x74
 800132e:	f7ff fe3d 	bl	8000fac <Etc_Read_Reg>
 8001332:	4603      	mov	r3, r0
 8001334:	607b      	str	r3, [r7, #4]
	if((TempLong.LANLong & READY) == 0){
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <etc_init+0x48>
		/*printf("Ready not received from Etc HW Cfg, data received = ");
		printf("%ld\n", TempLong.LANLong);*/
		return false;
 8001340:	2300      	movs	r3, #0
 8001342:	e000      	b.n	8001346 <etc_init+0x4a>
	}

	/*printf("Etc Test Command succeeded\n");*/
  	return true;
 8001344:	2301      	movs	r3, #1
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	87654321 	.word	0x87654321

08001354 <etc_scan>:

// one scan of etc
uint8_t etc_scan()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
	bool WatchDog = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
	bool Operational = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	ULONG TempLong;
	uint8_t Status;

	TempLong.LANLong = Etc_Read_Reg_Wait(WDOG_STATUS, 1); 		// read watchdog status
 8001362:	2101      	movs	r1, #1
 8001364:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 8001368:	f7ff fec0 	bl	80010ec <Etc_Read_Reg_Wait>
 800136c:	4603      	mov	r3, r0
 800136e:	603b      	str	r3, [r7, #0]
	if ((TempLong.LANByte[0] & 0x01) == 0x01)
 8001370:	783b      	ldrb	r3, [r7, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <etc_scan+0x2c>
		WatchDog = 0;                                           // set/reset the corresponding flag
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	e001      	b.n	8001384 <etc_scan+0x30>
	else
	{
		WatchDog = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	71fb      	strb	r3, [r7, #7]
		/*printf("Etc Watchdog active\n");*/
	}

	TempLong.LANLong = Etc_Read_Reg_Wait(AL_STATUS_REG_0, 1);   // read the EtherCAT State Machine status
 8001384:	2101      	movs	r1, #1
 8001386:	f44f 7098 	mov.w	r0, #304	@ 0x130
 800138a:	f7ff feaf 	bl	80010ec <Etc_Read_Reg_Wait>
 800138e:	4603      	mov	r3, r0
 8001390:	603b      	str	r3, [r7, #0]
	Status = TempLong.LANByte[0] & 0x0F;
 8001392:	783b      	ldrb	r3, [r7, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	713b      	strb	r3, [r7, #4]
	if (Status == ESM_OP){                                     	// to see if we are in operational state
 800139a:	793b      	ldrb	r3, [r7, #4]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d102      	bne.n	80013a6 <etc_scan+0x52>
		Operational = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	71bb      	strb	r3, [r7, #6]
 80013a4:	e001      	b.n	80013aa <etc_scan+0x56>
	}else{
		Operational = 0;                                        // set/reset the corresponding flag
 80013a6:	2300      	movs	r3, #0
 80013a8:	71bb      	strb	r3, [r7, #6]
		/*printf("Etc not operational\n");*/
	}

	//--- process data transfers ----------
	if (WatchDog | !Operational)                              	// if watchdog is active or we are
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	f083 0301 	eor.w	r3, r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00e      	beq.n	80013da <etc_scan+0x86>
	{                                                         	// not in operational state, reset
		for (i=0; i<8; i++){                                    // the output buffer
 80013bc:	2300      	movs	r3, #0
 80013be:	717b      	strb	r3, [r7, #5]
 80013c0:	e007      	b.n	80013d2 <etc_scan+0x7e>
			Etc_Buffer_Out.LANLong[i] = 0;                      //
 80013c2:	797b      	ldrb	r3, [r7, #5]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <etc_scan+0xa8>)
 80013c6:	2100      	movs	r1, #0
 80013c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i=0; i<8; i++){                                    // the output buffer
 80013cc:	797b      	ldrb	r3, [r7, #5]
 80013ce:	3301      	adds	r3, #1
 80013d0:	717b      	strb	r3, [r7, #5]
 80013d2:	797b      	ldrb	r3, [r7, #5]
 80013d4:	2b07      	cmp	r3, #7
 80013d6:	d9f4      	bls.n	80013c2 <etc_scan+0x6e>
 80013d8:	e001      	b.n	80013de <etc_scan+0x8a>
		}
	}else{
		/*printf("Read fifo\n");*/
		Etc_Read_Fifo();                                        // otherwise transfer process data from
 80013da:	f7ff feb9 	bl	8001150 <Etc_Read_Fifo>
	}                                                         	// the EtherCAT core to the output buffer
	/*printf("Write fifo\n");*/
	Etc_Write_Fifo();                                         	// we always transfer process data from
 80013de:	f7ff ff2d 	bl	800123c <Etc_Write_Fifo>
                                                            	// the input buffer to the EtherCAT core

	if (WatchDog)                                             	// return the status of the State Machine
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <etc_scan+0x9c>
	{                                                         	// and of the watchdog
		Status |= 0x80;
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013ee:	713b      	strb	r3, [r7, #4]
	}
	return Status;
 80013f0:	793b      	ldrb	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000084 	.word	0x20000084

08001400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001406:	f002 f927 	bl	8003658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140a:	f000 ff67 	bl	80022dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140e:	f001 f919 	bl	8002644 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001412:	f000 ffcb 	bl	80023ac <MX_I2C1_Init>
  MX_SPI5_Init();
 8001416:	f001 f891 	bl	800253c <MX_SPI5_Init>
  MX_TIM4_Init();
 800141a:	f001 f8c5 	bl	80025a8 <MX_TIM4_Init>
  MX_I2C2_Init();
 800141e:	f000 fff3 	bl	8002408 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001422:	f001 f855 	bl	80024d0 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001426:	f001 f81d 	bl	8002464 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

   etc_init_ok = etc_init();
 800142a:	f7ff ff67 	bl	80012fc <etc_init>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4bbf      	ldr	r3, [pc, #764]	@ (8001730 <main+0x330>)
 8001434:	701a      	strb	r2, [r3, #0]
   pcap_init_ok = pcap_init();
 8001436:	f001 fa35 	bl	80028a4 <pcap_init>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4bbd      	ldr	r3, [pc, #756]	@ (8001734 <main+0x334>)
 8001440:	701a      	strb	r2, [r3, #0]
   Adxl345_init_ok = Adxl345_init();
 8001442:	f7ff fd05 	bl	8000e50 <Adxl345_init>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4bbb      	ldr	r3, [pc, #748]	@ (8001738 <main+0x338>)
 800144c:	701a      	strb	r2, [r3, #0]
	   no_error_drive = true;
   } else {
	   no_error_drive = false;
   }*/

   HAL_Delay(200);
 800144e:	20c8      	movs	r0, #200	@ 0xc8
 8001450:	f002 f974 	bl	800373c <HAL_Delay>

    /* USER CODE BEGIN 3 */

	  /*-------------------------- GET DATA FROM PCAP AND ETHERCAT----------------------------------------*/

	  if (pcap_init_ok) {
 8001454:	4bb7      	ldr	r3, [pc, #732]	@ (8001734 <main+0x334>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <main+0x62>
		  pcap_scan();
 800145c:	f001 fa7a 	bl	8002954 <pcap_scan>
 8001460:	e005      	b.n	800146e <main+0x6e>
	  } else {
		  pcap_init_ok = pcap_init();
 8001462:	f001 fa1f 	bl	80028a4 <pcap_init>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4bb2      	ldr	r3, [pc, #712]	@ (8001734 <main+0x334>)
 800146c:	701a      	strb	r2, [r3, #0]
	  }

	  if (etc_init_ok) {
 800146e:	4bb0      	ldr	r3, [pc, #704]	@ (8001730 <main+0x330>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <main+0x7c>
		  etc_scan();
 8001476:	f7ff ff6d 	bl	8001354 <etc_scan>
 800147a:	e005      	b.n	8001488 <main+0x88>
	  } else {
		  etc_init_ok = etc_init();
 800147c:	f7ff ff3e 	bl	80012fc <etc_init>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4baa      	ldr	r3, [pc, #680]	@ (8001730 <main+0x330>)
 8001486:	701a      	strb	r2, [r3, #0]
	  }

	  /*-------------------------- RECEIVED DATA FROM ETHERCAT ----------------------------------------*/

	  etc_new_command = (uint16_t)Etc_Buffer_Out.LANLong[0];
 8001488:	4bac      	ldr	r3, [pc, #688]	@ (800173c <main+0x33c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29a      	uxth	r2, r3
 800148e:	4bac      	ldr	r3, [pc, #688]	@ (8001740 <main+0x340>)
 8001490:	801a      	strh	r2, [r3, #0]
	  etc_new_data =  (int32_t) Etc_Buffer_Out.LANLong[1];
 8001492:	4baa      	ldr	r3, [pc, #680]	@ (800173c <main+0x33c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	461a      	mov	r2, r3
 8001498:	4baa      	ldr	r3, [pc, #680]	@ (8001744 <main+0x344>)
 800149a:	601a      	str	r2, [r3, #0]

	  if (((etc_new_command >= 0) && (etc_new_command <= 19)) || ((etc_new_command >= 100) && (etc_new_command <= 105))) {
 800149c:	4ba8      	ldr	r3, [pc, #672]	@ (8001740 <main+0x340>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	2b13      	cmp	r3, #19
 80014a2:	d907      	bls.n	80014b4 <main+0xb4>
 80014a4:	4ba6      	ldr	r3, [pc, #664]	@ (8001740 <main+0x340>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	2b63      	cmp	r3, #99	@ 0x63
 80014aa:	d907      	bls.n	80014bc <main+0xbc>
 80014ac:	4ba4      	ldr	r3, [pc, #656]	@ (8001740 <main+0x340>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	2b69      	cmp	r3, #105	@ 0x69
 80014b2:	d803      	bhi.n	80014bc <main+0xbc>
	      set_command_flag = true;
 80014b4:	4ba4      	ldr	r3, [pc, #656]	@ (8001748 <main+0x348>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e002      	b.n	80014c2 <main+0xc2>
	  } else {
		  set_command_flag = false;
 80014bc:	4ba2      	ldr	r3, [pc, #648]	@ (8001748 <main+0x348>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
	  }

	  if ((etc_new_command >= 50 && etc_new_command <= 70)) {
 80014c2:	4b9f      	ldr	r3, [pc, #636]	@ (8001740 <main+0x340>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	2b31      	cmp	r3, #49	@ 0x31
 80014c8:	d907      	bls.n	80014da <main+0xda>
 80014ca:	4b9d      	ldr	r3, [pc, #628]	@ (8001740 <main+0x340>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	2b46      	cmp	r3, #70	@ 0x46
 80014d0:	d803      	bhi.n	80014da <main+0xda>
		  get_command_flag = true;
 80014d2:	4b9e      	ldr	r3, [pc, #632]	@ (800174c <main+0x34c>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	e002      	b.n	80014e0 <main+0xe0>
	  } else {
		  get_command_flag = false;
 80014da:	4b9c      	ldr	r3, [pc, #624]	@ (800174c <main+0x34c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	  }

	  if ((etc_new_command == 301 || etc_new_command == 302 || etc_new_command == 303)) {
 80014e0:	4b97      	ldr	r3, [pc, #604]	@ (8001740 <main+0x340>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	f240 122d 	movw	r2, #301	@ 0x12d
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d00a      	beq.n	8001502 <main+0x102>
 80014ec:	4b94      	ldr	r3, [pc, #592]	@ (8001740 <main+0x340>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	f5b3 7f97 	cmp.w	r3, #302	@ 0x12e
 80014f4:	d005      	beq.n	8001502 <main+0x102>
 80014f6:	4b92      	ldr	r3, [pc, #584]	@ (8001740 <main+0x340>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	f240 122f 	movw	r2, #303	@ 0x12f
 80014fe:	4293      	cmp	r3, r2
 8001500:	d103      	bne.n	800150a <main+0x10a>
		  accelerometer_flag = true;
 8001502:	4b93      	ldr	r3, [pc, #588]	@ (8001750 <main+0x350>)
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e002      	b.n	8001510 <main+0x110>
	  } else {
		  accelerometer_flag = false;
 800150a:	4b91      	ldr	r3, [pc, #580]	@ (8001750 <main+0x350>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
	  }

	  etc_digital_output = Etc_Buffer_Out.LANLong[5];
 8001510:	4b8a      	ldr	r3, [pc, #552]	@ (800173c <main+0x33c>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	4a8f      	ldr	r2, [pc, #572]	@ (8001754 <main+0x354>)
 8001516:	6013      	str	r3, [r2, #0]
	  etc_analog_output_0_1 = Etc_Buffer_Out.LANLong[6];
 8001518:	4b88      	ldr	r3, [pc, #544]	@ (800173c <main+0x33c>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a8e      	ldr	r2, [pc, #568]	@ (8001758 <main+0x358>)
 800151e:	6013      	str	r3, [r2, #0]
	  etc_analog_output_2_3 = Etc_Buffer_Out.LANLong[7];
 8001520:	4b86      	ldr	r3, [pc, #536]	@ (800173c <main+0x33c>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	4a8d      	ldr	r2, [pc, #564]	@ (800175c <main+0x35c>)
 8001526:	6013      	str	r3, [r2, #0]

	  // Split the 32-bit floats into two 16-bit outputs each
	  etc_analog_output_0 = (uint16_t)(((uint32_t)etc_analog_output_0_1) & 0xFFFF);
 8001528:	4b8b      	ldr	r3, [pc, #556]	@ (8001758 <main+0x358>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b29a      	uxth	r2, r3
 800152e:	4b8c      	ldr	r3, [pc, #560]	@ (8001760 <main+0x360>)
 8001530:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_1 = (uint16_t)((((uint32_t)etc_analog_output_0_1) >> 16) & 0xFFFF);
 8001532:	4b89      	ldr	r3, [pc, #548]	@ (8001758 <main+0x358>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	0c1b      	lsrs	r3, r3, #16
 8001538:	b29a      	uxth	r2, r3
 800153a:	4b8a      	ldr	r3, [pc, #552]	@ (8001764 <main+0x364>)
 800153c:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_2 = (uint16_t)(((uint32_t)etc_analog_output_2_3) & 0xFFFF);
 800153e:	4b87      	ldr	r3, [pc, #540]	@ (800175c <main+0x35c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29a      	uxth	r2, r3
 8001544:	4b88      	ldr	r3, [pc, #544]	@ (8001768 <main+0x368>)
 8001546:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_3 = (uint16_t)((((uint32_t)etc_analog_output_2_3) >> 16) & 0xFFFF);
 8001548:	4b84      	ldr	r3, [pc, #528]	@ (800175c <main+0x35c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0c1b      	lsrs	r3, r3, #16
 800154e:	b29a      	uxth	r2, r3
 8001550:	4b86      	ldr	r3, [pc, #536]	@ (800176c <main+0x36c>)
 8001552:	801a      	strh	r2, [r3, #0]

	  /*---------------------------PROCESS REECIVED COMMAND AND DATA-----------------------------------------*/

	  if (set_command_flag) {
 8001554:	4b7c      	ldr	r3, [pc, #496]	@ (8001748 <main+0x348>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8335 	beq.w	8001bc8 <main+0x7c8>
		  if ((etc_old_command != etc_new_command) || (etc_old_data != etc_new_data)) {
 800155e:	4b84      	ldr	r3, [pc, #528]	@ (8001770 <main+0x370>)
 8001560:	881a      	ldrh	r2, [r3, #0]
 8001562:	4b77      	ldr	r3, [pc, #476]	@ (8001740 <main+0x340>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d106      	bne.n	8001578 <main+0x178>
 800156a:	4b82      	ldr	r3, [pc, #520]	@ (8001774 <main+0x374>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b75      	ldr	r3, [pc, #468]	@ (8001744 <main+0x344>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	f000 862b 	beq.w	80021ce <main+0xdce>
				switch (etc_new_command) {
 8001578:	4b71      	ldr	r3, [pc, #452]	@ (8001740 <main+0x340>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	2b69      	cmp	r3, #105	@ 0x69
 800157e:	f200 8308 	bhi.w	8001b92 <main+0x792>
 8001582:	a201      	add	r2, pc, #4	@ (adr r2, 8001588 <main+0x188>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001779 	.word	0x08001779
 800158c:	08001789 	.word	0x08001789
 8001590:	080017bf 	.word	0x080017bf
 8001594:	080017f3 	.word	0x080017f3
 8001598:	08001821 	.word	0x08001821
 800159c:	0800184d 	.word	0x0800184d
 80015a0:	08001877 	.word	0x08001877
 80015a4:	080018a1 	.word	0x080018a1
 80015a8:	080018cd 	.word	0x080018cd
 80015ac:	080018f9 	.word	0x080018f9
 80015b0:	08001923 	.word	0x08001923
 80015b4:	0800194d 	.word	0x0800194d
 80015b8:	08001979 	.word	0x08001979
 80015bc:	080019c5 	.word	0x080019c5
 80015c0:	080019f1 	.word	0x080019f1
 80015c4:	08001a1d 	.word	0x08001a1d
 80015c8:	08001a49 	.word	0x08001a49
 80015cc:	08001a75 	.word	0x08001a75
 80015d0:	08001aa1 	.word	0x08001aa1
 80015d4:	08001acf 	.word	0x08001acf
 80015d8:	08001b93 	.word	0x08001b93
 80015dc:	08001b93 	.word	0x08001b93
 80015e0:	08001b93 	.word	0x08001b93
 80015e4:	08001b93 	.word	0x08001b93
 80015e8:	08001b93 	.word	0x08001b93
 80015ec:	08001b93 	.word	0x08001b93
 80015f0:	08001b93 	.word	0x08001b93
 80015f4:	08001b93 	.word	0x08001b93
 80015f8:	08001b93 	.word	0x08001b93
 80015fc:	08001b93 	.word	0x08001b93
 8001600:	08001b93 	.word	0x08001b93
 8001604:	08001b93 	.word	0x08001b93
 8001608:	08001b93 	.word	0x08001b93
 800160c:	08001b93 	.word	0x08001b93
 8001610:	08001b93 	.word	0x08001b93
 8001614:	08001b93 	.word	0x08001b93
 8001618:	08001b93 	.word	0x08001b93
 800161c:	08001b93 	.word	0x08001b93
 8001620:	08001b93 	.word	0x08001b93
 8001624:	08001b93 	.word	0x08001b93
 8001628:	08001b93 	.word	0x08001b93
 800162c:	08001b93 	.word	0x08001b93
 8001630:	08001b93 	.word	0x08001b93
 8001634:	08001b93 	.word	0x08001b93
 8001638:	08001b93 	.word	0x08001b93
 800163c:	08001b93 	.word	0x08001b93
 8001640:	08001b93 	.word	0x08001b93
 8001644:	08001b93 	.word	0x08001b93
 8001648:	08001b93 	.word	0x08001b93
 800164c:	08001b93 	.word	0x08001b93
 8001650:	08001b93 	.word	0x08001b93
 8001654:	08001b93 	.word	0x08001b93
 8001658:	08001b93 	.word	0x08001b93
 800165c:	08001b93 	.word	0x08001b93
 8001660:	08001b93 	.word	0x08001b93
 8001664:	08001b93 	.word	0x08001b93
 8001668:	08001b93 	.word	0x08001b93
 800166c:	08001b93 	.word	0x08001b93
 8001670:	08001b93 	.word	0x08001b93
 8001674:	08001b93 	.word	0x08001b93
 8001678:	08001b93 	.word	0x08001b93
 800167c:	08001b93 	.word	0x08001b93
 8001680:	08001b93 	.word	0x08001b93
 8001684:	08001b93 	.word	0x08001b93
 8001688:	08001b93 	.word	0x08001b93
 800168c:	08001b93 	.word	0x08001b93
 8001690:	08001b93 	.word	0x08001b93
 8001694:	08001b93 	.word	0x08001b93
 8001698:	08001b93 	.word	0x08001b93
 800169c:	08001b93 	.word	0x08001b93
 80016a0:	08001b93 	.word	0x08001b93
 80016a4:	08001b93 	.word	0x08001b93
 80016a8:	08001b93 	.word	0x08001b93
 80016ac:	08001b93 	.word	0x08001b93
 80016b0:	08001b93 	.word	0x08001b93
 80016b4:	08001b93 	.word	0x08001b93
 80016b8:	08001b93 	.word	0x08001b93
 80016bc:	08001b93 	.word	0x08001b93
 80016c0:	08001b93 	.word	0x08001b93
 80016c4:	08001b93 	.word	0x08001b93
 80016c8:	08001b93 	.word	0x08001b93
 80016cc:	08001b93 	.word	0x08001b93
 80016d0:	08001b93 	.word	0x08001b93
 80016d4:	08001b93 	.word	0x08001b93
 80016d8:	08001b93 	.word	0x08001b93
 80016dc:	08001b93 	.word	0x08001b93
 80016e0:	08001b93 	.word	0x08001b93
 80016e4:	08001b93 	.word	0x08001b93
 80016e8:	08001b93 	.word	0x08001b93
 80016ec:	08001b93 	.word	0x08001b93
 80016f0:	08001b93 	.word	0x08001b93
 80016f4:	08001b93 	.word	0x08001b93
 80016f8:	08001b93 	.word	0x08001b93
 80016fc:	08001b93 	.word	0x08001b93
 8001700:	08001b93 	.word	0x08001b93
 8001704:	08001b93 	.word	0x08001b93
 8001708:	08001b93 	.word	0x08001b93
 800170c:	08001b93 	.word	0x08001b93
 8001710:	08001b93 	.word	0x08001b93
 8001714:	08001b93 	.word	0x08001b93
 8001718:	08001afd 	.word	0x08001afd
 800171c:	08001b25 	.word	0x08001b25
 8001720:	08001b3b 	.word	0x08001b3b
 8001724:	08001b51 	.word	0x08001b51
 8001728:	08001b67 	.word	0x08001b67
 800172c:	08001b7d 	.word	0x08001b7d
 8001730:	200002bd 	.word	0x200002bd
 8001734:	200002bc 	.word	0x200002bc
 8001738:	200002be 	.word	0x200002be
 800173c:	20000084 	.word	0x20000084
 8001740:	20000328 	.word	0x20000328
 8001744:	2000032c 	.word	0x2000032c
 8001748:	2000031c 	.word	0x2000031c
 800174c:	2000031d 	.word	0x2000031d
 8001750:	2000031f 	.word	0x2000031f
 8001754:	20000330 	.word	0x20000330
 8001758:	20000334 	.word	0x20000334
 800175c:	20000338 	.word	0x20000338
 8001760:	2000033c 	.word	0x2000033c
 8001764:	2000033e 	.word	0x2000033e
 8001768:	20000340 	.word	0x20000340
 800176c:	20000342 	.word	0x20000342
 8001770:	20000320 	.word	0x20000320
 8001774:	20000324 	.word	0x20000324
				case 0:
					TxData = etc_new_data;
 8001778:	4b8a      	ldr	r3, [pc, #552]	@ (80019a4 <main+0x5a4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a8a      	ldr	r2, [pc, #552]	@ (80019a8 <main+0x5a8>)
 800177e:	6013      	str	r3, [r2, #0]
					continuous_tx_flag = false;
 8001780:	4b8a      	ldr	r3, [pc, #552]	@ (80019ac <main+0x5ac>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
					break;
 8001786:	e205      	b.n	8001b94 <main+0x794>

				case 1:
					TxData = etc_new_data;
 8001788:	4b86      	ldr	r3, [pc, #536]	@ (80019a4 <main+0x5a4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a86      	ldr	r2, [pc, #536]	@ (80019a8 <main+0x5a8>)
 800178e:	6013      	str	r3, [r2, #0]
					set_Execution_count++;
 8001790:	4b87      	ldr	r3, [pc, #540]	@ (80019b0 <main+0x5b0>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b85      	ldr	r3, [pc, #532]	@ (80019b0 <main+0x5b0>)
 800179a:	701a      	strb	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 1000000)) {
 800179c:	4b81      	ldr	r3, [pc, #516]	@ (80019a4 <main+0x5a4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd04      	ble.n	80017ae <main+0x3ae>
 80017a4:	4b7f      	ldr	r3, [pc, #508]	@ (80019a4 <main+0x5a4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a82      	ldr	r2, [pc, #520]	@ (80019b4 <main+0x5b4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	dd03      	ble.n	80017b6 <main+0x3b6>
						setWrongCommandFlag(&tmc4671_controller, true);
 80017ae:	2101      	movs	r1, #1
 80017b0:	4881      	ldr	r0, [pc, #516]	@ (80019b8 <main+0x5b8>)
 80017b2:	f001 fd17 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setEncoderResolution(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80017b6:	4b7d      	ldr	r3, [pc, #500]	@ (80019ac <main+0x5ac>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
					break;
 80017bc:	e1ea      	b.n	8001b94 <main+0x794>

				case 2:
					TxData = etc_new_data;
 80017be:	4b79      	ldr	r3, [pc, #484]	@ (80019a4 <main+0x5a4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a79      	ldr	r2, [pc, #484]	@ (80019a8 <main+0x5a8>)
 80017c4:	6013      	str	r3, [r2, #0]
					set_Execution_count++;
 80017c6:	4b7a      	ldr	r3, [pc, #488]	@ (80019b0 <main+0x5b0>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b78      	ldr	r3, [pc, #480]	@ (80019b0 <main+0x5b0>)
 80017d0:	701a      	strb	r2, [r3, #0]
					if ((etc_new_data != 0) && (etc_new_data != 1)) {//cannot be anything other than 0 or 1
 80017d2:	4b74      	ldr	r3, [pc, #464]	@ (80019a4 <main+0x5a4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d007      	beq.n	80017ea <main+0x3ea>
 80017da:	4b72      	ldr	r3, [pc, #456]	@ (80019a4 <main+0x5a4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d003      	beq.n	80017ea <main+0x3ea>
						setWrongCommandFlag(&tmc4671_controller, true);
 80017e2:	2101      	movs	r1, #1
 80017e4:	4874      	ldr	r0, [pc, #464]	@ (80019b8 <main+0x5b8>)
 80017e6:	f001 fcfd 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setEncoderDirection(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80017ea:	4b70      	ldr	r3, [pc, #448]	@ (80019ac <main+0x5ac>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
					break;
 80017f0:	e1d0      	b.n	8001b94 <main+0x794>

				case 3:
					TxData = etc_new_data;
 80017f2:	4b6c      	ldr	r3, [pc, #432]	@ (80019a4 <main+0x5a4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6c      	ldr	r2, [pc, #432]	@ (80019a8 <main+0x5a8>)
 80017f8:	6013      	str	r3, [r2, #0]
					if (( etc_new_data <= -5000) || ( etc_new_data >= 5000)) {//cannot be less than -5000um = -5mm or greater than 5000um = 5mm
 80017fa:	4b6a      	ldr	r3, [pc, #424]	@ (80019a4 <main+0x5a4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6f      	ldr	r2, [pc, #444]	@ (80019bc <main+0x5bc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	db05      	blt.n	8001810 <main+0x410>
 8001804:	4b67      	ldr	r3, [pc, #412]	@ (80019a4 <main+0x5a4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f241 3287 	movw	r2, #4999	@ 0x1387
 800180c:	4293      	cmp	r3, r2
 800180e:	dd03      	ble.n	8001818 <main+0x418>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001810:	2101      	movs	r1, #1
 8001812:	4869      	ldr	r0, [pc, #420]	@ (80019b8 <main+0x5b8>)
 8001814:	f001 fce6 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setZeroOffset(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001818:	4b64      	ldr	r3, [pc, #400]	@ (80019ac <main+0x5ac>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
					break;
 800181e:	e1b9      	b.n	8001b94 <main+0x794>

				case 4:
					TxData = etc_new_data;
 8001820:	4b60      	ldr	r3, [pc, #384]	@ (80019a4 <main+0x5a4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a60      	ldr	r2, [pc, #384]	@ (80019a8 <main+0x5a8>)
 8001826:	6013      	str	r3, [r2, #0]
					if (( etc_new_data <= 0) || ( etc_new_data > 12000)) {//cannot be 0, negative number or more than 12000um = 12mm
 8001828:	4b5e      	ldr	r3, [pc, #376]	@ (80019a4 <main+0x5a4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	dd05      	ble.n	800183c <main+0x43c>
 8001830:	4b5c      	ldr	r3, [pc, #368]	@ (80019a4 <main+0x5a4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001838:	4293      	cmp	r3, r2
 800183a:	dd03      	ble.n	8001844 <main+0x444>
						setWrongCommandFlag(&tmc4671_controller, true);
 800183c:	2101      	movs	r1, #1
 800183e:	485e      	ldr	r0, [pc, #376]	@ (80019b8 <main+0x5b8>)
 8001840:	f001 fcd0 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setSoftPositiveLimit(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001844:	4b59      	ldr	r3, [pc, #356]	@ (80019ac <main+0x5ac>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
					break;
 800184a:	e1a3      	b.n	8001b94 <main+0x794>

				case 5:
					TxData = etc_new_data;
 800184c:	4b55      	ldr	r3, [pc, #340]	@ (80019a4 <main+0x5a4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a55      	ldr	r2, [pc, #340]	@ (80019a8 <main+0x5a8>)
 8001852:	6013      	str	r3, [r2, #0]
					if (( etc_new_data >= 0) || ( etc_new_data < -12000)) {	//cannot be 0, positive number or less than -12000um = -12mm
 8001854:	4b53      	ldr	r3, [pc, #332]	@ (80019a4 <main+0x5a4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	da04      	bge.n	8001866 <main+0x466>
 800185c:	4b51      	ldr	r3, [pc, #324]	@ (80019a4 <main+0x5a4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a57      	ldr	r2, [pc, #348]	@ (80019c0 <main+0x5c0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	da03      	bge.n	800186e <main+0x46e>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001866:	2101      	movs	r1, #1
 8001868:	4853      	ldr	r0, [pc, #332]	@ (80019b8 <main+0x5b8>)
 800186a:	f001 fcbb 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setSoftNegativeLimit(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 800186e:	4b4f      	ldr	r3, [pc, #316]	@ (80019ac <main+0x5ac>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
					break;
 8001874:	e18e      	b.n	8001b94 <main+0x794>

				case 6:
					TxData = etc_new_data;
 8001876:	4b4b      	ldr	r3, [pc, #300]	@ (80019a4 <main+0x5a4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a4b      	ldr	r2, [pc, #300]	@ (80019a8 <main+0x5a8>)
 800187c:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 2000)) {	//cannot be 0, negative number or more than 2000um = 2mm
 800187e:	4b49      	ldr	r3, [pc, #292]	@ (80019a4 <main+0x5a4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	dd04      	ble.n	8001890 <main+0x490>
 8001886:	4b47      	ldr	r3, [pc, #284]	@ (80019a4 <main+0x5a4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800188e:	dd03      	ble.n	8001898 <main+0x498>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001890:	2101      	movs	r1, #1
 8001892:	4849      	ldr	r0, [pc, #292]	@ (80019b8 <main+0x5b8>)
 8001894:	f001 fca6 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setMaxPositionError(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001898:	4b44      	ldr	r3, [pc, #272]	@ (80019ac <main+0x5ac>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
					break;
 800189e:	e179      	b.n	8001b94 <main+0x794>

				case 7:
					TxData = etc_new_data;
 80018a0:	4b40      	ldr	r3, [pc, #256]	@ (80019a4 <main+0x5a4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a40      	ldr	r2, [pc, #256]	@ (80019a8 <main+0x5a8>)
 80018a6:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 5000)) {	//cannot be 0, negative number or more than 5000
 80018a8:	4b3e      	ldr	r3, [pc, #248]	@ (80019a4 <main+0x5a4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dd05      	ble.n	80018bc <main+0x4bc>
 80018b0:	4b3c      	ldr	r3, [pc, #240]	@ (80019a4 <main+0x5a4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	dd03      	ble.n	80018c4 <main+0x4c4>
						setWrongCommandFlag(&tmc4671_controller, true);
 80018bc:	2101      	movs	r1, #1
 80018be:	483e      	ldr	r0, [pc, #248]	@ (80019b8 <main+0x5b8>)
 80018c0:	f001 fc90 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setCurrentLimitHoming(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80018c4:	4b39      	ldr	r3, [pc, #228]	@ (80019ac <main+0x5ac>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
					break;
 80018ca:	e163      	b.n	8001b94 <main+0x794>

				case 8:
					TxData = etc_new_data;
 80018cc:	4b35      	ldr	r3, [pc, #212]	@ (80019a4 <main+0x5a4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a35      	ldr	r2, [pc, #212]	@ (80019a8 <main+0x5a8>)
 80018d2:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 15000)) {//cannot be 0, negative number or more than 15000
 80018d4:	4b33      	ldr	r3, [pc, #204]	@ (80019a4 <main+0x5a4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	dd05      	ble.n	80018e8 <main+0x4e8>
 80018dc:	4b31      	ldr	r3, [pc, #196]	@ (80019a4 <main+0x5a4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80018e4:	4293      	cmp	r3, r2
 80018e6:	dd03      	ble.n	80018f0 <main+0x4f0>
						setWrongCommandFlag(&tmc4671_controller, true);
 80018e8:	2101      	movs	r1, #1
 80018ea:	4833      	ldr	r0, [pc, #204]	@ (80019b8 <main+0x5b8>)
 80018ec:	f001 fc7a 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setCurrentLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80018f0:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <main+0x5ac>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
					break;
 80018f6:	e14d      	b.n	8001b94 <main+0x794>

				case 9:
					TxData = etc_new_data;
 80018f8:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <main+0x5a4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2a      	ldr	r2, [pc, #168]	@ (80019a8 <main+0x5a8>)
 80018fe:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 8000)) {	//cannot be 0, negative number or more than 8000
 8001900:	4b28      	ldr	r3, [pc, #160]	@ (80019a4 <main+0x5a4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	dd04      	ble.n	8001912 <main+0x512>
 8001908:	4b26      	ldr	r3, [pc, #152]	@ (80019a4 <main+0x5a4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001910:	dd03      	ble.n	800191a <main+0x51a>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001912:	2101      	movs	r1, #1
 8001914:	4828      	ldr	r0, [pc, #160]	@ (80019b8 <main+0x5b8>)
 8001916:	f001 fc65 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setVoltageLimitHoming(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <main+0x5ac>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
					break;
 8001920:	e138      	b.n	8001b94 <main+0x794>

				case 10:
					TxData = etc_new_data;
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <main+0x5a4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a20      	ldr	r2, [pc, #128]	@ (80019a8 <main+0x5a8>)
 8001928:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 500)) {//cannot be 0, negative number or more than 500
 800192a:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <main+0x5a4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	dd04      	ble.n	800193c <main+0x53c>
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <main+0x5a4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800193a:	dd03      	ble.n	8001944 <main+0x544>
						setWrongCommandFlag(&tmc4671_controller, true);
 800193c:	2101      	movs	r1, #1
 800193e:	481e      	ldr	r0, [pc, #120]	@ (80019b8 <main+0x5b8>)
 8001940:	f001 fc50 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setVelocityLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001944:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <main+0x5ac>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
					break;
 800194a:	e123      	b.n	8001b94 <main+0x794>

				case 11:
					TxData = etc_new_data;
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <main+0x5a4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a15      	ldr	r2, [pc, #84]	@ (80019a8 <main+0x5a8>)
 8001952:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 30000)) {//cannot be 0, negative number or more than 30000
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <main+0x5a4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	dd05      	ble.n	8001968 <main+0x568>
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <main+0x5a4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001964:	4293      	cmp	r3, r2
 8001966:	dd03      	ble.n	8001970 <main+0x570>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001968:	2101      	movs	r1, #1
 800196a:	4813      	ldr	r0, [pc, #76]	@ (80019b8 <main+0x5b8>)
 800196c:	f001 fc3a 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setTorqueLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <main+0x5ac>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
					break;
 8001976:	e10d      	b.n	8001b94 <main+0x794>

				case 12:
					TxData = etc_new_data;
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <main+0x5a4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <main+0x5a8>)
 800197e:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <main+0x5a4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	dd05      	ble.n	8001994 <main+0x594>
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <main+0x5a4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001990:	4293      	cmp	r3, r2
 8001992:	dd03      	ble.n	800199c <main+0x59c>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001994:	2101      	movs	r1, #1
 8001996:	4808      	ldr	r0, [pc, #32]	@ (80019b8 <main+0x5b8>)
 8001998:	f001 fc24 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setCurrentGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <main+0x5ac>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
					break;
 80019a2:	e0f7      	b.n	8001b94 <main+0x794>
 80019a4:	2000032c 	.word	0x2000032c
 80019a8:	20000344 	.word	0x20000344
 80019ac:	2000031e 	.word	0x2000031e
 80019b0:	2000034b 	.word	0x2000034b
 80019b4:	000f4240 	.word	0x000f4240
 80019b8:	200002c0 	.word	0x200002c0
 80019bc:	ffffec79 	.word	0xffffec79
 80019c0:	ffffd120 	.word	0xffffd120

				case 13:
					TxData = etc_new_data;
 80019c4:	4b78      	ldr	r3, [pc, #480]	@ (8001ba8 <main+0x7a8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a78      	ldr	r2, [pc, #480]	@ (8001bac <main+0x7ac>)
 80019ca:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 80019cc:	4b76      	ldr	r3, [pc, #472]	@ (8001ba8 <main+0x7a8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dd05      	ble.n	80019e0 <main+0x5e0>
 80019d4:	4b74      	ldr	r3, [pc, #464]	@ (8001ba8 <main+0x7a8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 80019dc:	4293      	cmp	r3, r2
 80019de:	dd03      	ble.n	80019e8 <main+0x5e8>
						setWrongCommandFlag(&tmc4671_controller, true);
 80019e0:	2101      	movs	r1, #1
 80019e2:	4873      	ldr	r0, [pc, #460]	@ (8001bb0 <main+0x7b0>)
 80019e4:	f001 fbfe 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setCurrentGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80019e8:	4b72      	ldr	r3, [pc, #456]	@ (8001bb4 <main+0x7b4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
					break;
 80019ee:	e0d1      	b.n	8001b94 <main+0x794>

				case 14:
					TxData = etc_new_data;
 80019f0:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba8 <main+0x7a8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6d      	ldr	r2, [pc, #436]	@ (8001bac <main+0x7ac>)
 80019f6:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 80019f8:	4b6b      	ldr	r3, [pc, #428]	@ (8001ba8 <main+0x7a8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	dd05      	ble.n	8001a0c <main+0x60c>
 8001a00:	4b69      	ldr	r3, [pc, #420]	@ (8001ba8 <main+0x7a8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	dd03      	ble.n	8001a14 <main+0x614>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4868      	ldr	r0, [pc, #416]	@ (8001bb0 <main+0x7b0>)
 8001a10:	f001 fbe8 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setVelocityGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a14:	4b67      	ldr	r3, [pc, #412]	@ (8001bb4 <main+0x7b4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
					break;
 8001a1a:	e0bb      	b.n	8001b94 <main+0x794>

				case 15:
					TxData = etc_new_data;
 8001a1c:	4b62      	ldr	r3, [pc, #392]	@ (8001ba8 <main+0x7a8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a62      	ldr	r2, [pc, #392]	@ (8001bac <main+0x7ac>)
 8001a22:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a24:	4b60      	ldr	r3, [pc, #384]	@ (8001ba8 <main+0x7a8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	dd05      	ble.n	8001a38 <main+0x638>
 8001a2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ba8 <main+0x7a8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a34:	4293      	cmp	r3, r2
 8001a36:	dd03      	ble.n	8001a40 <main+0x640>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	485d      	ldr	r0, [pc, #372]	@ (8001bb0 <main+0x7b0>)
 8001a3c:	f001 fbd2 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setVelocityGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a40:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb4 <main+0x7b4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
					break;
 8001a46:	e0a5      	b.n	8001b94 <main+0x794>

				case 16:
					TxData = etc_new_data;
 8001a48:	4b57      	ldr	r3, [pc, #348]	@ (8001ba8 <main+0x7a8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a57      	ldr	r2, [pc, #348]	@ (8001bac <main+0x7ac>)
 8001a4e:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a50:	4b55      	ldr	r3, [pc, #340]	@ (8001ba8 <main+0x7a8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	dd05      	ble.n	8001a64 <main+0x664>
 8001a58:	4b53      	ldr	r3, [pc, #332]	@ (8001ba8 <main+0x7a8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a60:	4293      	cmp	r3, r2
 8001a62:	dd03      	ble.n	8001a6c <main+0x66c>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a64:	2101      	movs	r1, #1
 8001a66:	4852      	ldr	r0, [pc, #328]	@ (8001bb0 <main+0x7b0>)
 8001a68:	f001 fbbc 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setPositionGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a6c:	4b51      	ldr	r3, [pc, #324]	@ (8001bb4 <main+0x7b4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
					break;
 8001a72:	e08f      	b.n	8001b94 <main+0x794>

				case 17:
					TxData = etc_new_data;
 8001a74:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba8 <main+0x7a8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a4c      	ldr	r2, [pc, #304]	@ (8001bac <main+0x7ac>)
 8001a7a:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a7c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba8 <main+0x7a8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	dd05      	ble.n	8001a90 <main+0x690>
 8001a84:	4b48      	ldr	r3, [pc, #288]	@ (8001ba8 <main+0x7a8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	dd03      	ble.n	8001a98 <main+0x698>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a90:	2101      	movs	r1, #1
 8001a92:	4847      	ldr	r0, [pc, #284]	@ (8001bb0 <main+0x7b0>)
 8001a94:	f001 fba6 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setPositionGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a98:	4b46      	ldr	r3, [pc, #280]	@ (8001bb4 <main+0x7b4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
					break;
 8001a9e:	e079      	b.n	8001b94 <main+0x794>

				case 18:
					TxData = etc_new_data;
 8001aa0:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <main+0x7a8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a41      	ldr	r2, [pc, #260]	@ (8001bac <main+0x7ac>)
 8001aa6:	6013      	str	r3, [r2, #0]
					if (( etc_new_data < -12000) || ( etc_new_data > 12000)) {//cannot be less than -12000um = -12mm or greater than 12000um = 12mm
 8001aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba8 <main+0x7a8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a42      	ldr	r2, [pc, #264]	@ (8001bb8 <main+0x7b8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	db05      	blt.n	8001abe <main+0x6be>
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba8 <main+0x7a8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001aba:	4293      	cmp	r3, r2
 8001abc:	dd03      	ble.n	8001ac6 <main+0x6c6>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001abe:	2101      	movs	r1, #1
 8001ac0:	483b      	ldr	r0, [pc, #236]	@ (8001bb0 <main+0x7b0>)
 8001ac2:	f001 fb8f 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setAbsoluteTargetPosition(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb4 <main+0x7b4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
					break;
 8001acc:	e062      	b.n	8001b94 <main+0x794>

				case 19:
					TxData = etc_new_data;
 8001ace:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <main+0x7a8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a36      	ldr	r2, [pc, #216]	@ (8001bac <main+0x7ac>)
 8001ad4:	6013      	str	r3, [r2, #0]
					if (( etc_new_data < -12000) || ( etc_new_data > 12000)) {//cannot be less than -12000um = -12mm or greater than 12000um = 12mm
 8001ad6:	4b34      	ldr	r3, [pc, #208]	@ (8001ba8 <main+0x7a8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a37      	ldr	r2, [pc, #220]	@ (8001bb8 <main+0x7b8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	db05      	blt.n	8001aec <main+0x6ec>
 8001ae0:	4b31      	ldr	r3, [pc, #196]	@ (8001ba8 <main+0x7a8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	dd03      	ble.n	8001af4 <main+0x6f4>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001aec:	2101      	movs	r1, #1
 8001aee:	4830      	ldr	r0, [pc, #192]	@ (8001bb0 <main+0x7b0>)
 8001af0:	f001 fb78 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						setIncrementalTargetPosition(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001af4:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <main+0x7b4>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
					break;
 8001afa:	e04b      	b.n	8001b94 <main+0x794>

				case 100:
					TxData = etc_new_data;
 8001afc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba8 <main+0x7a8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2a      	ldr	r2, [pc, #168]	@ (8001bac <main+0x7ac>)
 8001b02:	6013      	str	r3, [r2, #0]
					if ((etc_new_data != 0) && (etc_new_data != 1)) {//cannot be anything other than 0 or 1
 8001b04:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <main+0x7a8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <main+0x71c>
 8001b0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <main+0x7a8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d003      	beq.n	8001b1c <main+0x71c>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001b14:	2101      	movs	r1, #1
 8001b16:	4826      	ldr	r0, [pc, #152]	@ (8001bb0 <main+0x7b0>)
 8001b18:	f001 fb64 	bl	80031e4 <setWrongCommandFlag>
					} else {
//						servoEnable(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001b1c:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <main+0x7b4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
					break;
 8001b22:	e037      	b.n	8001b94 <main+0x794>

				case 101:
					TxData = 0;
 8001b24:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <main+0x7ac>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
//					startHoming(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4820      	ldr	r0, [pc, #128]	@ (8001bb0 <main+0x7b0>)
 8001b2e:	f001 fb59 	bl	80031e4 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <main+0x7b4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
					break;
 8001b38:	e02c      	b.n	8001b94 <main+0x794>

				case 102:
					TxData = 0;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <main+0x7ac>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
//					clearFaults(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b40:	2100      	movs	r1, #0
 8001b42:	481b      	ldr	r0, [pc, #108]	@ (8001bb0 <main+0x7b0>)
 8001b44:	f001 fb4e 	bl	80031e4 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <main+0x7b4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
					break;
 8001b4e:	e021      	b.n	8001b94 <main+0x794>

				case 103:
					TxData = 0;
 8001b50:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <main+0x7ac>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
					//saveParameters(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b56:	2100      	movs	r1, #0
 8001b58:	4815      	ldr	r0, [pc, #84]	@ (8001bb0 <main+0x7b0>)
 8001b5a:	f001 fb43 	bl	80031e4 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <main+0x7b4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
					break;
 8001b64:	e016      	b.n	8001b94 <main+0x794>

				case 104:
					TxData = 0;
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <main+0x7ac>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
					//loadDefaultParameters(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4810      	ldr	r0, [pc, #64]	@ (8001bb0 <main+0x7b0>)
 8001b70:	f001 fb38 	bl	80031e4 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <main+0x7b4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
					break;
 8001b7a:	e00b      	b.n	8001b94 <main+0x794>

				case 105:
					TxData = 0;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <main+0x7ac>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
					//stopMovement(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b82:	2100      	movs	r1, #0
 8001b84:	480a      	ldr	r0, [pc, #40]	@ (8001bb0 <main+0x7b0>)
 8001b86:	f001 fb2d 	bl	80031e4 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <main+0x7b4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
					break;
 8001b90:	e000      	b.n	8001b94 <main+0x794>

				default:
					break;
 8001b92:	bf00      	nop
				}
				etc_old_command = etc_new_command;
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <main+0x7bc>)
 8001b96:	881a      	ldrh	r2, [r3, #0]
 8001b98:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <main+0x7c0>)
 8001b9a:	801a      	strh	r2, [r3, #0]
				etc_old_data = etc_new_data;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	@ (8001ba8 <main+0x7a8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <main+0x7c4>)
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e313      	b.n	80021ce <main+0xdce>
 8001ba6:	bf00      	nop
 8001ba8:	2000032c 	.word	0x2000032c
 8001bac:	20000344 	.word	0x20000344
 8001bb0:	200002c0 	.word	0x200002c0
 8001bb4:	2000031e 	.word	0x2000031e
 8001bb8:	ffffd120 	.word	0xffffd120
 8001bbc:	20000328 	.word	0x20000328
 8001bc0:	20000320 	.word	0x20000320
 8001bc4:	20000324 	.word	0x20000324
		  }
	  } else if (get_command_flag) {
 8001bc8:	4bd7      	ldr	r3, [pc, #860]	@ (8001f28 <main+0xb28>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8296 	beq.w	80020fe <main+0xcfe>
		  switch(etc_new_command) {
 8001bd2:	4bd6      	ldr	r3, [pc, #856]	@ (8001f2c <main+0xb2c>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	3b32      	subs	r3, #50	@ 0x32
 8001bd8:	2b96      	cmp	r3, #150	@ 0x96
 8001bda:	f200 827e 	bhi.w	80020da <main+0xcda>
 8001bde:	a201      	add	r2, pc, #4	@ (adr r2, 8001be4 <main+0x7e4>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001e41 	.word	0x08001e41
 8001be8:	08001e59 	.word	0x08001e59
 8001bec:	08001e69 	.word	0x08001e69
 8001bf0:	08001e85 	.word	0x08001e85
 8001bf4:	08001e9b 	.word	0x08001e9b
 8001bf8:	08001eb1 	.word	0x08001eb1
 8001bfc:	08001ecf 	.word	0x08001ecf
 8001c00:	08001eed 	.word	0x08001eed
 8001c04:	08001f0b 	.word	0x08001f0b
 8001c08:	08001f45 	.word	0x08001f45
 8001c0c:	08001f63 	.word	0x08001f63
 8001c10:	08001f81 	.word	0x08001f81
 8001c14:	08001f9f 	.word	0x08001f9f
 8001c18:	08001fbd 	.word	0x08001fbd
 8001c1c:	08001fdb 	.word	0x08001fdb
 8001c20:	08001ff9 	.word	0x08001ff9
 8001c24:	08002017 	.word	0x08002017
 8001c28:	08002035 	.word	0x08002035
 8001c2c:	08002051 	.word	0x08002051
 8001c30:	0800206d 	.word	0x0800206d
 8001c34:	0800208b 	.word	0x0800208b
 8001c38:	080020db 	.word	0x080020db
 8001c3c:	080020db 	.word	0x080020db
 8001c40:	080020db 	.word	0x080020db
 8001c44:	080020db 	.word	0x080020db
 8001c48:	080020db 	.word	0x080020db
 8001c4c:	080020db 	.word	0x080020db
 8001c50:	080020db 	.word	0x080020db
 8001c54:	080020db 	.word	0x080020db
 8001c58:	080020db 	.word	0x080020db
 8001c5c:	080020db 	.word	0x080020db
 8001c60:	080020db 	.word	0x080020db
 8001c64:	080020db 	.word	0x080020db
 8001c68:	080020db 	.word	0x080020db
 8001c6c:	080020db 	.word	0x080020db
 8001c70:	080020db 	.word	0x080020db
 8001c74:	080020db 	.word	0x080020db
 8001c78:	080020db 	.word	0x080020db
 8001c7c:	080020db 	.word	0x080020db
 8001c80:	080020db 	.word	0x080020db
 8001c84:	080020db 	.word	0x080020db
 8001c88:	080020db 	.word	0x080020db
 8001c8c:	080020db 	.word	0x080020db
 8001c90:	080020db 	.word	0x080020db
 8001c94:	080020db 	.word	0x080020db
 8001c98:	080020db 	.word	0x080020db
 8001c9c:	080020db 	.word	0x080020db
 8001ca0:	080020db 	.word	0x080020db
 8001ca4:	080020db 	.word	0x080020db
 8001ca8:	080020db 	.word	0x080020db
 8001cac:	080020db 	.word	0x080020db
 8001cb0:	080020db 	.word	0x080020db
 8001cb4:	080020db 	.word	0x080020db
 8001cb8:	080020db 	.word	0x080020db
 8001cbc:	080020db 	.word	0x080020db
 8001cc0:	080020db 	.word	0x080020db
 8001cc4:	080020db 	.word	0x080020db
 8001cc8:	080020db 	.word	0x080020db
 8001ccc:	080020db 	.word	0x080020db
 8001cd0:	080020db 	.word	0x080020db
 8001cd4:	080020db 	.word	0x080020db
 8001cd8:	080020db 	.word	0x080020db
 8001cdc:	080020db 	.word	0x080020db
 8001ce0:	080020db 	.word	0x080020db
 8001ce4:	080020db 	.word	0x080020db
 8001ce8:	080020db 	.word	0x080020db
 8001cec:	080020db 	.word	0x080020db
 8001cf0:	080020db 	.word	0x080020db
 8001cf4:	080020db 	.word	0x080020db
 8001cf8:	080020db 	.word	0x080020db
 8001cfc:	080020db 	.word	0x080020db
 8001d00:	080020db 	.word	0x080020db
 8001d04:	080020db 	.word	0x080020db
 8001d08:	080020db 	.word	0x080020db
 8001d0c:	080020db 	.word	0x080020db
 8001d10:	080020db 	.word	0x080020db
 8001d14:	080020db 	.word	0x080020db
 8001d18:	080020db 	.word	0x080020db
 8001d1c:	080020db 	.word	0x080020db
 8001d20:	080020db 	.word	0x080020db
 8001d24:	080020db 	.word	0x080020db
 8001d28:	080020db 	.word	0x080020db
 8001d2c:	080020db 	.word	0x080020db
 8001d30:	080020db 	.word	0x080020db
 8001d34:	080020db 	.word	0x080020db
 8001d38:	080020db 	.word	0x080020db
 8001d3c:	080020db 	.word	0x080020db
 8001d40:	080020db 	.word	0x080020db
 8001d44:	080020db 	.word	0x080020db
 8001d48:	080020db 	.word	0x080020db
 8001d4c:	080020db 	.word	0x080020db
 8001d50:	080020db 	.word	0x080020db
 8001d54:	080020db 	.word	0x080020db
 8001d58:	080020db 	.word	0x080020db
 8001d5c:	080020db 	.word	0x080020db
 8001d60:	080020db 	.word	0x080020db
 8001d64:	080020db 	.word	0x080020db
 8001d68:	080020db 	.word	0x080020db
 8001d6c:	080020db 	.word	0x080020db
 8001d70:	080020db 	.word	0x080020db
 8001d74:	080020db 	.word	0x080020db
 8001d78:	080020db 	.word	0x080020db
 8001d7c:	080020db 	.word	0x080020db
 8001d80:	080020db 	.word	0x080020db
 8001d84:	080020db 	.word	0x080020db
 8001d88:	080020db 	.word	0x080020db
 8001d8c:	080020db 	.word	0x080020db
 8001d90:	080020db 	.word	0x080020db
 8001d94:	080020db 	.word	0x080020db
 8001d98:	080020db 	.word	0x080020db
 8001d9c:	080020db 	.word	0x080020db
 8001da0:	080020db 	.word	0x080020db
 8001da4:	080020db 	.word	0x080020db
 8001da8:	080020db 	.word	0x080020db
 8001dac:	080020db 	.word	0x080020db
 8001db0:	080020db 	.word	0x080020db
 8001db4:	080020db 	.word	0x080020db
 8001db8:	080020db 	.word	0x080020db
 8001dbc:	080020db 	.word	0x080020db
 8001dc0:	080020db 	.word	0x080020db
 8001dc4:	080020db 	.word	0x080020db
 8001dc8:	080020db 	.word	0x080020db
 8001dcc:	080020db 	.word	0x080020db
 8001dd0:	080020db 	.word	0x080020db
 8001dd4:	080020db 	.word	0x080020db
 8001dd8:	080020db 	.word	0x080020db
 8001ddc:	080020db 	.word	0x080020db
 8001de0:	080020db 	.word	0x080020db
 8001de4:	080020db 	.word	0x080020db
 8001de8:	080020db 	.word	0x080020db
 8001dec:	080020db 	.word	0x080020db
 8001df0:	080020db 	.word	0x080020db
 8001df4:	080020db 	.word	0x080020db
 8001df8:	080020db 	.word	0x080020db
 8001dfc:	080020db 	.word	0x080020db
 8001e00:	080020db 	.word	0x080020db
 8001e04:	080020db 	.word	0x080020db
 8001e08:	080020db 	.word	0x080020db
 8001e0c:	080020db 	.word	0x080020db
 8001e10:	080020db 	.word	0x080020db
 8001e14:	080020db 	.word	0x080020db
 8001e18:	080020db 	.word	0x080020db
 8001e1c:	080020db 	.word	0x080020db
 8001e20:	080020db 	.word	0x080020db
 8001e24:	080020db 	.word	0x080020db
 8001e28:	080020db 	.word	0x080020db
 8001e2c:	080020db 	.word	0x080020db
 8001e30:	080020db 	.word	0x080020db
 8001e34:	080020db 	.word	0x080020db
 8001e38:	080020db 	.word	0x080020db
 8001e3c:	080020a9 	.word	0x080020a9
			case 50:
				TxData = (uint32_t)1000;
 8001e40:	4b3b      	ldr	r3, [pc, #236]	@ (8001f30 <main+0xb30>)
 8001e42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e46:	601a      	str	r2, [r3, #0]
				//TxData = getEncoderResolution(&tmc4671_controller);
				setWrongCommandFlag(&tmc4671_controller, false);
 8001e48:	2100      	movs	r1, #0
 8001e4a:	483a      	ldr	r0, [pc, #232]	@ (8001f34 <main+0xb34>)
 8001e4c:	f001 f9ca 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001e50:	4b39      	ldr	r3, [pc, #228]	@ (8001f38 <main+0xb38>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
				break;
 8001e56:	e14b      	b.n	80020f0 <main+0xcf0>

			case 51:
				//TxData = getEncoderDirection(&tmc4671_controller);
				setWrongCommandFlag(&tmc4671_controller, false);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4836      	ldr	r0, [pc, #216]	@ (8001f34 <main+0xb34>)
 8001e5c:	f001 f9c2 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001e60:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <main+0xb38>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
				break;
 8001e66:	e143      	b.n	80020f0 <main+0xcf0>

			case 52:
				// int32_t zero_offset = getZeroOffset(&tmc4671_controller);
				// TxData = (uint32_t) zero_offset;  // Cast int32_t to uint32_t
				 TxData = getZeroOffset(&tmc4671_controller);
 8001e68:	4832      	ldr	r0, [pc, #200]	@ (8001f34 <main+0xb34>)
 8001e6a:	f001 fab1 	bl	80033d0 <getZeroOffset>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a2f      	ldr	r2, [pc, #188]	@ (8001f30 <main+0xb30>)
 8001e72:	6013      	str	r3, [r2, #0]
				 setWrongCommandFlag(&tmc4671_controller, false);
 8001e74:	2100      	movs	r1, #0
 8001e76:	482f      	ldr	r0, [pc, #188]	@ (8001f34 <main+0xb34>)
 8001e78:	f001 f9b4 	bl	80031e4 <setWrongCommandFlag>
				 continuous_tx_flag = true;
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f38 <main+0xb38>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
				 break;
 8001e82:	e135      	b.n	80020f0 <main+0xcf0>

			case 53:
				TxData = -1000;
 8001e84:	4b2a      	ldr	r3, [pc, #168]	@ (8001f30 <main+0xb30>)
 8001e86:	4a2d      	ldr	r2, [pc, #180]	@ (8001f3c <main+0xb3c>)
 8001e88:	601a      	str	r2, [r3, #0]
			//	int32_t soft_pos_limit = getSoftPositiveLimit(&tmc4671_controller);
			//	TxData = (uint32_t) soft_pos_limit;  // Cast int32_t to uint32_t
				//TxData = getSoftPositiveLimit(&tmc4671_controller);
				setWrongCommandFlag(&tmc4671_controller, false);
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4829      	ldr	r0, [pc, #164]	@ (8001f34 <main+0xb34>)
 8001e8e:	f001 f9a9 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001e92:	4b29      	ldr	r3, [pc, #164]	@ (8001f38 <main+0xb38>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
				break;
 8001e98:	e12a      	b.n	80020f0 <main+0xcf0>


			case 54:
				TxData = -80000;
 8001e9a:	4b25      	ldr	r3, [pc, #148]	@ (8001f30 <main+0xb30>)
 8001e9c:	4a28      	ldr	r2, [pc, #160]	@ (8001f40 <main+0xb40>)
 8001e9e:	601a      	str	r2, [r3, #0]
			//	int32_t soft_neg_limit = getSoftNegativeLimit(&tmc4671_controller);
			//	TxData = (uint32_t) soft_neg_limit;  // Cast int32_t to uint32_t
			//	TxData =  getSoftNegativeLimit(&tmc4671_controller);
				setWrongCommandFlag(&tmc4671_controller, false);
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4824      	ldr	r0, [pc, #144]	@ (8001f34 <main+0xb34>)
 8001ea4:	f001 f99e 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ea8:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <main+0xb38>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
				break;
 8001eae:	e11f      	b.n	80020f0 <main+0xcf0>

			case 55:
				TxData = getMaxPositionError(&tmc4671_controller);
 8001eb0:	4820      	ldr	r0, [pc, #128]	@ (8001f34 <main+0xb34>)
 8001eb2:	f001 fb1d 	bl	80034f0 <getMaxPositionError>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <main+0xb30>)
 8001ebc:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	481c      	ldr	r0, [pc, #112]	@ (8001f34 <main+0xb34>)
 8001ec2:	f001 f98f 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <main+0xb38>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
				break;
 8001ecc:	e110      	b.n	80020f0 <main+0xcf0>

			case 56:
				TxData = getCurrentLimitHoming(&tmc4671_controller);
 8001ece:	4819      	ldr	r0, [pc, #100]	@ (8001f34 <main+0xb34>)
 8001ed0:	f001 fa42 	bl	8003358 <getCurrentLimitHoming>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <main+0xb30>)
 8001eda:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001edc:	2100      	movs	r1, #0
 8001ede:	4815      	ldr	r0, [pc, #84]	@ (8001f34 <main+0xb34>)
 8001ee0:	f001 f980 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <main+0xb38>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
				break;
 8001eea:	e101      	b.n	80020f0 <main+0xcf0>

			case 57:
				TxData = getCurrentLimitServo(&tmc4671_controller);
 8001eec:	4811      	ldr	r0, [pc, #68]	@ (8001f34 <main+0xb34>)
 8001eee:	f001 fa3f 	bl	8003370 <getCurrentLimitServo>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <main+0xb30>)
 8001ef8:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001efa:	2100      	movs	r1, #0
 8001efc:	480d      	ldr	r0, [pc, #52]	@ (8001f34 <main+0xb34>)
 8001efe:	f001 f971 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <main+0xb38>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
				break;
 8001f08:	e0f2      	b.n	80020f0 <main+0xcf0>

			case 58:
				TxData = getVoltageLimitHoming(&tmc4671_controller);
 8001f0a:	480a      	ldr	r0, [pc, #40]	@ (8001f34 <main+0xb34>)
 8001f0c:	f001 fa3c 	bl	8003388 <getVoltageLimitHoming>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <main+0xb30>)
 8001f16:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4806      	ldr	r0, [pc, #24]	@ (8001f34 <main+0xb34>)
 8001f1c:	f001 f962 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <main+0xb38>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
				break;
 8001f26:	e0e3      	b.n	80020f0 <main+0xcf0>
 8001f28:	2000031d 	.word	0x2000031d
 8001f2c:	20000328 	.word	0x20000328
 8001f30:	20000344 	.word	0x20000344
 8001f34:	200002c0 	.word	0x200002c0
 8001f38:	2000031e 	.word	0x2000031e
 8001f3c:	fffffc18 	.word	0xfffffc18
 8001f40:	fffec780 	.word	0xfffec780

			case 59:
				TxData = getVelocityLimitServo(&tmc4671_controller);
 8001f44:	488d      	ldr	r0, [pc, #564]	@ (800217c <main+0xd7c>)
 8001f46:	f001 fa2b 	bl	80033a0 <getVelocityLimitServo>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b8c      	ldr	r3, [pc, #560]	@ (8002180 <main+0xd80>)
 8001f50:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f52:	2100      	movs	r1, #0
 8001f54:	4889      	ldr	r0, [pc, #548]	@ (800217c <main+0xd7c>)
 8001f56:	f001 f945 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f5a:	4b8a      	ldr	r3, [pc, #552]	@ (8002184 <main+0xd84>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
				break;
 8001f60:	e0c6      	b.n	80020f0 <main+0xcf0>

			case 60:
				TxData = getTorqueLimitServo(&tmc4671_controller);
 8001f62:	4886      	ldr	r0, [pc, #536]	@ (800217c <main+0xd7c>)
 8001f64:	f001 fa28 	bl	80033b8 <getTorqueLimitServo>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b84      	ldr	r3, [pc, #528]	@ (8002180 <main+0xd80>)
 8001f6e:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f70:	2100      	movs	r1, #0
 8001f72:	4882      	ldr	r0, [pc, #520]	@ (800217c <main+0xd7c>)
 8001f74:	f001 f936 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f78:	4b82      	ldr	r3, [pc, #520]	@ (8002184 <main+0xd84>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
				break;
 8001f7e:	e0b7      	b.n	80020f0 <main+0xcf0>

			case 61:
				TxData = getCurrentGainP(&tmc4671_controller);
 8001f80:	487e      	ldr	r0, [pc, #504]	@ (800217c <main+0xd7c>)
 8001f82:	f001 fae3 	bl	800354c <getCurrentGainP>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002180 <main+0xd80>)
 8001f8c:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	487a      	ldr	r0, [pc, #488]	@ (800217c <main+0xd7c>)
 8001f92:	f001 f927 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f96:	4b7b      	ldr	r3, [pc, #492]	@ (8002184 <main+0xd84>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
				break;
 8001f9c:	e0a8      	b.n	80020f0 <main+0xcf0>

			case 62:
				TxData = getCurrentGainI(&tmc4671_controller);
 8001f9e:	4877      	ldr	r0, [pc, #476]	@ (800217c <main+0xd7c>)
 8001fa0:	f001 fae0 	bl	8003564 <getCurrentGainI>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b75      	ldr	r3, [pc, #468]	@ (8002180 <main+0xd80>)
 8001faa:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fac:	2100      	movs	r1, #0
 8001fae:	4873      	ldr	r0, [pc, #460]	@ (800217c <main+0xd7c>)
 8001fb0:	f001 f918 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001fb4:	4b73      	ldr	r3, [pc, #460]	@ (8002184 <main+0xd84>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
				break;
 8001fba:	e099      	b.n	80020f0 <main+0xcf0>

			case 63:
				TxData = getVelocityGainP(&tmc4671_controller);
 8001fbc:	486f      	ldr	r0, [pc, #444]	@ (800217c <main+0xd7c>)
 8001fbe:	f001 fadd 	bl	800357c <getVelocityGainP>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8002180 <main+0xd80>)
 8001fc8:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fca:	2100      	movs	r1, #0
 8001fcc:	486b      	ldr	r0, [pc, #428]	@ (800217c <main+0xd7c>)
 8001fce:	f001 f909 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001fd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002184 <main+0xd84>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
				break;
 8001fd8:	e08a      	b.n	80020f0 <main+0xcf0>

			case 64:
				TxData = getVelocityGainI(&tmc4671_controller);
 8001fda:	4868      	ldr	r0, [pc, #416]	@ (800217c <main+0xd7c>)
 8001fdc:	f001 fada 	bl	8003594 <getVelocityGainI>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b66      	ldr	r3, [pc, #408]	@ (8002180 <main+0xd80>)
 8001fe6:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4864      	ldr	r0, [pc, #400]	@ (800217c <main+0xd7c>)
 8001fec:	f001 f8fa 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ff0:	4b64      	ldr	r3, [pc, #400]	@ (8002184 <main+0xd84>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
				break;
 8001ff6:	e07b      	b.n	80020f0 <main+0xcf0>

			case 65:
				TxData = getPositionGainP(&tmc4671_controller);
 8001ff8:	4860      	ldr	r0, [pc, #384]	@ (800217c <main+0xd7c>)
 8001ffa:	f001 fad7 	bl	80035ac <getPositionGainP>
 8001ffe:	4603      	mov	r3, r0
 8002000:	461a      	mov	r2, r3
 8002002:	4b5f      	ldr	r3, [pc, #380]	@ (8002180 <main+0xd80>)
 8002004:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002006:	2100      	movs	r1, #0
 8002008:	485c      	ldr	r0, [pc, #368]	@ (800217c <main+0xd7c>)
 800200a:	f001 f8eb 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 800200e:	4b5d      	ldr	r3, [pc, #372]	@ (8002184 <main+0xd84>)
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
				break;
 8002014:	e06c      	b.n	80020f0 <main+0xcf0>

			case 66:
				TxData = getPositionGainI(&tmc4671_controller);
 8002016:	4859      	ldr	r0, [pc, #356]	@ (800217c <main+0xd7c>)
 8002018:	f001 fad4 	bl	80035c4 <getPositionGainI>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	4b57      	ldr	r3, [pc, #348]	@ (8002180 <main+0xd80>)
 8002022:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002024:	2100      	movs	r1, #0
 8002026:	4855      	ldr	r0, [pc, #340]	@ (800217c <main+0xd7c>)
 8002028:	f001 f8dc 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 800202c:	4b55      	ldr	r3, [pc, #340]	@ (8002184 <main+0xd84>)
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
				break;
 8002032:	e05d      	b.n	80020f0 <main+0xcf0>

			case 67:
			//	int32_t target_position = getTargetPosition(&tmc4671_controller);
			//	TxData = (uint32_t) target_position;  // Cast int32_t to uint32_t
				TxData = getTargetPosition(&tmc4671_controller);
 8002034:	4851      	ldr	r0, [pc, #324]	@ (800217c <main+0xd7c>)
 8002036:	f001 fa2b 	bl	8003490 <getTargetPosition>
 800203a:	4603      	mov	r3, r0
 800203c:	4a50      	ldr	r2, [pc, #320]	@ (8002180 <main+0xd80>)
 800203e:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002040:	2100      	movs	r1, #0
 8002042:	484e      	ldr	r0, [pc, #312]	@ (800217c <main+0xd7c>)
 8002044:	f001 f8ce 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002048:	4b4e      	ldr	r3, [pc, #312]	@ (8002184 <main+0xd84>)
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
				break;
 800204e:	e04f      	b.n	80020f0 <main+0xcf0>

			case 68:
			//	int32_t actual_position = getActualPosition(&tmc4671_controller);
			//	TxData = (uint32_t) actual_position;  // Cast int32_t to uint32_t
				TxData = getActualPosition(&tmc4671_controller);
 8002050:	484a      	ldr	r0, [pc, #296]	@ (800217c <main+0xd7c>)
 8002052:	f001 f9ed 	bl	8003430 <getActualPosition>
 8002056:	4603      	mov	r3, r0
 8002058:	4a49      	ldr	r2, [pc, #292]	@ (8002180 <main+0xd80>)
 800205a:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 800205c:	2100      	movs	r1, #0
 800205e:	4847      	ldr	r0, [pc, #284]	@ (800217c <main+0xd7c>)
 8002060:	f001 f8c0 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002064:	4b47      	ldr	r3, [pc, #284]	@ (8002184 <main+0xd84>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
				break;
 800206a:	e041      	b.n	80020f0 <main+0xcf0>

			case 69:
				TxData = getCoilCurrent(&tmc4671_controller);
 800206c:	4843      	ldr	r0, [pc, #268]	@ (800217c <main+0xd7c>)
 800206e:	f001 f967 	bl	8003340 <getCoilCurrent>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	4b42      	ldr	r3, [pc, #264]	@ (8002180 <main+0xd80>)
 8002078:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 800207a:	2100      	movs	r1, #0
 800207c:	483f      	ldr	r0, [pc, #252]	@ (800217c <main+0xd7c>)
 800207e:	f001 f8b1 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002082:	4b40      	ldr	r3, [pc, #256]	@ (8002184 <main+0xd84>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
				break;
 8002088:	e032      	b.n	80020f0 <main+0xcf0>

			case 70:
				TxData = getFirmwareVersion(&tmc4671_controller);
 800208a:	483c      	ldr	r0, [pc, #240]	@ (800217c <main+0xd7c>)
 800208c:	f001 faa6 	bl	80035dc <getFirmwareVersion>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b3a      	ldr	r3, [pc, #232]	@ (8002180 <main+0xd80>)
 8002096:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002098:	2100      	movs	r1, #0
 800209a:	4838      	ldr	r0, [pc, #224]	@ (800217c <main+0xd7c>)
 800209c:	f001 f8a2 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = true;
 80020a0:	4b38      	ldr	r3, [pc, #224]	@ (8002184 <main+0xd84>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
				break;
 80020a6:	e023      	b.n	80020f0 <main+0xcf0>

			case 200:
				TxData = 0;
 80020a8:	4b35      	ldr	r3, [pc, #212]	@ (8002180 <main+0xd80>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
				get_Execution_count++;
 80020ae:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <main+0xd88>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b34      	ldr	r3, [pc, #208]	@ (8002188 <main+0xd88>)
 80020b8:	701a      	strb	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 80020ba:	2100      	movs	r1, #0
 80020bc:	482f      	ldr	r0, [pc, #188]	@ (800217c <main+0xd7c>)
 80020be:	f001 f891 	bl	80031e4 <setWrongCommandFlag>
				TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 80020c2:	4932      	ldr	r1, [pc, #200]	@ (800218c <main+0xd8c>)
 80020c4:	482d      	ldr	r0, [pc, #180]	@ (800217c <main+0xd7c>)
 80020c6:	f001 f89d 	bl	8003204 <getEventStatusWord>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b30      	ldr	r3, [pc, #192]	@ (8002190 <main+0xd90>)
 80020d0:	801a      	strh	r2, [r3, #0]
				continuous_tx_flag = false;
 80020d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002184 <main+0xd84>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
				break;
 80020d8:	e00a      	b.n	80020f0 <main+0xcf0>

			default:
				TxData = 0;
 80020da:	4b29      	ldr	r3, [pc, #164]	@ (8002180 <main+0xd80>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, true);
 80020e0:	2101      	movs	r1, #1
 80020e2:	4826      	ldr	r0, [pc, #152]	@ (800217c <main+0xd7c>)
 80020e4:	f001 f87e 	bl	80031e4 <setWrongCommandFlag>
				continuous_tx_flag = false;
 80020e8:	4b26      	ldr	r3, [pc, #152]	@ (8002184 <main+0xd84>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
				break;
 80020ee:	bf00      	nop
		  }
		  etc_old_command = 0;
 80020f0:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <main+0xd94>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	801a      	strh	r2, [r3, #0]
		  etc_old_data = 0;
 80020f6:	4b28      	ldr	r3, [pc, #160]	@ (8002198 <main+0xd98>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e067      	b.n	80021ce <main+0xdce>
	  } else if (accelerometer_flag) {
 80020fe:	4b27      	ldr	r3, [pc, #156]	@ (800219c <main+0xd9c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d063      	beq.n	80021ce <main+0xdce>
		  switch(etc_new_command) {
 8002106:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <main+0xda0>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	f240 122f 	movw	r2, #303	@ 0x12f
 800210e:	4293      	cmp	r3, r2
 8002110:	d048      	beq.n	80021a4 <main+0xda4>
 8002112:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8002116:	da54      	bge.n	80021c2 <main+0xdc2>
 8002118:	f240 122d 	movw	r2, #301	@ 0x12d
 800211c:	4293      	cmp	r3, r2
 800211e:	d003      	beq.n	8002128 <main+0xd28>
 8002120:	f5b3 7f97 	cmp.w	r3, #302	@ 0x12e
 8002124:	d015      	beq.n	8002152 <main+0xd52>
 8002126:	e04c      	b.n	80021c2 <main+0xdc2>
		  case 301:
			  get_Execution_count++;
 8002128:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <main+0xd88>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <main+0xd88>)
 8002132:	701a      	strb	r2, [r3, #0]
			  setWrongCommandFlag(&tmc4671_controller, false);
 8002134:	2100      	movs	r1, #0
 8002136:	4811      	ldr	r0, [pc, #68]	@ (800217c <main+0xd7c>)
 8002138:	f001 f854 	bl	80031e4 <setWrongCommandFlag>
			  int32_t Accel_x = getAcceleration('X');
 800213c:	2058      	movs	r0, #88	@ 0x58
 800213e:	f7fe fe9b 	bl	8000e78 <getAcceleration>
 8002142:	6078      	str	r0, [r7, #4]
			  TxData =  Accel_x;
 8002144:	4a0e      	ldr	r2, [pc, #56]	@ (8002180 <main+0xd80>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
			  continuous_tx_flag = true;
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <main+0xd84>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
			  break;
 8002150:	e037      	b.n	80021c2 <main+0xdc2>

		  case 302:
			  get_Execution_count++;
 8002152:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <main+0xd88>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <main+0xd88>)
 800215c:	701a      	strb	r2, [r3, #0]
			  setWrongCommandFlag(&tmc4671_controller, false);
 800215e:	2100      	movs	r1, #0
 8002160:	4806      	ldr	r0, [pc, #24]	@ (800217c <main+0xd7c>)
 8002162:	f001 f83f 	bl	80031e4 <setWrongCommandFlag>
			  int32_t Accel_y = getAcceleration('Y');
 8002166:	2059      	movs	r0, #89	@ 0x59
 8002168:	f7fe fe86 	bl	8000e78 <getAcceleration>
 800216c:	60b8      	str	r0, [r7, #8]
			  TxData = Accel_y;
 800216e:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <main+0xd80>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	6013      	str	r3, [r2, #0]
			  continuous_tx_flag = true;
 8002174:	4b03      	ldr	r3, [pc, #12]	@ (8002184 <main+0xd84>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
			  break;
 800217a:	e022      	b.n	80021c2 <main+0xdc2>
 800217c:	200002c0 	.word	0x200002c0
 8002180:	20000344 	.word	0x20000344
 8002184:	2000031e 	.word	0x2000031e
 8002188:	2000034c 	.word	0x2000034c
 800218c:	2000034a 	.word	0x2000034a
 8002190:	20000348 	.word	0x20000348
 8002194:	20000320 	.word	0x20000320
 8002198:	20000324 	.word	0x20000324
 800219c:	2000031f 	.word	0x2000031f
 80021a0:	20000328 	.word	0x20000328

		  case 303:
			  setWrongCommandFlag(&tmc4671_controller, false);
 80021a4:	2100      	movs	r1, #0
 80021a6:	483e      	ldr	r0, [pc, #248]	@ (80022a0 <main+0xea0>)
 80021a8:	f001 f81c 	bl	80031e4 <setWrongCommandFlag>
			  int32_t Accel_z = getAcceleration('Z');
 80021ac:	205a      	movs	r0, #90	@ 0x5a
 80021ae:	f7fe fe63 	bl	8000e78 <getAcceleration>
 80021b2:	60f8      	str	r0, [r7, #12]
			  TxData = Accel_z;
 80021b4:	4a3b      	ldr	r2, [pc, #236]	@ (80022a4 <main+0xea4>)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6013      	str	r3, [r2, #0]
			  continuous_tx_flag = true;
 80021ba:	4b3b      	ldr	r3, [pc, #236]	@ (80022a8 <main+0xea8>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
			  break;
 80021c0:	bf00      	nop
		  }
		  etc_old_command = 0;
 80021c2:	4b3a      	ldr	r3, [pc, #232]	@ (80022ac <main+0xeac>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	801a      	strh	r2, [r3, #0]
		  etc_old_data = 0;
 80021c8:	4b39      	ldr	r3, [pc, #228]	@ (80022b0 <main+0xeb0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
		  no_error_drive = true;
	  }*/

	  /*---------------------------TRANSMIT DATA TO ETHERCAT ---------------------------------------------*/

	  if (set_command_flag) {
 80021ce:	4b39      	ldr	r3, [pc, #228]	@ (80022b4 <main+0xeb4>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d024      	beq.n	8002220 <main+0xe20>
		  if (!continuous_tx_flag) {
 80021d6:	4b34      	ldr	r3, [pc, #208]	@ (80022a8 <main+0xea8>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	f083 0301 	eor.w	r3, r3, #1
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01d      	beq.n	8002220 <main+0xe20>
			  set_sent_count++;
 80021e4:	4b34      	ldr	r3, [pc, #208]	@ (80022b8 <main+0xeb8>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b32      	ldr	r3, [pc, #200]	@ (80022b8 <main+0xeb8>)
 80021ee:	701a      	strb	r2, [r3, #0]
			  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 80021f0:	4932      	ldr	r1, [pc, #200]	@ (80022bc <main+0xebc>)
 80021f2:	482b      	ldr	r0, [pc, #172]	@ (80022a0 <main+0xea0>)
 80021f4:	f001 f806 	bl	8003204 <getEventStatusWord>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b30      	ldr	r3, [pc, #192]	@ (80022c0 <main+0xec0>)
 80021fe:	801a      	strh	r2, [r3, #0]
			  Etc_Buffer_In.LANLong[0] = ((uint32_t)TxStatus << 16) | (uint32_t)etc_new_command;
 8002200:	4b2f      	ldr	r3, [pc, #188]	@ (80022c0 <main+0xec0>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	4a2f      	ldr	r2, [pc, #188]	@ (80022c4 <main+0xec4>)
 8002208:	8812      	ldrh	r2, [r2, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	4a2e      	ldr	r2, [pc, #184]	@ (80022c8 <main+0xec8>)
 800220e:	6013      	str	r3, [r2, #0]
			  Etc_Buffer_In.LANLong[1] = TxData;
 8002210:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <main+0xea4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b2c      	ldr	r3, [pc, #176]	@ (80022c8 <main+0xec8>)
 8002218:	605a      	str	r2, [r3, #4]
			  continuous_tx_flag = true;  // Mark that data has been sent
 800221a:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <main+0xea8>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if (get_command_flag) {
 8002220:	4b2a      	ldr	r3, [pc, #168]	@ (80022cc <main+0xecc>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d019      	beq.n	800225c <main+0xe5c>
		  get_sent_count++;
 8002228:	4b29      	ldr	r3, [pc, #164]	@ (80022d0 <main+0xed0>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	3301      	adds	r3, #1
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b27      	ldr	r3, [pc, #156]	@ (80022d0 <main+0xed0>)
 8002232:	701a      	strb	r2, [r3, #0]
		  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 8002234:	4921      	ldr	r1, [pc, #132]	@ (80022bc <main+0xebc>)
 8002236:	481a      	ldr	r0, [pc, #104]	@ (80022a0 <main+0xea0>)
 8002238:	f000 ffe4 	bl	8003204 <getEventStatusWord>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	4b1f      	ldr	r3, [pc, #124]	@ (80022c0 <main+0xec0>)
 8002242:	801a      	strh	r2, [r3, #0]
		  Etc_Buffer_In.LANLong[0] = ((uint32_t) TxStatus << 16) | (uint32_t) etc_new_command;
 8002244:	4b1e      	ldr	r3, [pc, #120]	@ (80022c0 <main+0xec0>)
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	041b      	lsls	r3, r3, #16
 800224a:	4a1e      	ldr	r2, [pc, #120]	@ (80022c4 <main+0xec4>)
 800224c:	8812      	ldrh	r2, [r2, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	4a1d      	ldr	r2, [pc, #116]	@ (80022c8 <main+0xec8>)
 8002252:	6013      	str	r3, [r2, #0]
		 // Etc_Buffer_In.LANLong[1] = TxData;
		  Etc_Buffer_In.LANInt[1] = TxData;
 8002254:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <main+0xea4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1b      	ldr	r2, [pc, #108]	@ (80022c8 <main+0xec8>)
 800225a:	6053      	str	r3, [r2, #4]
	  }

	  if(accelerometer_flag) {
 800225c:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <main+0xed4>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	f43f a8f7 	beq.w	8001454 <main+0x54>
		  adxl_sent_count++;
 8002266:	4b1c      	ldr	r3, [pc, #112]	@ (80022d8 <main+0xed8>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <main+0xed8>)
 8002270:	701a      	strb	r2, [r3, #0]
		  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 8002272:	4912      	ldr	r1, [pc, #72]	@ (80022bc <main+0xebc>)
 8002274:	480a      	ldr	r0, [pc, #40]	@ (80022a0 <main+0xea0>)
 8002276:	f000 ffc5 	bl	8003204 <getEventStatusWord>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <main+0xec0>)
 8002280:	801a      	strh	r2, [r3, #0]
	       Etc_Buffer_In.LANLong[0] = ((uint32_t) TxStatus << 16) | (uint32_t) etc_new_command;
 8002282:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <main+0xec0>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	4a0e      	ldr	r2, [pc, #56]	@ (80022c4 <main+0xec4>)
 800228a:	8812      	ldrh	r2, [r2, #0]
 800228c:	4313      	orrs	r3, r2
 800228e:	4a0e      	ldr	r2, [pc, #56]	@ (80022c8 <main+0xec8>)
 8002290:	6013      	str	r3, [r2, #0]
		  Etc_Buffer_In.LANLong[1] = (int32_t)TxData;
 8002292:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <main+0xea4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <main+0xec8>)
 800229a:	605a      	str	r2, [r3, #4]
	  if (pcap_init_ok) {
 800229c:	f7ff b8da 	b.w	8001454 <main+0x54>
 80022a0:	200002c0 	.word	0x200002c0
 80022a4:	20000344 	.word	0x20000344
 80022a8:	2000031e 	.word	0x2000031e
 80022ac:	20000320 	.word	0x20000320
 80022b0:	20000324 	.word	0x20000324
 80022b4:	2000031c 	.word	0x2000031c
 80022b8:	2000034d 	.word	0x2000034d
 80022bc:	2000034a 	.word	0x2000034a
 80022c0:	20000348 	.word	0x20000348
 80022c4:	20000328 	.word	0x20000328
 80022c8:	200000a4 	.word	0x200000a4
 80022cc:	2000031d 	.word	0x2000031d
 80022d0:	2000034e 	.word	0x2000034e
 80022d4:	2000031f 	.word	0x2000031f
 80022d8:	2000034f 	.word	0x2000034f

080022dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b094      	sub	sp, #80	@ 0x50
 80022e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e2:	f107 0320 	add.w	r3, r7, #32
 80022e6:	2230      	movs	r2, #48	@ 0x30
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f004 ff32 	bl	8007154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <SystemClock_Config+0xc8>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	4a26      	ldr	r2, [pc, #152]	@ (80023a4 <SystemClock_Config+0xc8>)
 800230a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800230e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002310:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <SystemClock_Config+0xc8>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800231c:	2300      	movs	r3, #0
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	4b21      	ldr	r3, [pc, #132]	@ (80023a8 <SystemClock_Config+0xcc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a20      	ldr	r2, [pc, #128]	@ (80023a8 <SystemClock_Config+0xcc>)
 8002326:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b1e      	ldr	r3, [pc, #120]	@ (80023a8 <SystemClock_Config+0xcc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002338:	2301      	movs	r3, #1
 800233a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800233c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002342:	2302      	movs	r3, #2
 8002344:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002346:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800234a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800234c:	2319      	movs	r3, #25
 800234e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002350:	23c0      	movs	r3, #192	@ 0xc0
 8002352:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002354:	2302      	movs	r3, #2
 8002356:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002358:	2304      	movs	r3, #4
 800235a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800235c:	f107 0320 	add.w	r3, r7, #32
 8002360:	4618      	mov	r0, r3
 8002362:	f002 ffa7 	bl	80052b4 <HAL_RCC_OscConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800236c:	f000 fa1e 	bl	80027ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002370:	230f      	movs	r3, #15
 8002372:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002374:	2302      	movs	r3, #2
 8002376:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800237c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002380:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	2103      	movs	r1, #3
 800238c:	4618      	mov	r0, r3
 800238e:	f003 fa09 	bl	80057a4 <HAL_RCC_ClockConfig>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002398:	f000 fa08 	bl	80027ac <Error_Handler>
  }
}
 800239c:	bf00      	nop
 800239e:	3750      	adds	r7, #80	@ 0x50
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40007000 	.word	0x40007000

080023ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023b2:	4a13      	ldr	r2, [pc, #76]	@ (8002400 <MX_I2C1_Init+0x54>)
 80023b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023b8:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <MX_I2C1_Init+0x58>)
 80023ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023bc:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023d0:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023d6:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023dc:	4b07      	ldr	r3, [pc, #28]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023e8:	4804      	ldr	r0, [pc, #16]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023ea:	f001 fc4f 	bl	8003c8c <HAL_I2C_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023f4:	f000 f9da 	bl	80027ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200000c4 	.word	0x200000c4
 8002400:	40005400 	.word	0x40005400
 8002404:	000186a0 	.word	0x000186a0

08002408 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800240c:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <MX_I2C2_Init+0x50>)
 800240e:	4a13      	ldr	r2, [pc, #76]	@ (800245c <MX_I2C2_Init+0x54>)
 8002410:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002412:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <MX_I2C2_Init+0x50>)
 8002414:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <MX_I2C2_Init+0x58>)
 8002416:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002418:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <MX_I2C2_Init+0x50>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800241e:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <MX_I2C2_Init+0x50>)
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002424:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <MX_I2C2_Init+0x50>)
 8002426:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800242a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800242c:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <MX_I2C2_Init+0x50>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <MX_I2C2_Init+0x50>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002438:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <MX_I2C2_Init+0x50>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <MX_I2C2_Init+0x50>)
 8002440:	2200      	movs	r2, #0
 8002442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002444:	4804      	ldr	r0, [pc, #16]	@ (8002458 <MX_I2C2_Init+0x50>)
 8002446:	f001 fc21 	bl	8003c8c <HAL_I2C_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002450:	f000 f9ac 	bl	80027ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000118 	.word	0x20000118
 800245c:	40005800 	.word	0x40005800
 8002460:	000186a0 	.word	0x000186a0

08002464 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002468:	4b17      	ldr	r3, [pc, #92]	@ (80024c8 <MX_SPI1_Init+0x64>)
 800246a:	4a18      	ldr	r2, [pc, #96]	@ (80024cc <MX_SPI1_Init+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800246e:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <MX_SPI1_Init+0x64>)
 8002470:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002474:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002476:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <MX_SPI1_Init+0x64>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800247c:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <MX_SPI1_Init+0x64>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <MX_SPI1_Init+0x64>)
 8002484:	2202      	movs	r2, #2
 8002486:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002488:	4b0f      	ldr	r3, [pc, #60]	@ (80024c8 <MX_SPI1_Init+0x64>)
 800248a:	2201      	movs	r2, #1
 800248c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800248e:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <MX_SPI1_Init+0x64>)
 8002490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002494:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002496:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <MX_SPI1_Init+0x64>)
 8002498:	2220      	movs	r2, #32
 800249a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800249c:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <MX_SPI1_Init+0x64>)
 800249e:	2200      	movs	r2, #0
 80024a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024a2:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <MX_SPI1_Init+0x64>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a8:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <MX_SPI1_Init+0x64>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024ae:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <MX_SPI1_Init+0x64>)
 80024b0:	220a      	movs	r2, #10
 80024b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024b4:	4804      	ldr	r0, [pc, #16]	@ (80024c8 <MX_SPI1_Init+0x64>)
 80024b6:	f003 fb41 	bl	8005b3c <HAL_SPI_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024c0:	f000 f974 	bl	80027ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	2000016c 	.word	0x2000016c
 80024cc:	40013000 	.word	0x40013000

080024d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80024d4:	4b17      	ldr	r3, [pc, #92]	@ (8002534 <MX_SPI2_Init+0x64>)
 80024d6:	4a18      	ldr	r2, [pc, #96]	@ (8002538 <MX_SPI2_Init+0x68>)
 80024d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024da:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <MX_SPI2_Init+0x64>)
 80024dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024e2:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <MX_SPI2_Init+0x64>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <MX_SPI2_Init+0x64>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80024ee:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <MX_SPI2_Init+0x64>)
 80024f0:	2202      	movs	r2, #2
 80024f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <MX_SPI2_Init+0x64>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <MX_SPI2_Init+0x64>)
 80024fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002500:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002502:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <MX_SPI2_Init+0x64>)
 8002504:	2218      	movs	r2, #24
 8002506:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <MX_SPI2_Init+0x64>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <MX_SPI2_Init+0x64>)
 8002510:	2200      	movs	r2, #0
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002514:	4b07      	ldr	r3, [pc, #28]	@ (8002534 <MX_SPI2_Init+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <MX_SPI2_Init+0x64>)
 800251c:	220a      	movs	r2, #10
 800251e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002520:	4804      	ldr	r0, [pc, #16]	@ (8002534 <MX_SPI2_Init+0x64>)
 8002522:	f003 fb0b 	bl	8005b3c <HAL_SPI_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800252c:	f000 f93e 	bl	80027ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200001c4 	.word	0x200001c4
 8002538:	40003800 	.word	0x40003800

0800253c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002540:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <MX_SPI5_Init+0x64>)
 8002542:	4a18      	ldr	r2, [pc, #96]	@ (80025a4 <MX_SPI5_Init+0x68>)
 8002544:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002546:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <MX_SPI5_Init+0x64>)
 8002548:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800254c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800254e:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <MX_SPI5_Init+0x64>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002554:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <MX_SPI5_Init+0x64>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800255a:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <MX_SPI5_Init+0x64>)
 800255c:	2202      	movs	r2, #2
 800255e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002560:	4b0f      	ldr	r3, [pc, #60]	@ (80025a0 <MX_SPI5_Init+0x64>)
 8002562:	2201      	movs	r2, #1
 8002564:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002566:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <MX_SPI5_Init+0x64>)
 8002568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800256c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800256e:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <MX_SPI5_Init+0x64>)
 8002570:	2208      	movs	r2, #8
 8002572:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002574:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <MX_SPI5_Init+0x64>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <MX_SPI5_Init+0x64>)
 800257c:	2200      	movs	r2, #0
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002580:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <MX_SPI5_Init+0x64>)
 8002582:	2200      	movs	r2, #0
 8002584:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <MX_SPI5_Init+0x64>)
 8002588:	220a      	movs	r2, #10
 800258a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800258c:	4804      	ldr	r0, [pc, #16]	@ (80025a0 <MX_SPI5_Init+0x64>)
 800258e:	f003 fad5 	bl	8005b3c <HAL_SPI_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002598:	f000 f908 	bl	80027ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000021c 	.word	0x2000021c
 80025a4:	40015000 	.word	0x40015000

080025a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025bc:	463b      	mov	r3, r7
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025c4:	4b1d      	ldr	r3, [pc, #116]	@ (800263c <MX_TIM4_Init+0x94>)
 80025c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002640 <MX_TIM4_Init+0x98>)
 80025c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 80025ca:	4b1c      	ldr	r3, [pc, #112]	@ (800263c <MX_TIM4_Init+0x94>)
 80025cc:	225f      	movs	r2, #95	@ 0x5f
 80025ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d0:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <MX_TIM4_Init+0x94>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80025d6:	4b19      	ldr	r3, [pc, #100]	@ (800263c <MX_TIM4_Init+0x94>)
 80025d8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80025dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025de:	4b17      	ldr	r3, [pc, #92]	@ (800263c <MX_TIM4_Init+0x94>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b15      	ldr	r3, [pc, #84]	@ (800263c <MX_TIM4_Init+0x94>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025ea:	4814      	ldr	r0, [pc, #80]	@ (800263c <MX_TIM4_Init+0x94>)
 80025ec:	f004 f87c 	bl	80066e8 <HAL_TIM_Base_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80025f6:	f000 f8d9 	bl	80027ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	4619      	mov	r1, r3
 8002606:	480d      	ldr	r0, [pc, #52]	@ (800263c <MX_TIM4_Init+0x94>)
 8002608:	f004 f93f 	bl	800688a <HAL_TIM_ConfigClockSource>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002612:	f000 f8cb 	bl	80027ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800261e:	463b      	mov	r3, r7
 8002620:	4619      	mov	r1, r3
 8002622:	4806      	ldr	r0, [pc, #24]	@ (800263c <MX_TIM4_Init+0x94>)
 8002624:	f004 fb1e 	bl	8006c64 <HAL_TIMEx_MasterConfigSynchronization>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800262e:	f000 f8bd 	bl	80027ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000274 	.word	0x20000274
 8002640:	40000800 	.word	0x40000800

08002644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	@ 0x28
 8002648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	4b4f      	ldr	r3, [pc, #316]	@ (800279c <MX_GPIO_Init+0x158>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	4a4e      	ldr	r2, [pc, #312]	@ (800279c <MX_GPIO_Init+0x158>)
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	6313      	str	r3, [r2, #48]	@ 0x30
 800266a:	4b4c      	ldr	r3, [pc, #304]	@ (800279c <MX_GPIO_Init+0x158>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b48      	ldr	r3, [pc, #288]	@ (800279c <MX_GPIO_Init+0x158>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	4a47      	ldr	r2, [pc, #284]	@ (800279c <MX_GPIO_Init+0x158>)
 8002680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002684:	6313      	str	r3, [r2, #48]	@ 0x30
 8002686:	4b45      	ldr	r3, [pc, #276]	@ (800279c <MX_GPIO_Init+0x158>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	4b41      	ldr	r3, [pc, #260]	@ (800279c <MX_GPIO_Init+0x158>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	4a40      	ldr	r2, [pc, #256]	@ (800279c <MX_GPIO_Init+0x158>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a2:	4b3e      	ldr	r3, [pc, #248]	@ (800279c <MX_GPIO_Init+0x158>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	4b3a      	ldr	r3, [pc, #232]	@ (800279c <MX_GPIO_Init+0x158>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	4a39      	ldr	r2, [pc, #228]	@ (800279c <MX_GPIO_Init+0x158>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026be:	4b37      	ldr	r3, [pc, #220]	@ (800279c <MX_GPIO_Init+0x158>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80026ca:	2200      	movs	r2, #0
 80026cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026d0:	4833      	ldr	r0, [pc, #204]	@ (80027a0 <MX_GPIO_Init+0x15c>)
 80026d2:	f001 fac1 	bl	8003c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TMC4671_CS_Pin|ADXL345_CS_Pin|LAN9252_CS_Pin, GPIO_PIN_RESET);
 80026d6:	2200      	movs	r2, #0
 80026d8:	f640 2108 	movw	r1, #2568	@ 0xa08
 80026dc:	4831      	ldr	r0, [pc, #196]	@ (80027a4 <MX_GPIO_Init+0x160>)
 80026de:	f001 fabb 	bl	8003c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CTRL_EN_Pin, GPIO_PIN_RESET);
 80026e2:	2200      	movs	r2, #0
 80026e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026e8:	482f      	ldr	r0, [pc, #188]	@ (80027a8 <MX_GPIO_Init+0x164>)
 80026ea:	f001 fab5 	bl	8003c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80026ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f4:	2301      	movs	r3, #1
 80026f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4619      	mov	r1, r3
 8002706:	4826      	ldr	r0, [pc, #152]	@ (80027a0 <MX_GPIO_Init+0x15c>)
 8002708:	f001 f922 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC4671_CS_Pin ADXL345_CS_Pin LAN9252_CS_Pin */
  GPIO_InitStruct.Pin = TMC4671_CS_Pin|ADXL345_CS_Pin|LAN9252_CS_Pin;
 800270c:	f640 2308 	movw	r3, #2568	@ 0xa08
 8002710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002712:	2301      	movs	r3, #1
 8002714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	4619      	mov	r1, r3
 8002724:	481f      	ldr	r0, [pc, #124]	@ (80027a4 <MX_GPIO_Init+0x160>)
 8002726:	f001 f913 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC6100_CS_Pin */
  GPIO_InitStruct.Pin = TMC6100_CS_Pin;
 800272a:	2310      	movs	r3, #16
 800272c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMC6100_CS_GPIO_Port, &GPIO_InitStruct);
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	4619      	mov	r1, r3
 800273c:	4819      	ldr	r0, [pc, #100]	@ (80027a4 <MX_GPIO_Init+0x160>)
 800273e:	f001 f907 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC_STATUS_Pin */
  GPIO_InitStruct.Pin = TMC_STATUS_Pin;
 8002742:	2302      	movs	r3, #2
 8002744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMC_STATUS_GPIO_Port, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	4814      	ldr	r0, [pc, #80]	@ (80027a8 <MX_GPIO_Init+0x164>)
 8002756:	f001 f8fb 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_INDEX_Pin */
  GPIO_InitStruct.Pin = ENC_INDEX_Pin;
 800275a:	2304      	movs	r3, #4
 800275c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800275e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_INDEX_GPIO_Port, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	480e      	ldr	r0, [pc, #56]	@ (80027a8 <MX_GPIO_Init+0x164>)
 8002770:	f001 f8ee 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTRL_EN_Pin */
  GPIO_InitStruct.Pin = CTRL_EN_Pin;
 8002774:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277a:	2301      	movs	r3, #1
 800277c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CTRL_EN_GPIO_Port, &GPIO_InitStruct);
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4619      	mov	r1, r3
 800278c:	4806      	ldr	r0, [pc, #24]	@ (80027a8 <MX_GPIO_Init+0x164>)
 800278e:	f001 f8df 	bl	8003950 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002792:	bf00      	nop
 8002794:	3728      	adds	r7, #40	@ 0x28
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020800 	.word	0x40020800
 80027a4:	40020000 	.word	0x40020000
 80027a8:	40020400 	.word	0x40020400

080027ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b0:	b672      	cpsid	i
}
 80027b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <Error_Handler+0x8>

080027b8 <initMovingAverage>:
#include "moving_average.h"

void initMovingAverage(MovingAverage *mAvg) {
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MOVING_AVERAGE_LENGTH; i++) {
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	e007      	b.n	80027d6 <initMovingAverage+0x1e>
        mAvg->buffer[i] = 0;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	2100      	movs	r1, #0
 80027cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < MOVING_AVERAGE_LENGTH; i++) {
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3301      	adds	r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b0e      	cmp	r3, #14
 80027da:	ddf4      	ble.n	80027c6 <initMovingAverage+0xe>
    }
    mAvg->counter = 0;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
    mAvg->sum = 0;
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    mAvg->out = 0;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <updateMovingAverage>:

void updateMovingAverage(MovingAverage *mAvg, uint32_t newValue) {
 8002802:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
    mAvg->sum -= mAvg->buffer[mAvg->counter];
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002814:	68f9      	ldr	r1, [r7, #12]
 8002816:	8f89      	ldrh	r1, [r1, #60]	@ 0x3c
 8002818:	4608      	mov	r0, r1
 800281a:	68f9      	ldr	r1, [r7, #12]
 800281c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002820:	2000      	movs	r0, #0
 8002822:	4688      	mov	r8, r1
 8002824:	4681      	mov	r9, r0
 8002826:	ebb2 0108 	subs.w	r1, r2, r8
 800282a:	6039      	str	r1, [r7, #0]
 800282c:	eb63 0309 	sbc.w	r3, r3, r9
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002838:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
    mAvg->buffer[mAvg->counter] = newValue;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002840:	4619      	mov	r1, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    mAvg->sum += newValue;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	2000      	movs	r0, #0
 8002854:	460c      	mov	r4, r1
 8002856:	4605      	mov	r5, r0
 8002858:	eb12 0a04 	adds.w	sl, r2, r4
 800285c:	eb43 0b05 	adc.w	fp, r3, r5
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	e9c3 ab12 	strd	sl, fp, [r3, #72]	@ 0x48

    mAvg->counter++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800286a:	3301      	adds	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	879a      	strh	r2, [r3, #60]	@ 0x3c
    if (mAvg->counter >= MOVING_AVERAGE_LENGTH) {
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002876:	2b0e      	cmp	r3, #14
 8002878:	d902      	bls.n	8002880 <updateMovingAverage+0x7e>
        mAvg->counter = 0;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	879a      	strh	r2, [r3, #60]	@ 0x3c
    }

    mAvg->out = mAvg->sum / MOVING_AVERAGE_LENGTH;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8002886:	f04f 020f 	mov.w	r2, #15
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	f7fe f90d 	bl	8000aac <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080028a4 <pcap_init>:
uint32_t pcap_capval_check1;
uint32_t pcap_capval_check2;
uint32_t pcap_capval_avg;

// init / check the pcap interface on I2C, return true if init ok
bool pcap_init(){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af02      	add	r7, sp, #8
	uint8_t buf[10] = {0};
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	f107 0308 	add.w	r3, r7, #8
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret;
    // read and check TEST data 1 byte
	buf[0] = PCAP_TEST_ADDR;
 80028b8:	237e      	movs	r3, #126	@ 0x7e
 80028ba:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 80028bc:	1d3a      	adds	r2, r7, #4
 80028be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2301      	movs	r3, #1
 80028c6:	2150      	movs	r1, #80	@ 0x50
 80028c8:	481c      	ldr	r0, [pc, #112]	@ (800293c <pcap_init+0x98>)
 80028ca:	f001 fb23 	bl	8003f14 <HAL_I2C_Master_Transmit>
 80028ce:	4603      	mov	r3, r0
 80028d0:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <pcap_init+0x42>
		printf("Error sending Pcap test command, code = %d\n", ret);
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	4619      	mov	r1, r3
 80028dc:	4818      	ldr	r0, [pc, #96]	@ (8002940 <pcap_init+0x9c>)
 80028de:	f004 faf1 	bl	8006ec4 <iprintf>
		return false;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e025      	b.n	8002932 <pcap_init+0x8e>
	}else{
		ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 80028e6:	1d3a      	adds	r2, r7, #4
 80028e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2301      	movs	r3, #1
 80028f0:	2150      	movs	r1, #80	@ 0x50
 80028f2:	4812      	ldr	r0, [pc, #72]	@ (800293c <pcap_init+0x98>)
 80028f4:	f001 fc0c 	bl	8004110 <HAL_I2C_Master_Receive>
 80028f8:	4603      	mov	r3, r0
 80028fa:	73fb      	strb	r3, [r7, #15]
		if(ret != HAL_OK){
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <pcap_init+0x6c>
			printf("Bad response while reading Pcap test command, bytes received = %d\n", ret);
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	4619      	mov	r1, r3
 8002906:	480f      	ldr	r0, [pc, #60]	@ (8002944 <pcap_init+0xa0>)
 8002908:	f004 fadc 	bl	8006ec4 <iprintf>
			return false;
 800290c:	2300      	movs	r3, #0
 800290e:	e010      	b.n	8002932 <pcap_init+0x8e>
		}else{
			if(buf[0] != PCAP_TEST_DATA){
 8002910:	793b      	ldrb	r3, [r7, #4]
 8002912:	2b11      	cmp	r3, #17
 8002914:	d006      	beq.n	8002924 <pcap_init+0x80>
				printf("Bad response received from Pcap test command, data received = %x\n", buf[0]);
 8002916:	793b      	ldrb	r3, [r7, #4]
 8002918:	4619      	mov	r1, r3
 800291a:	480b      	ldr	r0, [pc, #44]	@ (8002948 <pcap_init+0xa4>)
 800291c:	f004 fad2 	bl	8006ec4 <iprintf>
				return false;
 8002920:	2300      	movs	r3, #0
 8002922:	e006      	b.n	8002932 <pcap_init+0x8e>
			}
		}
	}
	initMovingAverage(&mAvg);
 8002924:	4809      	ldr	r0, [pc, #36]	@ (800294c <pcap_init+0xa8>)
 8002926:	f7ff ff47 	bl	80027b8 <initMovingAverage>


	printf("Pcap test command succeeded\n");
 800292a:	4809      	ldr	r0, [pc, #36]	@ (8002950 <pcap_init+0xac>)
 800292c:	f004 fb32 	bl	8006f94 <puts>
	return true;
 8002930:	2301      	movs	r3, #1
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200000c4 	.word	0x200000c4
 8002940:	08007c74 	.word	0x08007c74
 8002944:	08007ca0 	.word	0x08007ca0
 8002948:	08007ce4 	.word	0x08007ce4
 800294c:	20000350 	.word	0x20000350
 8002950:	08007d28 	.word	0x08007d28

08002954 <pcap_scan>:

// one pcap scan - get sts, cap, temp values
PcapErrorStatus pcap_scan(){
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af02      	add	r7, sp, #8
	uint8_t buf[10] = {0};
 800295a:	2300      	movs	r3, #0
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret;
	PcapErrorStatus errorStatus = PCAP_NO_ERROR;
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]

	// read and display error status 2 bytes
	buf[0] = PCAP_STS_ADDR;
 800296a:	2361      	movs	r3, #97	@ 0x61
 800296c:	703b      	strb	r3, [r7, #0]
	ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 800296e:	463a      	mov	r2, r7
 8002970:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	2301      	movs	r3, #1
 8002978:	2150      	movs	r1, #80	@ 0x50
 800297a:	48a5      	ldr	r0, [pc, #660]	@ (8002c10 <pcap_scan+0x2bc>)
 800297c:	f001 faca 	bl	8003f14 <HAL_I2C_Master_Transmit>
 8002980:	4603      	mov	r3, r0
 8002982:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK){
 8002984:	7bbb      	ldrb	r3, [r7, #14]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <pcap_scan+0x4a>
		printf("Error sending RD STS command, code = %d\n", ret);
 800298a:	7bbb      	ldrb	r3, [r7, #14]
 800298c:	4619      	mov	r1, r3
 800298e:	48a1      	ldr	r0, [pc, #644]	@ (8002c14 <pcap_scan+0x2c0>)
 8002990:	f004 fa98 	bl	8006ec4 <iprintf>
		errorStatus |= PCAP_COMM_ERROR;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
		return;
 800299c:	e133      	b.n	8002c06 <pcap_scan+0x2b2>
	}else{
		ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 2, PCAP_MAX_DELAY);
 800299e:	463a      	mov	r2, r7
 80029a0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2302      	movs	r3, #2
 80029a8:	2150      	movs	r1, #80	@ 0x50
 80029aa:	4899      	ldr	r0, [pc, #612]	@ (8002c10 <pcap_scan+0x2bc>)
 80029ac:	f001 fbb0 	bl	8004110 <HAL_I2C_Master_Receive>
 80029b0:	4603      	mov	r3, r0
 80029b2:	73bb      	strb	r3, [r7, #14]
		if(ret != HAL_OK){
 80029b4:	7bbb      	ldrb	r3, [r7, #14]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <pcap_scan+0x7a>
			printf("Bad response while reading RD STS command, bytes received = %d\n", ret);
 80029ba:	7bbb      	ldrb	r3, [r7, #14]
 80029bc:	4619      	mov	r1, r3
 80029be:	4896      	ldr	r0, [pc, #600]	@ (8002c18 <pcap_scan+0x2c4>)
 80029c0:	f004 fa80 	bl	8006ec4 <iprintf>
			errorStatus |= PCAP_COMM_ERROR;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
			return;
 80029cc:	e11b      	b.n	8002c06 <pcap_scan+0x2b2>
		}else{
			uint16_t pcap_sts = ((uint16_t)buf[1] << 8) | (uint16_t)buf[0];
 80029ce:	787b      	ldrb	r3, [r7, #1]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	783b      	ldrb	r3, [r7, #0]
 80029d6:	b21b      	sxth	r3, r3
 80029d8:	4313      	orrs	r3, r2
 80029da:	b21b      	sxth	r3, r3
 80029dc:	81bb      	strh	r3, [r7, #12]
			errorStatus = PCAP_NO_ERROR;
 80029de:	2300      	movs	r3, #0
 80029e0:	73fb      	strb	r3, [r7, #15]
			printf("Status = %x\n", pcap_sts);
 80029e2:	89bb      	ldrh	r3, [r7, #12]
 80029e4:	4619      	mov	r1, r3
 80029e6:	488d      	ldr	r0, [pc, #564]	@ (8002c1c <pcap_scan+0x2c8>)
 80029e8:	f004 fa6c 	bl	8006ec4 <iprintf>
		}
	}

	// read and display cap value 4 bytes
	buf[0] = PCAP_CAP_ADDR;
 80029ec:	2340      	movs	r3, #64	@ 0x40
 80029ee:	703b      	strb	r3, [r7, #0]
	buf[1] = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	707b      	strb	r3, [r7, #1]
	ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 80029f4:	463a      	mov	r2, r7
 80029f6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2301      	movs	r3, #1
 80029fe:	2150      	movs	r1, #80	@ 0x50
 8002a00:	4883      	ldr	r0, [pc, #524]	@ (8002c10 <pcap_scan+0x2bc>)
 8002a02:	f001 fa87 	bl	8003f14 <HAL_I2C_Master_Transmit>
 8002a06:	4603      	mov	r3, r0
 8002a08:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK){
 8002a0a:	7bbb      	ldrb	r3, [r7, #14]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00c      	beq.n	8002a2a <pcap_scan+0xd6>
		printf("Error sending RD CAP command, code = %d\n", ret);
 8002a10:	7bbb      	ldrb	r3, [r7, #14]
 8002a12:	4619      	mov	r1, r3
 8002a14:	4882      	ldr	r0, [pc, #520]	@ (8002c20 <pcap_scan+0x2cc>)
 8002a16:	f004 fa55 	bl	8006ec4 <iprintf>
		Etc_Buffer_In.LANByte[5] |= PCAP_COMM_ERROR;
 8002a1a:	4b82      	ldr	r3, [pc, #520]	@ (8002c24 <pcap_scan+0x2d0>)
 8002a1c:	795b      	ldrb	r3, [r3, #5]
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	4b7f      	ldr	r3, [pc, #508]	@ (8002c24 <pcap_scan+0x2d0>)
 8002a26:	715a      	strb	r2, [r3, #5]
		return;
 8002a28:	e0ed      	b.n	8002c06 <pcap_scan+0x2b2>
	}else{
		ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 4, PCAP_MAX_DELAY);
 8002a2a:	463a      	mov	r2, r7
 8002a2c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2304      	movs	r3, #4
 8002a34:	2150      	movs	r1, #80	@ 0x50
 8002a36:	4876      	ldr	r0, [pc, #472]	@ (8002c10 <pcap_scan+0x2bc>)
 8002a38:	f001 fb6a 	bl	8004110 <HAL_I2C_Master_Receive>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	73bb      	strb	r3, [r7, #14]
		if(ret != HAL_OK){
 8002a40:	7bbb      	ldrb	r3, [r7, #14]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <pcap_scan+0x106>
			printf("Bad response while reading RD CAP command, bytes received = %d\n", ret);
 8002a46:	7bbb      	ldrb	r3, [r7, #14]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4877      	ldr	r0, [pc, #476]	@ (8002c28 <pcap_scan+0x2d4>)
 8002a4c:	f004 fa3a 	bl	8006ec4 <iprintf>
			errorStatus |= PCAP_COMM_ERROR;
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
			return;
 8002a58:	e0d5      	b.n	8002c06 <pcap_scan+0x2b2>
		}else{
			pcap_capval_check1 = ((uint32_t)buf[3] << 24) | ((uint32_t)buf[2] << 16) | ((uint32_t)buf[1] << 8) | (uint32_t)buf[0];
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	061a      	lsls	r2, r3, #24
 8002a5e:	78bb      	ldrb	r3, [r7, #2]
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	431a      	orrs	r2, r3
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	783a      	ldrb	r2, [r7, #0]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4a6f      	ldr	r2, [pc, #444]	@ (8002c2c <pcap_scan+0x2d8>)
 8002a70:	6013      	str	r3, [r2, #0]

		   delay_us (DEBOUNCE_TIME_US);
 8002a72:	2096      	movs	r0, #150	@ 0x96
 8002a74:	f000 f8ee 	bl	8002c54 <delay_us>

			buf[0] = PCAP_CAP_ADDR;
 8002a78:	2340      	movs	r3, #64	@ 0x40
 8002a7a:	703b      	strb	r3, [r7, #0]
			buf[1] = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	707b      	strb	r3, [r7, #1]
			ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 8002a80:	463a      	mov	r2, r7
 8002a82:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2301      	movs	r3, #1
 8002a8a:	2150      	movs	r1, #80	@ 0x50
 8002a8c:	4860      	ldr	r0, [pc, #384]	@ (8002c10 <pcap_scan+0x2bc>)
 8002a8e:	f001 fa41 	bl	8003f14 <HAL_I2C_Master_Transmit>
 8002a92:	4603      	mov	r3, r0
 8002a94:	73bb      	strb	r3, [r7, #14]
			if(ret != HAL_OK){
 8002a96:	7bbb      	ldrb	r3, [r7, #14]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d009      	beq.n	8002ab0 <pcap_scan+0x15c>
				printf("Error sending RD CAP command, code = %d\n", ret);
 8002a9c:	7bbb      	ldrb	r3, [r7, #14]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	485f      	ldr	r0, [pc, #380]	@ (8002c20 <pcap_scan+0x2cc>)
 8002aa2:	f004 fa0f 	bl	8006ec4 <iprintf>
				errorStatus |= PCAP_COMM_ERROR;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
				return;
 8002aae:	e0aa      	b.n	8002c06 <pcap_scan+0x2b2>
			}else{
				ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 4, PCAP_MAX_DELAY);
 8002ab0:	463a      	mov	r2, r7
 8002ab2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2304      	movs	r3, #4
 8002aba:	2150      	movs	r1, #80	@ 0x50
 8002abc:	4854      	ldr	r0, [pc, #336]	@ (8002c10 <pcap_scan+0x2bc>)
 8002abe:	f001 fb27 	bl	8004110 <HAL_I2C_Master_Receive>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	73bb      	strb	r3, [r7, #14]
				if(ret != HAL_OK){
 8002ac6:	7bbb      	ldrb	r3, [r7, #14]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <pcap_scan+0x18c>
					printf("Bad response while reading RD CAP command, bytes received = %d\n", ret);
 8002acc:	7bbb      	ldrb	r3, [r7, #14]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4855      	ldr	r0, [pc, #340]	@ (8002c28 <pcap_scan+0x2d4>)
 8002ad2:	f004 f9f7 	bl	8006ec4 <iprintf>
					errorStatus |= PCAP_COMM_ERROR;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
					return;
 8002ade:	e092      	b.n	8002c06 <pcap_scan+0x2b2>
				}else{
					pcap_capval_check2 = ((uint32_t)buf[3] << 24) | ((uint32_t)buf[2] << 16) | ((uint32_t)buf[1] << 8) | (uint32_t)buf[0];
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	061a      	lsls	r2, r3, #24
 8002ae4:	78bb      	ldrb	r3, [r7, #2]
 8002ae6:	041b      	lsls	r3, r3, #16
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	787b      	ldrb	r3, [r7, #1]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	4313      	orrs	r3, r2
 8002af0:	783a      	ldrb	r2, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	4a4e      	ldr	r2, [pc, #312]	@ (8002c30 <pcap_scan+0x2dc>)
 8002af6:	6013      	str	r3, [r2, #0]

					if(abs(pcap_capval_check1 - pcap_capval_check2) < DEBOUNCE_CAP_TOLERANCE){
 8002af8:	4b4c      	ldr	r3, [pc, #304]	@ (8002c2c <pcap_scan+0x2d8>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b4c      	ldr	r3, [pc, #304]	@ (8002c30 <pcap_scan+0x2dc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b4b      	ldr	r3, [pc, #300]	@ (8002c34 <pcap_scan+0x2e0>)
 8002b06:	429a      	cmp	r2, r3
 8002b08:	db33      	blt.n	8002b72 <pcap_scan+0x21e>
 8002b0a:	4b48      	ldr	r3, [pc, #288]	@ (8002c2c <pcap_scan+0x2d8>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b48      	ldr	r3, [pc, #288]	@ (8002c30 <pcap_scan+0x2dc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b48      	ldr	r3, [pc, #288]	@ (8002c38 <pcap_scan+0x2e4>)
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	dc2a      	bgt.n	8002b72 <pcap_scan+0x21e>
						pcap_capval = pcap_capval_check2;
 8002b1c:	4b44      	ldr	r3, [pc, #272]	@ (8002c30 <pcap_scan+0x2dc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a46      	ldr	r2, [pc, #280]	@ (8002c3c <pcap_scan+0x2e8>)
 8002b22:	6013      	str	r3, [r2, #0]

						if (pcap_capval > DEBOUNCE_CAP_TOLERANCE){
 8002b24:	4b45      	ldr	r3, [pc, #276]	@ (8002c3c <pcap_scan+0x2e8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a45      	ldr	r2, [pc, #276]	@ (8002c40 <pcap_scan+0x2ec>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d904      	bls.n	8002b38 <pcap_scan+0x1e4>
							Etc_Buffer_In.LANLong[2] = pcap_capval;
 8002b2e:	4b43      	ldr	r3, [pc, #268]	@ (8002c3c <pcap_scan+0x2e8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a3c      	ldr	r2, [pc, #240]	@ (8002c24 <pcap_scan+0x2d0>)
 8002b34:	6093      	str	r3, [r2, #8]
 8002b36:	e01c      	b.n	8002b72 <pcap_scan+0x21e>
						}
						else {
							updateMovingAverage(&mAvg, pcap_capval);
 8002b38:	4b40      	ldr	r3, [pc, #256]	@ (8002c3c <pcap_scan+0x2e8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4841      	ldr	r0, [pc, #260]	@ (8002c44 <pcap_scan+0x2f0>)
 8002b40:	f7ff fe5f 	bl	8002802 <updateMovingAverage>
							pcap_capval_avg = mAvg.out;
 8002b44:	4b3f      	ldr	r3, [pc, #252]	@ (8002c44 <pcap_scan+0x2f0>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	4a3f      	ldr	r2, [pc, #252]	@ (8002c48 <pcap_scan+0x2f4>)
 8002b4a:	6013      	str	r3, [r2, #0]

							//Etc_Buffer_In.LANLong[6] = pcap_capval;
							Etc_Buffer_In.LANLong[2] = pcap_capval_avg;
 8002b4c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c48 <pcap_scan+0x2f4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a34      	ldr	r2, [pc, #208]	@ (8002c24 <pcap_scan+0x2d0>)
 8002b52:	6093      	str	r3, [r2, #8]

							if (pcap_capval_avg == PCAP_TIP_TOUCH) {
 8002b54:	4b3c      	ldr	r3, [pc, #240]	@ (8002c48 <pcap_scan+0x2f4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d103      	bne.n	8002b66 <pcap_scan+0x212>
								errorStatus |= PCAP_TIP_TOUCH_ERROR;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	73fb      	strb	r3, [r7, #15]
							}
							printf("Filtered Capacitive Value = %lu\n", pcap_capval_avg);
 8002b66:	4b38      	ldr	r3, [pc, #224]	@ (8002c48 <pcap_scan+0x2f4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4837      	ldr	r0, [pc, #220]	@ (8002c4c <pcap_scan+0x2f8>)
 8002b6e:	f004 f9a9 	bl	8006ec4 <iprintf>
		}

	}

	//read and display temperature value 4 bytes
	buf[0] = PCAP_TEMP_ADDR;
 8002b72:	2358      	movs	r3, #88	@ 0x58
 8002b74:	703b      	strb	r3, [r7, #0]
	buf[1] = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	707b      	strb	r3, [r7, #1]
	buf[2] = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	70bb      	strb	r3, [r7, #2]
	buf[3] = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	70fb      	strb	r3, [r7, #3]
	ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 8002b82:	463a      	mov	r2, r7
 8002b84:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	2150      	movs	r1, #80	@ 0x50
 8002b8e:	4820      	ldr	r0, [pc, #128]	@ (8002c10 <pcap_scan+0x2bc>)
 8002b90:	f001 f9c0 	bl	8003f14 <HAL_I2C_Master_Transmit>
 8002b94:	4603      	mov	r3, r0
 8002b96:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK){
 8002b98:	7bbb      	ldrb	r3, [r7, #14]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <pcap_scan+0x25e>
		printf("Error sending RD CAP command, code = %d\n", ret);
 8002b9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	481f      	ldr	r0, [pc, #124]	@ (8002c20 <pcap_scan+0x2cc>)
 8002ba4:	f004 f98e 	bl	8006ec4 <iprintf>
		errorStatus |= PCAP_COMM_ERROR;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
		return;
 8002bb0:	e029      	b.n	8002c06 <pcap_scan+0x2b2>
	}else{
		ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 4, PCAP_MAX_DELAY);
 8002bb2:	463a      	mov	r2, r7
 8002bb4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2304      	movs	r3, #4
 8002bbc:	2150      	movs	r1, #80	@ 0x50
 8002bbe:	4814      	ldr	r0, [pc, #80]	@ (8002c10 <pcap_scan+0x2bc>)
 8002bc0:	f001 faa6 	bl	8004110 <HAL_I2C_Master_Receive>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	73bb      	strb	r3, [r7, #14]
		if(ret != HAL_OK){
 8002bc8:	7bbb      	ldrb	r3, [r7, #14]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <pcap_scan+0x28e>
			printf("Bad response while reading RD CAP command, bytes received = %d\n", ret);
 8002bce:	7bbb      	ldrb	r3, [r7, #14]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4815      	ldr	r0, [pc, #84]	@ (8002c28 <pcap_scan+0x2d4>)
 8002bd4:	f004 f976 	bl	8006ec4 <iprintf>
			errorStatus |= PCAP_COMM_ERROR;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
			return;
 8002be0:	e011      	b.n	8002c06 <pcap_scan+0x2b2>
		}else{
			pcap_tempval = ((uint32_t)buf[3] << 24) | ((uint32_t)buf[2] << 16) | ((uint32_t)buf[1] << 8) | (uint32_t)buf[0];
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	061a      	lsls	r2, r3, #24
 8002be6:	78bb      	ldrb	r3, [r7, #2]
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	431a      	orrs	r2, r3
 8002bec:	787b      	ldrb	r3, [r7, #1]
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	783a      	ldrb	r2, [r7, #0]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	4a16      	ldr	r2, [pc, #88]	@ (8002c50 <pcap_scan+0x2fc>)
 8002bf8:	6013      	str	r3, [r2, #0]
			Etc_Buffer_In.LANLong[3] = pcap_tempval;
 8002bfa:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <pcap_scan+0x2fc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a09      	ldr	r2, [pc, #36]	@ (8002c24 <pcap_scan+0x2d0>)
 8002c00:	60d3      	str	r3, [r2, #12]
			// printf("Temperature Value = %lu\n", pcap_tempval);
		}
	}
	return errorStatus;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	e7ff      	b.n	8002c06 <pcap_scan+0x2b2>
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200000c4 	.word	0x200000c4
 8002c14:	08007d44 	.word	0x08007d44
 8002c18:	08007d70 	.word	0x08007d70
 8002c1c:	08007db0 	.word	0x08007db0
 8002c20:	08007dc0 	.word	0x08007dc0
 8002c24:	200000a4 	.word	0x200000a4
 8002c28:	08007dec 	.word	0x08007dec
 8002c2c:	200003a8 	.word	0x200003a8
 8002c30:	200003ac 	.word	0x200003ac
 8002c34:	fa0a1f01 	.word	0xfa0a1f01
 8002c38:	05f5e0ff 	.word	0x05f5e0ff
 8002c3c:	200003a0 	.word	0x200003a0
 8002c40:	05f5e100 	.word	0x05f5e100
 8002c44:	20000350 	.word	0x20000350
 8002c48:	200003b0 	.word	0x200003b0
 8002c4c:	08007e2c 	.word	0x08007e2c
 8002c50:	200003a4 	.word	0x200003a4

08002c54 <delay_us>:


//This function is used to create delay in micro second.
void delay_us(uint16_t us) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&PCAP_TIMER);
 8002c5e:	480a      	ldr	r0, [pc, #40]	@ (8002c88 <delay_us+0x34>)
 8002c60:	f003 fd92 	bl	8006788 <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COUNTER(&PCAP_TIMER, 0);  // set the counter value a 0
 8002c64:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <delay_us+0x34>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	625a      	str	r2, [r3, #36]	@ 0x24

	while (__HAL_TIM_GET_COUNTER(&PCAP_TIMER) < us);  // wait for the counter to reach the us input in the parameter
 8002c6c:	bf00      	nop
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <delay_us+0x34>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d3f9      	bcc.n	8002c6e <delay_us+0x1a>

	HAL_TIM_Base_Stop(&PCAP_TIMER);
 8002c7a:	4803      	ldr	r0, [pc, #12]	@ (8002c88 <delay_us+0x34>)
 8002c7c:	f003 fdde 	bl	800683c <HAL_TIM_Base_Stop>
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000274 	.word	0x20000274

08002c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <HAL_MspInit+0x4c>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd8 <HAL_MspInit+0x4c>)
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <HAL_MspInit+0x4c>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <HAL_MspInit+0x4c>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	4a08      	ldr	r2, [pc, #32]	@ (8002cd8 <HAL_MspInit+0x4c>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_MspInit+0x4c>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	@ 0x30
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 031c 	add.w	r3, r7, #28
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3b      	ldr	r2, [pc, #236]	@ (8002de8 <HAL_I2C_MspInit+0x10c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d12c      	bne.n	8002d58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	4b3a      	ldr	r3, [pc, #232]	@ (8002dec <HAL_I2C_MspInit+0x110>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	4a39      	ldr	r2, [pc, #228]	@ (8002dec <HAL_I2C_MspInit+0x110>)
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d0e:	4b37      	ldr	r3, [pc, #220]	@ (8002dec <HAL_I2C_MspInit+0x110>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = PCAP_SCL_Pin|PCAP_SDA_Pin;
 8002d1a:	23c0      	movs	r3, #192	@ 0xc0
 8002d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d1e:	2312      	movs	r3, #18
 8002d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d26:	2303      	movs	r3, #3
 8002d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2e:	f107 031c 	add.w	r3, r7, #28
 8002d32:	4619      	mov	r1, r3
 8002d34:	482e      	ldr	r0, [pc, #184]	@ (8002df0 <HAL_I2C_MspInit+0x114>)
 8002d36:	f000 fe0b 	bl	8003950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dec <HAL_I2C_MspInit+0x110>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	4a2a      	ldr	r2, [pc, #168]	@ (8002dec <HAL_I2C_MspInit+0x110>)
 8002d44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d4a:	4b28      	ldr	r3, [pc, #160]	@ (8002dec <HAL_I2C_MspInit+0x110>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d56:	e042      	b.n	8002dde <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a25      	ldr	r2, [pc, #148]	@ (8002df4 <HAL_I2C_MspInit+0x118>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d13d      	bne.n	8002dde <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	4b21      	ldr	r3, [pc, #132]	@ (8002dec <HAL_I2C_MspInit+0x110>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	4a20      	ldr	r2, [pc, #128]	@ (8002dec <HAL_I2C_MspInit+0x110>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d72:	4b1e      	ldr	r3, [pc, #120]	@ (8002dec <HAL_I2C_MspInit+0x110>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BRL64WE2_SCL_Pin;
 8002d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d84:	2312      	movs	r3, #18
 8002d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d90:	2304      	movs	r3, #4
 8002d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BRL64WE2_SCL_GPIO_Port, &GPIO_InitStruct);
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4815      	ldr	r0, [pc, #84]	@ (8002df0 <HAL_I2C_MspInit+0x114>)
 8002d9c:	f000 fdd8 	bl	8003950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BRL64WE2_SDA_Pin;
 8002da0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da6:	2312      	movs	r3, #18
 8002da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dae:	2303      	movs	r3, #3
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002db2:	2309      	movs	r3, #9
 8002db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BRL64WE2_SDA_GPIO_Port, &GPIO_InitStruct);
 8002db6:	f107 031c 	add.w	r3, r7, #28
 8002dba:	4619      	mov	r1, r3
 8002dbc:	480c      	ldr	r0, [pc, #48]	@ (8002df0 <HAL_I2C_MspInit+0x114>)
 8002dbe:	f000 fdc7 	bl	8003950 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <HAL_I2C_MspInit+0x110>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	4a08      	ldr	r2, [pc, #32]	@ (8002dec <HAL_I2C_MspInit+0x110>)
 8002dcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_I2C_MspInit+0x110>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
}
 8002dde:	bf00      	nop
 8002de0:	3730      	adds	r7, #48	@ 0x30
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40005400 	.word	0x40005400
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40020400 	.word	0x40020400
 8002df4:	40005800 	.word	0x40005800

08002df8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b090      	sub	sp, #64	@ 0x40
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a6a      	ldr	r2, [pc, #424]	@ (8002fc0 <HAL_SPI_MspInit+0x1c8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d14a      	bne.n	8002eb0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e1e:	4b69      	ldr	r3, [pc, #420]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e22:	4a68      	ldr	r2, [pc, #416]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002e24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e2a:	4b66      	ldr	r3, [pc, #408]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3a:	4b62      	ldr	r3, [pc, #392]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	4a61      	ldr	r2, [pc, #388]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e46:	4b5f      	ldr	r3, [pc, #380]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
 8002e56:	4b5b      	ldr	r3, [pc, #364]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	4a5a      	ldr	r2, [pc, #360]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e62:	4b58      	ldr	r3, [pc, #352]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	623b      	str	r3, [r7, #32]
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TMC_CLK_Pin;
 8002e6e:	2320      	movs	r3, #32
 8002e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e7e:	2305      	movs	r3, #5
 8002e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TMC_CLK_GPIO_Port, &GPIO_InitStruct);
 8002e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e86:	4619      	mov	r1, r3
 8002e88:	484f      	ldr	r0, [pc, #316]	@ (8002fc8 <HAL_SPI_MspInit+0x1d0>)
 8002e8a:	f000 fd61 	bl	8003950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TMC_MISO_Pin|TMC_MOSI_Pin;
 8002e8e:	2330      	movs	r3, #48	@ 0x30
 8002e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	2302      	movs	r3, #2
 8002e94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e9e:	2305      	movs	r3, #5
 8002ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4848      	ldr	r0, [pc, #288]	@ (8002fcc <HAL_SPI_MspInit+0x1d4>)
 8002eaa:	f000 fd51 	bl	8003950 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002eae:	e082      	b.n	8002fb6 <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a46      	ldr	r2, [pc, #280]	@ (8002fd0 <HAL_SPI_MspInit+0x1d8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d12d      	bne.n	8002f16 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	4a40      	ldr	r2, [pc, #256]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eca:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4a39      	ldr	r2, [pc, #228]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee6:	4b37      	ldr	r3, [pc, #220]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ADXL345_CLK_Pin|ADXL345_MISO_Pin|ADXL345_MOSI_Pin;
 8002ef2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f04:	2305      	movs	r3, #5
 8002f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	482f      	ldr	r0, [pc, #188]	@ (8002fcc <HAL_SPI_MspInit+0x1d4>)
 8002f10:	f000 fd1e 	bl	8003950 <HAL_GPIO_Init>
}
 8002f14:	e04f      	b.n	8002fb6 <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI5)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd4 <HAL_SPI_MspInit+0x1dc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d14a      	bne.n	8002fb6 <HAL_SPI_MspInit+0x1be>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	4b27      	ldr	r3, [pc, #156]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f28:	4a26      	ldr	r2, [pc, #152]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f30:	4b24      	ldr	r3, [pc, #144]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	4b20      	ldr	r3, [pc, #128]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f44:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002f46:	f043 0302 	orr.w	r3, r3, #2
 8002f4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	4b19      	ldr	r3, [pc, #100]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	4a18      	ldr	r2, [pc, #96]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f68:	4b16      	ldr	r3, [pc, #88]	@ (8002fc4 <HAL_SPI_MspInit+0x1cc>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LAN9252_SCK_Pin;
 8002f74:	2301      	movs	r3, #1
 8002f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8002f84:	2306      	movs	r3, #6
 8002f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(LAN9252_SCK_GPIO_Port, &GPIO_InitStruct);
 8002f88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	480f      	ldr	r0, [pc, #60]	@ (8002fcc <HAL_SPI_MspInit+0x1d4>)
 8002f90:	f000 fcde 	bl	8003950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LAN9252_MOSI_Pin|LAN9252_MISO_Pin;
 8002f94:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8002fa6:	2306      	movs	r3, #6
 8002fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002faa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4805      	ldr	r0, [pc, #20]	@ (8002fc8 <HAL_SPI_MspInit+0x1d0>)
 8002fb2:	f000 fccd 	bl	8003950 <HAL_GPIO_Init>
}
 8002fb6:	bf00      	nop
 8002fb8:	3740      	adds	r7, #64	@ 0x40
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40013000 	.word	0x40013000
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40020000 	.word	0x40020000
 8002fcc:	40020400 	.word	0x40020400
 8002fd0:	40003800 	.word	0x40003800
 8002fd4:	40015000 	.word	0x40015000

08002fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8003014 <HAL_TIM_Base_MspInit+0x3c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10d      	bne.n	8003006 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <HAL_TIM_Base_MspInit+0x40>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	4a09      	ldr	r2, [pc, #36]	@ (8003018 <HAL_TIM_Base_MspInit+0x40>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ffa:	4b07      	ldr	r3, [pc, #28]	@ (8003018 <HAL_TIM_Base_MspInit+0x40>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40000800 	.word	0x40000800
 8003018:	40023800 	.word	0x40023800

0800301c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <NMI_Handler+0x4>

08003024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <HardFault_Handler+0x4>

0800302c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <MemManage_Handler+0x4>

08003034 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <BusFault_Handler+0x4>

0800303c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003040:	bf00      	nop
 8003042:	e7fd      	b.n	8003040 <UsageFault_Handler+0x4>

08003044 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003072:	f000 fb43 	bl	80036fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}

0800307a <_read>:
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e00a      	b.n	80030a2 <_read+0x28>
 800308c:	f3af 8000 	nop.w
 8003090:	4601      	mov	r1, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	60ba      	str	r2, [r7, #8]
 8003098:	b2ca      	uxtb	r2, r1
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	3301      	adds	r3, #1
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	dbf0      	blt.n	800308c <_read+0x12>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <_write>:
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	e009      	b.n	80030da <_write+0x26>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	60ba      	str	r2, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f3af 8000 	nop.w
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	3301      	adds	r3, #1
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	429a      	cmp	r2, r3
 80030e0:	dbf1      	blt.n	80030c6 <_write+0x12>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <_close>:
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <_fstat>:
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	2300      	movs	r3, #0
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_isatty>:
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	2301      	movs	r3, #1
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <_lseek>:
 800313a:	b480      	push	{r7}
 800313c:	b085      	sub	sp, #20
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	2300      	movs	r3, #0
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <_sbrk>:
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	4a14      	ldr	r2, [pc, #80]	@ (80031b0 <_sbrk+0x5c>)
 800315e:	4b15      	ldr	r3, [pc, #84]	@ (80031b4 <_sbrk+0x60>)
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <_sbrk+0x64>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <_sbrk+0x22>
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <_sbrk+0x64>)
 8003172:	4a12      	ldr	r2, [pc, #72]	@ (80031bc <_sbrk+0x68>)
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <_sbrk+0x64>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	429a      	cmp	r2, r3
 8003182:	d207      	bcs.n	8003194 <_sbrk+0x40>
 8003184:	f004 f834 	bl	80071f0 <__errno>
 8003188:	4603      	mov	r3, r0
 800318a:	220c      	movs	r2, #12
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	f04f 33ff 	mov.w	r3, #4294967295
 8003192:	e009      	b.n	80031a8 <_sbrk+0x54>
 8003194:	4b08      	ldr	r3, [pc, #32]	@ (80031b8 <_sbrk+0x64>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <_sbrk+0x64>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	4a05      	ldr	r2, [pc, #20]	@ (80031b8 <_sbrk+0x64>)
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20020000 	.word	0x20020000
 80031b4:	00000400 	.word	0x00000400
 80031b8:	200003b4 	.word	0x200003b4
 80031bc:	20000508 	.word	0x20000508

080031c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031c4:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <SystemInit+0x20>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ca:	4a05      	ldr	r2, [pc, #20]	@ (80031e0 <SystemInit+0x20>)
 80031cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <setWrongCommandFlag>:
		setIncrementalTargetPosition(tmc4671_controller, -STOP_TOLERANCE_DECODER_COUNT);
	}
}

//---------------------------------------------------------------------------------------------------------
void setWrongCommandFlag(TMC4671_Controller *tmc4671_controller, bool is_wrong){
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
	tmc4671_controller->tmc_flags.wrong_command = is_wrong;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <getEventStatusWord>:
//---------------------------------------------------------------------------------------------------------
TMCStatusFlags getEventStatus(TMC4671_Controller *tmc4671_controller){
	return tmc4671_controller->tmc_flags;
}

uint16_t getEventStatusWord(TMC4671_Controller *tmc4671_controller, PcapErrorStatus *Pcap_status) {
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	uint16_t status_word = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	81fb      	strh	r3, [r7, #14]

	switch(tmc4671_controller->tmc_flags.limits){
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003218:	2b04      	cmp	r3, #4
 800321a:	d821      	bhi.n	8003260 <getEventStatusWord+0x5c>
 800321c:	a201      	add	r2, pc, #4	@ (adr r2, 8003224 <getEventStatusWord+0x20>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	08003261 	.word	0x08003261
 8003228:	08003257 	.word	0x08003257
 800322c:	0800324d 	.word	0x0800324d
 8003230:	08003243 	.word	0x08003243
 8003234:	08003239 	.word	0x08003239
	case NO_LIMIT:
		break;

	case HARD_POSITIVE:
		status_word |= 0x0001 << 0;
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	81fb      	strh	r3, [r7, #14]
		break;
 8003240:	e00e      	b.n	8003260 <getEventStatusWord+0x5c>

	case HARD_NEGATIVE:
		status_word |= 0x0001 << 1;
 8003242:	89fb      	ldrh	r3, [r7, #14]
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	81fb      	strh	r3, [r7, #14]
		break;
 800324a:	e009      	b.n	8003260 <getEventStatusWord+0x5c>

	case SOFT_POSITIVE:
		status_word |= 0x0001 << 2;
 800324c:	89fb      	ldrh	r3, [r7, #14]
 800324e:	f043 0304 	orr.w	r3, r3, #4
 8003252:	81fb      	strh	r3, [r7, #14]
		break;
 8003254:	e004      	b.n	8003260 <getEventStatusWord+0x5c>

	case SOFT_NEGATIVE:
		status_word |= 0x0001 << 3;
 8003256:	89fb      	ldrh	r3, [r7, #14]
 8003258:	f043 0308 	orr.w	r3, r3, #8
 800325c:	81fb      	strh	r3, [r7, #14]
		break;
 800325e:	bf00      	nop
	}

	if(tmc4671_controller->tmc_flags.target_reached){
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <getEventStatusWord+0x6e>
		status_word |= 0x0001 << 4;
 800326a:	89fb      	ldrh	r3, [r7, #14]
 800326c:	f043 0310 	orr.w	r3, r3, #16
 8003270:	81fb      	strh	r3, [r7, #14]
	}

	if(tmc4671_controller->tmc_flags.homing_done){
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <getEventStatusWord+0x80>
		status_word |= 0x0001 << 5;
 800327c:	89fb      	ldrh	r3, [r7, #14]
 800327e:	f043 0320 	orr.w	r3, r3, #32
 8003282:	81fb      	strh	r3, [r7, #14]
	}

	if(tmc4671_controller->tmc_flags.servo_enable){
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <getEventStatusWord+0x92>
		status_word |= 0x0001 << 6;
 800328e:	89fb      	ldrh	r3, [r7, #14]
 8003290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003294:	81fb      	strh	r3, [r7, #14]
	}

	if(tmc4671_controller->tmc_flags.servo_ready){
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <getEventStatusWord+0xa4>
		status_word |= 0x0001 << 7;
 80032a0:	89fb      	ldrh	r3, [r7, #14]
 80032a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a6:	81fb      	strh	r3, [r7, #14]
	}

	switch(tmc4671_controller->tmc_flags.faults){
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d820      	bhi.n	80032f4 <getEventStatusWord+0xf0>
 80032b2:	a201      	add	r2, pc, #4	@ (adr r2, 80032b8 <getEventStatusWord+0xb4>)
 80032b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b8:	080032f5 	.word	0x080032f5
 80032bc:	080032eb 	.word	0x080032eb
 80032c0:	080032e1 	.word	0x080032e1
 80032c4:	080032d7 	.word	0x080032d7
 80032c8:	080032cd 	.word	0x080032cd
	case NO_FAULT:
		break;

	case SHORT_CIRCUIT:
		status_word |= 0x0001 << 8;
 80032cc:	89fb      	ldrh	r3, [r7, #14]
 80032ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d2:	81fb      	strh	r3, [r7, #14]
		break;
 80032d4:	e00e      	b.n	80032f4 <getEventStatusWord+0xf0>

	case UNDER_VOLTAGE:
		status_word |= 0x0001 << 9;
 80032d6:	89fb      	ldrh	r3, [r7, #14]
 80032d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032dc:	81fb      	strh	r3, [r7, #14]
		break;
 80032de:	e009      	b.n	80032f4 <getEventStatusWord+0xf0>

	case OVER_TEMPERATURE:
		status_word |= 0x0001 << 10;
 80032e0:	89fb      	ldrh	r3, [r7, #14]
 80032e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032e6:	81fb      	strh	r3, [r7, #14]
		break;
 80032e8:	e004      	b.n	80032f4 <getEventStatusWord+0xf0>

	case UNKNOWN:
		status_word |= 0x0001 << 11;
 80032ea:	89fb      	ldrh	r3, [r7, #14]
 80032ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80032f0:	81fb      	strh	r3, [r7, #14]
		break;
 80032f2:	bf00      	nop
	}

	if(tmc4671_controller->tmc_flags.wrong_command){
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <getEventStatusWord+0x102>
		status_word |= 0x0001 << 12;
 80032fe:	89fb      	ldrh	r3, [r7, #14]
 8003300:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003304:	81fb      	strh	r3, [r7, #14]
	}

	switch (*Pcap_status) {
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d00a      	beq.n	8003324 <getEventStatusWord+0x120>
 800330e:	2b02      	cmp	r3, #2
 8003310:	dc0e      	bgt.n	8003330 <getEventStatusWord+0x12c>
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <getEventStatusWord+0x12a>
 8003316:	2b01      	cmp	r3, #1
 8003318:	d10a      	bne.n	8003330 <getEventStatusWord+0x12c>
	case PCAP_NO_ERROR:
		break;

	case PCAP_COMM_ERROR:
		status_word |= 0x0001 << 13;
 800331a:	89fb      	ldrh	r3, [r7, #14]
 800331c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003320:	81fb      	strh	r3, [r7, #14]
		break;
 8003322:	e005      	b.n	8003330 <getEventStatusWord+0x12c>

	case PCAP_TIP_TOUCH_ERROR:
		status_word |= 0x0001 << 14;
 8003324:	89fb      	ldrh	r3, [r7, #14]
 8003326:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800332a:	81fb      	strh	r3, [r7, #14]
		break;
 800332c:	e000      	b.n	8003330 <getEventStatusWord+0x12c>
		break;
 800332e:	bf00      	nop
	}

	return status_word;
 8003330:	89fb      	ldrh	r3, [r7, #14]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop

08003340 <getCoilCurrent>:
		return false;
	}
}
//---------------------------------------------------------------------------------------------------------

uint32_t getCoilCurrent(TMC4671_Controller *tmc4671_controller){
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->motor_current;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <getCurrentLimitHoming>:

void setCurrentLimitHoming(TMC4671_Controller *tmc4671_controller, uint32_t current_limit){
	tmc4671_controller->tmc_parameters.current_limit_homing = current_limit;
}

uint32_t getCurrentLimitHoming(TMC4671_Controller *tmc4671_controller){
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.current_limit_homing;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <getCurrentLimitServo>:

void setCurrentLimitServo(TMC4671_Controller *tmc4671_controller, uint32_t current_limit){
	tmc4671_controller->tmc_parameters.current_limit_servo = current_limit;
}

uint32_t getCurrentLimitServo(TMC4671_Controller *tmc4671_controller){
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.current_limit_servo;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <getVoltageLimitHoming>:

void setVoltageLimitHoming(TMC4671_Controller *tmc4671_controller, uint32_t voltage_limit){
	tmc4671_controller->tmc_parameters.voltage_limit_homing = voltage_limit;
}

uint32_t getVoltageLimitHoming(TMC4671_Controller *tmc4671_controller){
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.voltage_limit_homing;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <getVelocityLimitServo>:
void setVelocityLimitServo(TMC4671_Controller *tmc4671_controller, uint32_t velocity_limit){
	tmc4671_controller->tmc_parameters.velocity_limit_servo = velocity_limit;
	write_register_tmc4671(TMC4671_PID_VELOCITY_LIMIT, velocity_limit);
}

uint32_t getVelocityLimitServo(TMC4671_Controller *tmc4671_controller){
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.velocity_limit_servo;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <getTorqueLimitServo>:
void setTorqueLimitServo(TMC4671_Controller *tmc4671_controller, uint32_t torque_limit){
	tmc4671_controller->tmc_parameters.torque_limit_servo = torque_limit;
	write_register_tmc4671(TMC4671_PID_TORQUE_FLUX_LIMITS, torque_limit);
}

uint32_t getTorqueLimitServo(TMC4671_Controller *tmc4671_controller){
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.torque_limit_servo;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <getZeroOffset>:

void setZeroOffset(TMC4671_Controller *tmc4671_controller, int32_t offset_microns){
	tmc4671_controller->tmc_parameters.encoder_zero_offset = (int32_t)(offset_microns * (TOTAL_DECODER_REGISTER_COUNT/TOTAL_MAPPED_TRAVEL_MICRONS));
}

int32_t getZeroOffset(TMC4671_Controller *tmc4671_controller){
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	int32_t offset_microns = tmc4671_controller->tmc_parameters.encoder_zero_offset;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	60fb      	str	r3, [r7, #12]
	offset_microns = (int32_t)((offset_microns*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7fd f8a0 	bl	8000524 <__aeabi_i2d>
 80033e4:	a30f      	add	r3, pc, #60	@ (adr r3, 8003424 <getZeroOffset+0x54>)
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f7fd f905 	bl	80005f8 <__aeabi_dmul>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	4b09      	ldr	r3, [pc, #36]	@ (8003420 <getZeroOffset+0x50>)
 80033fc:	f7fd fa26 	bl	800084c <__aeabi_ddiv>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	f7fd fb08 	bl	8000a1c <__aeabi_d2iz>
 800340c:	4603      	mov	r3, r0
 800340e:	60fb      	str	r3, [r7, #12]
	return offset_microns;
 8003410:	68fb      	ldr	r3, [r7, #12]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	f3af 8000 	nop.w
 8003420:	40f00000 	.word	0x40f00000
 8003424:	00000000 	.word	0x00000000
 8003428:	40d38800 	.word	0x40d38800
 800342c:	00000000 	.word	0x00000000

08003430 <getActualPosition>:
//---------------------------------------------------------------------------------------------------------

int32_t getActualPosition(TMC4671_Controller *tmc4671_controller){
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	int32_t actual_microns = (tmc4671_controller->current_position - tmc4671_controller->tmc_parameters.encoder_zero_offset);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	60fb      	str	r3, [r7, #12]
	actual_microns = (int32_t)((actual_microns*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7fd f86d 	bl	8000524 <__aeabi_i2d>
 800344a:	a30e      	add	r3, pc, #56	@ (adr r3, 8003484 <getActualPosition+0x54>)
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f7fd f8d2 	bl	80005f8 <__aeabi_dmul>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <getActualPosition+0x50>)
 8003462:	f7fd f9f3 	bl	800084c <__aeabi_ddiv>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	f7fd fad5 	bl	8000a1c <__aeabi_d2iz>
 8003472:	4603      	mov	r3, r0
 8003474:	60fb      	str	r3, [r7, #12]
	return actual_microns;
 8003476:	68fb      	ldr	r3, [r7, #12]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40f00000 	.word	0x40f00000
 8003484:	00000000 	.word	0x00000000
 8003488:	40d38800 	.word	0x40d38800
 800348c:	00000000 	.word	0x00000000

08003490 <getTargetPosition>:
void setIncrementalTargetPosition(TMC4671_Controller *tmc4671_controller, int32_t target_microns){
	int32_t current_microns = getActualPosition(tmc4671_controller);
	setAbsoluteTargetPosition(tmc4671_controller, current_microns + target_microns);
}

int32_t getTargetPosition(TMC4671_Controller *tmc4671_controller){
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	int32_t target_pos = (tmc4671_controller->target_position - tmc4671_controller->tmc_parameters.encoder_zero_offset);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	60fb      	str	r3, [r7, #12]
	target_pos = (int32_t)((target_pos*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7fd f83d 	bl	8000524 <__aeabi_i2d>
 80034aa:	a30e      	add	r3, pc, #56	@ (adr r3, 80034e4 <getTargetPosition+0x54>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fd f8a2 	bl	80005f8 <__aeabi_dmul>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	4b07      	ldr	r3, [pc, #28]	@ (80034e0 <getTargetPosition+0x50>)
 80034c2:	f7fd f9c3 	bl	800084c <__aeabi_ddiv>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	f7fd faa5 	bl	8000a1c <__aeabi_d2iz>
 80034d2:	4603      	mov	r3, r0
 80034d4:	60fb      	str	r3, [r7, #12]
	return target_pos;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40f00000 	.word	0x40f00000
 80034e4:	00000000 	.word	0x00000000
 80034e8:	40d38800 	.word	0x40d38800
 80034ec:	00000000 	.word	0x00000000

080034f0 <getMaxPositionError>:

void setMaxPositionError(TMC4671_Controller *tmc4671_controller, uint32_t error_microns){
	tmc4671_controller->tmc_parameters.position_error_limit = (uint32_t)(error_microns * (TOTAL_DECODER_REGISTER_COUNT/TOTAL_MAPPED_TRAVEL_MICRONS));
}

uint32_t getMaxPositionError(TMC4671_Controller *tmc4671_controller){
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	uint32_t error_microns = tmc4671_controller->tmc_parameters.position_error_limit;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	60fb      	str	r3, [r7, #12]
	error_microns = (uint32_t)((error_microns*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7fd f800 	bl	8000504 <__aeabi_ui2d>
 8003504:	a30f      	add	r3, pc, #60	@ (adr r3, 8003544 <getMaxPositionError+0x54>)
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f7fd f875 	bl	80005f8 <__aeabi_dmul>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <getMaxPositionError+0x50>)
 800351c:	f7fd f996 	bl	800084c <__aeabi_ddiv>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	f7fd faa0 	bl	8000a6c <__aeabi_d2uiz>
 800352c:	4603      	mov	r3, r0
 800352e:	60fb      	str	r3, [r7, #12]
	return error_microns;
 8003530:	68fb      	ldr	r3, [r7, #12]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	f3af 8000 	nop.w
 8003540:	40f00000 	.word	0x40f00000
 8003544:	00000000 	.word	0x00000000
 8003548:	40d38800 	.word	0x40d38800

0800354c <getCurrentGainP>:
	uint32_t pid_torque_P_torque_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_TORQUE_P_TORQUE_I, pid_torque_P_torque_I);
	write_register_tmc4671(TMC4671_PID_FLUX_P_FLUX_I, pid_torque_P_torque_I);
}

uint32_t getCurrentGainP(TMC4671_Controller *tmc4671_controller){
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.current_P_gain;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <getCurrentGainI>:
	uint32_t pid_torque_P_torque_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_TORQUE_P_TORQUE_I, pid_torque_P_torque_I);
	write_register_tmc4671(TMC4671_PID_FLUX_P_FLUX_I, pid_torque_P_torque_I);
}

uint32_t getCurrentGainI(TMC4671_Controller *tmc4671_controller){
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.current_I_gain;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <getVelocityGainP>:

	uint32_t pid_velocity_P_velocity_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_VELOCITY_P_VELOCITY_I, pid_velocity_P_velocity_I);
}

uint32_t getVelocityGainP(TMC4671_Controller *tmc4671_controller){
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.velocity_P_gain;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <getVelocityGainI>:

	uint32_t pid_velocity_P_velocity_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_VELOCITY_P_VELOCITY_I, pid_velocity_P_velocity_I);
}

uint32_t getVelocityGainI(TMC4671_Controller *tmc4671_controller){
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.velocity_I_gain;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <getPositionGainP>:

	uint32_t pid_position_P_position_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_POSITION_P_POSITION_I, pid_position_P_position_I);
}

uint32_t getPositionGainP(TMC4671_Controller *tmc4671_controller){
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.position_P_gain;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <getPositionGainI>:

	uint32_t pid_position_P_position_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_POSITION_P_POSITION_I, pid_position_P_position_I);
}

uint32_t getPositionGainI(TMC4671_Controller *tmc4671_controller){
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.position_I_gain;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <getFirmwareVersion>:
void control_disable(){
	HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CTRL_EN_Pin, GPIO_PIN_RESET);
}
//---------------------------------------------------------------------------------------------------------

uint32_t getFirmwareVersion(){
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
	uint8_t temp_bytes[4];

	EEPROM_Read(DEF_ADDR_VERSION_NUMBER, temp_bytes, 4);
 80035e2:	463b      	mov	r3, r7
 80035e4:	2204      	movs	r2, #4
 80035e6:	4619      	mov	r1, r3
 80035e8:	f44f 7022 	mov.w	r0, #648	@ 0x288
 80035ec:	f7fd fca0 	bl	8000f30 <EEPROM_Read>

	uint32_t version_no = bytes2uInt(temp_bytes);
 80035f0:	463b      	mov	r3, r7
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd fcba 	bl	8000f6c <bytes2uInt>
 80035f8:	6078      	str	r0, [r7, #4]
	return version_no;
 80035fa:	687b      	ldr	r3, [r7, #4]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <Reset_Handler>:
 8003604:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800363c <LoopFillZerobss+0xe>
 8003608:	f7ff fdda 	bl	80031c0 <SystemInit>
 800360c:	480c      	ldr	r0, [pc, #48]	@ (8003640 <LoopFillZerobss+0x12>)
 800360e:	490d      	ldr	r1, [pc, #52]	@ (8003644 <LoopFillZerobss+0x16>)
 8003610:	4a0d      	ldr	r2, [pc, #52]	@ (8003648 <LoopFillZerobss+0x1a>)
 8003612:	2300      	movs	r3, #0
 8003614:	e002      	b.n	800361c <LoopCopyDataInit>

08003616 <CopyDataInit>:
 8003616:	58d4      	ldr	r4, [r2, r3]
 8003618:	50c4      	str	r4, [r0, r3]
 800361a:	3304      	adds	r3, #4

0800361c <LoopCopyDataInit>:
 800361c:	18c4      	adds	r4, r0, r3
 800361e:	428c      	cmp	r4, r1
 8003620:	d3f9      	bcc.n	8003616 <CopyDataInit>
 8003622:	4a0a      	ldr	r2, [pc, #40]	@ (800364c <LoopFillZerobss+0x1e>)
 8003624:	4c0a      	ldr	r4, [pc, #40]	@ (8003650 <LoopFillZerobss+0x22>)
 8003626:	2300      	movs	r3, #0
 8003628:	e001      	b.n	800362e <LoopFillZerobss>

0800362a <FillZerobss>:
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	3204      	adds	r2, #4

0800362e <LoopFillZerobss>:
 800362e:	42a2      	cmp	r2, r4
 8003630:	d3fb      	bcc.n	800362a <FillZerobss>
 8003632:	f003 fde3 	bl	80071fc <__libc_init_array>
 8003636:	f7fd fee3 	bl	8001400 <main>
 800363a:	4770      	bx	lr
 800363c:	20020000 	.word	0x20020000
 8003640:	20000000 	.word	0x20000000
 8003644:	20000068 	.word	0x20000068
 8003648:	08007eac 	.word	0x08007eac
 800364c:	20000068 	.word	0x20000068
 8003650:	20000508 	.word	0x20000508

08003654 <ADC_IRQHandler>:
 8003654:	e7fe      	b.n	8003654 <ADC_IRQHandler>
	...

08003658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800365c:	4b0e      	ldr	r3, [pc, #56]	@ (8003698 <HAL_Init+0x40>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0d      	ldr	r2, [pc, #52]	@ (8003698 <HAL_Init+0x40>)
 8003662:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003666:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <HAL_Init+0x40>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0a      	ldr	r2, [pc, #40]	@ (8003698 <HAL_Init+0x40>)
 800366e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003672:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003674:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <HAL_Init+0x40>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a07      	ldr	r2, [pc, #28]	@ (8003698 <HAL_Init+0x40>)
 800367a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800367e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003680:	2003      	movs	r0, #3
 8003682:	f000 f931 	bl	80038e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003686:	200f      	movs	r0, #15
 8003688:	f000 f808 	bl	800369c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800368c:	f7ff fafe 	bl	8002c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023c00 	.word	0x40023c00

0800369c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036a4:	4b12      	ldr	r3, [pc, #72]	@ (80036f0 <HAL_InitTick+0x54>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <HAL_InitTick+0x58>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	4619      	mov	r1, r3
 80036ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f93b 	bl	8003936 <HAL_SYSTICK_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e00e      	b.n	80036e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b0f      	cmp	r3, #15
 80036ce:	d80a      	bhi.n	80036e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036d0:	2200      	movs	r2, #0
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	f000 f911 	bl	80038fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036dc:	4a06      	ldr	r2, [pc, #24]	@ (80036f8 <HAL_InitTick+0x5c>)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e000      	b.n	80036e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000008 	.word	0x20000008
 80036f8:	20000004 	.word	0x20000004

080036fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_IncTick+0x20>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <HAL_IncTick+0x24>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4413      	add	r3, r2
 800370c:	4a04      	ldr	r2, [pc, #16]	@ (8003720 <HAL_IncTick+0x24>)
 800370e:	6013      	str	r3, [r2, #0]
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000008 	.word	0x20000008
 8003720:	200003b8 	.word	0x200003b8

08003724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return uwTick;
 8003728:	4b03      	ldr	r3, [pc, #12]	@ (8003738 <HAL_GetTick+0x14>)
 800372a:	681b      	ldr	r3, [r3, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	200003b8 	.word	0x200003b8

0800373c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003744:	f7ff ffee 	bl	8003724 <HAL_GetTick>
 8003748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003754:	d005      	beq.n	8003762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003756:	4b0a      	ldr	r3, [pc, #40]	@ (8003780 <HAL_Delay+0x44>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003762:	bf00      	nop
 8003764:	f7ff ffde 	bl	8003724 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	429a      	cmp	r2, r3
 8003772:	d8f7      	bhi.n	8003764 <HAL_Delay+0x28>
  {
  }
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000008 	.word	0x20000008

08003784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003794:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037a0:	4013      	ands	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037b6:	4a04      	ldr	r2, [pc, #16]	@ (80037c8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	60d3      	str	r3, [r2, #12]
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d0:	4b04      	ldr	r3, [pc, #16]	@ (80037e4 <__NVIC_GetPriorityGrouping+0x18>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	f003 0307 	and.w	r3, r3, #7
}
 80037da:	4618      	mov	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	db0a      	blt.n	8003812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	490c      	ldr	r1, [pc, #48]	@ (8003834 <__NVIC_SetPriority+0x4c>)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	440b      	add	r3, r1
 800380c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003810:	e00a      	b.n	8003828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4908      	ldr	r1, [pc, #32]	@ (8003838 <__NVIC_SetPriority+0x50>)
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	3b04      	subs	r3, #4
 8003820:	0112      	lsls	r2, r2, #4
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	440b      	add	r3, r1
 8003826:	761a      	strb	r2, [r3, #24]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000e100 	.word	0xe000e100
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	@ 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f1c3 0307 	rsb	r3, r3, #7
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf28      	it	cs
 800385a:	2304      	movcs	r3, #4
 800385c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3304      	adds	r3, #4
 8003862:	2b06      	cmp	r3, #6
 8003864:	d902      	bls.n	800386c <NVIC_EncodePriority+0x30>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3b03      	subs	r3, #3
 800386a:	e000      	b.n	800386e <NVIC_EncodePriority+0x32>
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	f04f 32ff 	mov.w	r2, #4294967295
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43da      	mvns	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	401a      	ands	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003884:	f04f 31ff 	mov.w	r1, #4294967295
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	43d9      	mvns	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	4313      	orrs	r3, r2
         );
}
 8003896:	4618      	mov	r0, r3
 8003898:	3724      	adds	r7, #36	@ 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038b4:	d301      	bcc.n	80038ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b6:	2301      	movs	r3, #1
 80038b8:	e00f      	b.n	80038da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ba:	4a0a      	ldr	r2, [pc, #40]	@ (80038e4 <SysTick_Config+0x40>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038c2:	210f      	movs	r1, #15
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	f7ff ff8e 	bl	80037e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <SysTick_Config+0x40>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d2:	4b04      	ldr	r3, [pc, #16]	@ (80038e4 <SysTick_Config+0x40>)
 80038d4:	2207      	movs	r2, #7
 80038d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	e000e010 	.word	0xe000e010

080038e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff47 	bl	8003784 <__NVIC_SetPriorityGrouping>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003910:	f7ff ff5c 	bl	80037cc <__NVIC_GetPriorityGrouping>
 8003914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	6978      	ldr	r0, [r7, #20]
 800391c:	f7ff ff8e 	bl	800383c <NVIC_EncodePriority>
 8003920:	4602      	mov	r2, r0
 8003922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff5d 	bl	80037e8 <__NVIC_SetPriority>
}
 800392e:	bf00      	nop
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ffb0 	bl	80038a4 <SysTick_Config>
 8003944:	4603      	mov	r3, r0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_GPIO_Init>:
 8003950:	b480      	push	{r7}
 8003952:	b089      	sub	sp, #36	@ 0x24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e159      	b.n	8003c20 <HAL_GPIO_Init+0x2d0>
 800396c:	2201      	movs	r2, #1
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	429a      	cmp	r2, r3
 8003986:	f040 8148 	bne.w	8003c1a <HAL_GPIO_Init+0x2ca>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d005      	beq.n	80039a2 <HAL_GPIO_Init+0x52>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d130      	bne.n	8003a04 <HAL_GPIO_Init+0xb4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	2203      	movs	r2, #3
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	609a      	str	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	2201      	movs	r2, #1
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 0201 	and.w	r2, r3, #1
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d017      	beq.n	8003a40 <HAL_GPIO_Init+0xf0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	60da      	str	r2, [r3, #12]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d123      	bne.n	8003a94 <HAL_GPIO_Init+0x144>
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	08da      	lsrs	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3208      	adds	r2, #8
 8003a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	220f      	movs	r2, #15
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	08da      	lsrs	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3208      	adds	r2, #8
 8003a8e:	69b9      	ldr	r1, [r7, #24]
 8003a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0203 	and.w	r2, r3, #3
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80a2 	beq.w	8003c1a <HAL_GPIO_Init+0x2ca>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	4b57      	ldr	r3, [pc, #348]	@ (8003c38 <HAL_GPIO_Init+0x2e8>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	4a56      	ldr	r2, [pc, #344]	@ (8003c38 <HAL_GPIO_Init+0x2e8>)
 8003ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ae6:	4b54      	ldr	r3, [pc, #336]	@ (8003c38 <HAL_GPIO_Init+0x2e8>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a52      	ldr	r2, [pc, #328]	@ (8003c3c <HAL_GPIO_Init+0x2ec>)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	3302      	adds	r3, #2
 8003afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	220f      	movs	r2, #15
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a49      	ldr	r2, [pc, #292]	@ (8003c40 <HAL_GPIO_Init+0x2f0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d019      	beq.n	8003b52 <HAL_GPIO_Init+0x202>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a48      	ldr	r2, [pc, #288]	@ (8003c44 <HAL_GPIO_Init+0x2f4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <HAL_GPIO_Init+0x1fe>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a47      	ldr	r2, [pc, #284]	@ (8003c48 <HAL_GPIO_Init+0x2f8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00d      	beq.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a46      	ldr	r2, [pc, #280]	@ (8003c4c <HAL_GPIO_Init+0x2fc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d007      	beq.n	8003b46 <HAL_GPIO_Init+0x1f6>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a45      	ldr	r2, [pc, #276]	@ (8003c50 <HAL_GPIO_Init+0x300>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <HAL_GPIO_Init+0x1f2>
 8003b3e:	2304      	movs	r3, #4
 8003b40:	e008      	b.n	8003b54 <HAL_GPIO_Init+0x204>
 8003b42:	2307      	movs	r3, #7
 8003b44:	e006      	b.n	8003b54 <HAL_GPIO_Init+0x204>
 8003b46:	2303      	movs	r3, #3
 8003b48:	e004      	b.n	8003b54 <HAL_GPIO_Init+0x204>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e002      	b.n	8003b54 <HAL_GPIO_Init+0x204>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <HAL_GPIO_Init+0x204>
 8003b52:	2300      	movs	r3, #0
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	f002 0203 	and.w	r2, r2, #3
 8003b5a:	0092      	lsls	r2, r2, #2
 8003b5c:	4093      	lsls	r3, r2
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	4935      	ldr	r1, [pc, #212]	@ (8003c3c <HAL_GPIO_Init+0x2ec>)
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b72:	4b38      	ldr	r3, [pc, #224]	@ (8003c54 <HAL_GPIO_Init+0x304>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x246>
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	4a2f      	ldr	r2, [pc, #188]	@ (8003c54 <HAL_GPIO_Init+0x304>)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	6093      	str	r3, [r2, #8]
 8003b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c54 <HAL_GPIO_Init+0x304>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x270>
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	4a24      	ldr	r2, [pc, #144]	@ (8003c54 <HAL_GPIO_Init+0x304>)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	60d3      	str	r3, [r2, #12]
 8003bc6:	4b23      	ldr	r3, [pc, #140]	@ (8003c54 <HAL_GPIO_Init+0x304>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x29a>
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	4a1a      	ldr	r2, [pc, #104]	@ (8003c54 <HAL_GPIO_Init+0x304>)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	6053      	str	r3, [r2, #4]
 8003bf0:	4b18      	ldr	r3, [pc, #96]	@ (8003c54 <HAL_GPIO_Init+0x304>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x2c4>
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	4a0f      	ldr	r2, [pc, #60]	@ (8003c54 <HAL_GPIO_Init+0x304>)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	61fb      	str	r3, [r7, #28]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	2b0f      	cmp	r3, #15
 8003c24:	f67f aea2 	bls.w	800396c <HAL_GPIO_Init+0x1c>
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	3724      	adds	r7, #36	@ 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40013800 	.word	0x40013800
 8003c40:	40020000 	.word	0x40020000
 8003c44:	40020400 	.word	0x40020400
 8003c48:	40020800 	.word	0x40020800
 8003c4c:	40020c00 	.word	0x40020c00
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40013c00 	.word	0x40013c00

08003c58 <HAL_GPIO_WritePin>:
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	807b      	strh	r3, [r7, #2]
 8003c64:	4613      	mov	r3, r2
 8003c66:	707b      	strb	r3, [r7, #1]
 8003c68:	787b      	ldrb	r3, [r7, #1]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_WritePin+0x1e>
 8003c6e:	887a      	ldrh	r2, [r7, #2]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	619a      	str	r2, [r3, #24]
 8003c74:	e003      	b.n	8003c7e <HAL_GPIO_WritePin+0x26>
 8003c76:	887b      	ldrh	r3, [r7, #2]
 8003c78:	041a      	lsls	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	619a      	str	r2, [r3, #24]
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_I2C_Init>:
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_I2C_Init+0x12>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e12b      	b.n	8003ef6 <HAL_I2C_Init+0x26a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_I2C_Init+0x2c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff f812 	bl	8002cdc <HAL_I2C_MspInit>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2224      	movs	r2, #36	@ 0x24
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0201 	bic.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f001 ff10 	bl	8005b14 <HAL_RCC_GetPCLK1Freq>
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	4a81      	ldr	r2, [pc, #516]	@ (8003f00 <HAL_I2C_Init+0x274>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d807      	bhi.n	8003d10 <HAL_I2C_Init+0x84>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a80      	ldr	r2, [pc, #512]	@ (8003f04 <HAL_I2C_Init+0x278>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	bf94      	ite	ls
 8003d08:	2301      	movls	r3, #1
 8003d0a:	2300      	movhi	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e006      	b.n	8003d1e <HAL_I2C_Init+0x92>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a7d      	ldr	r2, [pc, #500]	@ (8003f08 <HAL_I2C_Init+0x27c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	bf94      	ite	ls
 8003d18:	2301      	movls	r3, #1
 8003d1a:	2300      	movhi	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Init+0x9a>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0e7      	b.n	8003ef6 <HAL_I2C_Init+0x26a>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4a78      	ldr	r2, [pc, #480]	@ (8003f0c <HAL_I2C_Init+0x280>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	0c9b      	lsrs	r3, r3, #18
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	4a6a      	ldr	r2, [pc, #424]	@ (8003f00 <HAL_I2C_Init+0x274>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d802      	bhi.n	8003d60 <HAL_I2C_Init+0xd4>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	e009      	b.n	8003d74 <HAL_I2C_Init+0xe8>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	4a69      	ldr	r2, [pc, #420]	@ (8003f10 <HAL_I2C_Init+0x284>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	099b      	lsrs	r3, r3, #6
 8003d72:	3301      	adds	r3, #1
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6213      	str	r3, [r2, #32]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	495c      	ldr	r1, [pc, #368]	@ (8003f00 <HAL_I2C_Init+0x274>)
 8003d90:	428b      	cmp	r3, r1
 8003d92:	d819      	bhi.n	8003dc8 <HAL_I2C_Init+0x13c>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1e59      	subs	r1, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003da2:	1c59      	adds	r1, r3, #1
 8003da4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003da8:	400b      	ands	r3, r1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_I2C_Init+0x138>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1e59      	subs	r1, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc2:	e051      	b.n	8003e68 <HAL_I2C_Init+0x1dc>
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	e04f      	b.n	8003e68 <HAL_I2C_Init+0x1dc>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d111      	bne.n	8003df4 <HAL_I2C_Init+0x168>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e58      	subs	r0, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	440b      	add	r3, r1
 8003dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de2:	3301      	adds	r3, #1
 8003de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e012      	b.n	8003e1a <HAL_I2C_Init+0x18e>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1e58      	subs	r0, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6859      	ldr	r1, [r3, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	0099      	lsls	r1, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Init+0x196>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e022      	b.n	8003e68 <HAL_I2C_Init+0x1dc>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10e      	bne.n	8003e48 <HAL_I2C_Init+0x1bc>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1e58      	subs	r0, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	440b      	add	r3, r1
 8003e38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e46:	e00f      	b.n	8003e68 <HAL_I2C_Init+0x1dc>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	0099      	lsls	r1, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	6809      	ldr	r1, [r1, #0]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61cb      	str	r3, [r1, #28]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6911      	ldr	r1, [r2, #16]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68d2      	ldr	r2, [r2, #12]
 8003ea2:	4311      	orrs	r1, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6093      	str	r3, [r2, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	000186a0 	.word	0x000186a0
 8003f04:	001e847f 	.word	0x001e847f
 8003f08:	003d08ff 	.word	0x003d08ff
 8003f0c:	431bde83 	.word	0x431bde83
 8003f10:	10624dd3 	.word	0x10624dd3

08003f14 <HAL_I2C_Master_Transmit>:
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	460b      	mov	r3, r1
 8003f22:	817b      	strh	r3, [r7, #10]
 8003f24:	4613      	mov	r3, r2
 8003f26:	813b      	strh	r3, [r7, #8]
 8003f28:	f7ff fbfc 	bl	8003724 <HAL_GetTick>
 8003f2c:	6178      	str	r0, [r7, #20]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	f040 80e0 	bne.w	80040fc <HAL_I2C_Master_Transmit+0x1e8>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	2319      	movs	r3, #25
 8003f42:	2201      	movs	r2, #1
 8003f44:	4970      	ldr	r1, [pc, #448]	@ (8004108 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 ff7e 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_I2C_Master_Transmit+0x42>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e0d3      	b.n	80040fe <HAL_I2C_Master_Transmit+0x1ea>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_I2C_Master_Transmit+0x50>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e0cc      	b.n	80040fe <HAL_I2C_Master_Transmit+0x1ea>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d007      	beq.n	8003f8a <HAL_I2C_Master_Transmit+0x76>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0201 	orr.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2221      	movs	r2, #33	@ 0x21
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	893a      	ldrh	r2, [r7, #8]
 8003fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a50      	ldr	r2, [pc, #320]	@ (800410c <HAL_I2C_Master_Transmit+0x1f8>)
 8003fca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003fcc:	8979      	ldrh	r1, [r7, #10]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fd00 	bl	80049d8 <I2C_MasterRequestWrite>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_I2C_Master_Transmit+0xce>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e08d      	b.n	80040fe <HAL_I2C_Master_Transmit+0x1ea>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	e066      	b.n	80040c8 <HAL_I2C_Master_Transmit+0x1b4>
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	6a39      	ldr	r1, [r7, #32]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f001 f83c 	bl	800507c <I2C_WaitOnTXEFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <HAL_I2C_Master_Transmit+0x112>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	2b04      	cmp	r3, #4
 8004010:	d107      	bne.n	8004022 <HAL_I2C_Master_Transmit+0x10e>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	2301      	movs	r3, #1
 8004024:	e06b      	b.n	80040fe <HAL_I2C_Master_Transmit+0x1ea>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	611a      	str	r2, [r3, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	625a      	str	r2, [r3, #36]	@ 0x24
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b04      	cmp	r3, #4
 8004062:	d11b      	bne.n	800409c <HAL_I2C_Master_Transmit+0x188>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	d017      	beq.n	800409c <HAL_I2C_Master_Transmit+0x188>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	611a      	str	r2, [r3, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	625a      	str	r2, [r3, #36]	@ 0x24
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	6a39      	ldr	r1, [r7, #32]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f001 f833 	bl	800510c <I2C_WaitOnBTFFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00d      	beq.n	80040c8 <HAL_I2C_Master_Transmit+0x1b4>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d107      	bne.n	80040c4 <HAL_I2C_Master_Transmit+0x1b0>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	2301      	movs	r3, #1
 80040c6:	e01a      	b.n	80040fe <HAL_I2C_Master_Transmit+0x1ea>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d194      	bne.n	8003ffa <HAL_I2C_Master_Transmit+0xe6>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80040f8:	2300      	movs	r3, #0
 80040fa:	e000      	b.n	80040fe <HAL_I2C_Master_Transmit+0x1ea>
 80040fc:	2302      	movs	r3, #2
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	00100002 	.word	0x00100002
 800410c:	ffff0000 	.word	0xffff0000

08004110 <HAL_I2C_Master_Receive>:
 8004110:	b580      	push	{r7, lr}
 8004112:	b08c      	sub	sp, #48	@ 0x30
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	461a      	mov	r2, r3
 800411c:	460b      	mov	r3, r1
 800411e:	817b      	strh	r3, [r7, #10]
 8004120:	4613      	mov	r3, r2
 8004122:	813b      	strh	r3, [r7, #8]
 8004124:	f7ff fafe 	bl	8003724 <HAL_GetTick>
 8004128:	6278      	str	r0, [r7, #36]	@ 0x24
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b20      	cmp	r3, #32
 8004134:	f040 8217 	bne.w	8004566 <HAL_I2C_Master_Receive+0x456>
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2319      	movs	r3, #25
 800413e:	2201      	movs	r2, #1
 8004140:	497c      	ldr	r1, [pc, #496]	@ (8004334 <HAL_I2C_Master_Receive+0x224>)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fe80 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Master_Receive+0x42>
 800414e:	2302      	movs	r3, #2
 8004150:	e20a      	b.n	8004568 <HAL_I2C_Master_Receive+0x458>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_I2C_Master_Receive+0x50>
 800415c:	2302      	movs	r3, #2
 800415e:	e203      	b.n	8004568 <HAL_I2C_Master_Receive+0x458>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b01      	cmp	r3, #1
 8004174:	d007      	beq.n	8004186 <HAL_I2C_Master_Receive+0x76>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0201 	orr.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2222      	movs	r2, #34	@ 0x22
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2210      	movs	r2, #16
 80041a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	893a      	ldrh	r2, [r7, #8]
 80041b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a5c      	ldr	r2, [pc, #368]	@ (8004338 <HAL_I2C_Master_Receive+0x228>)
 80041c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80041c8:	8979      	ldrh	r1, [r7, #10]
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 fc84 	bl	8004adc <I2C_MasterRequestRead>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_I2C_Master_Receive+0xce>
 80041da:	2301      	movs	r3, #1
 80041dc:	e1c4      	b.n	8004568 <HAL_I2C_Master_Receive+0x458>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d113      	bne.n	800420e <HAL_I2C_Master_Receive+0xfe>
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	623b      	str	r3, [r7, #32]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	623b      	str	r3, [r7, #32]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	e198      	b.n	8004540 <HAL_I2C_Master_Receive+0x430>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004212:	2b01      	cmp	r3, #1
 8004214:	d11b      	bne.n	800424e <HAL_I2C_Master_Receive+0x13e>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	e178      	b.n	8004540 <HAL_I2C_Master_Receive+0x430>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004252:	2b02      	cmp	r3, #2
 8004254:	d11b      	bne.n	800428e <HAL_I2C_Master_Receive+0x17e>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	2300      	movs	r3, #0
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	e158      	b.n	8004540 <HAL_I2C_Master_Receive+0x430>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	e144      	b.n	8004540 <HAL_I2C_Master_Receive+0x430>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	f200 80f1 	bhi.w	80044a2 <HAL_I2C_Master_Receive+0x392>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d123      	bne.n	8004310 <HAL_I2C_Master_Receive+0x200>
 80042c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 ff65 	bl	800519c <I2C_WaitOnRXNEFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_I2C_Master_Receive+0x1cc>
 80042d8:	2301      	movs	r3, #1
 80042da:	e145      	b.n	8004568 <HAL_I2C_Master_Receive+0x458>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800430e:	e117      	b.n	8004540 <HAL_I2C_Master_Receive+0x430>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004314:	2b02      	cmp	r3, #2
 8004316:	d14e      	bne.n	80043b6 <HAL_I2C_Master_Receive+0x2a6>
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431e:	2200      	movs	r2, #0
 8004320:	4906      	ldr	r1, [pc, #24]	@ (800433c <HAL_I2C_Master_Receive+0x22c>)
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fd90 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d008      	beq.n	8004340 <HAL_I2C_Master_Receive+0x230>
 800432e:	2301      	movs	r3, #1
 8004330:	e11a      	b.n	8004568 <HAL_I2C_Master_Receive+0x458>
 8004332:	bf00      	nop
 8004334:	00100002 	.word	0x00100002
 8004338:	ffff0000 	.word	0xffff0000
 800433c:	00010004 	.word	0x00010004
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	625a      	str	r2, [r3, #36]	@ 0x24
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	625a      	str	r2, [r3, #36]	@ 0x24
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043b4:	e0c4      	b.n	8004540 <HAL_I2C_Master_Receive+0x430>
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	2200      	movs	r2, #0
 80043be:	496c      	ldr	r1, [pc, #432]	@ (8004570 <HAL_I2C_Master_Receive+0x460>)
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fd41 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_I2C_Master_Receive+0x2c0>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0cb      	b.n	8004568 <HAL_I2C_Master_Receive+0x458>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	2200      	movs	r2, #0
 800441a:	4955      	ldr	r1, [pc, #340]	@ (8004570 <HAL_I2C_Master_Receive+0x460>)
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fd13 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_I2C_Master_Receive+0x31c>
 8004428:	2301      	movs	r3, #1
 800442a:	e09d      	b.n	8004568 <HAL_I2C_Master_Receive+0x458>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	625a      	str	r2, [r3, #36]	@ 0x24
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	625a      	str	r2, [r3, #36]	@ 0x24
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044a0:	e04e      	b.n	8004540 <HAL_I2C_Master_Receive+0x430>
 80044a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fe78 	bl	800519c <I2C_WaitOnRXNEFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_I2C_Master_Receive+0x3a6>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e058      	b.n	8004568 <HAL_I2C_Master_Receive+0x458>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d124      	bne.n	8004540 <HAL_I2C_Master_Receive+0x430>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d107      	bne.n	800450e <HAL_I2C_Master_Receive+0x3fe>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	@ 0x24
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004544:	2b00      	cmp	r3, #0
 8004546:	f47f aeb6 	bne.w	80042b6 <HAL_I2C_Master_Receive+0x1a6>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004562:	2300      	movs	r3, #0
 8004564:	e000      	b.n	8004568 <HAL_I2C_Master_Receive+0x458>
 8004566:	2302      	movs	r3, #2
 8004568:	4618      	mov	r0, r3
 800456a:	3728      	adds	r7, #40	@ 0x28
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	00010004 	.word	0x00010004

08004574 <HAL_I2C_Mem_Read>:
 8004574:	b580      	push	{r7, lr}
 8004576:	b08c      	sub	sp, #48	@ 0x30
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	4608      	mov	r0, r1
 800457e:	4611      	mov	r1, r2
 8004580:	461a      	mov	r2, r3
 8004582:	4603      	mov	r3, r0
 8004584:	817b      	strh	r3, [r7, #10]
 8004586:	460b      	mov	r3, r1
 8004588:	813b      	strh	r3, [r7, #8]
 800458a:	4613      	mov	r3, r2
 800458c:	80fb      	strh	r3, [r7, #6]
 800458e:	f7ff f8c9 	bl	8003724 <HAL_GetTick>
 8004592:	6278      	str	r0, [r7, #36]	@ 0x24
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b20      	cmp	r3, #32
 800459e:	f040 8214 	bne.w	80049ca <HAL_I2C_Mem_Read+0x456>
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2319      	movs	r3, #25
 80045a8:	2201      	movs	r2, #1
 80045aa:	497b      	ldr	r1, [pc, #492]	@ (8004798 <HAL_I2C_Mem_Read+0x224>)
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fc4b 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Mem_Read+0x48>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e207      	b.n	80049cc <HAL_I2C_Mem_Read+0x458>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_I2C_Mem_Read+0x56>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e200      	b.n	80049cc <HAL_I2C_Mem_Read+0x458>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d007      	beq.n	80045f0 <HAL_I2C_Mem_Read+0x7c>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2222      	movs	r2, #34	@ 0x22
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2240      	movs	r2, #64	@ 0x40
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	641a      	str	r2, [r3, #64]	@ 0x40
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800461a:	625a      	str	r2, [r3, #36]	@ 0x24
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004620:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a5b      	ldr	r2, [pc, #364]	@ (800479c <HAL_I2C_Mem_Read+0x228>)
 8004630:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004632:	88f8      	ldrh	r0, [r7, #6]
 8004634:	893a      	ldrh	r2, [r7, #8]
 8004636:	8979      	ldrh	r1, [r7, #10]
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	4603      	mov	r3, r0
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fb18 	bl	8004c78 <I2C_RequestMemoryRead>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_Mem_Read+0xde>
 800464e:	2301      	movs	r3, #1
 8004650:	e1bc      	b.n	80049cc <HAL_I2C_Mem_Read+0x458>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004656:	2b00      	cmp	r3, #0
 8004658:	d113      	bne.n	8004682 <HAL_I2C_Mem_Read+0x10e>
 800465a:	2300      	movs	r3, #0
 800465c:	623b      	str	r3, [r7, #32]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	623b      	str	r3, [r7, #32]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	623b      	str	r3, [r7, #32]
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e190      	b.n	80049a4 <HAL_I2C_Mem_Read+0x430>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004686:	2b01      	cmp	r3, #1
 8004688:	d11b      	bne.n	80046c2 <HAL_I2C_Mem_Read+0x14e>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e170      	b.n	80049a4 <HAL_I2C_Mem_Read+0x430>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d11b      	bne.n	8004702 <HAL_I2C_Mem_Read+0x18e>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	e150      	b.n	80049a4 <HAL_I2C_Mem_Read+0x430>
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	e144      	b.n	80049a4 <HAL_I2C_Mem_Read+0x430>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471e:	2b03      	cmp	r3, #3
 8004720:	f200 80f1 	bhi.w	8004906 <HAL_I2C_Mem_Read+0x392>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004728:	2b01      	cmp	r3, #1
 800472a:	d123      	bne.n	8004774 <HAL_I2C_Mem_Read+0x200>
 800472c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fd33 	bl	800519c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_I2C_Mem_Read+0x1cc>
 800473c:	2301      	movs	r3, #1
 800473e:	e145      	b.n	80049cc <HAL_I2C_Mem_Read+0x458>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	625a      	str	r2, [r3, #36]	@ 0x24
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004772:	e117      	b.n	80049a4 <HAL_I2C_Mem_Read+0x430>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004778:	2b02      	cmp	r3, #2
 800477a:	d14e      	bne.n	800481a <HAL_I2C_Mem_Read+0x2a6>
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004782:	2200      	movs	r2, #0
 8004784:	4906      	ldr	r1, [pc, #24]	@ (80047a0 <HAL_I2C_Mem_Read+0x22c>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fb5e 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <HAL_I2C_Mem_Read+0x230>
 8004792:	2301      	movs	r3, #1
 8004794:	e11a      	b.n	80049cc <HAL_I2C_Mem_Read+0x458>
 8004796:	bf00      	nop
 8004798:	00100002 	.word	0x00100002
 800479c:	ffff0000 	.word	0xffff0000
 80047a0:	00010004 	.word	0x00010004
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	851a      	strh	r2, [r3, #40]	@ 0x28
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004818:	e0c4      	b.n	80049a4 <HAL_I2C_Mem_Read+0x430>
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	2200      	movs	r2, #0
 8004822:	496c      	ldr	r1, [pc, #432]	@ (80049d4 <HAL_I2C_Mem_Read+0x460>)
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fb0f 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_I2C_Mem_Read+0x2c0>
 8004830:	2301      	movs	r3, #1
 8004832:	e0cb      	b.n	80049cc <HAL_I2C_Mem_Read+0x458>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	625a      	str	r2, [r3, #36]	@ 0x24
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487c:	2200      	movs	r2, #0
 800487e:	4955      	ldr	r1, [pc, #340]	@ (80049d4 <HAL_I2C_Mem_Read+0x460>)
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 fae1 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_I2C_Mem_Read+0x31c>
 800488c:	2301      	movs	r3, #1
 800488e:	e09d      	b.n	80049cc <HAL_I2C_Mem_Read+0x458>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	701a      	strb	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004904:	e04e      	b.n	80049a4 <HAL_I2C_Mem_Read+0x430>
 8004906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004908:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fc46 	bl	800519c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_I2C_Mem_Read+0x3a6>
 8004916:	2301      	movs	r3, #1
 8004918:	e058      	b.n	80049cc <HAL_I2C_Mem_Read+0x458>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	625a      	str	r2, [r3, #36]	@ 0x24
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b04      	cmp	r3, #4
 8004958:	d124      	bne.n	80049a4 <HAL_I2C_Mem_Read+0x430>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800495e:	2b03      	cmp	r3, #3
 8004960:	d107      	bne.n	8004972 <HAL_I2C_Mem_Read+0x3fe>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	701a      	strb	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	625a      	str	r2, [r3, #36]	@ 0x24
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f47f aeb6 	bne.w	800471a <HAL_I2C_Mem_Read+0x1a6>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80049c6:	2300      	movs	r3, #0
 80049c8:	e000      	b.n	80049cc <HAL_I2C_Mem_Read+0x458>
 80049ca:	2302      	movs	r3, #2
 80049cc:	4618      	mov	r0, r3
 80049ce:	3728      	adds	r7, #40	@ 0x28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	00010004 	.word	0x00010004

080049d8 <I2C_MasterRequestWrite>:
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	607a      	str	r2, [r7, #4]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	460b      	mov	r3, r1
 80049e6:	817b      	strh	r3, [r7, #10]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d006      	beq.n	8004a02 <I2C_MasterRequestWrite+0x2a>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d003      	beq.n	8004a02 <I2C_MasterRequestWrite+0x2a>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a00:	d108      	bne.n	8004a14 <I2C_MasterRequestWrite+0x3c>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e00b      	b.n	8004a2c <I2C_MasterRequestWrite+0x54>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a18:	2b12      	cmp	r3, #18
 8004a1a:	d107      	bne.n	8004a2c <I2C_MasterRequestWrite+0x54>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 fa05 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <I2C_MasterRequestWrite+0x88>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a52:	d103      	bne.n	8004a5c <I2C_MasterRequestWrite+0x84>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e035      	b.n	8004acc <I2C_MasterRequestWrite+0xf4>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a68:	d108      	bne.n	8004a7c <I2C_MasterRequestWrite+0xa4>
 8004a6a:	897b      	ldrh	r3, [r7, #10]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a78:	611a      	str	r2, [r3, #16]
 8004a7a:	e01b      	b.n	8004ab4 <I2C_MasterRequestWrite+0xdc>
 8004a7c:	897b      	ldrh	r3, [r7, #10]
 8004a7e:	11db      	asrs	r3, r3, #7
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f003 0306 	and.w	r3, r3, #6
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f063 030f 	orn	r3, r3, #15
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	611a      	str	r2, [r3, #16]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	490e      	ldr	r1, [pc, #56]	@ (8004ad4 <I2C_MasterRequestWrite+0xfc>)
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fa4e 	bl	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <I2C_MasterRequestWrite+0xd2>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e010      	b.n	8004acc <I2C_MasterRequestWrite+0xf4>
 8004aaa:	897b      	ldrh	r3, [r7, #10]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	611a      	str	r2, [r3, #16]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4907      	ldr	r1, [pc, #28]	@ (8004ad8 <I2C_MasterRequestWrite+0x100>)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 fa3e 	bl	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <I2C_MasterRequestWrite+0xf2>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <I2C_MasterRequestWrite+0xf4>
 8004aca:	2300      	movs	r3, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	00010008 	.word	0x00010008
 8004ad8:	00010002 	.word	0x00010002

08004adc <I2C_MasterRequestRead>:
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	817b      	strh	r3, [r7, #10]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d006      	beq.n	8004b16 <I2C_MasterRequestRead+0x3a>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d003      	beq.n	8004b16 <I2C_MasterRequestRead+0x3a>
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b14:	d108      	bne.n	8004b28 <I2C_MasterRequestRead+0x4c>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e00b      	b.n	8004b40 <I2C_MasterRequestRead+0x64>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2c:	2b11      	cmp	r3, #17
 8004b2e:	d107      	bne.n	8004b40 <I2C_MasterRequestRead+0x64>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f97b 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00d      	beq.n	8004b74 <I2C_MasterRequestRead+0x98>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b66:	d103      	bne.n	8004b70 <I2C_MasterRequestRead+0x94>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b70:	2303      	movs	r3, #3
 8004b72:	e079      	b.n	8004c68 <I2C_MasterRequestRead+0x18c>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b7c:	d108      	bne.n	8004b90 <I2C_MasterRequestRead+0xb4>
 8004b7e:	897b      	ldrh	r3, [r7, #10]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	611a      	str	r2, [r3, #16]
 8004b8e:	e05f      	b.n	8004c50 <I2C_MasterRequestRead+0x174>
 8004b90:	897b      	ldrh	r3, [r7, #10]
 8004b92:	11db      	asrs	r3, r3, #7
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	f003 0306 	and.w	r3, r3, #6
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f063 030f 	orn	r3, r3, #15
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	611a      	str	r2, [r3, #16]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4930      	ldr	r1, [pc, #192]	@ (8004c70 <I2C_MasterRequestRead+0x194>)
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f9c4 	bl	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <I2C_MasterRequestRead+0xe2>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e054      	b.n	8004c68 <I2C_MasterRequestRead+0x18c>
 8004bbe:	897b      	ldrh	r3, [r7, #10]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	611a      	str	r2, [r3, #16]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	4929      	ldr	r1, [pc, #164]	@ (8004c74 <I2C_MasterRequestRead+0x198>)
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f9b4 	bl	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <I2C_MasterRequestRead+0x102>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e044      	b.n	8004c68 <I2C_MasterRequestRead+0x18c>
 8004bde:	2300      	movs	r3, #0
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f919 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00d      	beq.n	8004c38 <I2C_MasterRequestRead+0x15c>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c2a:	d103      	bne.n	8004c34 <I2C_MasterRequestRead+0x158>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c32:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c34:	2303      	movs	r3, #3
 8004c36:	e017      	b.n	8004c68 <I2C_MasterRequestRead+0x18c>
 8004c38:	897b      	ldrh	r3, [r7, #10]
 8004c3a:	11db      	asrs	r3, r3, #7
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	f003 0306 	and.w	r3, r3, #6
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f063 030e 	orn	r3, r3, #14
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	611a      	str	r2, [r3, #16]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4907      	ldr	r1, [pc, #28]	@ (8004c74 <I2C_MasterRequestRead+0x198>)
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f970 	bl	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <I2C_MasterRequestRead+0x18a>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <I2C_MasterRequestRead+0x18c>
 8004c66:	2300      	movs	r3, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	00010008 	.word	0x00010008
 8004c74:	00010002 	.word	0x00010002

08004c78 <I2C_RequestMemoryRead>:
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	4608      	mov	r0, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	461a      	mov	r2, r3
 8004c86:	4603      	mov	r3, r0
 8004c88:	817b      	strh	r3, [r7, #10]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	813b      	strh	r3, [r7, #8]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	80fb      	strh	r3, [r7, #6]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f8c2 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <I2C_RequestMemoryRead+0x6e>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cd8:	d103      	bne.n	8004ce2 <I2C_RequestMemoryRead+0x6a>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ce0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e0aa      	b.n	8004e3c <I2C_RequestMemoryRead+0x1c4>
 8004ce6:	897b      	ldrh	r3, [r7, #10]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cf4:	611a      	str	r2, [r3, #16]
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	6a3a      	ldr	r2, [r7, #32]
 8004cfa:	4952      	ldr	r1, [pc, #328]	@ (8004e44 <I2C_RequestMemoryRead+0x1cc>)
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f91d 	bl	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <I2C_RequestMemoryRead+0x94>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e097      	b.n	8004e3c <I2C_RequestMemoryRead+0x1c4>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d24:	6a39      	ldr	r1, [r7, #32]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f9a8 	bl	800507c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00d      	beq.n	8004d4e <I2C_RequestMemoryRead+0xd6>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d107      	bne.n	8004d4a <I2C_RequestMemoryRead+0xd2>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e076      	b.n	8004e3c <I2C_RequestMemoryRead+0x1c4>
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d105      	bne.n	8004d60 <I2C_RequestMemoryRead+0xe8>
 8004d54:	893b      	ldrh	r3, [r7, #8]
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	611a      	str	r2, [r3, #16]
 8004d5e:	e021      	b.n	8004da4 <I2C_RequestMemoryRead+0x12c>
 8004d60:	893b      	ldrh	r3, [r7, #8]
 8004d62:	0a1b      	lsrs	r3, r3, #8
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	611a      	str	r2, [r3, #16]
 8004d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d70:	6a39      	ldr	r1, [r7, #32]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f982 	bl	800507c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00d      	beq.n	8004d9a <I2C_RequestMemoryRead+0x122>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d107      	bne.n	8004d96 <I2C_RequestMemoryRead+0x11e>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	2301      	movs	r3, #1
 8004d98:	e050      	b.n	8004e3c <I2C_RequestMemoryRead+0x1c4>
 8004d9a:	893b      	ldrh	r3, [r7, #8]
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	611a      	str	r2, [r3, #16]
 8004da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da6:	6a39      	ldr	r1, [r7, #32]
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f967 	bl	800507c <I2C_WaitOnTXEFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00d      	beq.n	8004dd0 <I2C_RequestMemoryRead+0x158>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d107      	bne.n	8004dcc <I2C_RequestMemoryRead+0x154>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e035      	b.n	8004e3c <I2C_RequestMemoryRead+0x1c4>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f82b 	bl	8004e48 <I2C_WaitOnFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00d      	beq.n	8004e14 <I2C_RequestMemoryRead+0x19c>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e06:	d103      	bne.n	8004e10 <I2C_RequestMemoryRead+0x198>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e10:	2303      	movs	r3, #3
 8004e12:	e013      	b.n	8004e3c <I2C_RequestMemoryRead+0x1c4>
 8004e14:	897b      	ldrh	r3, [r7, #10]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	611a      	str	r2, [r3, #16]
 8004e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e26:	6a3a      	ldr	r2, [r7, #32]
 8004e28:	4906      	ldr	r1, [pc, #24]	@ (8004e44 <I2C_RequestMemoryRead+0x1cc>)
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f886 	bl	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <I2C_RequestMemoryRead+0x1c2>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <I2C_RequestMemoryRead+0x1c4>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	00010002 	.word	0x00010002

08004e48 <I2C_WaitOnFlagUntilTimeout>:
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	4613      	mov	r3, r2
 8004e56:	71fb      	strb	r3, [r7, #7]
 8004e58:	e048      	b.n	8004eec <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e60:	d044      	beq.n	8004eec <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004e62:	f7fe fc5f 	bl	8003724 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d302      	bcc.n	8004e78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d139      	bne.n	8004eec <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	0c1b      	lsrs	r3, r3, #16
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d10d      	bne.n	8004e9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	e00c      	b.n	8004eb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	43da      	mvns	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d116      	bne.n	8004eec <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	f043 0220 	orr.w	r2, r3, #32
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e023      	b.n	8004f34 <I2C_WaitOnFlagUntilTimeout+0xec>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	0c1b      	lsrs	r3, r3, #16
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d10d      	bne.n	8004f12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	43da      	mvns	r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4013      	ands	r3, r2
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bf0c      	ite	eq
 8004f08:	2301      	moveq	r3, #1
 8004f0a:	2300      	movne	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	e00c      	b.n	8004f2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	43da      	mvns	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d093      	beq.n	8004e5a <I2C_WaitOnFlagUntilTimeout+0x12>
 8004f32:	2300      	movs	r3, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	e071      	b.n	8005030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f5a:	d123      	bne.n	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f74:	615a      	str	r2, [r3, #20]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f90:	f043 0204 	orr.w	r2, r3, #4
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e067      	b.n	8005074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d041      	beq.n	8005030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004fac:	f7fe fbba 	bl	8003724 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d302      	bcc.n	8004fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d136      	bne.n	8005030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d10c      	bne.n	8004fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	43da      	mvns	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	bf14      	ite	ne
 8004fde:	2301      	movne	r3, #1
 8004fe0:	2300      	moveq	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	e00b      	b.n	8004ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	43da      	mvns	r2, r3
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bf14      	ite	ne
 8004ff8:	2301      	movne	r3, #1
 8004ffa:	2300      	moveq	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d016      	beq.n	8005030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	631a      	str	r2, [r3, #48]	@ 0x30
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	f043 0220 	orr.w	r2, r3, #32
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	641a      	str	r2, [r3, #64]	@ 0x40
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800502c:	2301      	movs	r3, #1
 800502e:	e021      	b.n	8005074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b01      	cmp	r3, #1
 8005038:	d10c      	bne.n	8005054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	43da      	mvns	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4013      	ands	r3, r2
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	e00b      	b.n	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	43da      	mvns	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	bf14      	ite	ne
 8005066:	2301      	movne	r3, #1
 8005068:	2300      	moveq	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	f47f af6d 	bne.w	8004f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8005072:	2300      	movs	r3, #0
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <I2C_WaitOnTXEFlagUntilTimeout>:
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	e034      	b.n	80050f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f8e3 	bl	8005256 <I2C_IsAcknowledgeFailed>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8005096:	2301      	movs	r3, #1
 8005098:	e034      	b.n	8005104 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d028      	beq.n	80050f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80050a2:	f7fe fb3f 	bl	8003724 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d302      	bcc.n	80050b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d11d      	bne.n	80050f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c2:	2b80      	cmp	r3, #128	@ 0x80
 80050c4:	d016      	beq.n	80050f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	f043 0220 	orr.w	r2, r3, #32
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80050f0:	2301      	movs	r3, #1
 80050f2:	e007      	b.n	8005104 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fe:	2b80      	cmp	r3, #128	@ 0x80
 8005100:	d1c3      	bne.n	800508a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8005102:	2300      	movs	r3, #0
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <I2C_WaitOnBTFFlagUntilTimeout>:
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	e034      	b.n	8005184 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f89b 	bl	8005256 <I2C_IsAcknowledgeFailed>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8005126:	2301      	movs	r3, #1
 8005128:	e034      	b.n	8005194 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d028      	beq.n	8005184 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8005132:	f7fe faf7 	bl	8003724 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d11d      	bne.n	8005184 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b04      	cmp	r3, #4
 8005154:	d016      	beq.n	8005184 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	631a      	str	r2, [r3, #48]	@ 0x30
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005170:	f043 0220 	orr.w	r2, r3, #32
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	641a      	str	r2, [r3, #64]	@ 0x40
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005180:	2301      	movs	r3, #1
 8005182:	e007      	b.n	8005194 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b04      	cmp	r3, #4
 8005190:	d1c3      	bne.n	800511a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8005192:	2300      	movs	r3, #0
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <I2C_WaitOnRXNEFlagUntilTimeout>:
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	e049      	b.n	800523e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d119      	bne.n	80051ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0210 	mvn.w	r2, #16
 80051c0:	615a      	str	r2, [r3, #20]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	641a      	str	r2, [r3, #64]	@ 0x40
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80051e8:	2301      	movs	r3, #1
 80051ea:	e030      	b.n	800524e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 80051ec:	f7fe fa9a 	bl	8003724 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d302      	bcc.n	8005202 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d11d      	bne.n	800523e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800520c:	2b40      	cmp	r3, #64	@ 0x40
 800520e:	d016      	beq.n	800523e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	@ 0x30
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	f043 0220 	orr.w	r2, r3, #32
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	641a      	str	r2, [r3, #64]	@ 0x40
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800523a:	2301      	movs	r3, #1
 800523c:	e007      	b.n	800524e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005248:	2b40      	cmp	r3, #64	@ 0x40
 800524a:	d1ae      	bne.n	80051aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 800524c:	2300      	movs	r3, #0
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <I2C_IsAcknowledgeFailed>:
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526c:	d11b      	bne.n	80052a6 <I2C_IsAcknowledgeFailed+0x50>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005276:	615a      	str	r2, [r3, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	@ 0x30
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	f043 0204 	orr.w	r2, r3, #4
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	641a      	str	r2, [r3, #64]	@ 0x40
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <I2C_IsAcknowledgeFailed+0x52>
 80052a6:	2300      	movs	r3, #0
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_RCC_OscConfig>:
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCC_OscConfig+0x12>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e267      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d075      	beq.n	80053be <HAL_RCC_OscConfig+0x10a>
 80052d2:	4b88      	ldr	r3, [pc, #544]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d00c      	beq.n	80052f8 <HAL_RCC_OscConfig+0x44>
 80052de:	4b85      	ldr	r3, [pc, #532]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d112      	bne.n	8005310 <HAL_RCC_OscConfig+0x5c>
 80052ea:	4b82      	ldr	r3, [pc, #520]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052f6:	d10b      	bne.n	8005310 <HAL_RCC_OscConfig+0x5c>
 80052f8:	4b7e      	ldr	r3, [pc, #504]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d05b      	beq.n	80053bc <HAL_RCC_OscConfig+0x108>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d157      	bne.n	80053bc <HAL_RCC_OscConfig+0x108>
 800530c:	2301      	movs	r3, #1
 800530e:	e242      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005318:	d106      	bne.n	8005328 <HAL_RCC_OscConfig+0x74>
 800531a:	4b76      	ldr	r3, [pc, #472]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a75      	ldr	r2, [pc, #468]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e01d      	b.n	8005364 <HAL_RCC_OscConfig+0xb0>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005330:	d10c      	bne.n	800534c <HAL_RCC_OscConfig+0x98>
 8005332:	4b70      	ldr	r3, [pc, #448]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a6f      	ldr	r2, [pc, #444]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	4b6d      	ldr	r3, [pc, #436]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a6c      	ldr	r2, [pc, #432]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	e00b      	b.n	8005364 <HAL_RCC_OscConfig+0xb0>
 800534c:	4b69      	ldr	r3, [pc, #420]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a68      	ldr	r2, [pc, #416]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	4b66      	ldr	r3, [pc, #408]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a65      	ldr	r2, [pc, #404]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 800535e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d013      	beq.n	8005394 <HAL_RCC_OscConfig+0xe0>
 800536c:	f7fe f9da 	bl	8003724 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0xd2>
 8005374:	f7fe f9d6 	bl	8003724 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b64      	cmp	r3, #100	@ 0x64
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0xd2>
 8005382:	2303      	movs	r3, #3
 8005384:	e207      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 8005386:	4b5b      	ldr	r3, [pc, #364]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f0      	beq.n	8005374 <HAL_RCC_OscConfig+0xc0>
 8005392:	e014      	b.n	80053be <HAL_RCC_OscConfig+0x10a>
 8005394:	f7fe f9c6 	bl	8003724 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0xfa>
 800539c:	f7fe f9c2 	bl	8003724 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b64      	cmp	r3, #100	@ 0x64
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0xfa>
 80053aa:	2303      	movs	r3, #3
 80053ac:	e1f3      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 80053ae:	4b51      	ldr	r3, [pc, #324]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0xe8>
 80053ba:	e000      	b.n	80053be <HAL_RCC_OscConfig+0x10a>
 80053bc:	bf00      	nop
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d063      	beq.n	8005492 <HAL_RCC_OscConfig+0x1de>
 80053ca:	4b4a      	ldr	r3, [pc, #296]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 030c 	and.w	r3, r3, #12
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00b      	beq.n	80053ee <HAL_RCC_OscConfig+0x13a>
 80053d6:	4b47      	ldr	r3, [pc, #284]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d11c      	bne.n	800541c <HAL_RCC_OscConfig+0x168>
 80053e2:	4b44      	ldr	r3, [pc, #272]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d116      	bne.n	800541c <HAL_RCC_OscConfig+0x168>
 80053ee:	4b41      	ldr	r3, [pc, #260]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d005      	beq.n	8005406 <HAL_RCC_OscConfig+0x152>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d001      	beq.n	8005406 <HAL_RCC_OscConfig+0x152>
 8005402:	2301      	movs	r3, #1
 8005404:	e1c7      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 8005406:	4b3b      	ldr	r3, [pc, #236]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4937      	ldr	r1, [pc, #220]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005416:	4313      	orrs	r3, r2
 8005418:	600b      	str	r3, [r1, #0]
 800541a:	e03a      	b.n	8005492 <HAL_RCC_OscConfig+0x1de>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d020      	beq.n	8005466 <HAL_RCC_OscConfig+0x1b2>
 8005424:	4b34      	ldr	r3, [pc, #208]	@ (80054f8 <HAL_RCC_OscConfig+0x244>)
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	f7fe f97b 	bl	8003724 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x190>
 8005432:	f7fe f977 	bl	8003724 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x190>
 8005440:	2303      	movs	r3, #3
 8005442:	e1a8      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 8005444:	4b2b      	ldr	r3, [pc, #172]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x17e>
 8005450:	4b28      	ldr	r3, [pc, #160]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4925      	ldr	r1, [pc, #148]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005460:	4313      	orrs	r3, r2
 8005462:	600b      	str	r3, [r1, #0]
 8005464:	e015      	b.n	8005492 <HAL_RCC_OscConfig+0x1de>
 8005466:	4b24      	ldr	r3, [pc, #144]	@ (80054f8 <HAL_RCC_OscConfig+0x244>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	f7fe f95a 	bl	8003724 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x1d2>
 8005474:	f7fe f956 	bl	8003724 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x1d2>
 8005482:	2303      	movs	r3, #3
 8005484:	e187      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 8005486:	4b1b      	ldr	r3, [pc, #108]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0x1c0>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d036      	beq.n	800550c <HAL_RCC_OscConfig+0x258>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d016      	beq.n	80054d4 <HAL_RCC_OscConfig+0x220>
 80054a6:	4b15      	ldr	r3, [pc, #84]	@ (80054fc <HAL_RCC_OscConfig+0x248>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f7fe f93a 	bl	8003724 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x212>
 80054b4:	f7fe f936 	bl	8003724 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x212>
 80054c2:	2303      	movs	r3, #3
 80054c4:	e167      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 80054c6:	4b0b      	ldr	r3, [pc, #44]	@ (80054f4 <HAL_RCC_OscConfig+0x240>)
 80054c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0x200>
 80054d2:	e01b      	b.n	800550c <HAL_RCC_OscConfig+0x258>
 80054d4:	4b09      	ldr	r3, [pc, #36]	@ (80054fc <HAL_RCC_OscConfig+0x248>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	f7fe f923 	bl	8003724 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]
 80054e0:	e00e      	b.n	8005500 <HAL_RCC_OscConfig+0x24c>
 80054e2:	f7fe f91f 	bl	8003724 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d907      	bls.n	8005500 <HAL_RCC_OscConfig+0x24c>
 80054f0:	2303      	movs	r3, #3
 80054f2:	e150      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 80054f4:	40023800 	.word	0x40023800
 80054f8:	42470000 	.word	0x42470000
 80054fc:	42470e80 	.word	0x42470e80
 8005500:	4b88      	ldr	r3, [pc, #544]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 8005502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1ea      	bne.n	80054e2 <HAL_RCC_OscConfig+0x22e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8097 	beq.w	8005648 <HAL_RCC_OscConfig+0x394>
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]
 800551e:	4b81      	ldr	r3, [pc, #516]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10f      	bne.n	800554a <HAL_RCC_OscConfig+0x296>
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	4b7d      	ldr	r3, [pc, #500]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	4a7c      	ldr	r2, [pc, #496]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 8005534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005538:	6413      	str	r3, [r2, #64]	@ 0x40
 800553a:	4b7a      	ldr	r3, [pc, #488]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2301      	movs	r3, #1
 8005548:	75fb      	strb	r3, [r7, #23]
 800554a:	4b77      	ldr	r3, [pc, #476]	@ (8005728 <HAL_RCC_OscConfig+0x474>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005552:	2b00      	cmp	r3, #0
 8005554:	d118      	bne.n	8005588 <HAL_RCC_OscConfig+0x2d4>
 8005556:	4b74      	ldr	r3, [pc, #464]	@ (8005728 <HAL_RCC_OscConfig+0x474>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a73      	ldr	r2, [pc, #460]	@ (8005728 <HAL_RCC_OscConfig+0x474>)
 800555c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	f7fe f8df 	bl	8003724 <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x2c8>
 800556a:	f7fe f8db 	bl	8003724 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x2c8>
 8005578:	2303      	movs	r3, #3
 800557a:	e10c      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 800557c:	4b6a      	ldr	r3, [pc, #424]	@ (8005728 <HAL_RCC_OscConfig+0x474>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0f0      	beq.n	800556a <HAL_RCC_OscConfig+0x2b6>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d106      	bne.n	800559e <HAL_RCC_OscConfig+0x2ea>
 8005590:	4b64      	ldr	r3, [pc, #400]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 8005592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005594:	4a63      	ldr	r2, [pc, #396]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	6713      	str	r3, [r2, #112]	@ 0x70
 800559c:	e01c      	b.n	80055d8 <HAL_RCC_OscConfig+0x324>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b05      	cmp	r3, #5
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCC_OscConfig+0x30c>
 80055a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 80055ac:	f043 0304 	orr.w	r3, r3, #4
 80055b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80055b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80055be:	e00b      	b.n	80055d8 <HAL_RCC_OscConfig+0x324>
 80055c0:	4b58      	ldr	r3, [pc, #352]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 80055c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c4:	4a57      	ldr	r2, [pc, #348]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80055cc:	4b55      	ldr	r3, [pc, #340]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 80055ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d0:	4a54      	ldr	r2, [pc, #336]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 80055d2:	f023 0304 	bic.w	r3, r3, #4
 80055d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d015      	beq.n	800560c <HAL_RCC_OscConfig+0x358>
 80055e0:	f7fe f8a0 	bl	8003724 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_OscConfig+0x34a>
 80055e8:	f7fe f89c 	bl	8003724 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x34a>
 80055fa:	2303      	movs	r3, #3
 80055fc:	e0cb      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 80055fe:	4b49      	ldr	r3, [pc, #292]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0ee      	beq.n	80055e8 <HAL_RCC_OscConfig+0x334>
 800560a:	e014      	b.n	8005636 <HAL_RCC_OscConfig+0x382>
 800560c:	f7fe f88a 	bl	8003724 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]
 8005612:	e00a      	b.n	800562a <HAL_RCC_OscConfig+0x376>
 8005614:	f7fe f886 	bl	8003724 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x376>
 8005626:	2303      	movs	r3, #3
 8005628:	e0b5      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 800562a:	4b3e      	ldr	r3, [pc, #248]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1ee      	bne.n	8005614 <HAL_RCC_OscConfig+0x360>
 8005636:	7dfb      	ldrb	r3, [r7, #23]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d105      	bne.n	8005648 <HAL_RCC_OscConfig+0x394>
 800563c:	4b39      	ldr	r3, [pc, #228]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 800563e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005640:	4a38      	ldr	r2, [pc, #224]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 8005642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005646:	6413      	str	r3, [r2, #64]	@ 0x40
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80a1 	beq.w	8005794 <HAL_RCC_OscConfig+0x4e0>
 8005652:	4b34      	ldr	r3, [pc, #208]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
 800565a:	2b08      	cmp	r3, #8
 800565c:	d05c      	beq.n	8005718 <HAL_RCC_OscConfig+0x464>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d141      	bne.n	80056ea <HAL_RCC_OscConfig+0x436>
 8005666:	4b31      	ldr	r3, [pc, #196]	@ (800572c <HAL_RCC_OscConfig+0x478>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f7fe f85a 	bl	8003724 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x3d2>
 8005674:	f7fe f856 	bl	8003724 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x3d2>
 8005682:	2303      	movs	r3, #3
 8005684:	e087      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 8005686:	4b27      	ldr	r3, [pc, #156]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_OscConfig+0x3c0>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69da      	ldr	r2, [r3, #28]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	019b      	lsls	r3, r3, #6
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	085b      	lsrs	r3, r3, #1
 80056aa:	3b01      	subs	r3, #1
 80056ac:	041b      	lsls	r3, r3, #16
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	061b      	lsls	r3, r3, #24
 80056b6:	491b      	ldr	r1, [pc, #108]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	604b      	str	r3, [r1, #4]
 80056bc:	4b1b      	ldr	r3, [pc, #108]	@ (800572c <HAL_RCC_OscConfig+0x478>)
 80056be:	2201      	movs	r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	f7fe f82f 	bl	8003724 <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x428>
 80056ca:	f7fe f82b 	bl	8003724 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x428>
 80056d8:	2303      	movs	r3, #3
 80056da:	e05c      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 80056dc:	4b11      	ldr	r3, [pc, #68]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCC_OscConfig+0x416>
 80056e8:	e054      	b.n	8005794 <HAL_RCC_OscConfig+0x4e0>
 80056ea:	4b10      	ldr	r3, [pc, #64]	@ (800572c <HAL_RCC_OscConfig+0x478>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f7fe f818 	bl	8003724 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x456>
 80056f8:	f7fe f814 	bl	8003724 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x456>
 8005706:	2303      	movs	r3, #3
 8005708:	e045      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 800570a:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <HAL_RCC_OscConfig+0x470>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x444>
 8005716:	e03d      	b.n	8005794 <HAL_RCC_OscConfig+0x4e0>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <HAL_RCC_OscConfig+0x47c>
 8005720:	2301      	movs	r3, #1
 8005722:	e038      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 8005724:	40023800 	.word	0x40023800
 8005728:	40007000 	.word	0x40007000
 800572c:	42470060 	.word	0x42470060
 8005730:	4b1b      	ldr	r3, [pc, #108]	@ (80057a0 <HAL_RCC_OscConfig+0x4ec>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d028      	beq.n	8005790 <HAL_RCC_OscConfig+0x4dc>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	429a      	cmp	r2, r3
 800574a:	d121      	bne.n	8005790 <HAL_RCC_OscConfig+0x4dc>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	429a      	cmp	r2, r3
 8005758:	d11a      	bne.n	8005790 <HAL_RCC_OscConfig+0x4dc>
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005760:	4013      	ands	r3, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005766:	0192      	lsls	r2, r2, #6
 8005768:	4293      	cmp	r3, r2
 800576a:	d111      	bne.n	8005790 <HAL_RCC_OscConfig+0x4dc>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005776:	085b      	lsrs	r3, r3, #1
 8005778:	3b01      	subs	r3, #1
 800577a:	041b      	lsls	r3, r3, #16
 800577c:	429a      	cmp	r2, r3
 800577e:	d107      	bne.n	8005790 <HAL_RCC_OscConfig+0x4dc>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	061b      	lsls	r3, r3, #24
 800578c:	429a      	cmp	r2, r3
 800578e:	d001      	beq.n	8005794 <HAL_RCC_OscConfig+0x4e0>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <HAL_RCC_OscConfig+0x4e2>
 8005794:	2300      	movs	r3, #0
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40023800 	.word	0x40023800

080057a4 <HAL_RCC_ClockConfig>:
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x14>
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0cc      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
 80057b8:	4b68      	ldr	r3, [pc, #416]	@ (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d90c      	bls.n	80057e0 <HAL_RCC_ClockConfig+0x3c>
 80057c6:	4b65      	ldr	r3, [pc, #404]	@ (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	4b63      	ldr	r3, [pc, #396]	@ (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x3c>
 80057dc:	2301      	movs	r3, #1
 80057de:	e0b8      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d020      	beq.n	800582e <HAL_RCC_ClockConfig+0x8a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <HAL_RCC_ClockConfig+0x60>
 80057f8:	4b59      	ldr	r3, [pc, #356]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	4a58      	ldr	r2, [pc, #352]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005802:	6093      	str	r3, [r2, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_RCC_ClockConfig+0x78>
 8005810:	4b53      	ldr	r3, [pc, #332]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	4a52      	ldr	r2, [pc, #328]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800581a:	6093      	str	r3, [r2, #8]
 800581c:	4b50      	ldr	r3, [pc, #320]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	494d      	ldr	r1, [pc, #308]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	4313      	orrs	r3, r2
 800582c:	608b      	str	r3, [r1, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d044      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x120>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d107      	bne.n	8005852 <HAL_RCC_ClockConfig+0xae>
 8005842:	4b47      	ldr	r3, [pc, #284]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d119      	bne.n	8005882 <HAL_RCC_ClockConfig+0xde>
 800584e:	2301      	movs	r3, #1
 8005850:	e07f      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d003      	beq.n	8005862 <HAL_RCC_ClockConfig+0xbe>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b03      	cmp	r3, #3
 8005860:	d107      	bne.n	8005872 <HAL_RCC_ClockConfig+0xce>
 8005862:	4b3f      	ldr	r3, [pc, #252]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <HAL_RCC_ClockConfig+0xde>
 800586e:	2301      	movs	r3, #1
 8005870:	e06f      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
 8005872:	4b3b      	ldr	r3, [pc, #236]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_RCC_ClockConfig+0xde>
 800587e:	2301      	movs	r3, #1
 8005880:	e067      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
 8005882:	4b37      	ldr	r3, [pc, #220]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f023 0203 	bic.w	r2, r3, #3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	4934      	ldr	r1, [pc, #208]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	4313      	orrs	r3, r2
 8005892:	608b      	str	r3, [r1, #8]
 8005894:	f7fd ff46 	bl	8003724 <HAL_GetTick>
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	e00a      	b.n	80058b2 <HAL_RCC_ClockConfig+0x10e>
 800589c:	f7fd ff42 	bl	8003724 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_ClockConfig+0x10e>
 80058ae:	2303      	movs	r3, #3
 80058b0:	e04f      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
 80058b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 020c 	and.w	r2, r3, #12
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d1eb      	bne.n	800589c <HAL_RCC_ClockConfig+0xf8>
 80058c4:	4b25      	ldr	r3, [pc, #148]	@ (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d20c      	bcs.n	80058ec <HAL_RCC_ClockConfig+0x148>
 80058d2:	4b22      	ldr	r3, [pc, #136]	@ (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	4b20      	ldr	r3, [pc, #128]	@ (800595c <HAL_RCC_ClockConfig+0x1b8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d001      	beq.n	80058ec <HAL_RCC_ClockConfig+0x148>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e032      	b.n	8005952 <HAL_RCC_ClockConfig+0x1ae>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_RCC_ClockConfig+0x166>
 80058f8:	4b19      	ldr	r3, [pc, #100]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	4916      	ldr	r1, [pc, #88]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	4313      	orrs	r3, r2
 8005908:	608b      	str	r3, [r1, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <HAL_RCC_ClockConfig+0x186>
 8005916:	4b12      	ldr	r3, [pc, #72]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	490e      	ldr	r1, [pc, #56]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]
 800592a:	f000 f821 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 800592e:	4602      	mov	r2, r0
 8005930:	4b0b      	ldr	r3, [pc, #44]	@ (8005960 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	091b      	lsrs	r3, r3, #4
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	490a      	ldr	r1, [pc, #40]	@ (8005964 <HAL_RCC_ClockConfig+0x1c0>)
 800593c:	5ccb      	ldrb	r3, [r1, r3]
 800593e:	fa22 f303 	lsr.w	r3, r2, r3
 8005942:	4a09      	ldr	r2, [pc, #36]	@ (8005968 <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	4b09      	ldr	r3, [pc, #36]	@ (800596c <HAL_RCC_ClockConfig+0x1c8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7fd fea6 	bl	800369c <HAL_InitTick>
 8005950:	2300      	movs	r3, #0
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40023c00 	.word	0x40023c00
 8005960:	40023800 	.word	0x40023800
 8005964:	08007e50 	.word	0x08007e50
 8005968:	20000000 	.word	0x20000000
 800596c:	20000004 	.word	0x20000004

08005970 <HAL_RCC_GetSysClockFreq>:
 8005970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005974:	b090      	sub	sp, #64	@ 0x40
 8005976:	af00      	add	r7, sp, #0
 8005978:	2300      	movs	r3, #0
 800597a:	637b      	str	r3, [r7, #52]	@ 0x34
 800597c:	2300      	movs	r3, #0
 800597e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005980:	2300      	movs	r3, #0
 8005982:	633b      	str	r3, [r7, #48]	@ 0x30
 8005984:	2300      	movs	r3, #0
 8005986:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005988:	4b59      	ldr	r3, [pc, #356]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x180>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 030c 	and.w	r3, r3, #12
 8005990:	2b08      	cmp	r3, #8
 8005992:	d00d      	beq.n	80059b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005994:	2b08      	cmp	r3, #8
 8005996:	f200 80a1 	bhi.w	8005adc <HAL_RCC_GetSysClockFreq+0x16c>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_RCC_GetSysClockFreq+0x34>
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d003      	beq.n	80059aa <HAL_RCC_GetSysClockFreq+0x3a>
 80059a2:	e09b      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x16c>
 80059a4:	4b53      	ldr	r3, [pc, #332]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x184>)
 80059a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059a8:	e09b      	b.n	8005ae2 <HAL_RCC_GetSysClockFreq+0x172>
 80059aa:	4b53      	ldr	r3, [pc, #332]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0x188>)
 80059ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059ae:	e098      	b.n	8005ae2 <HAL_RCC_GetSysClockFreq+0x172>
 80059b0:	4b4f      	ldr	r3, [pc, #316]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x180>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ba:	4b4d      	ldr	r3, [pc, #308]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x180>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d028      	beq.n	8005a18 <HAL_RCC_GetSysClockFreq+0xa8>
 80059c6:	4b4a      	ldr	r3, [pc, #296]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x180>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	099b      	lsrs	r3, r3, #6
 80059cc:	2200      	movs	r2, #0
 80059ce:	623b      	str	r3, [r7, #32]
 80059d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059d8:	2100      	movs	r1, #0
 80059da:	4b47      	ldr	r3, [pc, #284]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0x188>)
 80059dc:	fb03 f201 	mul.w	r2, r3, r1
 80059e0:	2300      	movs	r3, #0
 80059e2:	fb00 f303 	mul.w	r3, r0, r3
 80059e6:	4413      	add	r3, r2
 80059e8:	4a43      	ldr	r2, [pc, #268]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0x188>)
 80059ea:	fba0 1202 	umull	r1, r2, r0, r2
 80059ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059f0:	460a      	mov	r2, r1
 80059f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80059f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f6:	4413      	add	r3, r2
 80059f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fc:	2200      	movs	r2, #0
 80059fe:	61bb      	str	r3, [r7, #24]
 8005a00:	61fa      	str	r2, [r7, #28]
 8005a02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005a0a:	f7fb f84f 	bl	8000aac <__aeabi_uldivmod>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4613      	mov	r3, r2
 8005a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a16:	e053      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x150>
 8005a18:	4b35      	ldr	r3, [pc, #212]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	099b      	lsrs	r3, r3, #6
 8005a1e:	2200      	movs	r2, #0
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	617a      	str	r2, [r7, #20]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a2a:	f04f 0b00 	mov.w	fp, #0
 8005a2e:	4652      	mov	r2, sl
 8005a30:	465b      	mov	r3, fp
 8005a32:	f04f 0000 	mov.w	r0, #0
 8005a36:	f04f 0100 	mov.w	r1, #0
 8005a3a:	0159      	lsls	r1, r3, #5
 8005a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a40:	0150      	lsls	r0, r2, #5
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	ebb2 080a 	subs.w	r8, r2, sl
 8005a4a:	eb63 090b 	sbc.w	r9, r3, fp
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a62:	ebb2 0408 	subs.w	r4, r2, r8
 8005a66:	eb63 0509 	sbc.w	r5, r3, r9
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	00eb      	lsls	r3, r5, #3
 8005a74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a78:	00e2      	lsls	r2, r4, #3
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	461d      	mov	r5, r3
 8005a7e:	eb14 030a 	adds.w	r3, r4, sl
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	eb45 030b 	adc.w	r3, r5, fp
 8005a88:	607b      	str	r3, [r7, #4]
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a96:	4629      	mov	r1, r5
 8005a98:	028b      	lsls	r3, r1, #10
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	028a      	lsls	r2, r1, #10
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aaa:	2200      	movs	r2, #0
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	60fa      	str	r2, [r7, #12]
 8005ab0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ab4:	f7fa fffa 	bl	8000aac <__aeabi_uldivmod>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4613      	mov	r3, r2
 8005abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	0c1b      	lsrs	r3, r3, #16
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	3301      	adds	r3, #1
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ad0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ada:	e002      	b.n	8005ae2 <HAL_RCC_GetSysClockFreq+0x172>
 8005adc:	4b05      	ldr	r3, [pc, #20]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ae0:	bf00      	nop
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3740      	adds	r7, #64	@ 0x40
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aee:	bf00      	nop
 8005af0:	40023800 	.word	0x40023800
 8005af4:	00f42400 	.word	0x00f42400
 8005af8:	017d7840 	.word	0x017d7840

08005afc <HAL_RCC_GetHCLKFreq>:
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	4b03      	ldr	r3, [pc, #12]	@ (8005b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000000 	.word	0x20000000

08005b14 <HAL_RCC_GetPCLK1Freq>:
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	f7ff fff0 	bl	8005afc <HAL_RCC_GetHCLKFreq>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	4b05      	ldr	r3, [pc, #20]	@ (8005b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	0a9b      	lsrs	r3, r3, #10
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	4903      	ldr	r1, [pc, #12]	@ (8005b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b2a:	5ccb      	ldrb	r3, [r1, r3]
 8005b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b30:	4618      	mov	r0, r3
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40023800 	.word	0x40023800
 8005b38:	08007e60 	.word	0x08007e60

08005b3c <HAL_SPI_Init>:
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_SPI_Init+0x12>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e07b      	b.n	8005c46 <HAL_SPI_Init+0x10a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d108      	bne.n	8005b68 <HAL_SPI_Init+0x2c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b5e:	d009      	beq.n	8005b74 <HAL_SPI_Init+0x38>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	61da      	str	r2, [r3, #28]
 8005b66:	e005      	b.n	8005b74 <HAL_SPI_Init+0x38>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	611a      	str	r2, [r3, #16]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	615a      	str	r2, [r3, #20]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_SPI_Init+0x58>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fd f932 	bl	8002df8 <HAL_SPI_MspInit>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf8:	ea42 0103 	orr.w	r1, r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	f003 0104 	and.w	r1, r3, #4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	f003 0210 	and.w	r2, r3, #16
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c34:	61da      	str	r2, [r3, #28]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005c44:	2300      	movs	r3, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_SPI_Transmit>:
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b088      	sub	sp, #32
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	603b      	str	r3, [r7, #0]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	77fb      	strb	r3, [r7, #31]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_SPI_Transmit+0x22>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e12d      	b.n	8005ecc <HAL_SPI_Transmit+0x27e>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005c78:	f7fd fd54 	bl	8003724 <HAL_GetTick>
 8005c7c:	61b8      	str	r0, [r7, #24]
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	82fb      	strh	r3, [r7, #22]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d002      	beq.n	8005c94 <HAL_SPI_Transmit+0x46>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	77fb      	strb	r3, [r7, #31]
 8005c92:	e116      	b.n	8005ec2 <HAL_SPI_Transmit+0x274>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <HAL_SPI_Transmit+0x52>
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d102      	bne.n	8005ca6 <HAL_SPI_Transmit+0x58>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e10d      	b.n	8005ec2 <HAL_SPI_Transmit+0x274>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2203      	movs	r2, #3
 8005caa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	655a      	str	r2, [r3, #84]	@ 0x54
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	88fa      	ldrh	r2, [r7, #6]
 8005cbe:	869a      	strh	r2, [r3, #52]	@ 0x34
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	88fa      	ldrh	r2, [r7, #6]
 8005cc4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	645a      	str	r2, [r3, #68]	@ 0x44
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cec:	d10f      	bne.n	8005d0e <HAL_SPI_Transmit+0xc0>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d18:	2b40      	cmp	r3, #64	@ 0x40
 8005d1a:	d007      	beq.n	8005d2c <HAL_SPI_Transmit+0xde>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d34:	d14f      	bne.n	8005dd6 <HAL_SPI_Transmit+0x188>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_SPI_Transmit+0xf6>
 8005d3e:	8afb      	ldrh	r3, [r7, #22]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d142      	bne.n	8005dca <HAL_SPI_Transmit+0x17c>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d48:	881a      	ldrh	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60da      	str	r2, [r3, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d54:	1c9a      	adds	r2, r3, #2
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005d68:	e02f      	b.n	8005dca <HAL_SPI_Transmit+0x17c>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d112      	bne.n	8005d9e <HAL_SPI_Transmit+0x150>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7c:	881a      	ldrh	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60da      	str	r2, [r3, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d88:	1c9a      	adds	r2, r3, #2
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005d9c:	e015      	b.n	8005dca <HAL_SPI_Transmit+0x17c>
 8005d9e:	f7fd fcc1 	bl	8003724 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d803      	bhi.n	8005db6 <HAL_SPI_Transmit+0x168>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d102      	bne.n	8005dbc <HAL_SPI_Transmit+0x16e>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d106      	bne.n	8005dca <HAL_SPI_Transmit+0x17c>
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005dc8:	e07b      	b.n	8005ec2 <HAL_SPI_Transmit+0x274>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1ca      	bne.n	8005d6a <HAL_SPI_Transmit+0x11c>
 8005dd4:	e050      	b.n	8005e78 <HAL_SPI_Transmit+0x22a>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_SPI_Transmit+0x196>
 8005dde:	8afb      	ldrh	r3, [r7, #22]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d144      	bne.n	8005e6e <HAL_SPI_Transmit+0x220>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	7812      	ldrb	r2, [r2, #0]
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e0a:	e030      	b.n	8005e6e <HAL_SPI_Transmit+0x220>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d113      	bne.n	8005e42 <HAL_SPI_Transmit+0x1f4>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	330c      	adds	r3, #12
 8005e24:	7812      	ldrb	r2, [r2, #0]
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e40:	e015      	b.n	8005e6e <HAL_SPI_Transmit+0x220>
 8005e42:	f7fd fc6f 	bl	8003724 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d803      	bhi.n	8005e5a <HAL_SPI_Transmit+0x20c>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d102      	bne.n	8005e60 <HAL_SPI_Transmit+0x212>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <HAL_SPI_Transmit+0x220>
 8005e60:	2303      	movs	r3, #3
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005e6c:	e029      	b.n	8005ec2 <HAL_SPI_Transmit+0x274>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1c9      	bne.n	8005e0c <HAL_SPI_Transmit+0x1be>
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	6839      	ldr	r1, [r7, #0]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fbdf 	bl	8006640 <SPI_EndRxTxTransaction>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <HAL_SPI_Transmit+0x240>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <HAL_SPI_Transmit+0x25e>
 8005e96:	2300      	movs	r3, #0
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <HAL_SPI_Transmit+0x26c>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e003      	b.n	8005ec2 <HAL_SPI_Transmit+0x274>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005eca:	7ffb      	ldrb	r3, [r7, #31]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3720      	adds	r7, #32
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_SPI_Receive>:
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	80fb      	strh	r3, [r7, #6]
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	75fb      	strb	r3, [r7, #23]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d002      	beq.n	8005efa <HAL_SPI_Receive+0x26>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	75fb      	strb	r3, [r7, #23]
 8005ef8:	e0fb      	b.n	80060f2 <HAL_SPI_Receive+0x21e>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f02:	d112      	bne.n	8005f2a <HAL_SPI_Receive+0x56>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10e      	bne.n	8005f2a <HAL_SPI_Receive+0x56>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2204      	movs	r2, #4
 8005f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005f14:	88fa      	ldrh	r2, [r7, #6]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f8ef 	bl	8006104 <HAL_SPI_TransmitReceive>
 8005f26:	4603      	mov	r3, r0
 8005f28:	e0e8      	b.n	80060fc <HAL_SPI_Receive+0x228>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_SPI_Receive+0x64>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e0e1      	b.n	80060fc <HAL_SPI_Receive+0x228>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005f40:	f7fd fbf0 	bl	8003724 <HAL_GetTick>
 8005f44:	6138      	str	r0, [r7, #16]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_SPI_Receive+0x7e>
 8005f4c:	88fb      	ldrh	r3, [r7, #6]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <HAL_SPI_Receive+0x84>
 8005f52:	2301      	movs	r3, #1
 8005f54:	75fb      	strb	r3, [r7, #23]
 8005f56:	e0cc      	b.n	80060f2 <HAL_SPI_Receive+0x21e>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	655a      	str	r2, [r3, #84]	@ 0x54
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	88fa      	ldrh	r2, [r7, #6]
 8005f70:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	88fa      	ldrh	r2, [r7, #6]
 8005f76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	869a      	strh	r2, [r3, #52]	@ 0x34
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f9e:	d10f      	bne.n	8005fc0 <HAL_SPI_Receive+0xec>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fca:	2b40      	cmp	r3, #64	@ 0x40
 8005fcc:	d007      	beq.n	8005fde <HAL_SPI_Receive+0x10a>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d16a      	bne.n	80060bc <HAL_SPI_Receive+0x1e8>
 8005fe6:	e032      	b.n	800604e <HAL_SPI_Receive+0x17a>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d115      	bne.n	8006022 <HAL_SPI_Receive+0x14e>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f103 020c 	add.w	r2, r3, #12
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006002:	7812      	ldrb	r2, [r2, #0]
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	639a      	str	r2, [r3, #56]	@ 0x38
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006020:	e015      	b.n	800604e <HAL_SPI_Receive+0x17a>
 8006022:	f7fd fb7f 	bl	8003724 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d803      	bhi.n	800603a <HAL_SPI_Receive+0x166>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d102      	bne.n	8006040 <HAL_SPI_Receive+0x16c>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d106      	bne.n	800604e <HAL_SPI_Receive+0x17a>
 8006040:	2303      	movs	r3, #3
 8006042:	75fb      	strb	r3, [r7, #23]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800604c:	e051      	b.n	80060f2 <HAL_SPI_Receive+0x21e>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1c7      	bne.n	8005fe8 <HAL_SPI_Receive+0x114>
 8006058:	e035      	b.n	80060c6 <HAL_SPI_Receive+0x1f2>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b01      	cmp	r3, #1
 8006066:	d113      	bne.n	8006090 <HAL_SPI_Receive+0x1bc>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006072:	b292      	uxth	r2, r2
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607a:	1c9a      	adds	r2, r3, #2
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800608e:	e015      	b.n	80060bc <HAL_SPI_Receive+0x1e8>
 8006090:	f7fd fb48 	bl	8003724 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d803      	bhi.n	80060a8 <HAL_SPI_Receive+0x1d4>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a6:	d102      	bne.n	80060ae <HAL_SPI_Receive+0x1da>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_SPI_Receive+0x1e8>
 80060ae:	2303      	movs	r3, #3
 80060b0:	75fb      	strb	r3, [r7, #23]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80060ba:	e01a      	b.n	80060f2 <HAL_SPI_Receive+0x21e>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1c9      	bne.n	800605a <HAL_SPI_Receive+0x186>
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 fa52 	bl	8006574 <SPI_EndRxTransaction>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <HAL_SPI_Receive+0x208>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	655a      	str	r2, [r3, #84]	@ 0x54
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_SPI_Receive+0x216>
 80060e4:	2301      	movs	r3, #1
 80060e6:	75fb      	strb	r3, [r7, #23]
 80060e8:	e003      	b.n	80060f2 <HAL_SPI_Receive+0x21e>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80060fa:	7dfb      	ldrb	r3, [r7, #23]
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_SPI_TransmitReceive>:
 8006104:	b580      	push	{r7, lr}
 8006106:	b08c      	sub	sp, #48	@ 0x30
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	807b      	strh	r3, [r7, #2]
 8006112:	2301      	movs	r3, #1
 8006114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006116:	2300      	movs	r3, #0
 8006118:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_SPI_TransmitReceive+0x26>
 8006126:	2302      	movs	r3, #2
 8006128:	e198      	b.n	800645c <HAL_SPI_TransmitReceive+0x358>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006132:	f7fd faf7 	bl	8003724 <HAL_GetTick>
 8006136:	6278      	str	r0, [r7, #36]	@ 0x24
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800613e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	887b      	ldrh	r3, [r7, #2]
 800614a:	837b      	strh	r3, [r7, #26]
 800614c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006150:	2b01      	cmp	r3, #1
 8006152:	d00f      	beq.n	8006174 <HAL_SPI_TransmitReceive+0x70>
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800615a:	d107      	bne.n	800616c <HAL_SPI_TransmitReceive+0x68>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d103      	bne.n	800616c <HAL_SPI_TransmitReceive+0x68>
 8006164:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006168:	2b04      	cmp	r3, #4
 800616a:	d003      	beq.n	8006174 <HAL_SPI_TransmitReceive+0x70>
 800616c:	2302      	movs	r3, #2
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006172:	e16d      	b.n	8006450 <HAL_SPI_TransmitReceive+0x34c>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <HAL_SPI_TransmitReceive+0x82>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_SPI_TransmitReceive+0x82>
 8006180:	887b      	ldrh	r3, [r7, #2]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d103      	bne.n	800618e <HAL_SPI_TransmitReceive+0x8a>
 8006186:	2301      	movs	r3, #1
 8006188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800618c:	e160      	b.n	8006450 <HAL_SPI_TransmitReceive+0x34c>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b04      	cmp	r3, #4
 8006198:	d003      	beq.n	80061a2 <HAL_SPI_TransmitReceive+0x9e>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2205      	movs	r2, #5
 800619e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	887a      	ldrh	r2, [r7, #2]
 80061b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	887a      	ldrh	r2, [r7, #2]
 80061b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	887a      	ldrh	r2, [r7, #2]
 80061c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	887a      	ldrh	r2, [r7, #2]
 80061ca:	869a      	strh	r2, [r3, #52]	@ 0x34
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e2:	2b40      	cmp	r3, #64	@ 0x40
 80061e4:	d007      	beq.n	80061f6 <HAL_SPI_TransmitReceive+0xf2>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061fe:	d17c      	bne.n	80062fa <HAL_SPI_TransmitReceive+0x1f6>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_SPI_TransmitReceive+0x10a>
 8006208:	8b7b      	ldrh	r3, [r7, #26]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d16a      	bne.n	80062e4 <HAL_SPI_TransmitReceive+0x1e0>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006212:	881a      	ldrh	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60da      	str	r2, [r3, #12]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621e:	1c9a      	adds	r2, r3, #2
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	631a      	str	r2, [r3, #48]	@ 0x30
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006232:	e057      	b.n	80062e4 <HAL_SPI_TransmitReceive+0x1e0>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b02      	cmp	r3, #2
 8006240:	d11b      	bne.n	800627a <HAL_SPI_TransmitReceive+0x176>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d016      	beq.n	800627a <HAL_SPI_TransmitReceive+0x176>
 800624c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624e:	2b01      	cmp	r3, #1
 8006250:	d113      	bne.n	800627a <HAL_SPI_TransmitReceive+0x176>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006256:	881a      	ldrh	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	60da      	str	r2, [r3, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006262:	1c9a      	adds	r2, r3, #2
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	631a      	str	r2, [r3, #48]	@ 0x30
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006276:	2300      	movs	r3, #0
 8006278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b01      	cmp	r3, #1
 8006286:	d119      	bne.n	80062bc <HAL_SPI_TransmitReceive+0x1b8>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800628c:	b29b      	uxth	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d014      	beq.n	80062bc <HAL_SPI_TransmitReceive+0x1b8>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629c:	b292      	uxth	r2, r2
 800629e:	801a      	strh	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a4:	1c9a      	adds	r2, r3, #2
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062b8:	2301      	movs	r3, #1
 80062ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062bc:	f7fd fa32 	bl	8003724 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d80b      	bhi.n	80062e4 <HAL_SPI_TransmitReceive+0x1e0>
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d007      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x1e0>
 80062d4:	2303      	movs	r3, #3
 80062d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80062e2:	e0b5      	b.n	8006450 <HAL_SPI_TransmitReceive+0x34c>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1a2      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x130>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d19d      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x130>
 80062f8:	e080      	b.n	80063fc <HAL_SPI_TransmitReceive+0x2f8>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_SPI_TransmitReceive+0x204>
 8006302:	8b7b      	ldrh	r3, [r7, #26]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d16f      	bne.n	80063e8 <HAL_SPI_TransmitReceive+0x2e4>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	7812      	ldrb	r2, [r2, #0]
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800632e:	e05b      	b.n	80063e8 <HAL_SPI_TransmitReceive+0x2e4>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b02      	cmp	r3, #2
 800633c:	d11c      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x274>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006342:	b29b      	uxth	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d017      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x274>
 8006348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d114      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x274>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	330c      	adds	r3, #12
 8006358:	7812      	ldrb	r2, [r2, #0]
 800635a:	701a      	strb	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	631a      	str	r2, [r3, #48]	@ 0x30
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006374:	2300      	movs	r3, #0
 8006376:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b01      	cmp	r3, #1
 8006384:	d119      	bne.n	80063ba <HAL_SPI_TransmitReceive+0x2b6>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d014      	beq.n	80063ba <HAL_SPI_TransmitReceive+0x2b6>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063b6:	2301      	movs	r3, #1
 80063b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ba:	f7fd f9b3 	bl	8003724 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d803      	bhi.n	80063d2 <HAL_SPI_TransmitReceive+0x2ce>
 80063ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d102      	bne.n	80063d8 <HAL_SPI_TransmitReceive+0x2d4>
 80063d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d107      	bne.n	80063e8 <HAL_SPI_TransmitReceive+0x2e4>
 80063d8:	2303      	movs	r3, #3
 80063da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80063e6:	e033      	b.n	8006450 <HAL_SPI_TransmitReceive+0x34c>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d19e      	bne.n	8006330 <HAL_SPI_TransmitReceive+0x22c>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d199      	bne.n	8006330 <HAL_SPI_TransmitReceive+0x22c>
 80063fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f91d 	bl	8006640 <SPI_EndRxTxTransaction>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d006      	beq.n	800641a <HAL_SPI_TransmitReceive+0x316>
 800640c:	2301      	movs	r3, #1
 800640e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2220      	movs	r2, #32
 8006416:	655a      	str	r2, [r3, #84]	@ 0x54
 8006418:	e01a      	b.n	8006450 <HAL_SPI_TransmitReceive+0x34c>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <HAL_SPI_TransmitReceive+0x334>
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	617b      	str	r3, [r7, #20]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_SPI_TransmitReceive+0x344>
 8006440:	2301      	movs	r3, #1
 8006442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006446:	e003      	b.n	8006450 <HAL_SPI_TransmitReceive+0x34c>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006458:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800645c:	4618      	mov	r0, r3
 800645e:	3730      	adds	r7, #48	@ 0x30
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <SPI_WaitFlagStateUntilTimeout>:
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	4613      	mov	r3, r2
 8006472:	71fb      	strb	r3, [r7, #7]
 8006474:	f7fd f956 	bl	8003724 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	4413      	add	r3, r2
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	f7fd f94e 	bl	8003724 <HAL_GetTick>
 8006488:	61b8      	str	r0, [r7, #24]
 800648a:	4b39      	ldr	r3, [pc, #228]	@ (8006570 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	015b      	lsls	r3, r3, #5
 8006490:	0d1b      	lsrs	r3, r3, #20
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	fb02 f303 	mul.w	r3, r2, r3
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	e054      	b.n	8006546 <SPI_WaitFlagStateUntilTimeout+0xe2>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d050      	beq.n	8006546 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80064a4:	f7fd f93e 	bl	8003724 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d902      	bls.n	80064ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d13d      	bne.n	8006536 <SPI_WaitFlagStateUntilTimeout+0xd2>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064c8:	605a      	str	r2, [r3, #4]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064d2:	d111      	bne.n	80064f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064dc:	d004      	beq.n	80064e8 <SPI_WaitFlagStateUntilTimeout+0x84>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e6:	d107      	bne.n	80064f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006500:	d10f      	bne.n	8006522 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006532:	2303      	movs	r3, #3
 8006534:	e017      	b.n	8006566 <SPI_WaitFlagStateUntilTimeout+0x102>
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <SPI_WaitFlagStateUntilTimeout+0xdc>
 800653c:	2300      	movs	r3, #0
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	3b01      	subs	r3, #1
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4013      	ands	r3, r2
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	429a      	cmp	r2, r3
 8006554:	bf0c      	ite	eq
 8006556:	2301      	moveq	r3, #1
 8006558:	2300      	movne	r3, #0
 800655a:	b2db      	uxtb	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	429a      	cmp	r2, r3
 8006562:	d19b      	bne.n	800649c <SPI_WaitFlagStateUntilTimeout+0x38>
 8006564:	2300      	movs	r3, #0
 8006566:	4618      	mov	r0, r3
 8006568:	3720      	adds	r7, #32
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000000 	.word	0x20000000

08006574 <SPI_EndRxTransaction>:
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006588:	d111      	bne.n	80065ae <SPI_EndRxTransaction+0x3a>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006592:	d004      	beq.n	800659e <SPI_EndRxTransaction+0x2a>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800659c:	d107      	bne.n	80065ae <SPI_EndRxTransaction+0x3a>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065b6:	d12a      	bne.n	800660e <SPI_EndRxTransaction+0x9a>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065c0:	d012      	beq.n	80065e8 <SPI_EndRxTransaction+0x74>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2200      	movs	r2, #0
 80065ca:	2180      	movs	r1, #128	@ 0x80
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff ff49 	bl	8006464 <SPI_WaitFlagStateUntilTimeout>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d02d      	beq.n	8006634 <SPI_EndRxTransaction+0xc0>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065dc:	f043 0220 	orr.w	r2, r3, #32
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80065e4:	2303      	movs	r3, #3
 80065e6:	e026      	b.n	8006636 <SPI_EndRxTransaction+0xc2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2200      	movs	r2, #0
 80065f0:	2101      	movs	r1, #1
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff ff36 	bl	8006464 <SPI_WaitFlagStateUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d01a      	beq.n	8006634 <SPI_EndRxTransaction+0xc0>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006602:	f043 0220 	orr.w	r2, r3, #32
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	655a      	str	r2, [r3, #84]	@ 0x54
 800660a:	2303      	movs	r3, #3
 800660c:	e013      	b.n	8006636 <SPI_EndRxTransaction+0xc2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2200      	movs	r2, #0
 8006616:	2101      	movs	r1, #1
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7ff ff23 	bl	8006464 <SPI_WaitFlagStateUntilTimeout>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <SPI_EndRxTransaction+0xc0>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006628:	f043 0220 	orr.w	r2, r3, #32
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006630:	2303      	movs	r3, #3
 8006632:	e000      	b.n	8006636 <SPI_EndRxTransaction+0xc2>
 8006634:	2300      	movs	r3, #0
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <SPI_EndRxTxTransaction>:
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af02      	add	r7, sp, #8
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2201      	movs	r2, #1
 8006654:	2102      	movs	r1, #2
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7ff ff04 	bl	8006464 <SPI_WaitFlagStateUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d007      	beq.n	8006672 <SPI_EndRxTxTransaction+0x32>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006666:	f043 0220 	orr.w	r2, r3, #32
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	655a      	str	r2, [r3, #84]	@ 0x54
 800666e:	2303      	movs	r3, #3
 8006670:	e032      	b.n	80066d8 <SPI_EndRxTxTransaction+0x98>
 8006672:	4b1b      	ldr	r3, [pc, #108]	@ (80066e0 <SPI_EndRxTxTransaction+0xa0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1b      	ldr	r2, [pc, #108]	@ (80066e4 <SPI_EndRxTxTransaction+0xa4>)
 8006678:	fba2 2303 	umull	r2, r3, r2, r3
 800667c:	0d5b      	lsrs	r3, r3, #21
 800667e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006682:	fb02 f303 	mul.w	r3, r2, r3
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006690:	d112      	bne.n	80066b8 <SPI_EndRxTxTransaction+0x78>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2200      	movs	r2, #0
 800669a:	2180      	movs	r1, #128	@ 0x80
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff fee1 	bl	8006464 <SPI_WaitFlagStateUntilTimeout>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d016      	beq.n	80066d6 <SPI_EndRxTxTransaction+0x96>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ac:	f043 0220 	orr.w	r2, r3, #32
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80066b4:	2303      	movs	r3, #3
 80066b6:	e00f      	b.n	80066d8 <SPI_EndRxTxTransaction+0x98>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <SPI_EndRxTxTransaction+0x94>
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ce:	2b80      	cmp	r3, #128	@ 0x80
 80066d0:	d0f2      	beq.n	80066b8 <SPI_EndRxTxTransaction+0x78>
 80066d2:	e000      	b.n	80066d6 <SPI_EndRxTxTransaction+0x96>
 80066d4:	bf00      	nop
 80066d6:	2300      	movs	r3, #0
 80066d8:	4618      	mov	r0, r3
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	20000000 	.word	0x20000000
 80066e4:	165e9f81 	.word	0x165e9f81

080066e8 <HAL_TIM_Base_Init>:
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_TIM_Base_Init+0x12>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e041      	b.n	800677e <HAL_TIM_Base_Init+0x96>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <HAL_TIM_Base_Init+0x2c>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7fc fc62 	bl	8002fd8 <HAL_TIM_Base_MspInit>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3304      	adds	r3, #4
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f000 f976 	bl	8006a18 <TIM_Base_SetConfig>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800677c:	2300      	movs	r3, #0
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <HAL_TIM_Base_Start>:
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	d001      	beq.n	80067a0 <HAL_TIM_Base_Start+0x18>
 800679c:	2301      	movs	r3, #1
 800679e:	e03c      	b.n	800681a <HAL_TIM_Base_Start+0x92>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006828 <HAL_TIM_Base_Start+0xa0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d018      	beq.n	80067e4 <HAL_TIM_Base_Start+0x5c>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ba:	d013      	beq.n	80067e4 <HAL_TIM_Base_Start+0x5c>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1a      	ldr	r2, [pc, #104]	@ (800682c <HAL_TIM_Base_Start+0xa4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00e      	beq.n	80067e4 <HAL_TIM_Base_Start+0x5c>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a19      	ldr	r2, [pc, #100]	@ (8006830 <HAL_TIM_Base_Start+0xa8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d009      	beq.n	80067e4 <HAL_TIM_Base_Start+0x5c>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a17      	ldr	r2, [pc, #92]	@ (8006834 <HAL_TIM_Base_Start+0xac>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_TIM_Base_Start+0x5c>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a16      	ldr	r2, [pc, #88]	@ (8006838 <HAL_TIM_Base_Start+0xb0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d111      	bne.n	8006808 <HAL_TIM_Base_Start+0x80>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b06      	cmp	r3, #6
 80067f4:	d010      	beq.n	8006818 <HAL_TIM_Base_Start+0x90>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0201 	orr.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e007      	b.n	8006818 <HAL_TIM_Base_Start+0x90>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	2300      	movs	r3, #0
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40010000 	.word	0x40010000
 800682c:	40000400 	.word	0x40000400
 8006830:	40000800 	.word	0x40000800
 8006834:	40000c00 	.word	0x40000c00
 8006838:	40014000 	.word	0x40014000

0800683c <HAL_TIM_Base_Stop>:
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6a1a      	ldr	r2, [r3, #32]
 800684a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800684e:	4013      	ands	r3, r2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10f      	bne.n	8006874 <HAL_TIM_Base_Stop+0x38>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6a1a      	ldr	r2, [r3, #32]
 800685a:	f240 4344 	movw	r3, #1092	@ 0x444
 800685e:	4013      	ands	r3, r2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d107      	bne.n	8006874 <HAL_TIM_Base_Stop+0x38>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800687c:	2300      	movs	r3, #0
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <HAL_TIM_ConfigClockSource>:
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
 8006894:	2300      	movs	r3, #0
 8006896:	73fb      	strb	r3, [r7, #15]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <HAL_TIM_ConfigClockSource+0x1c>
 80068a2:	2302      	movs	r3, #2
 80068a4:	e0b4      	b.n	8006a10 <HAL_TIM_ConfigClockSource+0x186>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2202      	movs	r2, #2
 80068b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80068c4:	60bb      	str	r3, [r7, #8]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	609a      	str	r2, [r3, #8]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068de:	d03e      	beq.n	800695e <HAL_TIM_ConfigClockSource+0xd4>
 80068e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e4:	f200 8087 	bhi.w	80069f6 <HAL_TIM_ConfigClockSource+0x16c>
 80068e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ec:	f000 8086 	beq.w	80069fc <HAL_TIM_ConfigClockSource+0x172>
 80068f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f4:	d87f      	bhi.n	80069f6 <HAL_TIM_ConfigClockSource+0x16c>
 80068f6:	2b70      	cmp	r3, #112	@ 0x70
 80068f8:	d01a      	beq.n	8006930 <HAL_TIM_ConfigClockSource+0xa6>
 80068fa:	2b70      	cmp	r3, #112	@ 0x70
 80068fc:	d87b      	bhi.n	80069f6 <HAL_TIM_ConfigClockSource+0x16c>
 80068fe:	2b60      	cmp	r3, #96	@ 0x60
 8006900:	d050      	beq.n	80069a4 <HAL_TIM_ConfigClockSource+0x11a>
 8006902:	2b60      	cmp	r3, #96	@ 0x60
 8006904:	d877      	bhi.n	80069f6 <HAL_TIM_ConfigClockSource+0x16c>
 8006906:	2b50      	cmp	r3, #80	@ 0x50
 8006908:	d03c      	beq.n	8006984 <HAL_TIM_ConfigClockSource+0xfa>
 800690a:	2b50      	cmp	r3, #80	@ 0x50
 800690c:	d873      	bhi.n	80069f6 <HAL_TIM_ConfigClockSource+0x16c>
 800690e:	2b40      	cmp	r3, #64	@ 0x40
 8006910:	d058      	beq.n	80069c4 <HAL_TIM_ConfigClockSource+0x13a>
 8006912:	2b40      	cmp	r3, #64	@ 0x40
 8006914:	d86f      	bhi.n	80069f6 <HAL_TIM_ConfigClockSource+0x16c>
 8006916:	2b30      	cmp	r3, #48	@ 0x30
 8006918:	d064      	beq.n	80069e4 <HAL_TIM_ConfigClockSource+0x15a>
 800691a:	2b30      	cmp	r3, #48	@ 0x30
 800691c:	d86b      	bhi.n	80069f6 <HAL_TIM_ConfigClockSource+0x16c>
 800691e:	2b20      	cmp	r3, #32
 8006920:	d060      	beq.n	80069e4 <HAL_TIM_ConfigClockSource+0x15a>
 8006922:	2b20      	cmp	r3, #32
 8006924:	d867      	bhi.n	80069f6 <HAL_TIM_ConfigClockSource+0x16c>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d05c      	beq.n	80069e4 <HAL_TIM_ConfigClockSource+0x15a>
 800692a:	2b10      	cmp	r3, #16
 800692c:	d05a      	beq.n	80069e4 <HAL_TIM_ConfigClockSource+0x15a>
 800692e:	e062      	b.n	80069f6 <HAL_TIM_ConfigClockSource+0x16c>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	6899      	ldr	r1, [r3, #8]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f000 f970 	bl	8006c24 <TIM_ETR_SetConfig>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	60bb      	str	r3, [r7, #8]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006952:	60bb      	str	r3, [r7, #8]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	609a      	str	r2, [r3, #8]
 800695c:	e04f      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x174>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	6899      	ldr	r1, [r3, #8]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f000 f959 	bl	8006c24 <TIM_ETR_SetConfig>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006980:	609a      	str	r2, [r3, #8]
 8006982:	e03c      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x174>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6818      	ldr	r0, [r3, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	6859      	ldr	r1, [r3, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	461a      	mov	r2, r3
 8006992:	f000 f8cd 	bl	8006b30 <TIM_TI1_ConfigInputStage>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2150      	movs	r1, #80	@ 0x50
 800699c:	4618      	mov	r0, r3
 800699e:	f000 f926 	bl	8006bee <TIM_ITRx_SetConfig>
 80069a2:	e02c      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x174>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	6859      	ldr	r1, [r3, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	461a      	mov	r2, r3
 80069b2:	f000 f8ec 	bl	8006b8e <TIM_TI2_ConfigInputStage>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2160      	movs	r1, #96	@ 0x60
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 f916 	bl	8006bee <TIM_ITRx_SetConfig>
 80069c2:	e01c      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x174>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	6859      	ldr	r1, [r3, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	461a      	mov	r2, r3
 80069d2:	f000 f8ad 	bl	8006b30 <TIM_TI1_ConfigInputStage>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2140      	movs	r1, #64	@ 0x40
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 f906 	bl	8006bee <TIM_ITRx_SetConfig>
 80069e2:	e00c      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x174>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4619      	mov	r1, r3
 80069ee:	4610      	mov	r0, r2
 80069f0:	f000 f8fd 	bl	8006bee <TIM_ITRx_SetConfig>
 80069f4:	e003      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x174>
 80069f6:	2301      	movs	r3, #1
 80069f8:	73fb      	strb	r3, [r7, #15]
 80069fa:	e000      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x174>
 80069fc:	bf00      	nop
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <TIM_Base_SetConfig>:
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a3a      	ldr	r2, [pc, #232]	@ (8006b14 <TIM_Base_SetConfig+0xfc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00f      	beq.n	8006a50 <TIM_Base_SetConfig+0x38>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a36:	d00b      	beq.n	8006a50 <TIM_Base_SetConfig+0x38>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a37      	ldr	r2, [pc, #220]	@ (8006b18 <TIM_Base_SetConfig+0x100>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d007      	beq.n	8006a50 <TIM_Base_SetConfig+0x38>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a36      	ldr	r2, [pc, #216]	@ (8006b1c <TIM_Base_SetConfig+0x104>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d003      	beq.n	8006a50 <TIM_Base_SetConfig+0x38>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a35      	ldr	r2, [pc, #212]	@ (8006b20 <TIM_Base_SetConfig+0x108>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d108      	bne.n	8006a62 <TIM_Base_SetConfig+0x4a>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a2b      	ldr	r2, [pc, #172]	@ (8006b14 <TIM_Base_SetConfig+0xfc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d01b      	beq.n	8006aa2 <TIM_Base_SetConfig+0x8a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a70:	d017      	beq.n	8006aa2 <TIM_Base_SetConfig+0x8a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a28      	ldr	r2, [pc, #160]	@ (8006b18 <TIM_Base_SetConfig+0x100>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d013      	beq.n	8006aa2 <TIM_Base_SetConfig+0x8a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a27      	ldr	r2, [pc, #156]	@ (8006b1c <TIM_Base_SetConfig+0x104>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00f      	beq.n	8006aa2 <TIM_Base_SetConfig+0x8a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a26      	ldr	r2, [pc, #152]	@ (8006b20 <TIM_Base_SetConfig+0x108>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00b      	beq.n	8006aa2 <TIM_Base_SetConfig+0x8a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a25      	ldr	r2, [pc, #148]	@ (8006b24 <TIM_Base_SetConfig+0x10c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d007      	beq.n	8006aa2 <TIM_Base_SetConfig+0x8a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a24      	ldr	r2, [pc, #144]	@ (8006b28 <TIM_Base_SetConfig+0x110>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d003      	beq.n	8006aa2 <TIM_Base_SetConfig+0x8a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a23      	ldr	r2, [pc, #140]	@ (8006b2c <TIM_Base_SetConfig+0x114>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d108      	bne.n	8006ab4 <TIM_Base_SetConfig+0x9c>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa8:	60fb      	str	r3, [r7, #12]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a0e      	ldr	r2, [pc, #56]	@ (8006b14 <TIM_Base_SetConfig+0xfc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d103      	bne.n	8006ae8 <TIM_Base_SetConfig+0xd0>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	615a      	str	r2, [r3, #20]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d105      	bne.n	8006b06 <TIM_Base_SetConfig+0xee>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f023 0201 	bic.w	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	611a      	str	r2, [r3, #16]
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40010000 	.word	0x40010000
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	40014000 	.word	0x40014000
 8006b28:	40014400 	.word	0x40014400
 8006b2c:	40014800 	.word	0x40014800

08006b30 <TIM_TI1_ConfigInputStage>:
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	f023 0201 	bic.w	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	621a      	str	r2, [r3, #32]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f023 030a 	bic.w	r3, r3, #10
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	619a      	str	r2, [r3, #24]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	621a      	str	r2, [r3, #32]
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <TIM_TI2_ConfigInputStage>:
 8006b8e:	b480      	push	{r7}
 8006b90:	b087      	sub	sp, #28
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	607a      	str	r2, [r7, #4]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	f023 0210 	bic.w	r2, r3, #16
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	621a      	str	r2, [r3, #32]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	031b      	lsls	r3, r3, #12
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	011b      	lsls	r3, r3, #4
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	619a      	str	r2, [r3, #24]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	621a      	str	r2, [r3, #32]
 8006be2:	bf00      	nop
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <TIM_ITRx_SetConfig>:
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	6039      	str	r1, [r7, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	f043 0307 	orr.w	r3, r3, #7
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	609a      	str	r2, [r3, #8]
 8006c18:	bf00      	nop
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <TIM_ETR_SetConfig>:
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	021a      	lsls	r2, r3, #8
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	431a      	orrs	r2, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	609a      	str	r2, [r3, #8]
 8006c58:	bf00      	nop
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIMEx_MasterConfigSynchronization>:
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e050      	b.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	60bb      	str	r3, [r7, #8]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	605a      	str	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1c      	ldr	r2, [pc, #112]	@ (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d018      	beq.n	8006cf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc8:	d013      	beq.n	8006cf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a18      	ldr	r2, [pc, #96]	@ (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00e      	beq.n	8006cf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a16      	ldr	r2, [pc, #88]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d009      	beq.n	8006cf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a15      	ldr	r2, [pc, #84]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d004      	beq.n	8006cf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a13      	ldr	r2, [pc, #76]	@ (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d10c      	bne.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cf8:	60bb      	str	r3, [r7, #8]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60bb      	str	r3, [r7, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	609a      	str	r2, [r3, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40010000 	.word	0x40010000
 8006d30:	40000400 	.word	0x40000400
 8006d34:	40000800 	.word	0x40000800
 8006d38:	40000c00 	.word	0x40000c00
 8006d3c:	40014000 	.word	0x40014000

08006d40 <std>:
 8006d40:	2300      	movs	r3, #0
 8006d42:	b510      	push	{r4, lr}
 8006d44:	4604      	mov	r4, r0
 8006d46:	e9c0 3300 	strd	r3, r3, [r0]
 8006d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d4e:	6083      	str	r3, [r0, #8]
 8006d50:	8181      	strh	r1, [r0, #12]
 8006d52:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d54:	81c2      	strh	r2, [r0, #14]
 8006d56:	6183      	str	r3, [r0, #24]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	2208      	movs	r2, #8
 8006d5c:	305c      	adds	r0, #92	@ 0x5c
 8006d5e:	f000 f9f9 	bl	8007154 <memset>
 8006d62:	4b0d      	ldr	r3, [pc, #52]	@ (8006d98 <std+0x58>)
 8006d64:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d66:	4b0d      	ldr	r3, [pc, #52]	@ (8006d9c <std+0x5c>)
 8006d68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <std+0x60>)
 8006d6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <std+0x64>)
 8006d70:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d72:	4b0d      	ldr	r3, [pc, #52]	@ (8006da8 <std+0x68>)
 8006d74:	6224      	str	r4, [r4, #32]
 8006d76:	429c      	cmp	r4, r3
 8006d78:	d006      	beq.n	8006d88 <std+0x48>
 8006d7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d7e:	4294      	cmp	r4, r2
 8006d80:	d002      	beq.n	8006d88 <std+0x48>
 8006d82:	33d0      	adds	r3, #208	@ 0xd0
 8006d84:	429c      	cmp	r4, r3
 8006d86:	d105      	bne.n	8006d94 <std+0x54>
 8006d88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d90:	f000 ba58 	b.w	8007244 <__retarget_lock_init_recursive>
 8006d94:	bd10      	pop	{r4, pc}
 8006d96:	bf00      	nop
 8006d98:	08006fa5 	.word	0x08006fa5
 8006d9c:	08006fc7 	.word	0x08006fc7
 8006da0:	08006fff 	.word	0x08006fff
 8006da4:	08007023 	.word	0x08007023
 8006da8:	200003bc 	.word	0x200003bc

08006dac <stdio_exit_handler>:
 8006dac:	4a02      	ldr	r2, [pc, #8]	@ (8006db8 <stdio_exit_handler+0xc>)
 8006dae:	4903      	ldr	r1, [pc, #12]	@ (8006dbc <stdio_exit_handler+0x10>)
 8006db0:	4803      	ldr	r0, [pc, #12]	@ (8006dc0 <stdio_exit_handler+0x14>)
 8006db2:	f000 b869 	b.w	8006e88 <_fwalk_sglue>
 8006db6:	bf00      	nop
 8006db8:	2000000c 	.word	0x2000000c
 8006dbc:	08007ae5 	.word	0x08007ae5
 8006dc0:	2000001c 	.word	0x2000001c

08006dc4 <cleanup_stdio>:
 8006dc4:	6841      	ldr	r1, [r0, #4]
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8006df8 <cleanup_stdio+0x34>)
 8006dc8:	4299      	cmp	r1, r3
 8006dca:	b510      	push	{r4, lr}
 8006dcc:	4604      	mov	r4, r0
 8006dce:	d001      	beq.n	8006dd4 <cleanup_stdio+0x10>
 8006dd0:	f000 fe88 	bl	8007ae4 <_fflush_r>
 8006dd4:	68a1      	ldr	r1, [r4, #8]
 8006dd6:	4b09      	ldr	r3, [pc, #36]	@ (8006dfc <cleanup_stdio+0x38>)
 8006dd8:	4299      	cmp	r1, r3
 8006dda:	d002      	beq.n	8006de2 <cleanup_stdio+0x1e>
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fe81 	bl	8007ae4 <_fflush_r>
 8006de2:	68e1      	ldr	r1, [r4, #12]
 8006de4:	4b06      	ldr	r3, [pc, #24]	@ (8006e00 <cleanup_stdio+0x3c>)
 8006de6:	4299      	cmp	r1, r3
 8006de8:	d004      	beq.n	8006df4 <cleanup_stdio+0x30>
 8006dea:	4620      	mov	r0, r4
 8006dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df0:	f000 be78 	b.w	8007ae4 <_fflush_r>
 8006df4:	bd10      	pop	{r4, pc}
 8006df6:	bf00      	nop
 8006df8:	200003bc 	.word	0x200003bc
 8006dfc:	20000424 	.word	0x20000424
 8006e00:	2000048c 	.word	0x2000048c

08006e04 <global_stdio_init.part.0>:
 8006e04:	b510      	push	{r4, lr}
 8006e06:	4b0b      	ldr	r3, [pc, #44]	@ (8006e34 <global_stdio_init.part.0+0x30>)
 8006e08:	4c0b      	ldr	r4, [pc, #44]	@ (8006e38 <global_stdio_init.part.0+0x34>)
 8006e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e3c <global_stdio_init.part.0+0x38>)
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	4620      	mov	r0, r4
 8006e10:	2200      	movs	r2, #0
 8006e12:	2104      	movs	r1, #4
 8006e14:	f7ff ff94 	bl	8006d40 <std>
 8006e18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	2109      	movs	r1, #9
 8006e20:	f7ff ff8e 	bl	8006d40 <std>
 8006e24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e28:	2202      	movs	r2, #2
 8006e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e2e:	2112      	movs	r1, #18
 8006e30:	f7ff bf86 	b.w	8006d40 <std>
 8006e34:	200004f4 	.word	0x200004f4
 8006e38:	200003bc 	.word	0x200003bc
 8006e3c:	08006dad 	.word	0x08006dad

08006e40 <__sfp_lock_acquire>:
 8006e40:	4801      	ldr	r0, [pc, #4]	@ (8006e48 <__sfp_lock_acquire+0x8>)
 8006e42:	f000 ba00 	b.w	8007246 <__retarget_lock_acquire_recursive>
 8006e46:	bf00      	nop
 8006e48:	200004fd 	.word	0x200004fd

08006e4c <__sfp_lock_release>:
 8006e4c:	4801      	ldr	r0, [pc, #4]	@ (8006e54 <__sfp_lock_release+0x8>)
 8006e4e:	f000 b9fb 	b.w	8007248 <__retarget_lock_release_recursive>
 8006e52:	bf00      	nop
 8006e54:	200004fd 	.word	0x200004fd

08006e58 <__sinit>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	f7ff fff0 	bl	8006e40 <__sfp_lock_acquire>
 8006e60:	6a23      	ldr	r3, [r4, #32]
 8006e62:	b11b      	cbz	r3, 8006e6c <__sinit+0x14>
 8006e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e68:	f7ff bff0 	b.w	8006e4c <__sfp_lock_release>
 8006e6c:	4b04      	ldr	r3, [pc, #16]	@ (8006e80 <__sinit+0x28>)
 8006e6e:	6223      	str	r3, [r4, #32]
 8006e70:	4b04      	ldr	r3, [pc, #16]	@ (8006e84 <__sinit+0x2c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1f5      	bne.n	8006e64 <__sinit+0xc>
 8006e78:	f7ff ffc4 	bl	8006e04 <global_stdio_init.part.0>
 8006e7c:	e7f2      	b.n	8006e64 <__sinit+0xc>
 8006e7e:	bf00      	nop
 8006e80:	08006dc5 	.word	0x08006dc5
 8006e84:	200004f4 	.word	0x200004f4

08006e88 <_fwalk_sglue>:
 8006e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e8c:	4607      	mov	r7, r0
 8006e8e:	4688      	mov	r8, r1
 8006e90:	4614      	mov	r4, r2
 8006e92:	2600      	movs	r6, #0
 8006e94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e98:	f1b9 0901 	subs.w	r9, r9, #1
 8006e9c:	d505      	bpl.n	8006eaa <_fwalk_sglue+0x22>
 8006e9e:	6824      	ldr	r4, [r4, #0]
 8006ea0:	2c00      	cmp	r4, #0
 8006ea2:	d1f7      	bne.n	8006e94 <_fwalk_sglue+0xc>
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eaa:	89ab      	ldrh	r3, [r5, #12]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d907      	bls.n	8006ec0 <_fwalk_sglue+0x38>
 8006eb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	d003      	beq.n	8006ec0 <_fwalk_sglue+0x38>
 8006eb8:	4629      	mov	r1, r5
 8006eba:	4638      	mov	r0, r7
 8006ebc:	47c0      	blx	r8
 8006ebe:	4306      	orrs	r6, r0
 8006ec0:	3568      	adds	r5, #104	@ 0x68
 8006ec2:	e7e9      	b.n	8006e98 <_fwalk_sglue+0x10>

08006ec4 <iprintf>:
 8006ec4:	b40f      	push	{r0, r1, r2, r3}
 8006ec6:	b507      	push	{r0, r1, r2, lr}
 8006ec8:	4906      	ldr	r1, [pc, #24]	@ (8006ee4 <iprintf+0x20>)
 8006eca:	ab04      	add	r3, sp, #16
 8006ecc:	6808      	ldr	r0, [r1, #0]
 8006ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ed2:	6881      	ldr	r1, [r0, #8]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	f000 fadb 	bl	8007490 <_vfiprintf_r>
 8006eda:	b003      	add	sp, #12
 8006edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ee0:	b004      	add	sp, #16
 8006ee2:	4770      	bx	lr
 8006ee4:	20000018 	.word	0x20000018

08006ee8 <_puts_r>:
 8006ee8:	6a03      	ldr	r3, [r0, #32]
 8006eea:	b570      	push	{r4, r5, r6, lr}
 8006eec:	6884      	ldr	r4, [r0, #8]
 8006eee:	4605      	mov	r5, r0
 8006ef0:	460e      	mov	r6, r1
 8006ef2:	b90b      	cbnz	r3, 8006ef8 <_puts_r+0x10>
 8006ef4:	f7ff ffb0 	bl	8006e58 <__sinit>
 8006ef8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006efa:	07db      	lsls	r3, r3, #31
 8006efc:	d405      	bmi.n	8006f0a <_puts_r+0x22>
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	0598      	lsls	r0, r3, #22
 8006f02:	d402      	bmi.n	8006f0a <_puts_r+0x22>
 8006f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f06:	f000 f99e 	bl	8007246 <__retarget_lock_acquire_recursive>
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	0719      	lsls	r1, r3, #28
 8006f0e:	d502      	bpl.n	8006f16 <_puts_r+0x2e>
 8006f10:	6923      	ldr	r3, [r4, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d135      	bne.n	8006f82 <_puts_r+0x9a>
 8006f16:	4621      	mov	r1, r4
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f000 f8c5 	bl	80070a8 <__swsetup_r>
 8006f1e:	b380      	cbz	r0, 8006f82 <_puts_r+0x9a>
 8006f20:	f04f 35ff 	mov.w	r5, #4294967295
 8006f24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f26:	07da      	lsls	r2, r3, #31
 8006f28:	d405      	bmi.n	8006f36 <_puts_r+0x4e>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	059b      	lsls	r3, r3, #22
 8006f2e:	d402      	bmi.n	8006f36 <_puts_r+0x4e>
 8006f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f32:	f000 f989 	bl	8007248 <__retarget_lock_release_recursive>
 8006f36:	4628      	mov	r0, r5
 8006f38:	bd70      	pop	{r4, r5, r6, pc}
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	da04      	bge.n	8006f48 <_puts_r+0x60>
 8006f3e:	69a2      	ldr	r2, [r4, #24]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	dc17      	bgt.n	8006f74 <_puts_r+0x8c>
 8006f44:	290a      	cmp	r1, #10
 8006f46:	d015      	beq.n	8006f74 <_puts_r+0x8c>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	6022      	str	r2, [r4, #0]
 8006f4e:	7019      	strb	r1, [r3, #0]
 8006f50:	68a3      	ldr	r3, [r4, #8]
 8006f52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f56:	3b01      	subs	r3, #1
 8006f58:	60a3      	str	r3, [r4, #8]
 8006f5a:	2900      	cmp	r1, #0
 8006f5c:	d1ed      	bne.n	8006f3a <_puts_r+0x52>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	da11      	bge.n	8006f86 <_puts_r+0x9e>
 8006f62:	4622      	mov	r2, r4
 8006f64:	210a      	movs	r1, #10
 8006f66:	4628      	mov	r0, r5
 8006f68:	f000 f85f 	bl	800702a <__swbuf_r>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d0d7      	beq.n	8006f20 <_puts_r+0x38>
 8006f70:	250a      	movs	r5, #10
 8006f72:	e7d7      	b.n	8006f24 <_puts_r+0x3c>
 8006f74:	4622      	mov	r2, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 f857 	bl	800702a <__swbuf_r>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d1e7      	bne.n	8006f50 <_puts_r+0x68>
 8006f80:	e7ce      	b.n	8006f20 <_puts_r+0x38>
 8006f82:	3e01      	subs	r6, #1
 8006f84:	e7e4      	b.n	8006f50 <_puts_r+0x68>
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	6022      	str	r2, [r4, #0]
 8006f8c:	220a      	movs	r2, #10
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	e7ee      	b.n	8006f70 <_puts_r+0x88>
	...

08006f94 <puts>:
 8006f94:	4b02      	ldr	r3, [pc, #8]	@ (8006fa0 <puts+0xc>)
 8006f96:	4601      	mov	r1, r0
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	f7ff bfa5 	b.w	8006ee8 <_puts_r>
 8006f9e:	bf00      	nop
 8006fa0:	20000018 	.word	0x20000018

08006fa4 <__sread>:
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fac:	f000 f8fc 	bl	80071a8 <_read_r>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	bfab      	itete	ge
 8006fb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8006fb8:	181b      	addge	r3, r3, r0
 8006fba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fbe:	bfac      	ite	ge
 8006fc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006fc2:	81a3      	strhlt	r3, [r4, #12]
 8006fc4:	bd10      	pop	{r4, pc}

08006fc6 <__swrite>:
 8006fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fca:	461f      	mov	r7, r3
 8006fcc:	898b      	ldrh	r3, [r1, #12]
 8006fce:	05db      	lsls	r3, r3, #23
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	4616      	mov	r6, r2
 8006fd6:	d505      	bpl.n	8006fe4 <__swrite+0x1e>
 8006fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fdc:	2302      	movs	r3, #2
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f000 f8d0 	bl	8007184 <_lseek_r>
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fee:	81a3      	strh	r3, [r4, #12]
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffa:	f000 b8e7 	b.w	80071cc <_write_r>

08006ffe <__sseek>:
 8006ffe:	b510      	push	{r4, lr}
 8007000:	460c      	mov	r4, r1
 8007002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007006:	f000 f8bd 	bl	8007184 <_lseek_r>
 800700a:	1c43      	adds	r3, r0, #1
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	bf15      	itete	ne
 8007010:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007012:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007016:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800701a:	81a3      	strheq	r3, [r4, #12]
 800701c:	bf18      	it	ne
 800701e:	81a3      	strhne	r3, [r4, #12]
 8007020:	bd10      	pop	{r4, pc}

08007022 <__sclose>:
 8007022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007026:	f000 b89d 	b.w	8007164 <_close_r>

0800702a <__swbuf_r>:
 800702a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702c:	460e      	mov	r6, r1
 800702e:	4614      	mov	r4, r2
 8007030:	4605      	mov	r5, r0
 8007032:	b118      	cbz	r0, 800703c <__swbuf_r+0x12>
 8007034:	6a03      	ldr	r3, [r0, #32]
 8007036:	b90b      	cbnz	r3, 800703c <__swbuf_r+0x12>
 8007038:	f7ff ff0e 	bl	8006e58 <__sinit>
 800703c:	69a3      	ldr	r3, [r4, #24]
 800703e:	60a3      	str	r3, [r4, #8]
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	071a      	lsls	r2, r3, #28
 8007044:	d501      	bpl.n	800704a <__swbuf_r+0x20>
 8007046:	6923      	ldr	r3, [r4, #16]
 8007048:	b943      	cbnz	r3, 800705c <__swbuf_r+0x32>
 800704a:	4621      	mov	r1, r4
 800704c:	4628      	mov	r0, r5
 800704e:	f000 f82b 	bl	80070a8 <__swsetup_r>
 8007052:	b118      	cbz	r0, 800705c <__swbuf_r+0x32>
 8007054:	f04f 37ff 	mov.w	r7, #4294967295
 8007058:	4638      	mov	r0, r7
 800705a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	6922      	ldr	r2, [r4, #16]
 8007060:	1a98      	subs	r0, r3, r2
 8007062:	6963      	ldr	r3, [r4, #20]
 8007064:	b2f6      	uxtb	r6, r6
 8007066:	4283      	cmp	r3, r0
 8007068:	4637      	mov	r7, r6
 800706a:	dc05      	bgt.n	8007078 <__swbuf_r+0x4e>
 800706c:	4621      	mov	r1, r4
 800706e:	4628      	mov	r0, r5
 8007070:	f000 fd38 	bl	8007ae4 <_fflush_r>
 8007074:	2800      	cmp	r0, #0
 8007076:	d1ed      	bne.n	8007054 <__swbuf_r+0x2a>
 8007078:	68a3      	ldr	r3, [r4, #8]
 800707a:	3b01      	subs	r3, #1
 800707c:	60a3      	str	r3, [r4, #8]
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	6022      	str	r2, [r4, #0]
 8007084:	701e      	strb	r6, [r3, #0]
 8007086:	6962      	ldr	r2, [r4, #20]
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	429a      	cmp	r2, r3
 800708c:	d004      	beq.n	8007098 <__swbuf_r+0x6e>
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	07db      	lsls	r3, r3, #31
 8007092:	d5e1      	bpl.n	8007058 <__swbuf_r+0x2e>
 8007094:	2e0a      	cmp	r6, #10
 8007096:	d1df      	bne.n	8007058 <__swbuf_r+0x2e>
 8007098:	4621      	mov	r1, r4
 800709a:	4628      	mov	r0, r5
 800709c:	f000 fd22 	bl	8007ae4 <_fflush_r>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d0d9      	beq.n	8007058 <__swbuf_r+0x2e>
 80070a4:	e7d6      	b.n	8007054 <__swbuf_r+0x2a>
	...

080070a8 <__swsetup_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4b29      	ldr	r3, [pc, #164]	@ (8007150 <__swsetup_r+0xa8>)
 80070ac:	4605      	mov	r5, r0
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	460c      	mov	r4, r1
 80070b2:	b118      	cbz	r0, 80070bc <__swsetup_r+0x14>
 80070b4:	6a03      	ldr	r3, [r0, #32]
 80070b6:	b90b      	cbnz	r3, 80070bc <__swsetup_r+0x14>
 80070b8:	f7ff fece 	bl	8006e58 <__sinit>
 80070bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c0:	0719      	lsls	r1, r3, #28
 80070c2:	d422      	bmi.n	800710a <__swsetup_r+0x62>
 80070c4:	06da      	lsls	r2, r3, #27
 80070c6:	d407      	bmi.n	80070d8 <__swsetup_r+0x30>
 80070c8:	2209      	movs	r2, #9
 80070ca:	602a      	str	r2, [r5, #0]
 80070cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070d0:	81a3      	strh	r3, [r4, #12]
 80070d2:	f04f 30ff 	mov.w	r0, #4294967295
 80070d6:	e033      	b.n	8007140 <__swsetup_r+0x98>
 80070d8:	0758      	lsls	r0, r3, #29
 80070da:	d512      	bpl.n	8007102 <__swsetup_r+0x5a>
 80070dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070de:	b141      	cbz	r1, 80070f2 <__swsetup_r+0x4a>
 80070e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070e4:	4299      	cmp	r1, r3
 80070e6:	d002      	beq.n	80070ee <__swsetup_r+0x46>
 80070e8:	4628      	mov	r0, r5
 80070ea:	f000 f8af 	bl	800724c <_free_r>
 80070ee:	2300      	movs	r3, #0
 80070f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80070f2:	89a3      	ldrh	r3, [r4, #12]
 80070f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80070f8:	81a3      	strh	r3, [r4, #12]
 80070fa:	2300      	movs	r3, #0
 80070fc:	6063      	str	r3, [r4, #4]
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	f043 0308 	orr.w	r3, r3, #8
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	6923      	ldr	r3, [r4, #16]
 800710c:	b94b      	cbnz	r3, 8007122 <__swsetup_r+0x7a>
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007118:	d003      	beq.n	8007122 <__swsetup_r+0x7a>
 800711a:	4621      	mov	r1, r4
 800711c:	4628      	mov	r0, r5
 800711e:	f000 fd2f 	bl	8007b80 <__smakebuf_r>
 8007122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007126:	f013 0201 	ands.w	r2, r3, #1
 800712a:	d00a      	beq.n	8007142 <__swsetup_r+0x9a>
 800712c:	2200      	movs	r2, #0
 800712e:	60a2      	str	r2, [r4, #8]
 8007130:	6962      	ldr	r2, [r4, #20]
 8007132:	4252      	negs	r2, r2
 8007134:	61a2      	str	r2, [r4, #24]
 8007136:	6922      	ldr	r2, [r4, #16]
 8007138:	b942      	cbnz	r2, 800714c <__swsetup_r+0xa4>
 800713a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800713e:	d1c5      	bne.n	80070cc <__swsetup_r+0x24>
 8007140:	bd38      	pop	{r3, r4, r5, pc}
 8007142:	0799      	lsls	r1, r3, #30
 8007144:	bf58      	it	pl
 8007146:	6962      	ldrpl	r2, [r4, #20]
 8007148:	60a2      	str	r2, [r4, #8]
 800714a:	e7f4      	b.n	8007136 <__swsetup_r+0x8e>
 800714c:	2000      	movs	r0, #0
 800714e:	e7f7      	b.n	8007140 <__swsetup_r+0x98>
 8007150:	20000018 	.word	0x20000018

08007154 <memset>:
 8007154:	4402      	add	r2, r0
 8007156:	4603      	mov	r3, r0
 8007158:	4293      	cmp	r3, r2
 800715a:	d100      	bne.n	800715e <memset+0xa>
 800715c:	4770      	bx	lr
 800715e:	f803 1b01 	strb.w	r1, [r3], #1
 8007162:	e7f9      	b.n	8007158 <memset+0x4>

08007164 <_close_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d06      	ldr	r5, [pc, #24]	@ (8007180 <_close_r+0x1c>)
 8007168:	2300      	movs	r3, #0
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	602b      	str	r3, [r5, #0]
 8007170:	f7fb ffbc 	bl	80030ec <_close>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d102      	bne.n	800717e <_close_r+0x1a>
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	b103      	cbz	r3, 800717e <_close_r+0x1a>
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	200004f8 	.word	0x200004f8

08007184 <_lseek_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4d07      	ldr	r5, [pc, #28]	@ (80071a4 <_lseek_r+0x20>)
 8007188:	4604      	mov	r4, r0
 800718a:	4608      	mov	r0, r1
 800718c:	4611      	mov	r1, r2
 800718e:	2200      	movs	r2, #0
 8007190:	602a      	str	r2, [r5, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	f7fb ffd1 	bl	800313a <_lseek>
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	d102      	bne.n	80071a2 <_lseek_r+0x1e>
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	b103      	cbz	r3, 80071a2 <_lseek_r+0x1e>
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	bd38      	pop	{r3, r4, r5, pc}
 80071a4:	200004f8 	.word	0x200004f8

080071a8 <_read_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4d07      	ldr	r5, [pc, #28]	@ (80071c8 <_read_r+0x20>)
 80071ac:	4604      	mov	r4, r0
 80071ae:	4608      	mov	r0, r1
 80071b0:	4611      	mov	r1, r2
 80071b2:	2200      	movs	r2, #0
 80071b4:	602a      	str	r2, [r5, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	f7fb ff5f 	bl	800307a <_read>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	d102      	bne.n	80071c6 <_read_r+0x1e>
 80071c0:	682b      	ldr	r3, [r5, #0]
 80071c2:	b103      	cbz	r3, 80071c6 <_read_r+0x1e>
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	bd38      	pop	{r3, r4, r5, pc}
 80071c8:	200004f8 	.word	0x200004f8

080071cc <_write_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	4d07      	ldr	r5, [pc, #28]	@ (80071ec <_write_r+0x20>)
 80071d0:	4604      	mov	r4, r0
 80071d2:	4608      	mov	r0, r1
 80071d4:	4611      	mov	r1, r2
 80071d6:	2200      	movs	r2, #0
 80071d8:	602a      	str	r2, [r5, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	f7fb ff6a 	bl	80030b4 <_write>
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	d102      	bne.n	80071ea <_write_r+0x1e>
 80071e4:	682b      	ldr	r3, [r5, #0]
 80071e6:	b103      	cbz	r3, 80071ea <_write_r+0x1e>
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	bd38      	pop	{r3, r4, r5, pc}
 80071ec:	200004f8 	.word	0x200004f8

080071f0 <__errno>:
 80071f0:	4b01      	ldr	r3, [pc, #4]	@ (80071f8 <__errno+0x8>)
 80071f2:	6818      	ldr	r0, [r3, #0]
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	20000018 	.word	0x20000018

080071fc <__libc_init_array>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007234 <__libc_init_array+0x38>)
 8007200:	4c0d      	ldr	r4, [pc, #52]	@ (8007238 <__libc_init_array+0x3c>)
 8007202:	1b64      	subs	r4, r4, r5
 8007204:	10a4      	asrs	r4, r4, #2
 8007206:	2600      	movs	r6, #0
 8007208:	42a6      	cmp	r6, r4
 800720a:	d109      	bne.n	8007220 <__libc_init_array+0x24>
 800720c:	4d0b      	ldr	r5, [pc, #44]	@ (800723c <__libc_init_array+0x40>)
 800720e:	4c0c      	ldr	r4, [pc, #48]	@ (8007240 <__libc_init_array+0x44>)
 8007210:	f000 fd24 	bl	8007c5c <_init>
 8007214:	1b64      	subs	r4, r4, r5
 8007216:	10a4      	asrs	r4, r4, #2
 8007218:	2600      	movs	r6, #0
 800721a:	42a6      	cmp	r6, r4
 800721c:	d105      	bne.n	800722a <__libc_init_array+0x2e>
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	f855 3b04 	ldr.w	r3, [r5], #4
 8007224:	4798      	blx	r3
 8007226:	3601      	adds	r6, #1
 8007228:	e7ee      	b.n	8007208 <__libc_init_array+0xc>
 800722a:	f855 3b04 	ldr.w	r3, [r5], #4
 800722e:	4798      	blx	r3
 8007230:	3601      	adds	r6, #1
 8007232:	e7f2      	b.n	800721a <__libc_init_array+0x1e>
 8007234:	08007ea4 	.word	0x08007ea4
 8007238:	08007ea4 	.word	0x08007ea4
 800723c:	08007ea4 	.word	0x08007ea4
 8007240:	08007ea8 	.word	0x08007ea8

08007244 <__retarget_lock_init_recursive>:
 8007244:	4770      	bx	lr

08007246 <__retarget_lock_acquire_recursive>:
 8007246:	4770      	bx	lr

08007248 <__retarget_lock_release_recursive>:
 8007248:	4770      	bx	lr
	...

0800724c <_free_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4605      	mov	r5, r0
 8007250:	2900      	cmp	r1, #0
 8007252:	d041      	beq.n	80072d8 <_free_r+0x8c>
 8007254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007258:	1f0c      	subs	r4, r1, #4
 800725a:	2b00      	cmp	r3, #0
 800725c:	bfb8      	it	lt
 800725e:	18e4      	addlt	r4, r4, r3
 8007260:	f000 f8e0 	bl	8007424 <__malloc_lock>
 8007264:	4a1d      	ldr	r2, [pc, #116]	@ (80072dc <_free_r+0x90>)
 8007266:	6813      	ldr	r3, [r2, #0]
 8007268:	b933      	cbnz	r3, 8007278 <_free_r+0x2c>
 800726a:	6063      	str	r3, [r4, #4]
 800726c:	6014      	str	r4, [r2, #0]
 800726e:	4628      	mov	r0, r5
 8007270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007274:	f000 b8dc 	b.w	8007430 <__malloc_unlock>
 8007278:	42a3      	cmp	r3, r4
 800727a:	d908      	bls.n	800728e <_free_r+0x42>
 800727c:	6820      	ldr	r0, [r4, #0]
 800727e:	1821      	adds	r1, r4, r0
 8007280:	428b      	cmp	r3, r1
 8007282:	bf01      	itttt	eq
 8007284:	6819      	ldreq	r1, [r3, #0]
 8007286:	685b      	ldreq	r3, [r3, #4]
 8007288:	1809      	addeq	r1, r1, r0
 800728a:	6021      	streq	r1, [r4, #0]
 800728c:	e7ed      	b.n	800726a <_free_r+0x1e>
 800728e:	461a      	mov	r2, r3
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	b10b      	cbz	r3, 8007298 <_free_r+0x4c>
 8007294:	42a3      	cmp	r3, r4
 8007296:	d9fa      	bls.n	800728e <_free_r+0x42>
 8007298:	6811      	ldr	r1, [r2, #0]
 800729a:	1850      	adds	r0, r2, r1
 800729c:	42a0      	cmp	r0, r4
 800729e:	d10b      	bne.n	80072b8 <_free_r+0x6c>
 80072a0:	6820      	ldr	r0, [r4, #0]
 80072a2:	4401      	add	r1, r0
 80072a4:	1850      	adds	r0, r2, r1
 80072a6:	4283      	cmp	r3, r0
 80072a8:	6011      	str	r1, [r2, #0]
 80072aa:	d1e0      	bne.n	800726e <_free_r+0x22>
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	6053      	str	r3, [r2, #4]
 80072b2:	4408      	add	r0, r1
 80072b4:	6010      	str	r0, [r2, #0]
 80072b6:	e7da      	b.n	800726e <_free_r+0x22>
 80072b8:	d902      	bls.n	80072c0 <_free_r+0x74>
 80072ba:	230c      	movs	r3, #12
 80072bc:	602b      	str	r3, [r5, #0]
 80072be:	e7d6      	b.n	800726e <_free_r+0x22>
 80072c0:	6820      	ldr	r0, [r4, #0]
 80072c2:	1821      	adds	r1, r4, r0
 80072c4:	428b      	cmp	r3, r1
 80072c6:	bf04      	itt	eq
 80072c8:	6819      	ldreq	r1, [r3, #0]
 80072ca:	685b      	ldreq	r3, [r3, #4]
 80072cc:	6063      	str	r3, [r4, #4]
 80072ce:	bf04      	itt	eq
 80072d0:	1809      	addeq	r1, r1, r0
 80072d2:	6021      	streq	r1, [r4, #0]
 80072d4:	6054      	str	r4, [r2, #4]
 80072d6:	e7ca      	b.n	800726e <_free_r+0x22>
 80072d8:	bd38      	pop	{r3, r4, r5, pc}
 80072da:	bf00      	nop
 80072dc:	20000504 	.word	0x20000504

080072e0 <sbrk_aligned>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	4e0f      	ldr	r6, [pc, #60]	@ (8007320 <sbrk_aligned+0x40>)
 80072e4:	460c      	mov	r4, r1
 80072e6:	6831      	ldr	r1, [r6, #0]
 80072e8:	4605      	mov	r5, r0
 80072ea:	b911      	cbnz	r1, 80072f2 <sbrk_aligned+0x12>
 80072ec:	f000 fca6 	bl	8007c3c <_sbrk_r>
 80072f0:	6030      	str	r0, [r6, #0]
 80072f2:	4621      	mov	r1, r4
 80072f4:	4628      	mov	r0, r5
 80072f6:	f000 fca1 	bl	8007c3c <_sbrk_r>
 80072fa:	1c43      	adds	r3, r0, #1
 80072fc:	d103      	bne.n	8007306 <sbrk_aligned+0x26>
 80072fe:	f04f 34ff 	mov.w	r4, #4294967295
 8007302:	4620      	mov	r0, r4
 8007304:	bd70      	pop	{r4, r5, r6, pc}
 8007306:	1cc4      	adds	r4, r0, #3
 8007308:	f024 0403 	bic.w	r4, r4, #3
 800730c:	42a0      	cmp	r0, r4
 800730e:	d0f8      	beq.n	8007302 <sbrk_aligned+0x22>
 8007310:	1a21      	subs	r1, r4, r0
 8007312:	4628      	mov	r0, r5
 8007314:	f000 fc92 	bl	8007c3c <_sbrk_r>
 8007318:	3001      	adds	r0, #1
 800731a:	d1f2      	bne.n	8007302 <sbrk_aligned+0x22>
 800731c:	e7ef      	b.n	80072fe <sbrk_aligned+0x1e>
 800731e:	bf00      	nop
 8007320:	20000500 	.word	0x20000500

08007324 <_malloc_r>:
 8007324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007328:	1ccd      	adds	r5, r1, #3
 800732a:	f025 0503 	bic.w	r5, r5, #3
 800732e:	3508      	adds	r5, #8
 8007330:	2d0c      	cmp	r5, #12
 8007332:	bf38      	it	cc
 8007334:	250c      	movcc	r5, #12
 8007336:	2d00      	cmp	r5, #0
 8007338:	4606      	mov	r6, r0
 800733a:	db01      	blt.n	8007340 <_malloc_r+0x1c>
 800733c:	42a9      	cmp	r1, r5
 800733e:	d904      	bls.n	800734a <_malloc_r+0x26>
 8007340:	230c      	movs	r3, #12
 8007342:	6033      	str	r3, [r6, #0]
 8007344:	2000      	movs	r0, #0
 8007346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800734a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007420 <_malloc_r+0xfc>
 800734e:	f000 f869 	bl	8007424 <__malloc_lock>
 8007352:	f8d8 3000 	ldr.w	r3, [r8]
 8007356:	461c      	mov	r4, r3
 8007358:	bb44      	cbnz	r4, 80073ac <_malloc_r+0x88>
 800735a:	4629      	mov	r1, r5
 800735c:	4630      	mov	r0, r6
 800735e:	f7ff ffbf 	bl	80072e0 <sbrk_aligned>
 8007362:	1c43      	adds	r3, r0, #1
 8007364:	4604      	mov	r4, r0
 8007366:	d158      	bne.n	800741a <_malloc_r+0xf6>
 8007368:	f8d8 4000 	ldr.w	r4, [r8]
 800736c:	4627      	mov	r7, r4
 800736e:	2f00      	cmp	r7, #0
 8007370:	d143      	bne.n	80073fa <_malloc_r+0xd6>
 8007372:	2c00      	cmp	r4, #0
 8007374:	d04b      	beq.n	800740e <_malloc_r+0xea>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	4639      	mov	r1, r7
 800737a:	4630      	mov	r0, r6
 800737c:	eb04 0903 	add.w	r9, r4, r3
 8007380:	f000 fc5c 	bl	8007c3c <_sbrk_r>
 8007384:	4581      	cmp	r9, r0
 8007386:	d142      	bne.n	800740e <_malloc_r+0xea>
 8007388:	6821      	ldr	r1, [r4, #0]
 800738a:	1a6d      	subs	r5, r5, r1
 800738c:	4629      	mov	r1, r5
 800738e:	4630      	mov	r0, r6
 8007390:	f7ff ffa6 	bl	80072e0 <sbrk_aligned>
 8007394:	3001      	adds	r0, #1
 8007396:	d03a      	beq.n	800740e <_malloc_r+0xea>
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	442b      	add	r3, r5
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	f8d8 3000 	ldr.w	r3, [r8]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	bb62      	cbnz	r2, 8007400 <_malloc_r+0xdc>
 80073a6:	f8c8 7000 	str.w	r7, [r8]
 80073aa:	e00f      	b.n	80073cc <_malloc_r+0xa8>
 80073ac:	6822      	ldr	r2, [r4, #0]
 80073ae:	1b52      	subs	r2, r2, r5
 80073b0:	d420      	bmi.n	80073f4 <_malloc_r+0xd0>
 80073b2:	2a0b      	cmp	r2, #11
 80073b4:	d917      	bls.n	80073e6 <_malloc_r+0xc2>
 80073b6:	1961      	adds	r1, r4, r5
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	6025      	str	r5, [r4, #0]
 80073bc:	bf18      	it	ne
 80073be:	6059      	strne	r1, [r3, #4]
 80073c0:	6863      	ldr	r3, [r4, #4]
 80073c2:	bf08      	it	eq
 80073c4:	f8c8 1000 	streq.w	r1, [r8]
 80073c8:	5162      	str	r2, [r4, r5]
 80073ca:	604b      	str	r3, [r1, #4]
 80073cc:	4630      	mov	r0, r6
 80073ce:	f000 f82f 	bl	8007430 <__malloc_unlock>
 80073d2:	f104 000b 	add.w	r0, r4, #11
 80073d6:	1d23      	adds	r3, r4, #4
 80073d8:	f020 0007 	bic.w	r0, r0, #7
 80073dc:	1ac2      	subs	r2, r0, r3
 80073de:	bf1c      	itt	ne
 80073e0:	1a1b      	subne	r3, r3, r0
 80073e2:	50a3      	strne	r3, [r4, r2]
 80073e4:	e7af      	b.n	8007346 <_malloc_r+0x22>
 80073e6:	6862      	ldr	r2, [r4, #4]
 80073e8:	42a3      	cmp	r3, r4
 80073ea:	bf0c      	ite	eq
 80073ec:	f8c8 2000 	streq.w	r2, [r8]
 80073f0:	605a      	strne	r2, [r3, #4]
 80073f2:	e7eb      	b.n	80073cc <_malloc_r+0xa8>
 80073f4:	4623      	mov	r3, r4
 80073f6:	6864      	ldr	r4, [r4, #4]
 80073f8:	e7ae      	b.n	8007358 <_malloc_r+0x34>
 80073fa:	463c      	mov	r4, r7
 80073fc:	687f      	ldr	r7, [r7, #4]
 80073fe:	e7b6      	b.n	800736e <_malloc_r+0x4a>
 8007400:	461a      	mov	r2, r3
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	42a3      	cmp	r3, r4
 8007406:	d1fb      	bne.n	8007400 <_malloc_r+0xdc>
 8007408:	2300      	movs	r3, #0
 800740a:	6053      	str	r3, [r2, #4]
 800740c:	e7de      	b.n	80073cc <_malloc_r+0xa8>
 800740e:	230c      	movs	r3, #12
 8007410:	6033      	str	r3, [r6, #0]
 8007412:	4630      	mov	r0, r6
 8007414:	f000 f80c 	bl	8007430 <__malloc_unlock>
 8007418:	e794      	b.n	8007344 <_malloc_r+0x20>
 800741a:	6005      	str	r5, [r0, #0]
 800741c:	e7d6      	b.n	80073cc <_malloc_r+0xa8>
 800741e:	bf00      	nop
 8007420:	20000504 	.word	0x20000504

08007424 <__malloc_lock>:
 8007424:	4801      	ldr	r0, [pc, #4]	@ (800742c <__malloc_lock+0x8>)
 8007426:	f7ff bf0e 	b.w	8007246 <__retarget_lock_acquire_recursive>
 800742a:	bf00      	nop
 800742c:	200004fc 	.word	0x200004fc

08007430 <__malloc_unlock>:
 8007430:	4801      	ldr	r0, [pc, #4]	@ (8007438 <__malloc_unlock+0x8>)
 8007432:	f7ff bf09 	b.w	8007248 <__retarget_lock_release_recursive>
 8007436:	bf00      	nop
 8007438:	200004fc 	.word	0x200004fc

0800743c <__sfputc_r>:
 800743c:	6893      	ldr	r3, [r2, #8]
 800743e:	3b01      	subs	r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	b410      	push	{r4}
 8007444:	6093      	str	r3, [r2, #8]
 8007446:	da08      	bge.n	800745a <__sfputc_r+0x1e>
 8007448:	6994      	ldr	r4, [r2, #24]
 800744a:	42a3      	cmp	r3, r4
 800744c:	db01      	blt.n	8007452 <__sfputc_r+0x16>
 800744e:	290a      	cmp	r1, #10
 8007450:	d103      	bne.n	800745a <__sfputc_r+0x1e>
 8007452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007456:	f7ff bde8 	b.w	800702a <__swbuf_r>
 800745a:	6813      	ldr	r3, [r2, #0]
 800745c:	1c58      	adds	r0, r3, #1
 800745e:	6010      	str	r0, [r2, #0]
 8007460:	7019      	strb	r1, [r3, #0]
 8007462:	4608      	mov	r0, r1
 8007464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007468:	4770      	bx	lr

0800746a <__sfputs_r>:
 800746a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746c:	4606      	mov	r6, r0
 800746e:	460f      	mov	r7, r1
 8007470:	4614      	mov	r4, r2
 8007472:	18d5      	adds	r5, r2, r3
 8007474:	42ac      	cmp	r4, r5
 8007476:	d101      	bne.n	800747c <__sfputs_r+0x12>
 8007478:	2000      	movs	r0, #0
 800747a:	e007      	b.n	800748c <__sfputs_r+0x22>
 800747c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007480:	463a      	mov	r2, r7
 8007482:	4630      	mov	r0, r6
 8007484:	f7ff ffda 	bl	800743c <__sfputc_r>
 8007488:	1c43      	adds	r3, r0, #1
 800748a:	d1f3      	bne.n	8007474 <__sfputs_r+0xa>
 800748c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007490 <_vfiprintf_r>:
 8007490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	460d      	mov	r5, r1
 8007496:	b09d      	sub	sp, #116	@ 0x74
 8007498:	4614      	mov	r4, r2
 800749a:	4698      	mov	r8, r3
 800749c:	4606      	mov	r6, r0
 800749e:	b118      	cbz	r0, 80074a8 <_vfiprintf_r+0x18>
 80074a0:	6a03      	ldr	r3, [r0, #32]
 80074a2:	b90b      	cbnz	r3, 80074a8 <_vfiprintf_r+0x18>
 80074a4:	f7ff fcd8 	bl	8006e58 <__sinit>
 80074a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074aa:	07d9      	lsls	r1, r3, #31
 80074ac:	d405      	bmi.n	80074ba <_vfiprintf_r+0x2a>
 80074ae:	89ab      	ldrh	r3, [r5, #12]
 80074b0:	059a      	lsls	r2, r3, #22
 80074b2:	d402      	bmi.n	80074ba <_vfiprintf_r+0x2a>
 80074b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074b6:	f7ff fec6 	bl	8007246 <__retarget_lock_acquire_recursive>
 80074ba:	89ab      	ldrh	r3, [r5, #12]
 80074bc:	071b      	lsls	r3, r3, #28
 80074be:	d501      	bpl.n	80074c4 <_vfiprintf_r+0x34>
 80074c0:	692b      	ldr	r3, [r5, #16]
 80074c2:	b99b      	cbnz	r3, 80074ec <_vfiprintf_r+0x5c>
 80074c4:	4629      	mov	r1, r5
 80074c6:	4630      	mov	r0, r6
 80074c8:	f7ff fdee 	bl	80070a8 <__swsetup_r>
 80074cc:	b170      	cbz	r0, 80074ec <_vfiprintf_r+0x5c>
 80074ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074d0:	07dc      	lsls	r4, r3, #31
 80074d2:	d504      	bpl.n	80074de <_vfiprintf_r+0x4e>
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	b01d      	add	sp, #116	@ 0x74
 80074da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	0598      	lsls	r0, r3, #22
 80074e2:	d4f7      	bmi.n	80074d4 <_vfiprintf_r+0x44>
 80074e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074e6:	f7ff feaf 	bl	8007248 <__retarget_lock_release_recursive>
 80074ea:	e7f3      	b.n	80074d4 <_vfiprintf_r+0x44>
 80074ec:	2300      	movs	r3, #0
 80074ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80074f0:	2320      	movs	r3, #32
 80074f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80074fa:	2330      	movs	r3, #48	@ 0x30
 80074fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076ac <_vfiprintf_r+0x21c>
 8007500:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007504:	f04f 0901 	mov.w	r9, #1
 8007508:	4623      	mov	r3, r4
 800750a:	469a      	mov	sl, r3
 800750c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007510:	b10a      	cbz	r2, 8007516 <_vfiprintf_r+0x86>
 8007512:	2a25      	cmp	r2, #37	@ 0x25
 8007514:	d1f9      	bne.n	800750a <_vfiprintf_r+0x7a>
 8007516:	ebba 0b04 	subs.w	fp, sl, r4
 800751a:	d00b      	beq.n	8007534 <_vfiprintf_r+0xa4>
 800751c:	465b      	mov	r3, fp
 800751e:	4622      	mov	r2, r4
 8007520:	4629      	mov	r1, r5
 8007522:	4630      	mov	r0, r6
 8007524:	f7ff ffa1 	bl	800746a <__sfputs_r>
 8007528:	3001      	adds	r0, #1
 800752a:	f000 80a7 	beq.w	800767c <_vfiprintf_r+0x1ec>
 800752e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007530:	445a      	add	r2, fp
 8007532:	9209      	str	r2, [sp, #36]	@ 0x24
 8007534:	f89a 3000 	ldrb.w	r3, [sl]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 809f 	beq.w	800767c <_vfiprintf_r+0x1ec>
 800753e:	2300      	movs	r3, #0
 8007540:	f04f 32ff 	mov.w	r2, #4294967295
 8007544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007548:	f10a 0a01 	add.w	sl, sl, #1
 800754c:	9304      	str	r3, [sp, #16]
 800754e:	9307      	str	r3, [sp, #28]
 8007550:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007554:	931a      	str	r3, [sp, #104]	@ 0x68
 8007556:	4654      	mov	r4, sl
 8007558:	2205      	movs	r2, #5
 800755a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755e:	4853      	ldr	r0, [pc, #332]	@ (80076ac <_vfiprintf_r+0x21c>)
 8007560:	f7f8 fe3e 	bl	80001e0 <memchr>
 8007564:	9a04      	ldr	r2, [sp, #16]
 8007566:	b9d8      	cbnz	r0, 80075a0 <_vfiprintf_r+0x110>
 8007568:	06d1      	lsls	r1, r2, #27
 800756a:	bf44      	itt	mi
 800756c:	2320      	movmi	r3, #32
 800756e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007572:	0713      	lsls	r3, r2, #28
 8007574:	bf44      	itt	mi
 8007576:	232b      	movmi	r3, #43	@ 0x2b
 8007578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800757c:	f89a 3000 	ldrb.w	r3, [sl]
 8007580:	2b2a      	cmp	r3, #42	@ 0x2a
 8007582:	d015      	beq.n	80075b0 <_vfiprintf_r+0x120>
 8007584:	9a07      	ldr	r2, [sp, #28]
 8007586:	4654      	mov	r4, sl
 8007588:	2000      	movs	r0, #0
 800758a:	f04f 0c0a 	mov.w	ip, #10
 800758e:	4621      	mov	r1, r4
 8007590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007594:	3b30      	subs	r3, #48	@ 0x30
 8007596:	2b09      	cmp	r3, #9
 8007598:	d94b      	bls.n	8007632 <_vfiprintf_r+0x1a2>
 800759a:	b1b0      	cbz	r0, 80075ca <_vfiprintf_r+0x13a>
 800759c:	9207      	str	r2, [sp, #28]
 800759e:	e014      	b.n	80075ca <_vfiprintf_r+0x13a>
 80075a0:	eba0 0308 	sub.w	r3, r0, r8
 80075a4:	fa09 f303 	lsl.w	r3, r9, r3
 80075a8:	4313      	orrs	r3, r2
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	46a2      	mov	sl, r4
 80075ae:	e7d2      	b.n	8007556 <_vfiprintf_r+0xc6>
 80075b0:	9b03      	ldr	r3, [sp, #12]
 80075b2:	1d19      	adds	r1, r3, #4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	9103      	str	r1, [sp, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	bfbb      	ittet	lt
 80075bc:	425b      	neglt	r3, r3
 80075be:	f042 0202 	orrlt.w	r2, r2, #2
 80075c2:	9307      	strge	r3, [sp, #28]
 80075c4:	9307      	strlt	r3, [sp, #28]
 80075c6:	bfb8      	it	lt
 80075c8:	9204      	strlt	r2, [sp, #16]
 80075ca:	7823      	ldrb	r3, [r4, #0]
 80075cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80075ce:	d10a      	bne.n	80075e6 <_vfiprintf_r+0x156>
 80075d0:	7863      	ldrb	r3, [r4, #1]
 80075d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80075d4:	d132      	bne.n	800763c <_vfiprintf_r+0x1ac>
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	1d1a      	adds	r2, r3, #4
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	9203      	str	r2, [sp, #12]
 80075de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075e2:	3402      	adds	r4, #2
 80075e4:	9305      	str	r3, [sp, #20]
 80075e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076bc <_vfiprintf_r+0x22c>
 80075ea:	7821      	ldrb	r1, [r4, #0]
 80075ec:	2203      	movs	r2, #3
 80075ee:	4650      	mov	r0, sl
 80075f0:	f7f8 fdf6 	bl	80001e0 <memchr>
 80075f4:	b138      	cbz	r0, 8007606 <_vfiprintf_r+0x176>
 80075f6:	9b04      	ldr	r3, [sp, #16]
 80075f8:	eba0 000a 	sub.w	r0, r0, sl
 80075fc:	2240      	movs	r2, #64	@ 0x40
 80075fe:	4082      	lsls	r2, r0
 8007600:	4313      	orrs	r3, r2
 8007602:	3401      	adds	r4, #1
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800760a:	4829      	ldr	r0, [pc, #164]	@ (80076b0 <_vfiprintf_r+0x220>)
 800760c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007610:	2206      	movs	r2, #6
 8007612:	f7f8 fde5 	bl	80001e0 <memchr>
 8007616:	2800      	cmp	r0, #0
 8007618:	d03f      	beq.n	800769a <_vfiprintf_r+0x20a>
 800761a:	4b26      	ldr	r3, [pc, #152]	@ (80076b4 <_vfiprintf_r+0x224>)
 800761c:	bb1b      	cbnz	r3, 8007666 <_vfiprintf_r+0x1d6>
 800761e:	9b03      	ldr	r3, [sp, #12]
 8007620:	3307      	adds	r3, #7
 8007622:	f023 0307 	bic.w	r3, r3, #7
 8007626:	3308      	adds	r3, #8
 8007628:	9303      	str	r3, [sp, #12]
 800762a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800762c:	443b      	add	r3, r7
 800762e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007630:	e76a      	b.n	8007508 <_vfiprintf_r+0x78>
 8007632:	fb0c 3202 	mla	r2, ip, r2, r3
 8007636:	460c      	mov	r4, r1
 8007638:	2001      	movs	r0, #1
 800763a:	e7a8      	b.n	800758e <_vfiprintf_r+0xfe>
 800763c:	2300      	movs	r3, #0
 800763e:	3401      	adds	r4, #1
 8007640:	9305      	str	r3, [sp, #20]
 8007642:	4619      	mov	r1, r3
 8007644:	f04f 0c0a 	mov.w	ip, #10
 8007648:	4620      	mov	r0, r4
 800764a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800764e:	3a30      	subs	r2, #48	@ 0x30
 8007650:	2a09      	cmp	r2, #9
 8007652:	d903      	bls.n	800765c <_vfiprintf_r+0x1cc>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0c6      	beq.n	80075e6 <_vfiprintf_r+0x156>
 8007658:	9105      	str	r1, [sp, #20]
 800765a:	e7c4      	b.n	80075e6 <_vfiprintf_r+0x156>
 800765c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007660:	4604      	mov	r4, r0
 8007662:	2301      	movs	r3, #1
 8007664:	e7f0      	b.n	8007648 <_vfiprintf_r+0x1b8>
 8007666:	ab03      	add	r3, sp, #12
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	462a      	mov	r2, r5
 800766c:	4b12      	ldr	r3, [pc, #72]	@ (80076b8 <_vfiprintf_r+0x228>)
 800766e:	a904      	add	r1, sp, #16
 8007670:	4630      	mov	r0, r6
 8007672:	f3af 8000 	nop.w
 8007676:	4607      	mov	r7, r0
 8007678:	1c78      	adds	r0, r7, #1
 800767a:	d1d6      	bne.n	800762a <_vfiprintf_r+0x19a>
 800767c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800767e:	07d9      	lsls	r1, r3, #31
 8007680:	d405      	bmi.n	800768e <_vfiprintf_r+0x1fe>
 8007682:	89ab      	ldrh	r3, [r5, #12]
 8007684:	059a      	lsls	r2, r3, #22
 8007686:	d402      	bmi.n	800768e <_vfiprintf_r+0x1fe>
 8007688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800768a:	f7ff fddd 	bl	8007248 <__retarget_lock_release_recursive>
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	065b      	lsls	r3, r3, #25
 8007692:	f53f af1f 	bmi.w	80074d4 <_vfiprintf_r+0x44>
 8007696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007698:	e71e      	b.n	80074d8 <_vfiprintf_r+0x48>
 800769a:	ab03      	add	r3, sp, #12
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	462a      	mov	r2, r5
 80076a0:	4b05      	ldr	r3, [pc, #20]	@ (80076b8 <_vfiprintf_r+0x228>)
 80076a2:	a904      	add	r1, sp, #16
 80076a4:	4630      	mov	r0, r6
 80076a6:	f000 f879 	bl	800779c <_printf_i>
 80076aa:	e7e4      	b.n	8007676 <_vfiprintf_r+0x1e6>
 80076ac:	08007e68 	.word	0x08007e68
 80076b0:	08007e72 	.word	0x08007e72
 80076b4:	00000000 	.word	0x00000000
 80076b8:	0800746b 	.word	0x0800746b
 80076bc:	08007e6e 	.word	0x08007e6e

080076c0 <_printf_common>:
 80076c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c4:	4616      	mov	r6, r2
 80076c6:	4698      	mov	r8, r3
 80076c8:	688a      	ldr	r2, [r1, #8]
 80076ca:	690b      	ldr	r3, [r1, #16]
 80076cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076d0:	4293      	cmp	r3, r2
 80076d2:	bfb8      	it	lt
 80076d4:	4613      	movlt	r3, r2
 80076d6:	6033      	str	r3, [r6, #0]
 80076d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076dc:	4607      	mov	r7, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	b10a      	cbz	r2, 80076e6 <_printf_common+0x26>
 80076e2:	3301      	adds	r3, #1
 80076e4:	6033      	str	r3, [r6, #0]
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	0699      	lsls	r1, r3, #26
 80076ea:	bf42      	ittt	mi
 80076ec:	6833      	ldrmi	r3, [r6, #0]
 80076ee:	3302      	addmi	r3, #2
 80076f0:	6033      	strmi	r3, [r6, #0]
 80076f2:	6825      	ldr	r5, [r4, #0]
 80076f4:	f015 0506 	ands.w	r5, r5, #6
 80076f8:	d106      	bne.n	8007708 <_printf_common+0x48>
 80076fa:	f104 0a19 	add.w	sl, r4, #25
 80076fe:	68e3      	ldr	r3, [r4, #12]
 8007700:	6832      	ldr	r2, [r6, #0]
 8007702:	1a9b      	subs	r3, r3, r2
 8007704:	42ab      	cmp	r3, r5
 8007706:	dc26      	bgt.n	8007756 <_printf_common+0x96>
 8007708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800770c:	6822      	ldr	r2, [r4, #0]
 800770e:	3b00      	subs	r3, #0
 8007710:	bf18      	it	ne
 8007712:	2301      	movne	r3, #1
 8007714:	0692      	lsls	r2, r2, #26
 8007716:	d42b      	bmi.n	8007770 <_printf_common+0xb0>
 8007718:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800771c:	4641      	mov	r1, r8
 800771e:	4638      	mov	r0, r7
 8007720:	47c8      	blx	r9
 8007722:	3001      	adds	r0, #1
 8007724:	d01e      	beq.n	8007764 <_printf_common+0xa4>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	6922      	ldr	r2, [r4, #16]
 800772a:	f003 0306 	and.w	r3, r3, #6
 800772e:	2b04      	cmp	r3, #4
 8007730:	bf02      	ittt	eq
 8007732:	68e5      	ldreq	r5, [r4, #12]
 8007734:	6833      	ldreq	r3, [r6, #0]
 8007736:	1aed      	subeq	r5, r5, r3
 8007738:	68a3      	ldr	r3, [r4, #8]
 800773a:	bf0c      	ite	eq
 800773c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007740:	2500      	movne	r5, #0
 8007742:	4293      	cmp	r3, r2
 8007744:	bfc4      	itt	gt
 8007746:	1a9b      	subgt	r3, r3, r2
 8007748:	18ed      	addgt	r5, r5, r3
 800774a:	2600      	movs	r6, #0
 800774c:	341a      	adds	r4, #26
 800774e:	42b5      	cmp	r5, r6
 8007750:	d11a      	bne.n	8007788 <_printf_common+0xc8>
 8007752:	2000      	movs	r0, #0
 8007754:	e008      	b.n	8007768 <_printf_common+0xa8>
 8007756:	2301      	movs	r3, #1
 8007758:	4652      	mov	r2, sl
 800775a:	4641      	mov	r1, r8
 800775c:	4638      	mov	r0, r7
 800775e:	47c8      	blx	r9
 8007760:	3001      	adds	r0, #1
 8007762:	d103      	bne.n	800776c <_printf_common+0xac>
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776c:	3501      	adds	r5, #1
 800776e:	e7c6      	b.n	80076fe <_printf_common+0x3e>
 8007770:	18e1      	adds	r1, r4, r3
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	2030      	movs	r0, #48	@ 0x30
 8007776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800777a:	4422      	add	r2, r4
 800777c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007784:	3302      	adds	r3, #2
 8007786:	e7c7      	b.n	8007718 <_printf_common+0x58>
 8007788:	2301      	movs	r3, #1
 800778a:	4622      	mov	r2, r4
 800778c:	4641      	mov	r1, r8
 800778e:	4638      	mov	r0, r7
 8007790:	47c8      	blx	r9
 8007792:	3001      	adds	r0, #1
 8007794:	d0e6      	beq.n	8007764 <_printf_common+0xa4>
 8007796:	3601      	adds	r6, #1
 8007798:	e7d9      	b.n	800774e <_printf_common+0x8e>
	...

0800779c <_printf_i>:
 800779c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077a0:	7e0f      	ldrb	r7, [r1, #24]
 80077a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077a4:	2f78      	cmp	r7, #120	@ 0x78
 80077a6:	4691      	mov	r9, r2
 80077a8:	4680      	mov	r8, r0
 80077aa:	460c      	mov	r4, r1
 80077ac:	469a      	mov	sl, r3
 80077ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077b2:	d807      	bhi.n	80077c4 <_printf_i+0x28>
 80077b4:	2f62      	cmp	r7, #98	@ 0x62
 80077b6:	d80a      	bhi.n	80077ce <_printf_i+0x32>
 80077b8:	2f00      	cmp	r7, #0
 80077ba:	f000 80d2 	beq.w	8007962 <_printf_i+0x1c6>
 80077be:	2f58      	cmp	r7, #88	@ 0x58
 80077c0:	f000 80b9 	beq.w	8007936 <_printf_i+0x19a>
 80077c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077cc:	e03a      	b.n	8007844 <_printf_i+0xa8>
 80077ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077d2:	2b15      	cmp	r3, #21
 80077d4:	d8f6      	bhi.n	80077c4 <_printf_i+0x28>
 80077d6:	a101      	add	r1, pc, #4	@ (adr r1, 80077dc <_printf_i+0x40>)
 80077d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077dc:	08007835 	.word	0x08007835
 80077e0:	08007849 	.word	0x08007849
 80077e4:	080077c5 	.word	0x080077c5
 80077e8:	080077c5 	.word	0x080077c5
 80077ec:	080077c5 	.word	0x080077c5
 80077f0:	080077c5 	.word	0x080077c5
 80077f4:	08007849 	.word	0x08007849
 80077f8:	080077c5 	.word	0x080077c5
 80077fc:	080077c5 	.word	0x080077c5
 8007800:	080077c5 	.word	0x080077c5
 8007804:	080077c5 	.word	0x080077c5
 8007808:	08007949 	.word	0x08007949
 800780c:	08007873 	.word	0x08007873
 8007810:	08007903 	.word	0x08007903
 8007814:	080077c5 	.word	0x080077c5
 8007818:	080077c5 	.word	0x080077c5
 800781c:	0800796b 	.word	0x0800796b
 8007820:	080077c5 	.word	0x080077c5
 8007824:	08007873 	.word	0x08007873
 8007828:	080077c5 	.word	0x080077c5
 800782c:	080077c5 	.word	0x080077c5
 8007830:	0800790b 	.word	0x0800790b
 8007834:	6833      	ldr	r3, [r6, #0]
 8007836:	1d1a      	adds	r2, r3, #4
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6032      	str	r2, [r6, #0]
 800783c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007844:	2301      	movs	r3, #1
 8007846:	e09d      	b.n	8007984 <_printf_i+0x1e8>
 8007848:	6833      	ldr	r3, [r6, #0]
 800784a:	6820      	ldr	r0, [r4, #0]
 800784c:	1d19      	adds	r1, r3, #4
 800784e:	6031      	str	r1, [r6, #0]
 8007850:	0606      	lsls	r6, r0, #24
 8007852:	d501      	bpl.n	8007858 <_printf_i+0xbc>
 8007854:	681d      	ldr	r5, [r3, #0]
 8007856:	e003      	b.n	8007860 <_printf_i+0xc4>
 8007858:	0645      	lsls	r5, r0, #25
 800785a:	d5fb      	bpl.n	8007854 <_printf_i+0xb8>
 800785c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007860:	2d00      	cmp	r5, #0
 8007862:	da03      	bge.n	800786c <_printf_i+0xd0>
 8007864:	232d      	movs	r3, #45	@ 0x2d
 8007866:	426d      	negs	r5, r5
 8007868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800786c:	4859      	ldr	r0, [pc, #356]	@ (80079d4 <_printf_i+0x238>)
 800786e:	230a      	movs	r3, #10
 8007870:	e011      	b.n	8007896 <_printf_i+0xfa>
 8007872:	6821      	ldr	r1, [r4, #0]
 8007874:	6833      	ldr	r3, [r6, #0]
 8007876:	0608      	lsls	r0, r1, #24
 8007878:	f853 5b04 	ldr.w	r5, [r3], #4
 800787c:	d402      	bmi.n	8007884 <_printf_i+0xe8>
 800787e:	0649      	lsls	r1, r1, #25
 8007880:	bf48      	it	mi
 8007882:	b2ad      	uxthmi	r5, r5
 8007884:	2f6f      	cmp	r7, #111	@ 0x6f
 8007886:	4853      	ldr	r0, [pc, #332]	@ (80079d4 <_printf_i+0x238>)
 8007888:	6033      	str	r3, [r6, #0]
 800788a:	bf14      	ite	ne
 800788c:	230a      	movne	r3, #10
 800788e:	2308      	moveq	r3, #8
 8007890:	2100      	movs	r1, #0
 8007892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007896:	6866      	ldr	r6, [r4, #4]
 8007898:	60a6      	str	r6, [r4, #8]
 800789a:	2e00      	cmp	r6, #0
 800789c:	bfa2      	ittt	ge
 800789e:	6821      	ldrge	r1, [r4, #0]
 80078a0:	f021 0104 	bicge.w	r1, r1, #4
 80078a4:	6021      	strge	r1, [r4, #0]
 80078a6:	b90d      	cbnz	r5, 80078ac <_printf_i+0x110>
 80078a8:	2e00      	cmp	r6, #0
 80078aa:	d04b      	beq.n	8007944 <_printf_i+0x1a8>
 80078ac:	4616      	mov	r6, r2
 80078ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80078b2:	fb03 5711 	mls	r7, r3, r1, r5
 80078b6:	5dc7      	ldrb	r7, [r0, r7]
 80078b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078bc:	462f      	mov	r7, r5
 80078be:	42bb      	cmp	r3, r7
 80078c0:	460d      	mov	r5, r1
 80078c2:	d9f4      	bls.n	80078ae <_printf_i+0x112>
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d10b      	bne.n	80078e0 <_printf_i+0x144>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	07df      	lsls	r7, r3, #31
 80078cc:	d508      	bpl.n	80078e0 <_printf_i+0x144>
 80078ce:	6923      	ldr	r3, [r4, #16]
 80078d0:	6861      	ldr	r1, [r4, #4]
 80078d2:	4299      	cmp	r1, r3
 80078d4:	bfde      	ittt	le
 80078d6:	2330      	movle	r3, #48	@ 0x30
 80078d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078e0:	1b92      	subs	r2, r2, r6
 80078e2:	6122      	str	r2, [r4, #16]
 80078e4:	f8cd a000 	str.w	sl, [sp]
 80078e8:	464b      	mov	r3, r9
 80078ea:	aa03      	add	r2, sp, #12
 80078ec:	4621      	mov	r1, r4
 80078ee:	4640      	mov	r0, r8
 80078f0:	f7ff fee6 	bl	80076c0 <_printf_common>
 80078f4:	3001      	adds	r0, #1
 80078f6:	d14a      	bne.n	800798e <_printf_i+0x1f2>
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	b004      	add	sp, #16
 80078fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	f043 0320 	orr.w	r3, r3, #32
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	4833      	ldr	r0, [pc, #204]	@ (80079d8 <_printf_i+0x23c>)
 800790c:	2778      	movs	r7, #120	@ 0x78
 800790e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	6831      	ldr	r1, [r6, #0]
 8007916:	061f      	lsls	r7, r3, #24
 8007918:	f851 5b04 	ldr.w	r5, [r1], #4
 800791c:	d402      	bmi.n	8007924 <_printf_i+0x188>
 800791e:	065f      	lsls	r7, r3, #25
 8007920:	bf48      	it	mi
 8007922:	b2ad      	uxthmi	r5, r5
 8007924:	6031      	str	r1, [r6, #0]
 8007926:	07d9      	lsls	r1, r3, #31
 8007928:	bf44      	itt	mi
 800792a:	f043 0320 	orrmi.w	r3, r3, #32
 800792e:	6023      	strmi	r3, [r4, #0]
 8007930:	b11d      	cbz	r5, 800793a <_printf_i+0x19e>
 8007932:	2310      	movs	r3, #16
 8007934:	e7ac      	b.n	8007890 <_printf_i+0xf4>
 8007936:	4827      	ldr	r0, [pc, #156]	@ (80079d4 <_printf_i+0x238>)
 8007938:	e7e9      	b.n	800790e <_printf_i+0x172>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	f023 0320 	bic.w	r3, r3, #32
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	e7f6      	b.n	8007932 <_printf_i+0x196>
 8007944:	4616      	mov	r6, r2
 8007946:	e7bd      	b.n	80078c4 <_printf_i+0x128>
 8007948:	6833      	ldr	r3, [r6, #0]
 800794a:	6825      	ldr	r5, [r4, #0]
 800794c:	6961      	ldr	r1, [r4, #20]
 800794e:	1d18      	adds	r0, r3, #4
 8007950:	6030      	str	r0, [r6, #0]
 8007952:	062e      	lsls	r6, r5, #24
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	d501      	bpl.n	800795c <_printf_i+0x1c0>
 8007958:	6019      	str	r1, [r3, #0]
 800795a:	e002      	b.n	8007962 <_printf_i+0x1c6>
 800795c:	0668      	lsls	r0, r5, #25
 800795e:	d5fb      	bpl.n	8007958 <_printf_i+0x1bc>
 8007960:	8019      	strh	r1, [r3, #0]
 8007962:	2300      	movs	r3, #0
 8007964:	6123      	str	r3, [r4, #16]
 8007966:	4616      	mov	r6, r2
 8007968:	e7bc      	b.n	80078e4 <_printf_i+0x148>
 800796a:	6833      	ldr	r3, [r6, #0]
 800796c:	1d1a      	adds	r2, r3, #4
 800796e:	6032      	str	r2, [r6, #0]
 8007970:	681e      	ldr	r6, [r3, #0]
 8007972:	6862      	ldr	r2, [r4, #4]
 8007974:	2100      	movs	r1, #0
 8007976:	4630      	mov	r0, r6
 8007978:	f7f8 fc32 	bl	80001e0 <memchr>
 800797c:	b108      	cbz	r0, 8007982 <_printf_i+0x1e6>
 800797e:	1b80      	subs	r0, r0, r6
 8007980:	6060      	str	r0, [r4, #4]
 8007982:	6863      	ldr	r3, [r4, #4]
 8007984:	6123      	str	r3, [r4, #16]
 8007986:	2300      	movs	r3, #0
 8007988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800798c:	e7aa      	b.n	80078e4 <_printf_i+0x148>
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	4632      	mov	r2, r6
 8007992:	4649      	mov	r1, r9
 8007994:	4640      	mov	r0, r8
 8007996:	47d0      	blx	sl
 8007998:	3001      	adds	r0, #1
 800799a:	d0ad      	beq.n	80078f8 <_printf_i+0x15c>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	079b      	lsls	r3, r3, #30
 80079a0:	d413      	bmi.n	80079ca <_printf_i+0x22e>
 80079a2:	68e0      	ldr	r0, [r4, #12]
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	4298      	cmp	r0, r3
 80079a8:	bfb8      	it	lt
 80079aa:	4618      	movlt	r0, r3
 80079ac:	e7a6      	b.n	80078fc <_printf_i+0x160>
 80079ae:	2301      	movs	r3, #1
 80079b0:	4632      	mov	r2, r6
 80079b2:	4649      	mov	r1, r9
 80079b4:	4640      	mov	r0, r8
 80079b6:	47d0      	blx	sl
 80079b8:	3001      	adds	r0, #1
 80079ba:	d09d      	beq.n	80078f8 <_printf_i+0x15c>
 80079bc:	3501      	adds	r5, #1
 80079be:	68e3      	ldr	r3, [r4, #12]
 80079c0:	9903      	ldr	r1, [sp, #12]
 80079c2:	1a5b      	subs	r3, r3, r1
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	dcf2      	bgt.n	80079ae <_printf_i+0x212>
 80079c8:	e7eb      	b.n	80079a2 <_printf_i+0x206>
 80079ca:	2500      	movs	r5, #0
 80079cc:	f104 0619 	add.w	r6, r4, #25
 80079d0:	e7f5      	b.n	80079be <_printf_i+0x222>
 80079d2:	bf00      	nop
 80079d4:	08007e79 	.word	0x08007e79
 80079d8:	08007e8a 	.word	0x08007e8a

080079dc <__sflush_r>:
 80079dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e4:	0716      	lsls	r6, r2, #28
 80079e6:	4605      	mov	r5, r0
 80079e8:	460c      	mov	r4, r1
 80079ea:	d454      	bmi.n	8007a96 <__sflush_r+0xba>
 80079ec:	684b      	ldr	r3, [r1, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dc02      	bgt.n	80079f8 <__sflush_r+0x1c>
 80079f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dd48      	ble.n	8007a8a <__sflush_r+0xae>
 80079f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	d045      	beq.n	8007a8a <__sflush_r+0xae>
 80079fe:	2300      	movs	r3, #0
 8007a00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a04:	682f      	ldr	r7, [r5, #0]
 8007a06:	6a21      	ldr	r1, [r4, #32]
 8007a08:	602b      	str	r3, [r5, #0]
 8007a0a:	d030      	beq.n	8007a6e <__sflush_r+0x92>
 8007a0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a0e:	89a3      	ldrh	r3, [r4, #12]
 8007a10:	0759      	lsls	r1, r3, #29
 8007a12:	d505      	bpl.n	8007a20 <__sflush_r+0x44>
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	1ad2      	subs	r2, r2, r3
 8007a18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a1a:	b10b      	cbz	r3, 8007a20 <__sflush_r+0x44>
 8007a1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a1e:	1ad2      	subs	r2, r2, r3
 8007a20:	2300      	movs	r3, #0
 8007a22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a24:	6a21      	ldr	r1, [r4, #32]
 8007a26:	4628      	mov	r0, r5
 8007a28:	47b0      	blx	r6
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	d106      	bne.n	8007a3e <__sflush_r+0x62>
 8007a30:	6829      	ldr	r1, [r5, #0]
 8007a32:	291d      	cmp	r1, #29
 8007a34:	d82b      	bhi.n	8007a8e <__sflush_r+0xb2>
 8007a36:	4a2a      	ldr	r2, [pc, #168]	@ (8007ae0 <__sflush_r+0x104>)
 8007a38:	410a      	asrs	r2, r1
 8007a3a:	07d6      	lsls	r6, r2, #31
 8007a3c:	d427      	bmi.n	8007a8e <__sflush_r+0xb2>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	6062      	str	r2, [r4, #4]
 8007a42:	04d9      	lsls	r1, r3, #19
 8007a44:	6922      	ldr	r2, [r4, #16]
 8007a46:	6022      	str	r2, [r4, #0]
 8007a48:	d504      	bpl.n	8007a54 <__sflush_r+0x78>
 8007a4a:	1c42      	adds	r2, r0, #1
 8007a4c:	d101      	bne.n	8007a52 <__sflush_r+0x76>
 8007a4e:	682b      	ldr	r3, [r5, #0]
 8007a50:	b903      	cbnz	r3, 8007a54 <__sflush_r+0x78>
 8007a52:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a56:	602f      	str	r7, [r5, #0]
 8007a58:	b1b9      	cbz	r1, 8007a8a <__sflush_r+0xae>
 8007a5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a5e:	4299      	cmp	r1, r3
 8007a60:	d002      	beq.n	8007a68 <__sflush_r+0x8c>
 8007a62:	4628      	mov	r0, r5
 8007a64:	f7ff fbf2 	bl	800724c <_free_r>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a6c:	e00d      	b.n	8007a8a <__sflush_r+0xae>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b0      	blx	r6
 8007a74:	4602      	mov	r2, r0
 8007a76:	1c50      	adds	r0, r2, #1
 8007a78:	d1c9      	bne.n	8007a0e <__sflush_r+0x32>
 8007a7a:	682b      	ldr	r3, [r5, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0c6      	beq.n	8007a0e <__sflush_r+0x32>
 8007a80:	2b1d      	cmp	r3, #29
 8007a82:	d001      	beq.n	8007a88 <__sflush_r+0xac>
 8007a84:	2b16      	cmp	r3, #22
 8007a86:	d11e      	bne.n	8007ac6 <__sflush_r+0xea>
 8007a88:	602f      	str	r7, [r5, #0]
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	e022      	b.n	8007ad4 <__sflush_r+0xf8>
 8007a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a92:	b21b      	sxth	r3, r3
 8007a94:	e01b      	b.n	8007ace <__sflush_r+0xf2>
 8007a96:	690f      	ldr	r7, [r1, #16]
 8007a98:	2f00      	cmp	r7, #0
 8007a9a:	d0f6      	beq.n	8007a8a <__sflush_r+0xae>
 8007a9c:	0793      	lsls	r3, r2, #30
 8007a9e:	680e      	ldr	r6, [r1, #0]
 8007aa0:	bf08      	it	eq
 8007aa2:	694b      	ldreq	r3, [r1, #20]
 8007aa4:	600f      	str	r7, [r1, #0]
 8007aa6:	bf18      	it	ne
 8007aa8:	2300      	movne	r3, #0
 8007aaa:	eba6 0807 	sub.w	r8, r6, r7
 8007aae:	608b      	str	r3, [r1, #8]
 8007ab0:	f1b8 0f00 	cmp.w	r8, #0
 8007ab4:	dde9      	ble.n	8007a8a <__sflush_r+0xae>
 8007ab6:	6a21      	ldr	r1, [r4, #32]
 8007ab8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007aba:	4643      	mov	r3, r8
 8007abc:	463a      	mov	r2, r7
 8007abe:	4628      	mov	r0, r5
 8007ac0:	47b0      	blx	r6
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	dc08      	bgt.n	8007ad8 <__sflush_r+0xfc>
 8007ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad8:	4407      	add	r7, r0
 8007ada:	eba8 0800 	sub.w	r8, r8, r0
 8007ade:	e7e7      	b.n	8007ab0 <__sflush_r+0xd4>
 8007ae0:	dfbffffe 	.word	0xdfbffffe

08007ae4 <_fflush_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	690b      	ldr	r3, [r1, #16]
 8007ae8:	4605      	mov	r5, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	b913      	cbnz	r3, 8007af4 <_fflush_r+0x10>
 8007aee:	2500      	movs	r5, #0
 8007af0:	4628      	mov	r0, r5
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	b118      	cbz	r0, 8007afe <_fflush_r+0x1a>
 8007af6:	6a03      	ldr	r3, [r0, #32]
 8007af8:	b90b      	cbnz	r3, 8007afe <_fflush_r+0x1a>
 8007afa:	f7ff f9ad 	bl	8006e58 <__sinit>
 8007afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0f3      	beq.n	8007aee <_fflush_r+0xa>
 8007b06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b08:	07d0      	lsls	r0, r2, #31
 8007b0a:	d404      	bmi.n	8007b16 <_fflush_r+0x32>
 8007b0c:	0599      	lsls	r1, r3, #22
 8007b0e:	d402      	bmi.n	8007b16 <_fflush_r+0x32>
 8007b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b12:	f7ff fb98 	bl	8007246 <__retarget_lock_acquire_recursive>
 8007b16:	4628      	mov	r0, r5
 8007b18:	4621      	mov	r1, r4
 8007b1a:	f7ff ff5f 	bl	80079dc <__sflush_r>
 8007b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b20:	07da      	lsls	r2, r3, #31
 8007b22:	4605      	mov	r5, r0
 8007b24:	d4e4      	bmi.n	8007af0 <_fflush_r+0xc>
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	059b      	lsls	r3, r3, #22
 8007b2a:	d4e1      	bmi.n	8007af0 <_fflush_r+0xc>
 8007b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b2e:	f7ff fb8b 	bl	8007248 <__retarget_lock_release_recursive>
 8007b32:	e7dd      	b.n	8007af0 <_fflush_r+0xc>

08007b34 <__swhatbuf_r>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	460c      	mov	r4, r1
 8007b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	b096      	sub	sp, #88	@ 0x58
 8007b40:	4615      	mov	r5, r2
 8007b42:	461e      	mov	r6, r3
 8007b44:	da0d      	bge.n	8007b62 <__swhatbuf_r+0x2e>
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b4c:	f04f 0100 	mov.w	r1, #0
 8007b50:	bf14      	ite	ne
 8007b52:	2340      	movne	r3, #64	@ 0x40
 8007b54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b58:	2000      	movs	r0, #0
 8007b5a:	6031      	str	r1, [r6, #0]
 8007b5c:	602b      	str	r3, [r5, #0]
 8007b5e:	b016      	add	sp, #88	@ 0x58
 8007b60:	bd70      	pop	{r4, r5, r6, pc}
 8007b62:	466a      	mov	r2, sp
 8007b64:	f000 f848 	bl	8007bf8 <_fstat_r>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	dbec      	blt.n	8007b46 <__swhatbuf_r+0x12>
 8007b6c:	9901      	ldr	r1, [sp, #4]
 8007b6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b76:	4259      	negs	r1, r3
 8007b78:	4159      	adcs	r1, r3
 8007b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b7e:	e7eb      	b.n	8007b58 <__swhatbuf_r+0x24>

08007b80 <__smakebuf_r>:
 8007b80:	898b      	ldrh	r3, [r1, #12]
 8007b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b84:	079d      	lsls	r5, r3, #30
 8007b86:	4606      	mov	r6, r0
 8007b88:	460c      	mov	r4, r1
 8007b8a:	d507      	bpl.n	8007b9c <__smakebuf_r+0x1c>
 8007b8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	6123      	str	r3, [r4, #16]
 8007b94:	2301      	movs	r3, #1
 8007b96:	6163      	str	r3, [r4, #20]
 8007b98:	b003      	add	sp, #12
 8007b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b9c:	ab01      	add	r3, sp, #4
 8007b9e:	466a      	mov	r2, sp
 8007ba0:	f7ff ffc8 	bl	8007b34 <__swhatbuf_r>
 8007ba4:	9f00      	ldr	r7, [sp, #0]
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	4639      	mov	r1, r7
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7ff fbba 	bl	8007324 <_malloc_r>
 8007bb0:	b948      	cbnz	r0, 8007bc6 <__smakebuf_r+0x46>
 8007bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bb6:	059a      	lsls	r2, r3, #22
 8007bb8:	d4ee      	bmi.n	8007b98 <__smakebuf_r+0x18>
 8007bba:	f023 0303 	bic.w	r3, r3, #3
 8007bbe:	f043 0302 	orr.w	r3, r3, #2
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	e7e2      	b.n	8007b8c <__smakebuf_r+0xc>
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	6020      	str	r0, [r4, #0]
 8007bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bce:	81a3      	strh	r3, [r4, #12]
 8007bd0:	9b01      	ldr	r3, [sp, #4]
 8007bd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007bd6:	b15b      	cbz	r3, 8007bf0 <__smakebuf_r+0x70>
 8007bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f000 f81d 	bl	8007c1c <_isatty_r>
 8007be2:	b128      	cbz	r0, 8007bf0 <__smakebuf_r+0x70>
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	f043 0301 	orr.w	r3, r3, #1
 8007bee:	81a3      	strh	r3, [r4, #12]
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	431d      	orrs	r5, r3
 8007bf4:	81a5      	strh	r5, [r4, #12]
 8007bf6:	e7cf      	b.n	8007b98 <__smakebuf_r+0x18>

08007bf8 <_fstat_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d07      	ldr	r5, [pc, #28]	@ (8007c18 <_fstat_r+0x20>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	4611      	mov	r1, r2
 8007c04:	602b      	str	r3, [r5, #0]
 8007c06:	f7fb fa7d 	bl	8003104 <_fstat>
 8007c0a:	1c43      	adds	r3, r0, #1
 8007c0c:	d102      	bne.n	8007c14 <_fstat_r+0x1c>
 8007c0e:	682b      	ldr	r3, [r5, #0]
 8007c10:	b103      	cbz	r3, 8007c14 <_fstat_r+0x1c>
 8007c12:	6023      	str	r3, [r4, #0]
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	bf00      	nop
 8007c18:	200004f8 	.word	0x200004f8

08007c1c <_isatty_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4d06      	ldr	r5, [pc, #24]	@ (8007c38 <_isatty_r+0x1c>)
 8007c20:	2300      	movs	r3, #0
 8007c22:	4604      	mov	r4, r0
 8007c24:	4608      	mov	r0, r1
 8007c26:	602b      	str	r3, [r5, #0]
 8007c28:	f7fb fa7c 	bl	8003124 <_isatty>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_isatty_r+0x1a>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_isatty_r+0x1a>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	200004f8 	.word	0x200004f8

08007c3c <_sbrk_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d06      	ldr	r5, [pc, #24]	@ (8007c58 <_sbrk_r+0x1c>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7fb fa84 	bl	8003154 <_sbrk>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_sbrk_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_sbrk_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	200004f8 	.word	0x200004f8

08007c5c <_init>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	bf00      	nop
 8007c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c62:	bc08      	pop	{r3}
 8007c64:	469e      	mov	lr, r3
 8007c66:	4770      	bx	lr

08007c68 <_fini>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	bf00      	nop
 8007c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6e:	bc08      	pop	{r3}
 8007c70:	469e      	mov	lr, r3
 8007c72:	4770      	bx	lr

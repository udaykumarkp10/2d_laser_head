
test-0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c44  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007de4  08007de4  00008de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800800c  0800800c  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  0800800c  0800800c  0000900c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008014  08008014  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008014  08008014  00009014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008018  08008018  00009018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800801c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000068  08008084  0000a068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08008084  0000a510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001224c  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab1  00000000  00000000  0001c2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0001ed98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2e  00000000  00000000  0001ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b19  00000000  00000000  00020e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016319  00000000  00000000  0003a927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096695  00000000  00000000  00050c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e72d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005660  00000000  00000000  000e735c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ec9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007dcc 	.word	0x08007dcc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007dcc 	.word	0x08007dcc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <adxl_write>:
#define CS_SET() 	HAL_GPIO_WritePin(ADXL345_CS_GPIO_Port, ADXL345_CS_Pin, GPIO_PIN_SET)
#define CS_RESET() 	HAL_GPIO_WritePin(ADXL345_CS_GPIO_Port, ADXL345_CS_Pin, GPIO_PIN_RESET)


void adxl_write (uint8_t address, uint8_t value)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	460a      	mov	r2, r1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = address | ADXL_SPI_MULTI_BYTE;  // multibyte write enabled
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	737b      	strb	r3, [r7, #13]
	CS_RESET();     // pull the cs pin low to enable the slave
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc0:	4809      	ldr	r0, [pc, #36]	@ (8000de8 <adxl_write+0x4c>)
 8000dc2:	f003 f801 	bl	8003dc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ADXL345_PORT, data, 2, 100);  // transmit the address and data
 8000dc6:	f107 010c 	add.w	r1, r7, #12
 8000dca:	2364      	movs	r3, #100	@ 0x64
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4807      	ldr	r0, [pc, #28]	@ (8000dec <adxl_write+0x50>)
 8000dd0:	f004 fff5 	bl	8005dbe <HAL_SPI_Transmit>
	CS_SET(); // pull the cs pin high to disable the slave
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dda:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <adxl_write+0x4c>)
 8000ddc:	f002 fff4 	bl	8003dc8 <HAL_GPIO_WritePin>
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40020000 	.word	0x40020000
 8000dec:	200001c4 	.word	0x200001c4

08000df0 <adxl_read>:


void adxl_read(uint8_t address, uint8_t* data_rec) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
    address |= ADXL_SPI_READ;  // read operation
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	71fb      	strb	r3, [r7, #7]
    address |= ADXL_SPI_MULTI_BYTE;  // multibyte read
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	71fb      	strb	r3, [r7, #7]
    CS_RESET();  // pull the cs pin low to enable the slave
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e16:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <adxl_read+0x58>)
 8000e18:	f002 ffd6 	bl	8003dc8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ADXL345_PORT, &address, 1, 100);  // send the address from where you want to read data
 8000e1c:	1df9      	adds	r1, r7, #7
 8000e1e:	2364      	movs	r3, #100	@ 0x64
 8000e20:	2201      	movs	r2, #1
 8000e22:	480a      	ldr	r0, [pc, #40]	@ (8000e4c <adxl_read+0x5c>)
 8000e24:	f004 ffcb 	bl	8005dbe <HAL_SPI_Transmit>
    HAL_SPI_Receive(&ADXL345_PORT, data_rec, 6, 100);  // read 6 bytes of data
 8000e28:	2364      	movs	r3, #100	@ 0x64
 8000e2a:	2206      	movs	r2, #6
 8000e2c:	6839      	ldr	r1, [r7, #0]
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <adxl_read+0x5c>)
 8000e30:	f005 f908 	bl	8006044 <HAL_SPI_Receive>
    CS_SET();  // pull the cs pin high to disable the slave
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3a:	4803      	ldr	r0, [pc, #12]	@ (8000e48 <adxl_read+0x58>)
 8000e3c:	f002 ffc4 	bl	8003dc8 <HAL_GPIO_WritePin>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	200001c4 	.word	0x200001c4

08000e50 <Adxl345_init>:

bool Adxl345_init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	adxl_write (ADXL_REG_DATA_FORMAT, ADXL_RANGE_4G);  // data_format range= +- 4g
 8000e54:	2101      	movs	r1, #1
 8000e56:	2031      	movs	r0, #49	@ 0x31
 8000e58:	f7ff ffa0 	bl	8000d9c <adxl_write>
	adxl_write (ADXL_REG_POWER_CTL, ADXL_RES_10BIT);  // reset all bits
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	202d      	movs	r0, #45	@ 0x2d
 8000e60:	f7ff ff9c 	bl	8000d9c <adxl_write>
	adxl_write (ADXL_REG_POWER_CTL, ADXL_FULL_RES);  // power_cntl measure and wake up 8hz
 8000e64:	2108      	movs	r1, #8
 8000e66:	202d      	movs	r0, #45	@ 0x2d
 8000e68:	f7ff ff98 	bl	8000d9c <adxl_write>
	return true;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	0000      	movs	r0, r0
 8000e74:	0000      	movs	r0, r0
	...

08000e78 <getAcceleration>:

void getAcceleration(char axis) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
    uint8_t accel_data[6];  // Buffer to store raw acceleration data from the ADXL345
    int16_t raw_accel_x, raw_accel_y, raw_accel_z;  // Raw acceleration values for the X, Y, and Z axes
    int16_t raw_accel;  // Declare raw_accel to store the selected axis value

    // Read acceleration data from ADXL345
    adxl_read(ADXL_REG_DATAX0, accel_data);
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	4619      	mov	r1, r3
 8000e88:	2032      	movs	r0, #50	@ 0x32
 8000e8a:	f7ff ffb1 	bl	8000df0 <adxl_read>

    raw_accel_x = ((accel_data[1] << 8) | accel_data[0]);
 8000e8e:	7a7b      	ldrb	r3, [r7, #9]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	7a3b      	ldrb	r3, [r7, #8]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	82bb      	strh	r3, [r7, #20]
    raw_accel_y = ((accel_data[3] << 8) | accel_data[2]);
 8000e9c:	7afb      	ldrb	r3, [r7, #11]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7abb      	ldrb	r3, [r7, #10]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	827b      	strh	r3, [r7, #18]
    raw_accel_z = ((accel_data[5] << 8) | accel_data[4]);
 8000eaa:	7b7b      	ldrb	r3, [r7, #13]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	7b3b      	ldrb	r3, [r7, #12]
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	823b      	strh	r3, [r7, #16]

    // Select the correct axis based on the input character 'X', 'Y', or 'Z'
    switch (axis) {
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ebc:	d00c      	beq.n	8000ed8 <getAcceleration+0x60>
 8000ebe:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ec0:	dc0d      	bgt.n	8000ede <getAcceleration+0x66>
 8000ec2:	2b58      	cmp	r3, #88	@ 0x58
 8000ec4:	d002      	beq.n	8000ecc <getAcceleration+0x54>
 8000ec6:	2b59      	cmp	r3, #89	@ 0x59
 8000ec8:	d003      	beq.n	8000ed2 <getAcceleration+0x5a>
            break;
        case 'Z':
            raw_accel = raw_accel_z;
            break;
        default:
            break;
 8000eca:	e008      	b.n	8000ede <getAcceleration+0x66>
            raw_accel = raw_accel_x;
 8000ecc:	8abb      	ldrh	r3, [r7, #20]
 8000ece:	82fb      	strh	r3, [r7, #22]
            break;
 8000ed0:	e006      	b.n	8000ee0 <getAcceleration+0x68>
            raw_accel = raw_accel_y;
 8000ed2:	8a7b      	ldrh	r3, [r7, #18]
 8000ed4:	82fb      	strh	r3, [r7, #22]
            break;
 8000ed6:	e003      	b.n	8000ee0 <getAcceleration+0x68>
            raw_accel = raw_accel_z;
 8000ed8:	8a3b      	ldrh	r3, [r7, #16]
 8000eda:	82fb      	strh	r3, [r7, #22]
            break;
 8000edc:	e000      	b.n	8000ee0 <getAcceleration+0x68>
            break;
 8000ede:	bf00      	nop
    }

    // Convert the raw value to g and apply offset encoding to store as uint32_t
    accel_g = ((raw_accel * ADXL345_SCALE_FACTOR_4G) * ACCEL_SCALING_FACTOR);
 8000ee0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb1d 	bl	8000524 <__aeabi_i2d>
 8000eea:	a327      	add	r3, pc, #156	@ (adr r3, 8000f88 <getAcceleration+0x110>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fb82 	bl	80005f8 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	a324      	add	r3, pc, #144	@ (adr r3, 8000f90 <getAcceleration+0x118>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff fb79 	bl	80005f8 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f7ff fd85 	bl	8000a1c <__aeabi_d2iz>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a14      	ldr	r2, [pc, #80]	@ (8000f68 <getAcceleration+0xf0>)
 8000f16:	6013      	str	r3, [r2, #0]

    TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 8000f18:	4914      	ldr	r1, [pc, #80]	@ (8000f6c <getAcceleration+0xf4>)
 8000f1a:	4815      	ldr	r0, [pc, #84]	@ (8000f70 <getAcceleration+0xf8>)
 8000f1c:	f002 f9ac 	bl	8003278 <getEventStatusWord>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <getAcceleration+0xfc>)
 8000f26:	801a      	strh	r2, [r3, #0]
    Etc_Buffer_In.LANLong[0] = ((uint32_t) TxStatus << 16) | (uint32_t) etc_new_command;
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <getAcceleration+0xfc>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <getAcceleration+0x100>)
 8000f30:	8812      	ldrh	r2, [r2, #0]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	4a11      	ldr	r2, [pc, #68]	@ (8000f7c <getAcceleration+0x104>)
 8000f36:	6013      	str	r3, [r2, #0]
    Etc_Buffer_In.LANFloat[1] = (float)accel_g;
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <getAcceleration+0xf0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <getAcceleration+0x104>)
 8000f46:	edc3 7a01 	vstr	s15, [r3, #4]
    accelerometer_flag = false;
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <getAcceleration+0x108>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
    adxl_sent_count++;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <getAcceleration+0x10c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <getAcceleration+0x10c>)
 8000f5a:	701a      	strb	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	f3af 8000 	nop.w
 8000f68:	20000350 	.word	0x20000350
 8000f6c:	2000034a 	.word	0x2000034a
 8000f70:	200002c0 	.word	0x200002c0
 8000f74:	20000348 	.word	0x20000348
 8000f78:	20000328 	.word	0x20000328
 8000f7c:	200000a4 	.word	0x200000a4
 8000f80:	2000031f 	.word	0x2000031f
 8000f84:	2000034f 	.word	0x2000034f
 8000f88:	8e8a71de 	.word	0x8e8a71de
 8000f8c:	3f7ff2e4 	.word	0x3f7ff2e4
 8000f90:	00000000 	.word	0x00000000
 8000f94:	40c38800 	.word	0x40c38800

08000f98 <EEPROM_Read>:
    HAL_I2C_Mem_Write(&EEPROM_PORT, EEPROM_ADDRESS_WRITE, addr, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
    HAL_Delay(5);
}

// This function helps to read from EEPROM
void EEPROM_Read(uint16_t addr, uint8_t *data, uint16_t size) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af04      	add	r7, sp, #16
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	80fb      	strh	r3, [r7, #6]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&EEPROM_PORT, EEPROM_ADDRESS_READ, addr, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
 8000fa8:	88fa      	ldrh	r2, [r7, #6]
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	88bb      	ldrh	r3, [r7, #4]
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2310      	movs	r3, #16
 8000fba:	21a1      	movs	r1, #161	@ 0xa1
 8000fbc:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <EEPROM_Read+0x38>)
 8000fbe:	f003 fb91 	bl	80046e4 <HAL_I2C_Mem_Read>
    HAL_Delay(5);
 8000fc2:	2005      	movs	r0, #5
 8000fc4:	f002 fc72 	bl	80038ac <HAL_Delay>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000118 	.word	0x20000118

08000fd4 <bytes2uInt>:
    for (uint8_t i = 0; i < 4; i++) {
      bytes_data[i] = DataMem.b_data[i];
    }
}

uint32_t bytes2uInt(uint8_t *bytes_data){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    union {
      uint32_t f_data;
      uint8_t b_data[4];
    }DataMem;

    for (uint8_t i = 0; i < 4; i++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	75fb      	strb	r3, [r7, #23]
 8000fe0:	e00b      	b.n	8000ffa <bytes2uInt+0x26>
    	DataMem.b_data[i] = bytes_data[i];
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	441a      	add	r2, r3
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
 8000fea:	7812      	ldrb	r2, [r2, #0]
 8000fec:	3318      	adds	r3, #24
 8000fee:	443b      	add	r3, r7
 8000ff0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	75fb      	strb	r3, [r7, #23]
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d9f0      	bls.n	8000fe2 <bytes2uInt+0xe>
    }

   uint32_t variable =  DataMem.f_data;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	613b      	str	r3, [r7, #16]
   return variable;
 8001004:	693b      	ldr	r3, [r7, #16]
}
 8001006:	4618      	mov	r0, r3
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <Etc_Read_Reg>:
PROCBUFFER Etc_Buffer_Out = {.LANByte = 0};
PROCBUFFER Etc_Buffer_In = {.LANByte = 0};

//reads a directly addressable register
//address = register to read, length = number of bytes to read (1,2,3,4), long is returned but only the requested bytes are meaningful, starting from LsByte
uint32_t Etc_Read_Reg(uint16_t address, uint8_t length){
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af02      	add	r7, sp, #8
 800101a:	4603      	mov	r3, r0
 800101c:	460a      	mov	r2, r1
 800101e:	80fb      	strh	r3, [r7, #6]
 8001020:	4613      	mov	r3, r2
 8001022:	717b      	strb	r3, [r7, #5]
	ULONG Result;
	UWORD Addr;
	uint8_t i;
	uint8_t xfrbuf[7];				//buffer for spi xfr

	Addr.LANWord = address;
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	82bb      	strh	r3, [r7, #20]
	xfrbuf[0] = COMM_SPI_READ;		//SPI read command
 8001028:	2303      	movs	r3, #3
 800102a:	733b      	strb	r3, [r7, #12]
	xfrbuf[1] = Addr.LANByte[1];	//address of the register
 800102c:	7d7b      	ldrb	r3, [r7, #21]
 800102e:	737b      	strb	r3, [r7, #13]
	xfrbuf[2] = Addr.LANByte[0];	//to read MSByte first
 8001030:	7d3b      	ldrb	r3, [r7, #20]
 8001032:	73bb      	strb	r3, [r7, #14]
	for(i=0; i< length; i++){		//fill dummy bytes
 8001034:	2300      	movs	r3, #0
 8001036:	77fb      	strb	r3, [r7, #31]
 8001038:	e009      	b.n	800104e <Etc_Read_Reg+0x3a>
		xfrbuf[i+3] = DUMMY_BYTE;
 800103a:	7ffb      	ldrb	r3, [r7, #31]
 800103c:	3303      	adds	r3, #3
 800103e:	3320      	adds	r3, #32
 8001040:	443b      	add	r3, r7
 8001042:	22ff      	movs	r2, #255	@ 0xff
 8001044:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i=0; i< length; i++){		//fill dummy bytes
 8001048:	7ffb      	ldrb	r3, [r7, #31]
 800104a:	3301      	adds	r3, #1
 800104c:	77fb      	strb	r3, [r7, #31]
 800104e:	7ffa      	ldrb	r2, [r7, #31]
 8001050:	797b      	ldrb	r3, [r7, #5]
 8001052:	429a      	cmp	r2, r3
 8001054:	d3f1      	bcc.n	800103a <Etc_Read_Reg+0x26>
	}

	CS_SET();						//send L+3 bytes and get back into same buffer
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800105c:	4819      	ldr	r0, [pc, #100]	@ (80010c4 <Etc_Read_Reg+0xb0>)
 800105e:	f002 feb3 	bl	8003dc8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&LAN9252_PORT, xfrbuf, xfrbuf, length+3, HAL_MAX_DELAY);
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	b29b      	uxth	r3, r3
 8001066:	3303      	adds	r3, #3
 8001068:	b29b      	uxth	r3, r3
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	f107 010c 	add.w	r1, r7, #12
 8001072:	f04f 30ff 	mov.w	r0, #4294967295
 8001076:	9000      	str	r0, [sp, #0]
 8001078:	4813      	ldr	r0, [pc, #76]	@ (80010c8 <Etc_Read_Reg+0xb4>)
 800107a:	f005 f8fb 	bl	8006274 <HAL_SPI_TransmitReceive>
	CS_RESET();
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001084:	480f      	ldr	r0, [pc, #60]	@ (80010c4 <Etc_Read_Reg+0xb0>)
 8001086:	f002 fe9f 	bl	8003dc8 <HAL_GPIO_WritePin>

	Result.LANLong = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
	for(i=0; i<length; i++){		//read the requested number of bytes LSByte first
 800108e:	2300      	movs	r3, #0
 8001090:	77fb      	strb	r3, [r7, #31]
 8001092:	e00d      	b.n	80010b0 <Etc_Read_Reg+0x9c>
		Result.LANByte[i] = xfrbuf[i+3];
 8001094:	7ffb      	ldrb	r3, [r7, #31]
 8001096:	1cda      	adds	r2, r3, #3
 8001098:	7ffb      	ldrb	r3, [r7, #31]
 800109a:	3220      	adds	r2, #32
 800109c:	443a      	add	r2, r7
 800109e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80010a2:	3320      	adds	r3, #32
 80010a4:	443b      	add	r3, r7
 80010a6:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<length; i++){		//read the requested number of bytes LSByte first
 80010aa:	7ffb      	ldrb	r3, [r7, #31]
 80010ac:	3301      	adds	r3, #1
 80010ae:	77fb      	strb	r3, [r7, #31]
 80010b0:	7ffa      	ldrb	r2, [r7, #31]
 80010b2:	797b      	ldrb	r3, [r7, #5]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3ed      	bcc.n	8001094 <Etc_Read_Reg+0x80>
	}
	return Result.LANLong;
 80010b8:	69bb      	ldr	r3, [r7, #24]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020000 	.word	0x40020000
 80010c8:	2000021c 	.word	0x2000021c

080010cc <Etc_Write_Reg>:

// write a directly addressable register, 4 bytes always
// Address = register to write, DataOut = data to write
void Etc_Write_Reg(uint16_t address, uint32_t DataOut)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	80fb      	strh	r3, [r7, #6]
	ULONG Data;
	UWORD Addr;
	uint8_t i;
	uint8_t xfrbuf[7]; 				// buffer for spi xfr

	Addr.LANWord = address;
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	82bb      	strh	r3, [r7, #20]
	Data.LANLong = DataOut;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	61bb      	str	r3, [r7, #24]
	xfrbuf[0] = COMM_SPI_WRITE;     // SPI write command
 80010e0:	2302      	movs	r3, #2
 80010e2:	733b      	strb	r3, [r7, #12]
	xfrbuf[1] = Addr.LANByte[1];    // address of the register
 80010e4:	7d7b      	ldrb	r3, [r7, #21]
 80010e6:	737b      	strb	r3, [r7, #13]
	xfrbuf[2] = Addr.LANByte[0];    // to read, MsByte first
 80010e8:	7d3b      	ldrb	r3, [r7, #20]
 80010ea:	73bb      	strb	r3, [r7, #14]
	for (i=0; i<4; i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	77fb      	strb	r3, [r7, #31]
 80010f0:	e00d      	b.n	800110e <Etc_Write_Reg+0x42>
	{
		xfrbuf[i+3] = Data.LANByte[i];	// fill bytes to send, lsb first
 80010f2:	7ffa      	ldrb	r2, [r7, #31]
 80010f4:	7ffb      	ldrb	r3, [r7, #31]
 80010f6:	3303      	adds	r3, #3
 80010f8:	3220      	adds	r2, #32
 80010fa:	443a      	add	r2, r7
 80010fc:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8001100:	3320      	adds	r3, #32
 8001102:	443b      	add	r3, r7
 8001104:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i=0; i<4; i++)
 8001108:	7ffb      	ldrb	r3, [r7, #31]
 800110a:	3301      	adds	r3, #1
 800110c:	77fb      	strb	r3, [r7, #31]
 800110e:	7ffb      	ldrb	r3, [r7, #31]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d9ee      	bls.n	80010f2 <Etc_Write_Reg+0x26>
	}

	CS_SET();						//send 7 bytes and get back into same bfr
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800111a:	480c      	ldr	r0, [pc, #48]	@ (800114c <Etc_Write_Reg+0x80>)
 800111c:	f002 fe54 	bl	8003dc8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&LAN9252_PORT, xfrbuf, xfrbuf, 7, HAL_MAX_DELAY);
 8001120:	f107 020c 	add.w	r2, r7, #12
 8001124:	f107 010c 	add.w	r1, r7, #12
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2307      	movs	r3, #7
 8001130:	4807      	ldr	r0, [pc, #28]	@ (8001150 <Etc_Write_Reg+0x84>)
 8001132:	f005 f89f 	bl	8006274 <HAL_SPI_TransmitReceive>
	CS_RESET();
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800113c:	4803      	ldr	r0, [pc, #12]	@ (800114c <Etc_Write_Reg+0x80>)
 800113e:	f002 fe43 	bl	8003dc8 <HAL_GPIO_WritePin>
}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40020000 	.word	0x40020000
 8001150:	2000021c 	.word	0x2000021c

08001154 <Etc_Read_Reg_Wait>:

// read an indirectly addressable register
uint32_t Etc_Read_Reg_Wait(uint16_t address, uint8_t length)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	80fb      	strh	r3, [r7, #6]
 8001160:	4613      	mov	r3, r2
 8001162:	717b      	strb	r3, [r7, #5]
	ULONG TempLong;
	UWORD Addr;

	Addr.LANWord = address;
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	813b      	strh	r3, [r7, #8]
	TempLong.LANByte[0] = Addr.LANByte[0];    				//address of the register
 8001168:	7a3b      	ldrb	r3, [r7, #8]
 800116a:	733b      	strb	r3, [r7, #12]
	TempLong.LANByte[1] = Addr.LANByte[1];    				//to read, LsByte first
 800116c:	7a7b      	ldrb	r3, [r7, #9]
 800116e:	737b      	strb	r3, [r7, #13]
	TempLong.LANByte[2] = length;                 			//number of bytes to read
 8001170:	797b      	ldrb	r3, [r7, #5]
 8001172:	73bb      	strb	r3, [r7, #14]
	TempLong.LANByte[3] = ESC_READ;               			// ESC read
 8001174:	23c0      	movs	r3, #192	@ 0xc0
 8001176:	73fb      	strb	r3, [r7, #15]

	Etc_Write_Reg(ECAT_CSR_CMD, TempLong.LANLong);			// write the command
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4619      	mov	r1, r3
 800117c:	f44f 7041 	mov.w	r0, #772	@ 0x304
 8001180:	f7ff ffa4 	bl	80010cc <Etc_Write_Reg>
	TempLong.LANByte[3] = ECAT_CSR_BUSY;
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	73fb      	strb	r3, [r7, #15]

	do{														// wait for command execution
		TempLong.LANLong = Etc_Read_Reg(ECAT_CSR_CMD, 4);
 8001188:	2104      	movs	r1, #4
 800118a:	f44f 7041 	mov.w	r0, #772	@ 0x304
 800118e:	f7ff ff41 	bl	8001014 <Etc_Read_Reg>
 8001192:	4603      	mov	r3, r0
 8001194:	60fb      	str	r3, [r7, #12]
	}while(TempLong.LANByte[3] & ECAT_CSR_BUSY);
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	b25b      	sxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	dbf4      	blt.n	8001188 <Etc_Read_Reg_Wait+0x34>

	TempLong.LANLong = Etc_Read_Reg(ECAT_CSR_DATA, length);   // read the requested register
 800119e:	797b      	ldrb	r3, [r7, #5]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80011a6:	f7ff ff35 	bl	8001014 <Etc_Read_Reg>
 80011aa:	4603      	mov	r3, r0
 80011ac:	60fb      	str	r3, [r7, #12]

	return TempLong.LANLong;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <Etc_Read_Fifo>:
	}while(TempLong.LANByte[3] & ECAT_CSR_BUSY);
}

// read from process ram fifo
void Etc_Read_Fifo()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08e      	sub	sp, #56	@ 0x38
 80011bc:	af02      	add	r7, sp, #8
	ULONG TempLong;
	uint8_t xfrbuf[35]; 										// buffer for spi xfr
	uint8_t i;

	Etc_Write_Reg(ECAT_PRAM_RD_ADDR_LEN, 0x00201000);   		// we always read 32 bytes (0x0020), output process ram offset 0x1000
 80011be:	4935      	ldr	r1, [pc, #212]	@ (8001294 <Etc_Read_Fifo+0xdc>)
 80011c0:	f44f 7042 	mov.w	r0, #776	@ 0x308
 80011c4:	f7ff ff82 	bl	80010cc <Etc_Write_Reg>
	Etc_Write_Reg(ECAT_PRAM_RD_CMD, 0x80000000);        		// start command
 80011c8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80011cc:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 80011d0:	f7ff ff7c 	bl	80010cc <Etc_Write_Reg>
	TempLong.LANLong = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	do{                                                   		// wait for data to be transferred                                                   // from the output process ram
		TempLong.LANLong = Etc_Read_Reg(ECAT_PRAM_RD_CMD, 4); 	// to the read fifo
 80011d8:	2104      	movs	r1, #4
 80011da:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 80011de:	f7ff ff19 	bl	8001014 <Etc_Read_Reg>
 80011e2:	4603      	mov	r3, r0
 80011e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	}while (!(TempLong.LANByte[0] & PRAM_READ_AVAIL) || (TempLong.LANByte[1] != 8));
 80011e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f2      	beq.n	80011d8 <Etc_Read_Fifo+0x20>
 80011f2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d1ee      	bne.n	80011d8 <Etc_Read_Fifo+0x20>

	xfrbuf[0] = COMM_SPI_READ;                                	// SPI read command
 80011fa:	2303      	movs	r3, #3
 80011fc:	713b      	strb	r3, [r7, #4]
	xfrbuf[1] = 0x00;                                         	// address of the read
 80011fe:	2300      	movs	r3, #0
 8001200:	717b      	strb	r3, [r7, #5]
	xfrbuf[2] = 0x00;                                         	// fifo MsByte first
 8001202:	2300      	movs	r3, #0
 8001204:	71bb      	strb	r3, [r7, #6]
	for (i=0; i<32; i++)                                      	// 32 bytes dummy data
 8001206:	2300      	movs	r3, #0
 8001208:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800120c:	e00c      	b.n	8001228 <Etc_Read_Fifo+0x70>
	{
		xfrbuf[i+3] = DUMMY_BYTE;
 800120e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001212:	3303      	adds	r3, #3
 8001214:	3330      	adds	r3, #48	@ 0x30
 8001216:	443b      	add	r3, r7
 8001218:	22ff      	movs	r2, #255	@ 0xff
 800121a:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i=0; i<32; i++)                                      	// 32 bytes dummy data
 800121e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001222:	3301      	adds	r3, #1
 8001224:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001228:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800122c:	2b1f      	cmp	r3, #31
 800122e:	d9ee      	bls.n	800120e <Etc_Read_Fifo+0x56>
	}

	CS_SET();													//send 35 bytes and get back into same buffer
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001236:	4818      	ldr	r0, [pc, #96]	@ (8001298 <Etc_Read_Fifo+0xe0>)
 8001238:	f002 fdc6 	bl	8003dc8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&LAN9252_PORT, xfrbuf, xfrbuf, 35, HAL_MAX_DELAY);
 800123c:	1d3a      	adds	r2, r7, #4
 800123e:	1d39      	adds	r1, r7, #4
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2323      	movs	r3, #35	@ 0x23
 8001248:	4814      	ldr	r0, [pc, #80]	@ (800129c <Etc_Read_Fifo+0xe4>)
 800124a:	f005 f813 	bl	8006274 <HAL_SPI_TransmitReceive>
	CS_RESET();
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001254:	4810      	ldr	r0, [pc, #64]	@ (8001298 <Etc_Read_Fifo+0xe0>)
 8001256:	f002 fdb7 	bl	8003dc8 <HAL_GPIO_WritePin>

	for (i=0; i<32; i++)                                   		// 32 bytes read data to usable buffer
 800125a:	2300      	movs	r3, #0
 800125c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001260:	e00f      	b.n	8001282 <Etc_Read_Fifo+0xca>
	{
		Etc_Buffer_Out.LANByte[i] = xfrbuf[i+3];
 8001262:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001266:	1cda      	adds	r2, r3, #3
 8001268:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800126c:	3230      	adds	r2, #48	@ 0x30
 800126e:	443a      	add	r2, r7
 8001270:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 8001274:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <Etc_Read_Fifo+0xe8>)
 8001276:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<32; i++)                                   		// 32 bytes read data to usable buffer
 8001278:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800127c:	3301      	adds	r3, #1
 800127e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001282:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001286:	2b1f      	cmp	r3, #31
 8001288:	d9eb      	bls.n	8001262 <Etc_Read_Fifo+0xaa>
	}
}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	3730      	adds	r7, #48	@ 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	00201000 	.word	0x00201000
 8001298:	40020000 	.word	0x40020000
 800129c:	2000021c 	.word	0x2000021c
 80012a0:	20000084 	.word	0x20000084

080012a4 <Etc_Write_Fifo>:

// write to the process ram fifo
void Etc_Write_Fifo()    										// write 32 bytes to the input process ram, through the fifo
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	@ 0x38
 80012a8:	af02      	add	r7, sp, #8
	ULONG TempLong;
	uint8_t xfrbuf[35]; // buffer for spi xfr
	uint8_t i;

	Etc_Write_Reg(ECAT_PRAM_WR_ADDR_LEN, 0x00201200);   		// we always write 32 bytes (0x0020), input process ram offset 0x1200
 80012aa:	492a      	ldr	r1, [pc, #168]	@ (8001354 <Etc_Write_Fifo+0xb0>)
 80012ac:	f44f 7044 	mov.w	r0, #784	@ 0x310
 80012b0:	f7ff ff0c 	bl	80010cc <Etc_Write_Reg>
	Etc_Write_Reg(ECAT_PRAM_WR_CMD, 0x80000000);        		// start command
 80012b4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80012b8:	f44f 7045 	mov.w	r0, #788	@ 0x314
 80012bc:	f7ff ff06 	bl	80010cc <Etc_Write_Reg>
	TempLong.LANLong = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	do{                                                   		// check fifo has available space
		TempLong.LANLong = Etc_Read_Reg(ECAT_PRAM_WR_CMD, 4);	// for data to be written
 80012c4:	2104      	movs	r1, #4
 80012c6:	f44f 7045 	mov.w	r0, #788	@ 0x314
 80012ca:	f7ff fea3 	bl	8001014 <Etc_Read_Reg>
 80012ce:	4603      	mov	r3, r0
 80012d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	while(!(TempLong.LANByte[0] & PRAM_WRITE_AVAIL) || (TempLong.LANByte[1] < 8));
 80012d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f2      	beq.n	80012c4 <Etc_Write_Fifo+0x20>
 80012de:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80012e2:	2b07      	cmp	r3, #7
 80012e4:	d9ee      	bls.n	80012c4 <Etc_Write_Fifo+0x20>

	xfrbuf[0] = COMM_SPI_WRITE;                               	// SPI write command
 80012e6:	2302      	movs	r3, #2
 80012e8:	713b      	strb	r3, [r7, #4]
	xfrbuf[1] = 0x00;                                         	// address of the write fifo
 80012ea:	2300      	movs	r3, #0
 80012ec:	717b      	strb	r3, [r7, #5]
	xfrbuf[2] = 0x20;                                         	// MsByte first
 80012ee:	2320      	movs	r3, #32
 80012f0:	71bb      	strb	r3, [r7, #6]
	for (i=0; i<32; i++)                                      	// 32 bytes write loop
 80012f2:	2300      	movs	r3, #0
 80012f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012f8:	e00f      	b.n	800131a <Etc_Write_Fifo+0x76>
	{
		xfrbuf[i+3] = Etc_Buffer_In.LANByte[i];
 80012fa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80012fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001302:	3303      	adds	r3, #3
 8001304:	4914      	ldr	r1, [pc, #80]	@ (8001358 <Etc_Write_Fifo+0xb4>)
 8001306:	5c8a      	ldrb	r2, [r1, r2]
 8001308:	3330      	adds	r3, #48	@ 0x30
 800130a:	443b      	add	r3, r7
 800130c:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i=0; i<32; i++)                                      	// 32 bytes write loop
 8001310:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001314:	3301      	adds	r3, #1
 8001316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800131a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800131e:	2b1f      	cmp	r3, #31
 8001320:	d9eb      	bls.n	80012fa <Etc_Write_Fifo+0x56>
	}

	CS_SET();													//send 35 bytes and get back into same buffer
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001328:	480c      	ldr	r0, [pc, #48]	@ (800135c <Etc_Write_Fifo+0xb8>)
 800132a:	f002 fd4d 	bl	8003dc8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&LAN9252_PORT, xfrbuf, xfrbuf, 35, HAL_MAX_DELAY);
 800132e:	1d3a      	adds	r2, r7, #4
 8001330:	1d39      	adds	r1, r7, #4
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2323      	movs	r3, #35	@ 0x23
 800133a:	4809      	ldr	r0, [pc, #36]	@ (8001360 <Etc_Write_Fifo+0xbc>)
 800133c:	f004 ff9a 	bl	8006274 <HAL_SPI_TransmitReceive>
	CS_RESET();
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <Etc_Write_Fifo+0xb8>)
 8001348:	f002 fd3e 	bl	8003dc8 <HAL_GPIO_WritePin>
}
 800134c:	bf00      	nop
 800134e:	3730      	adds	r7, #48	@ 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	00201200 	.word	0x00201200
 8001358:	200000a4 	.word	0x200000a4
 800135c:	40020000 	.word	0x40020000
 8001360:	2000021c 	.word	0x2000021c

08001364 <etc_init>:

// initialize / check the etc interface on SPI, return true if initialization is ok
bool etc_init()
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	ULONG TempLong;

	Etc_Write_Reg(RESET_CTL, (DIGITAL_RST & ETHERCAT_RST)); 	// LAN9252 reset
 800136a:	2100      	movs	r1, #0
 800136c:	f44f 70fc 	mov.w	r0, #504	@ 0x1f8
 8001370:	f7ff feac 	bl	80010cc <Etc_Write_Reg>
	HAL_Delay(100);
 8001374:	2064      	movs	r0, #100	@ 0x64
 8001376:	f002 fa99 	bl	80038ac <HAL_Delay>
	TempLong.LANLong = Etc_Read_Reg(BYTE_TEST, 4);             	// read test register
 800137a:	2104      	movs	r1, #4
 800137c:	2064      	movs	r0, #100	@ 0x64
 800137e:	f7ff fe49 	bl	8001014 <Etc_Read_Reg>
 8001382:	4603      	mov	r3, r0
 8001384:	607b      	str	r3, [r7, #4]

	if(TempLong.LANLong != 0x87654321)                     		// if the test register is not ok
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a0b      	ldr	r2, [pc, #44]	@ (80013b8 <etc_init+0x54>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d001      	beq.n	8001392 <etc_init+0x2e>
	{
		/*printf("Bad response received from Etc Test command, data received = ");
		printf("%ld\n", TempLong.LANLong);*/
		return false;
 800138e:	2300      	movs	r3, #0
 8001390:	e00d      	b.n	80013ae <etc_init+0x4a>
	}

	TempLong.LANLong = Etc_Read_Reg(HW_CFG, 4);              	// check also the READY flag
 8001392:	2104      	movs	r1, #4
 8001394:	2074      	movs	r0, #116	@ 0x74
 8001396:	f7ff fe3d 	bl	8001014 <Etc_Read_Reg>
 800139a:	4603      	mov	r3, r0
 800139c:	607b      	str	r3, [r7, #4]
	if((TempLong.LANLong & READY) == 0){
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <etc_init+0x48>
		/*printf("Ready not received from Etc HW Cfg, data received = ");
		printf("%ld\n", TempLong.LANLong);*/
		return false;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e000      	b.n	80013ae <etc_init+0x4a>
	}

	/*printf("Etc Test Command succeeded\n");*/
  	return true;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	87654321 	.word	0x87654321

080013bc <etc_scan>:

// one scan of etc
uint8_t etc_scan()
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
	bool WatchDog = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	71fb      	strb	r3, [r7, #7]
	bool Operational = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	ULONG TempLong;
	uint8_t Status;

	TempLong.LANLong = Etc_Read_Reg_Wait(WDOG_STATUS, 1); 		// read watchdog status
 80013ca:	2101      	movs	r1, #1
 80013cc:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 80013d0:	f7ff fec0 	bl	8001154 <Etc_Read_Reg_Wait>
 80013d4:	4603      	mov	r3, r0
 80013d6:	603b      	str	r3, [r7, #0]
	if ((TempLong.LANByte[0] & 0x01) == 0x01)
 80013d8:	783b      	ldrb	r3, [r7, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <etc_scan+0x2c>
		WatchDog = 0;                                           // set/reset the corresponding flag
 80013e2:	2300      	movs	r3, #0
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	e001      	b.n	80013ec <etc_scan+0x30>
	else
	{
		WatchDog = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	71fb      	strb	r3, [r7, #7]
		/*printf("Etc Watchdog active\n");*/
	}

	TempLong.LANLong = Etc_Read_Reg_Wait(AL_STATUS_REG_0, 1);   // read the EtherCAT State Machine status
 80013ec:	2101      	movs	r1, #1
 80013ee:	f44f 7098 	mov.w	r0, #304	@ 0x130
 80013f2:	f7ff feaf 	bl	8001154 <Etc_Read_Reg_Wait>
 80013f6:	4603      	mov	r3, r0
 80013f8:	603b      	str	r3, [r7, #0]
	Status = TempLong.LANByte[0] & 0x0F;
 80013fa:	783b      	ldrb	r3, [r7, #0]
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	713b      	strb	r3, [r7, #4]
	if (Status == ESM_OP){                                     	// to see if we are in operational state
 8001402:	793b      	ldrb	r3, [r7, #4]
 8001404:	2b08      	cmp	r3, #8
 8001406:	d102      	bne.n	800140e <etc_scan+0x52>
		Operational = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	71bb      	strb	r3, [r7, #6]
 800140c:	e001      	b.n	8001412 <etc_scan+0x56>
	}else{
		Operational = 0;                                        // set/reset the corresponding flag
 800140e:	2300      	movs	r3, #0
 8001410:	71bb      	strb	r3, [r7, #6]
		/*printf("Etc not operational\n");*/
	}

	//--- process data transfers ----------
	if (WatchDog | !Operational)                              	// if watchdog is active or we are
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	f083 0301 	eor.w	r3, r3, #1
 8001418:	b2da      	uxtb	r2, r3
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4313      	orrs	r3, r2
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00e      	beq.n	8001442 <etc_scan+0x86>
	{                                                         	// not in operational state, reset
		for (i=0; i<8; i++){                                    // the output buffer
 8001424:	2300      	movs	r3, #0
 8001426:	717b      	strb	r3, [r7, #5]
 8001428:	e007      	b.n	800143a <etc_scan+0x7e>
			Etc_Buffer_Out.LANLong[i] = 0;                      //
 800142a:	797b      	ldrb	r3, [r7, #5]
 800142c:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <etc_scan+0xa8>)
 800142e:	2100      	movs	r1, #0
 8001430:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i=0; i<8; i++){                                    // the output buffer
 8001434:	797b      	ldrb	r3, [r7, #5]
 8001436:	3301      	adds	r3, #1
 8001438:	717b      	strb	r3, [r7, #5]
 800143a:	797b      	ldrb	r3, [r7, #5]
 800143c:	2b07      	cmp	r3, #7
 800143e:	d9f4      	bls.n	800142a <etc_scan+0x6e>
 8001440:	e001      	b.n	8001446 <etc_scan+0x8a>
		}
	}else{
		/*printf("Read fifo\n");*/
		Etc_Read_Fifo();                                        // otherwise transfer process data from
 8001442:	f7ff feb9 	bl	80011b8 <Etc_Read_Fifo>
	}                                                         	// the EtherCAT core to the output buffer
	/*printf("Write fifo\n");*/
	Etc_Write_Fifo();                                         	// we always transfer process data from
 8001446:	f7ff ff2d 	bl	80012a4 <Etc_Write_Fifo>
                                                            	// the input buffer to the EtherCAT core

	if (WatchDog)                                             	// return the status of the State Machine
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <etc_scan+0x9c>
	{                                                         	// and of the watchdog
		Status |= 0x80;
 8001450:	793b      	ldrb	r3, [r7, #4]
 8001452:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001456:	713b      	strb	r3, [r7, #4]
	}
	return Status;
 8001458:	793b      	ldrb	r3, [r7, #4]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000084 	.word	0x20000084

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f002 f9ac 	bl	80037c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 ff6e 	bl	8002350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f001 f920 	bl	80026b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001478:	f000 ffd2 	bl	8002420 <MX_I2C1_Init>
  MX_SPI5_Init();
 800147c:	f001 f898 	bl	80025b0 <MX_SPI5_Init>
  MX_TIM4_Init();
 8001480:	f001 f8cc 	bl	800261c <MX_TIM4_Init>
  MX_I2C2_Init();
 8001484:	f000 fffa 	bl	800247c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001488:	f001 f85c 	bl	8002544 <MX_SPI2_Init>
  MX_SPI1_Init();
 800148c:	f001 f824 	bl	80024d8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

   etc_init_ok = etc_init();
 8001490:	f7ff ff68 	bl	8001364 <etc_init>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b37      	ldr	r3, [pc, #220]	@ (8001578 <main+0x110>)
 800149a:	701a      	strb	r2, [r3, #0]
   pcap_init_ok = pcap_init();
 800149c:	f001 fa3c 	bl	8002918 <pcap_init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b35      	ldr	r3, [pc, #212]	@ (800157c <main+0x114>)
 80014a6:	701a      	strb	r2, [r3, #0]
   Adxl345_init_ok = Adxl345_init();
 80014a8:	f7ff fcd2 	bl	8000e50 <Adxl345_init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b33      	ldr	r3, [pc, #204]	@ (8001580 <main+0x118>)
 80014b2:	701a      	strb	r2, [r3, #0]
	   no_error_drive = true;
   } else {
	   no_error_drive = false;
   }*/

   HAL_Delay(200);
 80014b4:	20c8      	movs	r0, #200	@ 0xc8
 80014b6:	f002 f9f9 	bl	80038ac <HAL_Delay>

    /* USER CODE BEGIN 3 */

	  /*-------------------------- GET DATA FROM PCAP AND ETHERCAT----------------------------------------*/

	  if (pcap_init_ok) {
 80014ba:	4b30      	ldr	r3, [pc, #192]	@ (800157c <main+0x114>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <main+0x60>
		  pcap_scan();
 80014c2:	f001 fa81 	bl	80029c8 <pcap_scan>
 80014c6:	e005      	b.n	80014d4 <main+0x6c>
	  } else {
		  pcap_init_ok = pcap_init();
 80014c8:	f001 fa26 	bl	8002918 <pcap_init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <main+0x114>)
 80014d2:	701a      	strb	r2, [r3, #0]
	  }

	  if (etc_init_ok) {
 80014d4:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <main+0x110>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <main+0x7a>
		  etc_scan();
 80014dc:	f7ff ff6e 	bl	80013bc <etc_scan>
 80014e0:	e005      	b.n	80014ee <main+0x86>
	  } else {
		  etc_init_ok = etc_init();
 80014e2:	f7ff ff3f 	bl	8001364 <etc_init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <main+0x110>)
 80014ec:	701a      	strb	r2, [r3, #0]
	  }

	  /*-------------------------- RECEIVED DATA FROM ETHERCAT ----------------------------------------*/

	  etc_new_command = (uint16_t)Etc_Buffer_Out.LANLong[0];
 80014ee:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <main+0x11c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <main+0x120>)
 80014f6:	801a      	strh	r2, [r3, #0]
	  etc_new_data = (double) Etc_Buffer_Out.LANFloat[1];
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <main+0x11c>)
 80014fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80014fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001502:	ee17 2a90 	vmov	r2, s15
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <main+0x124>)
 8001508:	601a      	str	r2, [r3, #0]

	  if (((etc_new_command >= 0) && (etc_new_command <= 19)) || ((etc_new_command >= 100) && (etc_new_command <= 105))) {
 800150a:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <main+0x120>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	2b13      	cmp	r3, #19
 8001510:	d907      	bls.n	8001522 <main+0xba>
 8001512:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <main+0x120>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	2b63      	cmp	r3, #99	@ 0x63
 8001518:	d907      	bls.n	800152a <main+0xc2>
 800151a:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <main+0x120>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	2b69      	cmp	r3, #105	@ 0x69
 8001520:	d803      	bhi.n	800152a <main+0xc2>
	      set_command_flag = true;
 8001522:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <main+0x128>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	e002      	b.n	8001530 <main+0xc8>
	  } else {
		  set_command_flag = false;
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <main+0x128>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
	  }

	  if ((etc_new_command >= 50 && etc_new_command <= 70)) {
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <main+0x120>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	2b31      	cmp	r3, #49	@ 0x31
 8001536:	d907      	bls.n	8001548 <main+0xe0>
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <main+0x120>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	2b46      	cmp	r3, #70	@ 0x46
 800153e:	d803      	bhi.n	8001548 <main+0xe0>
		  get_command_flag = true;
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <main+0x12c>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
 8001546:	e002      	b.n	800154e <main+0xe6>
	  } else {
		  get_command_flag = false;
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <main+0x12c>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
	  }

	  if ((etc_new_command == 301 || etc_new_command == 302 || etc_new_command == 303)) {
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <main+0x120>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	f240 122d 	movw	r2, #301	@ 0x12d
 8001556:	4293      	cmp	r3, r2
 8001558:	d00a      	beq.n	8001570 <main+0x108>
 800155a:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <main+0x120>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	f5b3 7f97 	cmp.w	r3, #302	@ 0x12e
 8001562:	d005      	beq.n	8001570 <main+0x108>
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <main+0x120>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	f240 122f 	movw	r2, #303	@ 0x12f
 800156c:	4293      	cmp	r3, r2
 800156e:	d115      	bne.n	800159c <main+0x134>
		  accelerometer_flag = true;
 8001570:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <main+0x130>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	e014      	b.n	80015a2 <main+0x13a>
 8001578:	200002bd 	.word	0x200002bd
 800157c:	200002bc 	.word	0x200002bc
 8001580:	200002be 	.word	0x200002be
 8001584:	20000084 	.word	0x20000084
 8001588:	20000328 	.word	0x20000328
 800158c:	2000032c 	.word	0x2000032c
 8001590:	2000031c 	.word	0x2000031c
 8001594:	2000031d 	.word	0x2000031d
 8001598:	2000031f 	.word	0x2000031f
	  } else {
		  accelerometer_flag = false;
 800159c:	4bbb      	ldr	r3, [pc, #748]	@ (800188c <main+0x424>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
	  }

	  etc_digital_output = Etc_Buffer_Out.LANFloat[5];
 80015a2:	4bbb      	ldr	r3, [pc, #748]	@ (8001890 <main+0x428>)
 80015a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80015a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ac:	ee17 2a90 	vmov	r2, s15
 80015b0:	4bb8      	ldr	r3, [pc, #736]	@ (8001894 <main+0x42c>)
 80015b2:	601a      	str	r2, [r3, #0]
	  etc_analog_output_0_1 = Etc_Buffer_Out.LANFloat[6];
 80015b4:	4bb6      	ldr	r3, [pc, #728]	@ (8001890 <main+0x428>)
 80015b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80015ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015be:	ee17 2a90 	vmov	r2, s15
 80015c2:	4bb5      	ldr	r3, [pc, #724]	@ (8001898 <main+0x430>)
 80015c4:	601a      	str	r2, [r3, #0]
	  etc_analog_output_2_3 = Etc_Buffer_Out.LANFloat[7];
 80015c6:	4bb2      	ldr	r3, [pc, #712]	@ (8001890 <main+0x428>)
 80015c8:	edd3 7a07 	vldr	s15, [r3, #28]
 80015cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d0:	ee17 2a90 	vmov	r2, s15
 80015d4:	4bb1      	ldr	r3, [pc, #708]	@ (800189c <main+0x434>)
 80015d6:	601a      	str	r2, [r3, #0]

	  // Split the 32-bit floats into two 16-bit outputs each
	  etc_analog_output_0 = (uint16_t)(((uint32_t)etc_analog_output_0_1) & 0xFFFF);
 80015d8:	4baf      	ldr	r3, [pc, #700]	@ (8001898 <main+0x430>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4bb0      	ldr	r3, [pc, #704]	@ (80018a0 <main+0x438>)
 80015e0:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_1 = (uint16_t)((((uint32_t)etc_analog_output_0_1) >> 16) & 0xFFFF);
 80015e2:	4bad      	ldr	r3, [pc, #692]	@ (8001898 <main+0x430>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	0c1b      	lsrs	r3, r3, #16
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4bae      	ldr	r3, [pc, #696]	@ (80018a4 <main+0x43c>)
 80015ec:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_2 = (uint16_t)(((uint32_t)etc_analog_output_2_3) & 0xFFFF);
 80015ee:	4bab      	ldr	r3, [pc, #684]	@ (800189c <main+0x434>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4bac      	ldr	r3, [pc, #688]	@ (80018a8 <main+0x440>)
 80015f6:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_3 = (uint16_t)((((uint32_t)etc_analog_output_2_3) >> 16) & 0xFFFF);
 80015f8:	4ba8      	ldr	r3, [pc, #672]	@ (800189c <main+0x434>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0c1b      	lsrs	r3, r3, #16
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4baa      	ldr	r3, [pc, #680]	@ (80018ac <main+0x444>)
 8001602:	801a      	strh	r2, [r3, #0]

	  /*---------------------------PROCESS REECIVED COMMAND AND DATA-----------------------------------------*/

	  if (set_command_flag) {
 8001604:	4baa      	ldr	r3, [pc, #680]	@ (80018b0 <main+0x448>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 833b 	beq.w	8001c84 <main+0x81c>
		  if ((etc_old_command != etc_new_command) || (etc_old_data != etc_new_data)) {
 800160e:	4ba9      	ldr	r3, [pc, #676]	@ (80018b4 <main+0x44c>)
 8001610:	881a      	ldrh	r2, [r3, #0]
 8001612:	4ba9      	ldr	r3, [pc, #676]	@ (80018b8 <main+0x450>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d106      	bne.n	8001628 <main+0x1c0>
 800161a:	4ba8      	ldr	r3, [pc, #672]	@ (80018bc <main+0x454>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4ba8      	ldr	r3, [pc, #672]	@ (80018c0 <main+0x458>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	f000 8627 	beq.w	8002276 <main+0xe0e>
				switch (etc_new_command) {
 8001628:	4ba3      	ldr	r3, [pc, #652]	@ (80018b8 <main+0x450>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	2b69      	cmp	r3, #105	@ 0x69
 800162e:	f200 830e 	bhi.w	8001c4e <main+0x7e6>
 8001632:	a201      	add	r2, pc, #4	@ (adr r2, 8001638 <main+0x1d0>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	080017e1 	.word	0x080017e1
 800163c:	080017f1 	.word	0x080017f1
 8001640:	08001827 	.word	0x08001827
 8001644:	0800185b 	.word	0x0800185b
 8001648:	080018dd 	.word	0x080018dd
 800164c:	0800190b 	.word	0x0800190b
 8001650:	08001937 	.word	0x08001937
 8001654:	08001961 	.word	0x08001961
 8001658:	0800198d 	.word	0x0800198d
 800165c:	080019b9 	.word	0x080019b9
 8001660:	080019e3 	.word	0x080019e3
 8001664:	08001a0d 	.word	0x08001a0d
 8001668:	08001a39 	.word	0x08001a39
 800166c:	08001a65 	.word	0x08001a65
 8001670:	08001a91 	.word	0x08001a91
 8001674:	08001abd 	.word	0x08001abd
 8001678:	08001ae9 	.word	0x08001ae9
 800167c:	08001b29 	.word	0x08001b29
 8001680:	08001b55 	.word	0x08001b55
 8001684:	08001b87 	.word	0x08001b87
 8001688:	08001c4f 	.word	0x08001c4f
 800168c:	08001c4f 	.word	0x08001c4f
 8001690:	08001c4f 	.word	0x08001c4f
 8001694:	08001c4f 	.word	0x08001c4f
 8001698:	08001c4f 	.word	0x08001c4f
 800169c:	08001c4f 	.word	0x08001c4f
 80016a0:	08001c4f 	.word	0x08001c4f
 80016a4:	08001c4f 	.word	0x08001c4f
 80016a8:	08001c4f 	.word	0x08001c4f
 80016ac:	08001c4f 	.word	0x08001c4f
 80016b0:	08001c4f 	.word	0x08001c4f
 80016b4:	08001c4f 	.word	0x08001c4f
 80016b8:	08001c4f 	.word	0x08001c4f
 80016bc:	08001c4f 	.word	0x08001c4f
 80016c0:	08001c4f 	.word	0x08001c4f
 80016c4:	08001c4f 	.word	0x08001c4f
 80016c8:	08001c4f 	.word	0x08001c4f
 80016cc:	08001c4f 	.word	0x08001c4f
 80016d0:	08001c4f 	.word	0x08001c4f
 80016d4:	08001c4f 	.word	0x08001c4f
 80016d8:	08001c4f 	.word	0x08001c4f
 80016dc:	08001c4f 	.word	0x08001c4f
 80016e0:	08001c4f 	.word	0x08001c4f
 80016e4:	08001c4f 	.word	0x08001c4f
 80016e8:	08001c4f 	.word	0x08001c4f
 80016ec:	08001c4f 	.word	0x08001c4f
 80016f0:	08001c4f 	.word	0x08001c4f
 80016f4:	08001c4f 	.word	0x08001c4f
 80016f8:	08001c4f 	.word	0x08001c4f
 80016fc:	08001c4f 	.word	0x08001c4f
 8001700:	08001c4f 	.word	0x08001c4f
 8001704:	08001c4f 	.word	0x08001c4f
 8001708:	08001c4f 	.word	0x08001c4f
 800170c:	08001c4f 	.word	0x08001c4f
 8001710:	08001c4f 	.word	0x08001c4f
 8001714:	08001c4f 	.word	0x08001c4f
 8001718:	08001c4f 	.word	0x08001c4f
 800171c:	08001c4f 	.word	0x08001c4f
 8001720:	08001c4f 	.word	0x08001c4f
 8001724:	08001c4f 	.word	0x08001c4f
 8001728:	08001c4f 	.word	0x08001c4f
 800172c:	08001c4f 	.word	0x08001c4f
 8001730:	08001c4f 	.word	0x08001c4f
 8001734:	08001c4f 	.word	0x08001c4f
 8001738:	08001c4f 	.word	0x08001c4f
 800173c:	08001c4f 	.word	0x08001c4f
 8001740:	08001c4f 	.word	0x08001c4f
 8001744:	08001c4f 	.word	0x08001c4f
 8001748:	08001c4f 	.word	0x08001c4f
 800174c:	08001c4f 	.word	0x08001c4f
 8001750:	08001c4f 	.word	0x08001c4f
 8001754:	08001c4f 	.word	0x08001c4f
 8001758:	08001c4f 	.word	0x08001c4f
 800175c:	08001c4f 	.word	0x08001c4f
 8001760:	08001c4f 	.word	0x08001c4f
 8001764:	08001c4f 	.word	0x08001c4f
 8001768:	08001c4f 	.word	0x08001c4f
 800176c:	08001c4f 	.word	0x08001c4f
 8001770:	08001c4f 	.word	0x08001c4f
 8001774:	08001c4f 	.word	0x08001c4f
 8001778:	08001c4f 	.word	0x08001c4f
 800177c:	08001c4f 	.word	0x08001c4f
 8001780:	08001c4f 	.word	0x08001c4f
 8001784:	08001c4f 	.word	0x08001c4f
 8001788:	08001c4f 	.word	0x08001c4f
 800178c:	08001c4f 	.word	0x08001c4f
 8001790:	08001c4f 	.word	0x08001c4f
 8001794:	08001c4f 	.word	0x08001c4f
 8001798:	08001c4f 	.word	0x08001c4f
 800179c:	08001c4f 	.word	0x08001c4f
 80017a0:	08001c4f 	.word	0x08001c4f
 80017a4:	08001c4f 	.word	0x08001c4f
 80017a8:	08001c4f 	.word	0x08001c4f
 80017ac:	08001c4f 	.word	0x08001c4f
 80017b0:	08001c4f 	.word	0x08001c4f
 80017b4:	08001c4f 	.word	0x08001c4f
 80017b8:	08001c4f 	.word	0x08001c4f
 80017bc:	08001c4f 	.word	0x08001c4f
 80017c0:	08001c4f 	.word	0x08001c4f
 80017c4:	08001c4f 	.word	0x08001c4f
 80017c8:	08001bb9 	.word	0x08001bb9
 80017cc:	08001be1 	.word	0x08001be1
 80017d0:	08001bf7 	.word	0x08001bf7
 80017d4:	08001c0d 	.word	0x08001c0d
 80017d8:	08001c23 	.word	0x08001c23
 80017dc:	08001c39 	.word	0x08001c39
				case 0:
					TxData = etc_new_data;
 80017e0:	4b37      	ldr	r3, [pc, #220]	@ (80018c0 <main+0x458>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a37      	ldr	r2, [pc, #220]	@ (80018c4 <main+0x45c>)
 80017e6:	6013      	str	r3, [r2, #0]
					continuous_tx_flag = false;
 80017e8:	4b37      	ldr	r3, [pc, #220]	@ (80018c8 <main+0x460>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
					break;
 80017ee:	e22f      	b.n	8001c50 <main+0x7e8>

				case 1:
					TxData = etc_new_data;
 80017f0:	4b33      	ldr	r3, [pc, #204]	@ (80018c0 <main+0x458>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a33      	ldr	r2, [pc, #204]	@ (80018c4 <main+0x45c>)
 80017f6:	6013      	str	r3, [r2, #0]
					set_Execution_count++;
 80017f8:	4b34      	ldr	r3, [pc, #208]	@ (80018cc <main+0x464>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b32      	ldr	r3, [pc, #200]	@ (80018cc <main+0x464>)
 8001802:	701a      	strb	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 1000000)) {
 8001804:	4b2e      	ldr	r3, [pc, #184]	@ (80018c0 <main+0x458>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <main+0x3ae>
 800180c:	4b2c      	ldr	r3, [pc, #176]	@ (80018c0 <main+0x458>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a2f      	ldr	r2, [pc, #188]	@ (80018d0 <main+0x468>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d903      	bls.n	800181e <main+0x3b6>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001816:	2101      	movs	r1, #1
 8001818:	482e      	ldr	r0, [pc, #184]	@ (80018d4 <main+0x46c>)
 800181a:	f001 fd1d 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setEncoderResolution(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 800181e:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <main+0x460>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
					break;
 8001824:	e214      	b.n	8001c50 <main+0x7e8>

				case 2:
					TxData = etc_new_data;
 8001826:	4b26      	ldr	r3, [pc, #152]	@ (80018c0 <main+0x458>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a26      	ldr	r2, [pc, #152]	@ (80018c4 <main+0x45c>)
 800182c:	6013      	str	r3, [r2, #0]
					set_Execution_count++;
 800182e:	4b27      	ldr	r3, [pc, #156]	@ (80018cc <main+0x464>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b25      	ldr	r3, [pc, #148]	@ (80018cc <main+0x464>)
 8001838:	701a      	strb	r2, [r3, #0]
					if ((etc_new_data != 0) && (etc_new_data != 1)) {//cannot be anything other than 0 or 1
 800183a:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <main+0x458>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d007      	beq.n	8001852 <main+0x3ea>
 8001842:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <main+0x458>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d003      	beq.n	8001852 <main+0x3ea>
						setWrongCommandFlag(&tmc4671_controller, true);
 800184a:	2101      	movs	r1, #1
 800184c:	4821      	ldr	r0, [pc, #132]	@ (80018d4 <main+0x46c>)
 800184e:	f001 fd03 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setEncoderDirection(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001852:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <main+0x460>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
					break;
 8001858:	e1fa      	b.n	8001c50 <main+0x7e8>

				case 3:
					TxData = etc_new_data;
 800185a:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <main+0x458>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a19      	ldr	r2, [pc, #100]	@ (80018c4 <main+0x45c>)
 8001860:	6013      	str	r3, [r2, #0]
					if (((int32_t) etc_new_data <= -5000) || ((int32_t) etc_new_data >= 5000)) {//cannot be less than -5000um = -5mm or greater than 5000um = 5mm
 8001862:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <main+0x458>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <main+0x470>)
 800186a:	429a      	cmp	r2, r3
 800186c:	db06      	blt.n	800187c <main+0x414>
 800186e:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <main+0x458>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	f241 3387 	movw	r3, #4999	@ 0x1387
 8001878:	429a      	cmp	r2, r3
 800187a:	dd03      	ble.n	8001884 <main+0x41c>
						setWrongCommandFlag(&tmc4671_controller, true);
 800187c:	2101      	movs	r1, #1
 800187e:	4815      	ldr	r0, [pc, #84]	@ (80018d4 <main+0x46c>)
 8001880:	f001 fcea 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setZeroOffset(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001884:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <main+0x460>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
					break;
 800188a:	e1e1      	b.n	8001c50 <main+0x7e8>
 800188c:	2000031f 	.word	0x2000031f
 8001890:	20000084 	.word	0x20000084
 8001894:	20000330 	.word	0x20000330
 8001898:	20000334 	.word	0x20000334
 800189c:	20000338 	.word	0x20000338
 80018a0:	2000033c 	.word	0x2000033c
 80018a4:	2000033e 	.word	0x2000033e
 80018a8:	20000340 	.word	0x20000340
 80018ac:	20000342 	.word	0x20000342
 80018b0:	2000031c 	.word	0x2000031c
 80018b4:	20000320 	.word	0x20000320
 80018b8:	20000328 	.word	0x20000328
 80018bc:	20000324 	.word	0x20000324
 80018c0:	2000032c 	.word	0x2000032c
 80018c4:	20000344 	.word	0x20000344
 80018c8:	2000031e 	.word	0x2000031e
 80018cc:	2000034b 	.word	0x2000034b
 80018d0:	000f4240 	.word	0x000f4240
 80018d4:	200002c0 	.word	0x200002c0
 80018d8:	ffffec79 	.word	0xffffec79

				case 4:
					TxData = etc_new_data;
 80018dc:	4b8d      	ldr	r3, [pc, #564]	@ (8001b14 <main+0x6ac>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a8d      	ldr	r2, [pc, #564]	@ (8001b18 <main+0x6b0>)
 80018e2:	6013      	str	r3, [r2, #0]
					if (((int32_t) etc_new_data <= 0) || ((int32_t) etc_new_data > 12000)) {//cannot be 0, negative number or more than 12000um = 12mm
 80018e4:	4b8b      	ldr	r3, [pc, #556]	@ (8001b14 <main+0x6ac>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	dd06      	ble.n	80018fa <main+0x492>
 80018ec:	4b89      	ldr	r3, [pc, #548]	@ (8001b14 <main+0x6ac>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dd03      	ble.n	8001902 <main+0x49a>
						setWrongCommandFlag(&tmc4671_controller, true);
 80018fa:	2101      	movs	r1, #1
 80018fc:	4887      	ldr	r0, [pc, #540]	@ (8001b1c <main+0x6b4>)
 80018fe:	f001 fcab 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setSoftPositiveLimit(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001902:	4b87      	ldr	r3, [pc, #540]	@ (8001b20 <main+0x6b8>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
					break;
 8001908:	e1a2      	b.n	8001c50 <main+0x7e8>

				case 5:
					TxData = etc_new_data;
 800190a:	4b82      	ldr	r3, [pc, #520]	@ (8001b14 <main+0x6ac>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a82      	ldr	r2, [pc, #520]	@ (8001b18 <main+0x6b0>)
 8001910:	6013      	str	r3, [r2, #0]
					if (((int32_t) etc_new_data >= 0) || ((int32_t) etc_new_data < -12000)) {	//cannot be 0, positive number or less than -12000um = -12mm
 8001912:	4b80      	ldr	r3, [pc, #512]	@ (8001b14 <main+0x6ac>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	da05      	bge.n	8001926 <main+0x4be>
 800191a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b14 <main+0x6ac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	4b80      	ldr	r3, [pc, #512]	@ (8001b24 <main+0x6bc>)
 8001922:	429a      	cmp	r2, r3
 8001924:	da03      	bge.n	800192e <main+0x4c6>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001926:	2101      	movs	r1, #1
 8001928:	487c      	ldr	r0, [pc, #496]	@ (8001b1c <main+0x6b4>)
 800192a:	f001 fc95 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setSoftNegativeLimit(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 800192e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b20 <main+0x6b8>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
					break;
 8001934:	e18c      	b.n	8001c50 <main+0x7e8>

				case 6:
					TxData = etc_new_data;
 8001936:	4b77      	ldr	r3, [pc, #476]	@ (8001b14 <main+0x6ac>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a77      	ldr	r2, [pc, #476]	@ (8001b18 <main+0x6b0>)
 800193c:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 2000)) {	//cannot be 0, negative number or more than 2000um = 2mm
 800193e:	4b75      	ldr	r3, [pc, #468]	@ (8001b14 <main+0x6ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <main+0x4e8>
 8001946:	4b73      	ldr	r3, [pc, #460]	@ (8001b14 <main+0x6ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800194e:	d903      	bls.n	8001958 <main+0x4f0>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001950:	2101      	movs	r1, #1
 8001952:	4872      	ldr	r0, [pc, #456]	@ (8001b1c <main+0x6b4>)
 8001954:	f001 fc80 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setMaxPositionError(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001958:	4b71      	ldr	r3, [pc, #452]	@ (8001b20 <main+0x6b8>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
					break;
 800195e:	e177      	b.n	8001c50 <main+0x7e8>

				case 7:
					TxData = etc_new_data;
 8001960:	4b6c      	ldr	r3, [pc, #432]	@ (8001b14 <main+0x6ac>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a6c      	ldr	r2, [pc, #432]	@ (8001b18 <main+0x6b0>)
 8001966:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 5000)) {	//cannot be 0, negative number or more than 5000
 8001968:	4b6a      	ldr	r3, [pc, #424]	@ (8001b14 <main+0x6ac>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <main+0x514>
 8001970:	4b68      	ldr	r3, [pc, #416]	@ (8001b14 <main+0x6ac>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d903      	bls.n	8001984 <main+0x51c>
						setWrongCommandFlag(&tmc4671_controller, true);
 800197c:	2101      	movs	r1, #1
 800197e:	4867      	ldr	r0, [pc, #412]	@ (8001b1c <main+0x6b4>)
 8001980:	f001 fc6a 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setCurrentLimitHoming(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001984:	4b66      	ldr	r3, [pc, #408]	@ (8001b20 <main+0x6b8>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
					break;
 800198a:	e161      	b.n	8001c50 <main+0x7e8>

				case 8:
					TxData = etc_new_data;
 800198c:	4b61      	ldr	r3, [pc, #388]	@ (8001b14 <main+0x6ac>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a61      	ldr	r2, [pc, #388]	@ (8001b18 <main+0x6b0>)
 8001992:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 15000)) {//cannot be 0, negative number or more than 15000
 8001994:	4b5f      	ldr	r3, [pc, #380]	@ (8001b14 <main+0x6ac>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <main+0x540>
 800199c:	4b5d      	ldr	r3, [pc, #372]	@ (8001b14 <main+0x6ac>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d903      	bls.n	80019b0 <main+0x548>
						setWrongCommandFlag(&tmc4671_controller, true);
 80019a8:	2101      	movs	r1, #1
 80019aa:	485c      	ldr	r0, [pc, #368]	@ (8001b1c <main+0x6b4>)
 80019ac:	f001 fc54 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setCurrentLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80019b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001b20 <main+0x6b8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
					break;
 80019b6:	e14b      	b.n	8001c50 <main+0x7e8>

				case 9:
					TxData = etc_new_data;
 80019b8:	4b56      	ldr	r3, [pc, #344]	@ (8001b14 <main+0x6ac>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a56      	ldr	r2, [pc, #344]	@ (8001b18 <main+0x6b0>)
 80019be:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 8000)) {	//cannot be 0, negative number or more than 8000
 80019c0:	4b54      	ldr	r3, [pc, #336]	@ (8001b14 <main+0x6ac>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <main+0x56a>
 80019c8:	4b52      	ldr	r3, [pc, #328]	@ (8001b14 <main+0x6ac>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80019d0:	d903      	bls.n	80019da <main+0x572>
						setWrongCommandFlag(&tmc4671_controller, true);
 80019d2:	2101      	movs	r1, #1
 80019d4:	4851      	ldr	r0, [pc, #324]	@ (8001b1c <main+0x6b4>)
 80019d6:	f001 fc3f 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setVoltageLimitHoming(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80019da:	4b51      	ldr	r3, [pc, #324]	@ (8001b20 <main+0x6b8>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
					break;
 80019e0:	e136      	b.n	8001c50 <main+0x7e8>

				case 10:
					TxData = etc_new_data;
 80019e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001b14 <main+0x6ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a4c      	ldr	r2, [pc, #304]	@ (8001b18 <main+0x6b0>)
 80019e8:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 500)) {//cannot be 0, negative number or more than 500
 80019ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001b14 <main+0x6ac>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <main+0x594>
 80019f2:	4b48      	ldr	r3, [pc, #288]	@ (8001b14 <main+0x6ac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019fa:	d903      	bls.n	8001a04 <main+0x59c>
						setWrongCommandFlag(&tmc4671_controller, true);
 80019fc:	2101      	movs	r1, #1
 80019fe:	4847      	ldr	r0, [pc, #284]	@ (8001b1c <main+0x6b4>)
 8001a00:	f001 fc2a 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setVelocityLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a04:	4b46      	ldr	r3, [pc, #280]	@ (8001b20 <main+0x6b8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
					break;
 8001a0a:	e121      	b.n	8001c50 <main+0x7e8>

				case 11:
					TxData = etc_new_data;
 8001a0c:	4b41      	ldr	r3, [pc, #260]	@ (8001b14 <main+0x6ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a41      	ldr	r2, [pc, #260]	@ (8001b18 <main+0x6b0>)
 8001a12:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 30000)) {//cannot be 0, negative number or more than 30000
 8001a14:	4b3f      	ldr	r3, [pc, #252]	@ (8001b14 <main+0x6ac>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <main+0x5c0>
 8001a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b14 <main+0x6ac>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d903      	bls.n	8001a30 <main+0x5c8>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a28:	2101      	movs	r1, #1
 8001a2a:	483c      	ldr	r0, [pc, #240]	@ (8001b1c <main+0x6b4>)
 8001a2c:	f001 fc14 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setTorqueLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a30:	4b3b      	ldr	r3, [pc, #236]	@ (8001b20 <main+0x6b8>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
					break;
 8001a36:	e10b      	b.n	8001c50 <main+0x7e8>

				case 12:
					TxData = etc_new_data;
 8001a38:	4b36      	ldr	r3, [pc, #216]	@ (8001b14 <main+0x6ac>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a36      	ldr	r2, [pc, #216]	@ (8001b18 <main+0x6b0>)
 8001a3e:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a40:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <main+0x6ac>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <main+0x5ec>
 8001a48:	4b32      	ldr	r3, [pc, #200]	@ (8001b14 <main+0x6ac>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d903      	bls.n	8001a5c <main+0x5f4>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a54:	2101      	movs	r1, #1
 8001a56:	4831      	ldr	r0, [pc, #196]	@ (8001b1c <main+0x6b4>)
 8001a58:	f001 fbfe 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setCurrentGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a5c:	4b30      	ldr	r3, [pc, #192]	@ (8001b20 <main+0x6b8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
					break;
 8001a62:	e0f5      	b.n	8001c50 <main+0x7e8>

				case 13:
					TxData = etc_new_data;
 8001a64:	4b2b      	ldr	r3, [pc, #172]	@ (8001b14 <main+0x6ac>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2b      	ldr	r2, [pc, #172]	@ (8001b18 <main+0x6b0>)
 8001a6a:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a6c:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <main+0x6ac>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <main+0x618>
 8001a74:	4b27      	ldr	r3, [pc, #156]	@ (8001b14 <main+0x6ac>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d903      	bls.n	8001a88 <main+0x620>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a80:	2101      	movs	r1, #1
 8001a82:	4826      	ldr	r0, [pc, #152]	@ (8001b1c <main+0x6b4>)
 8001a84:	f001 fbe8 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setCurrentGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a88:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <main+0x6b8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
					break;
 8001a8e:	e0df      	b.n	8001c50 <main+0x7e8>

				case 14:
					TxData = etc_new_data;
 8001a90:	4b20      	ldr	r3, [pc, #128]	@ (8001b14 <main+0x6ac>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a20      	ldr	r2, [pc, #128]	@ (8001b18 <main+0x6b0>)
 8001a96:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a98:	4b1e      	ldr	r3, [pc, #120]	@ (8001b14 <main+0x6ac>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <main+0x644>
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <main+0x6ac>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d903      	bls.n	8001ab4 <main+0x64c>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001aac:	2101      	movs	r1, #1
 8001aae:	481b      	ldr	r0, [pc, #108]	@ (8001b1c <main+0x6b4>)
 8001ab0:	f001 fbd2 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setVelocityGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b20 <main+0x6b8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
					break;
 8001aba:	e0c9      	b.n	8001c50 <main+0x7e8>

				case 15:
					TxData = etc_new_data;
 8001abc:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <main+0x6ac>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a15      	ldr	r2, [pc, #84]	@ (8001b18 <main+0x6b0>)
 8001ac2:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <main+0x6ac>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <main+0x670>
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <main+0x6ac>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d903      	bls.n	8001ae0 <main+0x678>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4810      	ldr	r0, [pc, #64]	@ (8001b1c <main+0x6b4>)
 8001adc:	f001 fbbc 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setVelocityGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <main+0x6b8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
					break;
 8001ae6:	e0b3      	b.n	8001c50 <main+0x7e8>

				case 16:
					TxData = etc_new_data;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <main+0x6ac>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <main+0x6b0>)
 8001aee:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <main+0x6ac>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <main+0x69c>
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <main+0x6ac>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d903      	bls.n	8001b0c <main+0x6a4>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001b04:	2101      	movs	r1, #1
 8001b06:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <main+0x6b4>)
 8001b08:	f001 fba6 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setPositionGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <main+0x6b8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
					break;
 8001b12:	e09d      	b.n	8001c50 <main+0x7e8>
 8001b14:	2000032c 	.word	0x2000032c
 8001b18:	20000344 	.word	0x20000344
 8001b1c:	200002c0 	.word	0x200002c0
 8001b20:	2000031e 	.word	0x2000031e
 8001b24:	ffffd120 	.word	0xffffd120

				case 17:
					TxData = etc_new_data;
 8001b28:	4b4e      	ldr	r3, [pc, #312]	@ (8001c64 <main+0x7fc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c68 <main+0x800>)
 8001b2e:	6013      	str	r3, [r2, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001b30:	4b4c      	ldr	r3, [pc, #304]	@ (8001c64 <main+0x7fc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <main+0x6dc>
 8001b38:	4b4a      	ldr	r3, [pc, #296]	@ (8001c64 <main+0x7fc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d903      	bls.n	8001b4c <main+0x6e4>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001b44:	2101      	movs	r1, #1
 8001b46:	4849      	ldr	r0, [pc, #292]	@ (8001c6c <main+0x804>)
 8001b48:	f001 fb86 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setPositionGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001b4c:	4b48      	ldr	r3, [pc, #288]	@ (8001c70 <main+0x808>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
					break;
 8001b52:	e07d      	b.n	8001c50 <main+0x7e8>

				case 18:
					TxData = etc_new_data;
 8001b54:	4b43      	ldr	r3, [pc, #268]	@ (8001c64 <main+0x7fc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a43      	ldr	r2, [pc, #268]	@ (8001c68 <main+0x800>)
 8001b5a:	6013      	str	r3, [r2, #0]
					if (((int32_t) etc_new_data < -12000) || ((int32_t) etc_new_data > 12000)) {//cannot be less than -12000um = -12mm or greater than 12000um = 12mm
 8001b5c:	4b41      	ldr	r3, [pc, #260]	@ (8001c64 <main+0x7fc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b44      	ldr	r3, [pc, #272]	@ (8001c74 <main+0x80c>)
 8001b64:	429a      	cmp	r2, r3
 8001b66:	db06      	blt.n	8001b76 <main+0x70e>
 8001b68:	4b3e      	ldr	r3, [pc, #248]	@ (8001c64 <main+0x7fc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dd03      	ble.n	8001b7e <main+0x716>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001b76:	2101      	movs	r1, #1
 8001b78:	483c      	ldr	r0, [pc, #240]	@ (8001c6c <main+0x804>)
 8001b7a:	f001 fb6d 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setAbsoluteTargetPosition(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001b7e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c70 <main+0x808>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
					break;
 8001b84:	e064      	b.n	8001c50 <main+0x7e8>

				case 19:
					TxData = etc_new_data;
 8001b86:	4b37      	ldr	r3, [pc, #220]	@ (8001c64 <main+0x7fc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a37      	ldr	r2, [pc, #220]	@ (8001c68 <main+0x800>)
 8001b8c:	6013      	str	r3, [r2, #0]
					if (((int32_t) etc_new_data < -12000) || ((int32_t) etc_new_data > 12000)) {//cannot be less than -12000um = -12mm or greater than 12000um = 12mm
 8001b8e:	4b35      	ldr	r3, [pc, #212]	@ (8001c64 <main+0x7fc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <main+0x80c>)
 8001b96:	429a      	cmp	r2, r3
 8001b98:	db06      	blt.n	8001ba8 <main+0x740>
 8001b9a:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <main+0x7fc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	dd03      	ble.n	8001bb0 <main+0x748>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4830      	ldr	r0, [pc, #192]	@ (8001c6c <main+0x804>)
 8001bac:	f001 fb54 	bl	8003258 <setWrongCommandFlag>
					} else {
//						setIncrementalTargetPosition(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <main+0x808>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
					break;
 8001bb6:	e04b      	b.n	8001c50 <main+0x7e8>

				case 100:
					TxData = etc_new_data;
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c64 <main+0x7fc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001c68 <main+0x800>)
 8001bbe:	6013      	str	r3, [r2, #0]
					if ((etc_new_data != 0) && (etc_new_data != 1)) {//cannot be anything other than 0 or 1
 8001bc0:	4b28      	ldr	r3, [pc, #160]	@ (8001c64 <main+0x7fc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d007      	beq.n	8001bd8 <main+0x770>
 8001bc8:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <main+0x7fc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d003      	beq.n	8001bd8 <main+0x770>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4826      	ldr	r0, [pc, #152]	@ (8001c6c <main+0x804>)
 8001bd4:	f001 fb40 	bl	8003258 <setWrongCommandFlag>
					} else {
//						servoEnable(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <main+0x808>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
					break;
 8001bde:	e037      	b.n	8001c50 <main+0x7e8>

				case 101:
					TxData = 0;
 8001be0:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <main+0x800>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
//					startHoming(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001be6:	2100      	movs	r1, #0
 8001be8:	4820      	ldr	r0, [pc, #128]	@ (8001c6c <main+0x804>)
 8001bea:	f001 fb35 	bl	8003258 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001bee:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <main+0x808>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
					break;
 8001bf4:	e02c      	b.n	8001c50 <main+0x7e8>

				case 102:
					TxData = 0;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <main+0x800>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
//					clearFaults(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	481b      	ldr	r0, [pc, #108]	@ (8001c6c <main+0x804>)
 8001c00:	f001 fb2a 	bl	8003258 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <main+0x808>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
					break;
 8001c0a:	e021      	b.n	8001c50 <main+0x7e8>

				case 103:
					TxData = 0;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <main+0x800>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
					//saveParameters(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001c12:	2100      	movs	r1, #0
 8001c14:	4815      	ldr	r0, [pc, #84]	@ (8001c6c <main+0x804>)
 8001c16:	f001 fb1f 	bl	8003258 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <main+0x808>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
					break;
 8001c20:	e016      	b.n	8001c50 <main+0x7e8>

				case 104:
					TxData = 0;
 8001c22:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <main+0x800>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
					//loadDefaultParameters(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4810      	ldr	r0, [pc, #64]	@ (8001c6c <main+0x804>)
 8001c2c:	f001 fb14 	bl	8003258 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <main+0x808>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
					break;
 8001c36:	e00b      	b.n	8001c50 <main+0x7e8>

				case 105:
					TxData = 0;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <main+0x800>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
					//stopMovement(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001c3e:	2100      	movs	r1, #0
 8001c40:	480a      	ldr	r0, [pc, #40]	@ (8001c6c <main+0x804>)
 8001c42:	f001 fb09 	bl	8003258 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001c46:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <main+0x808>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
					break;
 8001c4c:	e000      	b.n	8001c50 <main+0x7e8>

				default:
					break;
 8001c4e:	bf00      	nop
				}
				etc_old_command = etc_new_command;
 8001c50:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <main+0x810>)
 8001c52:	881a      	ldrh	r2, [r3, #0]
 8001c54:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <main+0x814>)
 8001c56:	801a      	strh	r2, [r3, #0]
				etc_old_data = etc_new_data;
 8001c58:	4b02      	ldr	r3, [pc, #8]	@ (8001c64 <main+0x7fc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <main+0x818>)
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	e309      	b.n	8002276 <main+0xe0e>
 8001c62:	bf00      	nop
 8001c64:	2000032c 	.word	0x2000032c
 8001c68:	20000344 	.word	0x20000344
 8001c6c:	200002c0 	.word	0x200002c0
 8001c70:	2000031e 	.word	0x2000031e
 8001c74:	ffffd120 	.word	0xffffd120
 8001c78:	20000328 	.word	0x20000328
 8001c7c:	20000320 	.word	0x20000320
 8001c80:	20000324 	.word	0x20000324
		  }
	  } else if (get_command_flag) {
 8001c84:	4bde      	ldr	r3, [pc, #888]	@ (8002000 <main+0xb98>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 8298 	beq.w	80021be <main+0xd56>
		  switch(etc_new_command) {
 8001c8e:	4bdd      	ldr	r3, [pc, #884]	@ (8002004 <main+0xb9c>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	3b32      	subs	r3, #50	@ 0x32
 8001c94:	2b96      	cmp	r3, #150	@ 0x96
 8001c96:	f200 8280 	bhi.w	800219a <main+0xd32>
 8001c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca0 <main+0x838>)
 8001c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca0:	08001efd 	.word	0x08001efd
 8001ca4:	08001f19 	.word	0x08001f19
 8001ca8:	08001f37 	.word	0x08001f37
 8001cac:	08001f55 	.word	0x08001f55
 8001cb0:	08001f73 	.word	0x08001f73
 8001cb4:	08001f91 	.word	0x08001f91
 8001cb8:	08001fad 	.word	0x08001fad
 8001cbc:	08001fc9 	.word	0x08001fc9
 8001cc0:	08001fe5 	.word	0x08001fe5
 8001cc4:	08002015 	.word	0x08002015
 8001cc8:	08002031 	.word	0x08002031
 8001ccc:	0800204d 	.word	0x0800204d
 8001cd0:	08002069 	.word	0x08002069
 8001cd4:	08002085 	.word	0x08002085
 8001cd8:	080020a1 	.word	0x080020a1
 8001cdc:	080020bd 	.word	0x080020bd
 8001ce0:	080020d9 	.word	0x080020d9
 8001ce4:	080020f5 	.word	0x080020f5
 8001ce8:	08002113 	.word	0x08002113
 8001cec:	08002131 	.word	0x08002131
 8001cf0:	0800214d 	.word	0x0800214d
 8001cf4:	0800219b 	.word	0x0800219b
 8001cf8:	0800219b 	.word	0x0800219b
 8001cfc:	0800219b 	.word	0x0800219b
 8001d00:	0800219b 	.word	0x0800219b
 8001d04:	0800219b 	.word	0x0800219b
 8001d08:	0800219b 	.word	0x0800219b
 8001d0c:	0800219b 	.word	0x0800219b
 8001d10:	0800219b 	.word	0x0800219b
 8001d14:	0800219b 	.word	0x0800219b
 8001d18:	0800219b 	.word	0x0800219b
 8001d1c:	0800219b 	.word	0x0800219b
 8001d20:	0800219b 	.word	0x0800219b
 8001d24:	0800219b 	.word	0x0800219b
 8001d28:	0800219b 	.word	0x0800219b
 8001d2c:	0800219b 	.word	0x0800219b
 8001d30:	0800219b 	.word	0x0800219b
 8001d34:	0800219b 	.word	0x0800219b
 8001d38:	0800219b 	.word	0x0800219b
 8001d3c:	0800219b 	.word	0x0800219b
 8001d40:	0800219b 	.word	0x0800219b
 8001d44:	0800219b 	.word	0x0800219b
 8001d48:	0800219b 	.word	0x0800219b
 8001d4c:	0800219b 	.word	0x0800219b
 8001d50:	0800219b 	.word	0x0800219b
 8001d54:	0800219b 	.word	0x0800219b
 8001d58:	0800219b 	.word	0x0800219b
 8001d5c:	0800219b 	.word	0x0800219b
 8001d60:	0800219b 	.word	0x0800219b
 8001d64:	0800219b 	.word	0x0800219b
 8001d68:	0800219b 	.word	0x0800219b
 8001d6c:	0800219b 	.word	0x0800219b
 8001d70:	0800219b 	.word	0x0800219b
 8001d74:	0800219b 	.word	0x0800219b
 8001d78:	0800219b 	.word	0x0800219b
 8001d7c:	0800219b 	.word	0x0800219b
 8001d80:	0800219b 	.word	0x0800219b
 8001d84:	0800219b 	.word	0x0800219b
 8001d88:	0800219b 	.word	0x0800219b
 8001d8c:	0800219b 	.word	0x0800219b
 8001d90:	0800219b 	.word	0x0800219b
 8001d94:	0800219b 	.word	0x0800219b
 8001d98:	0800219b 	.word	0x0800219b
 8001d9c:	0800219b 	.word	0x0800219b
 8001da0:	0800219b 	.word	0x0800219b
 8001da4:	0800219b 	.word	0x0800219b
 8001da8:	0800219b 	.word	0x0800219b
 8001dac:	0800219b 	.word	0x0800219b
 8001db0:	0800219b 	.word	0x0800219b
 8001db4:	0800219b 	.word	0x0800219b
 8001db8:	0800219b 	.word	0x0800219b
 8001dbc:	0800219b 	.word	0x0800219b
 8001dc0:	0800219b 	.word	0x0800219b
 8001dc4:	0800219b 	.word	0x0800219b
 8001dc8:	0800219b 	.word	0x0800219b
 8001dcc:	0800219b 	.word	0x0800219b
 8001dd0:	0800219b 	.word	0x0800219b
 8001dd4:	0800219b 	.word	0x0800219b
 8001dd8:	0800219b 	.word	0x0800219b
 8001ddc:	0800219b 	.word	0x0800219b
 8001de0:	0800219b 	.word	0x0800219b
 8001de4:	0800219b 	.word	0x0800219b
 8001de8:	0800219b 	.word	0x0800219b
 8001dec:	0800219b 	.word	0x0800219b
 8001df0:	0800219b 	.word	0x0800219b
 8001df4:	0800219b 	.word	0x0800219b
 8001df8:	0800219b 	.word	0x0800219b
 8001dfc:	0800219b 	.word	0x0800219b
 8001e00:	0800219b 	.word	0x0800219b
 8001e04:	0800219b 	.word	0x0800219b
 8001e08:	0800219b 	.word	0x0800219b
 8001e0c:	0800219b 	.word	0x0800219b
 8001e10:	0800219b 	.word	0x0800219b
 8001e14:	0800219b 	.word	0x0800219b
 8001e18:	0800219b 	.word	0x0800219b
 8001e1c:	0800219b 	.word	0x0800219b
 8001e20:	0800219b 	.word	0x0800219b
 8001e24:	0800219b 	.word	0x0800219b
 8001e28:	0800219b 	.word	0x0800219b
 8001e2c:	0800219b 	.word	0x0800219b
 8001e30:	0800219b 	.word	0x0800219b
 8001e34:	0800219b 	.word	0x0800219b
 8001e38:	0800219b 	.word	0x0800219b
 8001e3c:	0800219b 	.word	0x0800219b
 8001e40:	0800219b 	.word	0x0800219b
 8001e44:	0800219b 	.word	0x0800219b
 8001e48:	0800219b 	.word	0x0800219b
 8001e4c:	0800219b 	.word	0x0800219b
 8001e50:	0800219b 	.word	0x0800219b
 8001e54:	0800219b 	.word	0x0800219b
 8001e58:	0800219b 	.word	0x0800219b
 8001e5c:	0800219b 	.word	0x0800219b
 8001e60:	0800219b 	.word	0x0800219b
 8001e64:	0800219b 	.word	0x0800219b
 8001e68:	0800219b 	.word	0x0800219b
 8001e6c:	0800219b 	.word	0x0800219b
 8001e70:	0800219b 	.word	0x0800219b
 8001e74:	0800219b 	.word	0x0800219b
 8001e78:	0800219b 	.word	0x0800219b
 8001e7c:	0800219b 	.word	0x0800219b
 8001e80:	0800219b 	.word	0x0800219b
 8001e84:	0800219b 	.word	0x0800219b
 8001e88:	0800219b 	.word	0x0800219b
 8001e8c:	0800219b 	.word	0x0800219b
 8001e90:	0800219b 	.word	0x0800219b
 8001e94:	0800219b 	.word	0x0800219b
 8001e98:	0800219b 	.word	0x0800219b
 8001e9c:	0800219b 	.word	0x0800219b
 8001ea0:	0800219b 	.word	0x0800219b
 8001ea4:	0800219b 	.word	0x0800219b
 8001ea8:	0800219b 	.word	0x0800219b
 8001eac:	0800219b 	.word	0x0800219b
 8001eb0:	0800219b 	.word	0x0800219b
 8001eb4:	0800219b 	.word	0x0800219b
 8001eb8:	0800219b 	.word	0x0800219b
 8001ebc:	0800219b 	.word	0x0800219b
 8001ec0:	0800219b 	.word	0x0800219b
 8001ec4:	0800219b 	.word	0x0800219b
 8001ec8:	0800219b 	.word	0x0800219b
 8001ecc:	0800219b 	.word	0x0800219b
 8001ed0:	0800219b 	.word	0x0800219b
 8001ed4:	0800219b 	.word	0x0800219b
 8001ed8:	0800219b 	.word	0x0800219b
 8001edc:	0800219b 	.word	0x0800219b
 8001ee0:	0800219b 	.word	0x0800219b
 8001ee4:	0800219b 	.word	0x0800219b
 8001ee8:	0800219b 	.word	0x0800219b
 8001eec:	0800219b 	.word	0x0800219b
 8001ef0:	0800219b 	.word	0x0800219b
 8001ef4:	0800219b 	.word	0x0800219b
 8001ef8:	08002169 	.word	0x08002169
			case 50:
				TxData = getEncoderResolution(&tmc4671_controller);
 8001efc:	4842      	ldr	r0, [pc, #264]	@ (8002008 <main+0xba0>)
 8001efe:	f001 fa59 	bl	80033b4 <getEncoderResolution>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4a41      	ldr	r2, [pc, #260]	@ (800200c <main+0xba4>)
 8001f06:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f08:	2100      	movs	r1, #0
 8001f0a:	483f      	ldr	r0, [pc, #252]	@ (8002008 <main+0xba0>)
 8001f0c:	f001 f9a4 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f10:	4b3f      	ldr	r3, [pc, #252]	@ (8002010 <main+0xba8>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
				break;
 8001f16:	e14b      	b.n	80021b0 <main+0xd48>

			case 51:
				TxData = getEncoderDirection(&tmc4671_controller);
 8001f18:	483b      	ldr	r0, [pc, #236]	@ (8002008 <main+0xba0>)
 8001f1a:	f001 fa57 	bl	80033cc <getEncoderDirection>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b3a      	ldr	r3, [pc, #232]	@ (800200c <main+0xba4>)
 8001f24:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f26:	2100      	movs	r1, #0
 8001f28:	4837      	ldr	r0, [pc, #220]	@ (8002008 <main+0xba0>)
 8001f2a:	f001 f995 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f2e:	4b38      	ldr	r3, [pc, #224]	@ (8002010 <main+0xba8>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
				break;
 8001f34:	e13c      	b.n	80021b0 <main+0xd48>

			case 52:
				TxData = getZeroOffset(&tmc4671_controller);
 8001f36:	4834      	ldr	r0, [pc, #208]	@ (8002008 <main+0xba0>)
 8001f38:	f001 fb02 	bl	8003540 <getZeroOffset>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b32      	ldr	r3, [pc, #200]	@ (800200c <main+0xba4>)
 8001f42:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f44:	2100      	movs	r1, #0
 8001f46:	4830      	ldr	r0, [pc, #192]	@ (8002008 <main+0xba0>)
 8001f48:	f001 f986 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f4c:	4b30      	ldr	r3, [pc, #192]	@ (8002010 <main+0xba8>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
				break;
 8001f52:	e12d      	b.n	80021b0 <main+0xd48>

			case 53:
				TxData = getSoftPositiveLimit(&tmc4671_controller);
 8001f54:	482c      	ldr	r0, [pc, #176]	@ (8002008 <main+0xba0>)
 8001f56:	f001 fa93 	bl	8003480 <getSoftPositiveLimit>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <main+0xba4>)
 8001f60:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f62:	2100      	movs	r1, #0
 8001f64:	4828      	ldr	r0, [pc, #160]	@ (8002008 <main+0xba0>)
 8001f66:	f001 f977 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f6a:	4b29      	ldr	r3, [pc, #164]	@ (8002010 <main+0xba8>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
				break;
 8001f70:	e11e      	b.n	80021b0 <main+0xd48>

			case 54:
				TxData = getSoftNegativeLimit(&tmc4671_controller);
 8001f72:	4825      	ldr	r0, [pc, #148]	@ (8002008 <main+0xba0>)
 8001f74:	f001 fab4 	bl	80034e0 <getSoftNegativeLimit>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b23      	ldr	r3, [pc, #140]	@ (800200c <main+0xba4>)
 8001f7e:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f80:	2100      	movs	r1, #0
 8001f82:	4821      	ldr	r0, [pc, #132]	@ (8002008 <main+0xba0>)
 8001f84:	f001 f968 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f88:	4b21      	ldr	r3, [pc, #132]	@ (8002010 <main+0xba8>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
				break;
 8001f8e:	e10f      	b.n	80021b0 <main+0xd48>

			case 55:
				TxData = getMaxPositionError(&tmc4671_controller);
 8001f90:	481d      	ldr	r0, [pc, #116]	@ (8002008 <main+0xba0>)
 8001f92:	f001 fb65 	bl	8003660 <getMaxPositionError>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4a1c      	ldr	r2, [pc, #112]	@ (800200c <main+0xba4>)
 8001f9a:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	481a      	ldr	r0, [pc, #104]	@ (8002008 <main+0xba0>)
 8001fa0:	f001 f95a 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <main+0xba8>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
				break;
 8001faa:	e101      	b.n	80021b0 <main+0xd48>

			case 56:
				TxData = getCurrentLimitHoming(&tmc4671_controller);
 8001fac:	4816      	ldr	r0, [pc, #88]	@ (8002008 <main+0xba0>)
 8001fae:	f001 fa2a 	bl	8003406 <getCurrentLimitHoming>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4a15      	ldr	r2, [pc, #84]	@ (800200c <main+0xba4>)
 8001fb6:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4813      	ldr	r0, [pc, #76]	@ (8002008 <main+0xba0>)
 8001fbc:	f001 f94c 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001fc0:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <main+0xba8>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
				break;
 8001fc6:	e0f3      	b.n	80021b0 <main+0xd48>

			case 57:
				TxData = getCurrentLimitServo(&tmc4671_controller);
 8001fc8:	480f      	ldr	r0, [pc, #60]	@ (8002008 <main+0xba0>)
 8001fca:	f001 fa28 	bl	800341e <getCurrentLimitServo>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <main+0xba4>)
 8001fd2:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	480c      	ldr	r0, [pc, #48]	@ (8002008 <main+0xba0>)
 8001fd8:	f001 f93e 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <main+0xba8>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
				break;
 8001fe2:	e0e5      	b.n	80021b0 <main+0xd48>

			case 58:
				TxData = getVoltageLimitHoming(&tmc4671_controller);
 8001fe4:	4808      	ldr	r0, [pc, #32]	@ (8002008 <main+0xba0>)
 8001fe6:	f001 fa26 	bl	8003436 <getVoltageLimitHoming>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4a07      	ldr	r2, [pc, #28]	@ (800200c <main+0xba4>)
 8001fee:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4805      	ldr	r0, [pc, #20]	@ (8002008 <main+0xba0>)
 8001ff4:	f001 f930 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <main+0xba8>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
				break;
 8001ffe:	e0d7      	b.n	80021b0 <main+0xd48>
 8002000:	2000031d 	.word	0x2000031d
 8002004:	20000328 	.word	0x20000328
 8002008:	200002c0 	.word	0x200002c0
 800200c:	20000344 	.word	0x20000344
 8002010:	2000031e 	.word	0x2000031e

			case 59:
				TxData = getVelocityLimitServo(&tmc4671_controller);
 8002014:	4885      	ldr	r0, [pc, #532]	@ (800222c <main+0xdc4>)
 8002016:	f001 fa1a 	bl	800344e <getVelocityLimitServo>
 800201a:	4603      	mov	r3, r0
 800201c:	4a84      	ldr	r2, [pc, #528]	@ (8002230 <main+0xdc8>)
 800201e:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002020:	2100      	movs	r1, #0
 8002022:	4882      	ldr	r0, [pc, #520]	@ (800222c <main+0xdc4>)
 8002024:	f001 f918 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002028:	4b82      	ldr	r3, [pc, #520]	@ (8002234 <main+0xdcc>)
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
				break;
 800202e:	e0bf      	b.n	80021b0 <main+0xd48>

			case 60:
				TxData = getTorqueLimitServo(&tmc4671_controller);
 8002030:	487e      	ldr	r0, [pc, #504]	@ (800222c <main+0xdc4>)
 8002032:	f001 fa18 	bl	8003466 <getTorqueLimitServo>
 8002036:	4603      	mov	r3, r0
 8002038:	4a7d      	ldr	r2, [pc, #500]	@ (8002230 <main+0xdc8>)
 800203a:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 800203c:	2100      	movs	r1, #0
 800203e:	487b      	ldr	r0, [pc, #492]	@ (800222c <main+0xdc4>)
 8002040:	f001 f90a 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002044:	4b7b      	ldr	r3, [pc, #492]	@ (8002234 <main+0xdcc>)
 8002046:	2201      	movs	r2, #1
 8002048:	701a      	strb	r2, [r3, #0]
				break;
 800204a:	e0b1      	b.n	80021b0 <main+0xd48>

			case 61:
				TxData = getCurrentGainP(&tmc4671_controller);
 800204c:	4877      	ldr	r0, [pc, #476]	@ (800222c <main+0xdc4>)
 800204e:	f001 fb35 	bl	80036bc <getCurrentGainP>
 8002052:	4603      	mov	r3, r0
 8002054:	4a76      	ldr	r2, [pc, #472]	@ (8002230 <main+0xdc8>)
 8002056:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002058:	2100      	movs	r1, #0
 800205a:	4874      	ldr	r0, [pc, #464]	@ (800222c <main+0xdc4>)
 800205c:	f001 f8fc 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002060:	4b74      	ldr	r3, [pc, #464]	@ (8002234 <main+0xdcc>)
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
				break;
 8002066:	e0a3      	b.n	80021b0 <main+0xd48>

			case 62:
				TxData = getCurrentGainI(&tmc4671_controller);
 8002068:	4870      	ldr	r0, [pc, #448]	@ (800222c <main+0xdc4>)
 800206a:	f001 fb33 	bl	80036d4 <getCurrentGainI>
 800206e:	4603      	mov	r3, r0
 8002070:	4a6f      	ldr	r2, [pc, #444]	@ (8002230 <main+0xdc8>)
 8002072:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002074:	2100      	movs	r1, #0
 8002076:	486d      	ldr	r0, [pc, #436]	@ (800222c <main+0xdc4>)
 8002078:	f001 f8ee 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 800207c:	4b6d      	ldr	r3, [pc, #436]	@ (8002234 <main+0xdcc>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
				break;
 8002082:	e095      	b.n	80021b0 <main+0xd48>

			case 63:
				TxData = getVelocityGainP(&tmc4671_controller);
 8002084:	4869      	ldr	r0, [pc, #420]	@ (800222c <main+0xdc4>)
 8002086:	f001 fb31 	bl	80036ec <getVelocityGainP>
 800208a:	4603      	mov	r3, r0
 800208c:	4a68      	ldr	r2, [pc, #416]	@ (8002230 <main+0xdc8>)
 800208e:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002090:	2100      	movs	r1, #0
 8002092:	4866      	ldr	r0, [pc, #408]	@ (800222c <main+0xdc4>)
 8002094:	f001 f8e0 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002098:	4b66      	ldr	r3, [pc, #408]	@ (8002234 <main+0xdcc>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
				break;
 800209e:	e087      	b.n	80021b0 <main+0xd48>

			case 64:
				TxData = getVelocityGainI(&tmc4671_controller);
 80020a0:	4862      	ldr	r0, [pc, #392]	@ (800222c <main+0xdc4>)
 80020a2:	f001 fb2f 	bl	8003704 <getVelocityGainI>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4a61      	ldr	r2, [pc, #388]	@ (8002230 <main+0xdc8>)
 80020aa:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 80020ac:	2100      	movs	r1, #0
 80020ae:	485f      	ldr	r0, [pc, #380]	@ (800222c <main+0xdc4>)
 80020b0:	f001 f8d2 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 80020b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002234 <main+0xdcc>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
				break;
 80020ba:	e079      	b.n	80021b0 <main+0xd48>

			case 65:
				TxData = getPositionGainP(&tmc4671_controller);
 80020bc:	485b      	ldr	r0, [pc, #364]	@ (800222c <main+0xdc4>)
 80020be:	f001 fb2d 	bl	800371c <getPositionGainP>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002230 <main+0xdc8>)
 80020c6:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 80020c8:	2100      	movs	r1, #0
 80020ca:	4858      	ldr	r0, [pc, #352]	@ (800222c <main+0xdc4>)
 80020cc:	f001 f8c4 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 80020d0:	4b58      	ldr	r3, [pc, #352]	@ (8002234 <main+0xdcc>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
				break;
 80020d6:	e06b      	b.n	80021b0 <main+0xd48>

			case 66:
				TxData = getPositionGainI(&tmc4671_controller);
 80020d8:	4854      	ldr	r0, [pc, #336]	@ (800222c <main+0xdc4>)
 80020da:	f001 fb2b 	bl	8003734 <getPositionGainI>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a53      	ldr	r2, [pc, #332]	@ (8002230 <main+0xdc8>)
 80020e2:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 80020e4:	2100      	movs	r1, #0
 80020e6:	4851      	ldr	r0, [pc, #324]	@ (800222c <main+0xdc4>)
 80020e8:	f001 f8b6 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 80020ec:	4b51      	ldr	r3, [pc, #324]	@ (8002234 <main+0xdcc>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
				break;
 80020f2:	e05d      	b.n	80021b0 <main+0xd48>

			case 67:
				TxData = getTargetPosition(&tmc4671_controller);
 80020f4:	484d      	ldr	r0, [pc, #308]	@ (800222c <main+0xdc4>)
 80020f6:	f001 fa83 	bl	8003600 <getTargetPosition>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002230 <main+0xdc8>)
 8002100:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002102:	2100      	movs	r1, #0
 8002104:	4849      	ldr	r0, [pc, #292]	@ (800222c <main+0xdc4>)
 8002106:	f001 f8a7 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 800210a:	4b4a      	ldr	r3, [pc, #296]	@ (8002234 <main+0xdcc>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
				break;
 8002110:	e04e      	b.n	80021b0 <main+0xd48>

			case 68:
				TxData = getActualPosition(&tmc4671_controller);
 8002112:	4846      	ldr	r0, [pc, #280]	@ (800222c <main+0xdc4>)
 8002114:	f001 fa44 	bl	80035a0 <getActualPosition>
 8002118:	4603      	mov	r3, r0
 800211a:	461a      	mov	r2, r3
 800211c:	4b44      	ldr	r3, [pc, #272]	@ (8002230 <main+0xdc8>)
 800211e:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002120:	2100      	movs	r1, #0
 8002122:	4842      	ldr	r0, [pc, #264]	@ (800222c <main+0xdc4>)
 8002124:	f001 f898 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002128:	4b42      	ldr	r3, [pc, #264]	@ (8002234 <main+0xdcc>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
				break;
 800212e:	e03f      	b.n	80021b0 <main+0xd48>

			case 69:
				TxData = getCoilCurrent(&tmc4671_controller);
 8002130:	483e      	ldr	r0, [pc, #248]	@ (800222c <main+0xdc4>)
 8002132:	f001 f95c 	bl	80033ee <getCoilCurrent>
 8002136:	4603      	mov	r3, r0
 8002138:	4a3d      	ldr	r2, [pc, #244]	@ (8002230 <main+0xdc8>)
 800213a:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 800213c:	2100      	movs	r1, #0
 800213e:	483b      	ldr	r0, [pc, #236]	@ (800222c <main+0xdc4>)
 8002140:	f001 f88a 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002144:	4b3b      	ldr	r3, [pc, #236]	@ (8002234 <main+0xdcc>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
				break;
 800214a:	e031      	b.n	80021b0 <main+0xd48>

			case 70:
				TxData = getFirmwareVersion(&tmc4671_controller);
 800214c:	4837      	ldr	r0, [pc, #220]	@ (800222c <main+0xdc4>)
 800214e:	f001 fafd 	bl	800374c <getFirmwareVersion>
 8002152:	4603      	mov	r3, r0
 8002154:	4a36      	ldr	r2, [pc, #216]	@ (8002230 <main+0xdc8>)
 8002156:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002158:	2100      	movs	r1, #0
 800215a:	4834      	ldr	r0, [pc, #208]	@ (800222c <main+0xdc4>)
 800215c:	f001 f87c 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002160:	4b34      	ldr	r3, [pc, #208]	@ (8002234 <main+0xdcc>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
				break;
 8002166:	e023      	b.n	80021b0 <main+0xd48>

			case 200:
				TxData = 0;
 8002168:	4b31      	ldr	r3, [pc, #196]	@ (8002230 <main+0xdc8>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
				get_Execution_count++;
 800216e:	4b32      	ldr	r3, [pc, #200]	@ (8002238 <main+0xdd0>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b30      	ldr	r3, [pc, #192]	@ (8002238 <main+0xdd0>)
 8002178:	701a      	strb	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 800217a:	2100      	movs	r1, #0
 800217c:	482b      	ldr	r0, [pc, #172]	@ (800222c <main+0xdc4>)
 800217e:	f001 f86b 	bl	8003258 <setWrongCommandFlag>
				TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 8002182:	492e      	ldr	r1, [pc, #184]	@ (800223c <main+0xdd4>)
 8002184:	4829      	ldr	r0, [pc, #164]	@ (800222c <main+0xdc4>)
 8002186:	f001 f877 	bl	8003278 <getEventStatusWord>
 800218a:	4603      	mov	r3, r0
 800218c:	461a      	mov	r2, r3
 800218e:	4b2c      	ldr	r3, [pc, #176]	@ (8002240 <main+0xdd8>)
 8002190:	801a      	strh	r2, [r3, #0]
				continuous_tx_flag = false;
 8002192:	4b28      	ldr	r3, [pc, #160]	@ (8002234 <main+0xdcc>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
				break;
 8002198:	e00a      	b.n	80021b0 <main+0xd48>

			default:
				TxData = 0;
 800219a:	4b25      	ldr	r3, [pc, #148]	@ (8002230 <main+0xdc8>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, true);
 80021a0:	2101      	movs	r1, #1
 80021a2:	4822      	ldr	r0, [pc, #136]	@ (800222c <main+0xdc4>)
 80021a4:	f001 f858 	bl	8003258 <setWrongCommandFlag>
				continuous_tx_flag = false;
 80021a8:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <main+0xdcc>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
				break;
 80021ae:	bf00      	nop
		  }
		  etc_old_command = 0;
 80021b0:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <main+0xddc>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	801a      	strh	r2, [r3, #0]
		  etc_old_data = 0;
 80021b6:	4b24      	ldr	r3, [pc, #144]	@ (8002248 <main+0xde0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e05b      	b.n	8002276 <main+0xe0e>
	  } else if (accelerometer_flag) {
 80021be:	4b23      	ldr	r3, [pc, #140]	@ (800224c <main+0xde4>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d057      	beq.n	8002276 <main+0xe0e>
		  switch(etc_new_command) {
 80021c6:	4b22      	ldr	r3, [pc, #136]	@ (8002250 <main+0xde8>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f240 122f 	movw	r2, #303	@ 0x12f
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d040      	beq.n	8002254 <main+0xdec>
 80021d2:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 80021d6:	da48      	bge.n	800226a <main+0xe02>
 80021d8:	f240 122d 	movw	r2, #301	@ 0x12d
 80021dc:	4293      	cmp	r3, r2
 80021de:	d003      	beq.n	80021e8 <main+0xd80>
 80021e0:	f5b3 7f97 	cmp.w	r3, #302	@ 0x12e
 80021e4:	d011      	beq.n	800220a <main+0xda2>
 80021e6:	e040      	b.n	800226a <main+0xe02>
		  case 301:
			  get_Execution_count++;
 80021e8:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <main+0xdd0>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <main+0xdd0>)
 80021f2:	701a      	strb	r2, [r3, #0]
			  setWrongCommandFlag(&tmc4671_controller, false);
 80021f4:	2100      	movs	r1, #0
 80021f6:	480d      	ldr	r0, [pc, #52]	@ (800222c <main+0xdc4>)
 80021f8:	f001 f82e 	bl	8003258 <setWrongCommandFlag>
			  getAcceleration('X');
 80021fc:	2058      	movs	r0, #88	@ 0x58
 80021fe:	f7fe fe3b 	bl	8000e78 <getAcceleration>
			  continuous_tx_flag = true;
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <main+0xdcc>)
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
			  break;
 8002208:	e02f      	b.n	800226a <main+0xe02>

		  case 302:
			  get_Execution_count++;
 800220a:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <main+0xdd0>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <main+0xdd0>)
 8002214:	701a      	strb	r2, [r3, #0]
			  setWrongCommandFlag(&tmc4671_controller, false);
 8002216:	2100      	movs	r1, #0
 8002218:	4804      	ldr	r0, [pc, #16]	@ (800222c <main+0xdc4>)
 800221a:	f001 f81d 	bl	8003258 <setWrongCommandFlag>
			  getAcceleration('Y');
 800221e:	2059      	movs	r0, #89	@ 0x59
 8002220:	f7fe fe2a 	bl	8000e78 <getAcceleration>
			  continuous_tx_flag = true;
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <main+0xdcc>)
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
			  break;
 800222a:	e01e      	b.n	800226a <main+0xe02>
 800222c:	200002c0 	.word	0x200002c0
 8002230:	20000344 	.word	0x20000344
 8002234:	2000031e 	.word	0x2000031e
 8002238:	2000034c 	.word	0x2000034c
 800223c:	2000034a 	.word	0x2000034a
 8002240:	20000348 	.word	0x20000348
 8002244:	20000320 	.word	0x20000320
 8002248:	20000324 	.word	0x20000324
 800224c:	2000031f 	.word	0x2000031f
 8002250:	20000328 	.word	0x20000328

		  case 303:
			  setWrongCommandFlag(&tmc4671_controller, false);
 8002254:	2100      	movs	r1, #0
 8002256:	4831      	ldr	r0, [pc, #196]	@ (800231c <main+0xeb4>)
 8002258:	f000 fffe 	bl	8003258 <setWrongCommandFlag>
			  getAcceleration('Z');
 800225c:	205a      	movs	r0, #90	@ 0x5a
 800225e:	f7fe fe0b 	bl	8000e78 <getAcceleration>
			  continuous_tx_flag = true;
 8002262:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <main+0xeb8>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
			  break;
 8002268:	bf00      	nop
		  }
		  etc_old_command = 0;
 800226a:	4b2e      	ldr	r3, [pc, #184]	@ (8002324 <main+0xebc>)
 800226c:	2200      	movs	r2, #0
 800226e:	801a      	strh	r2, [r3, #0]
		  etc_old_data = 0;
 8002270:	4b2d      	ldr	r3, [pc, #180]	@ (8002328 <main+0xec0>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
		  no_error_drive = true;
	  }*/

	  /*---------------------------TRANSMIT DATA TO ETHERCAT ---------------------------------------------*/

	  if (set_command_flag) {
 8002276:	4b2d      	ldr	r3, [pc, #180]	@ (800232c <main+0xec4>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d028      	beq.n	80022d0 <main+0xe68>
		  if (!continuous_tx_flag) {
 800227e:	4b28      	ldr	r3, [pc, #160]	@ (8002320 <main+0xeb8>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	f083 0301 	eor.w	r3, r3, #1
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d021      	beq.n	80022d0 <main+0xe68>
			  set_sent_count++;
 800228c:	4b28      	ldr	r3, [pc, #160]	@ (8002330 <main+0xec8>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	b2da      	uxtb	r2, r3
 8002294:	4b26      	ldr	r3, [pc, #152]	@ (8002330 <main+0xec8>)
 8002296:	701a      	strb	r2, [r3, #0]
			  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 8002298:	4926      	ldr	r1, [pc, #152]	@ (8002334 <main+0xecc>)
 800229a:	4820      	ldr	r0, [pc, #128]	@ (800231c <main+0xeb4>)
 800229c:	f000 ffec 	bl	8003278 <getEventStatusWord>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b24      	ldr	r3, [pc, #144]	@ (8002338 <main+0xed0>)
 80022a6:	801a      	strh	r2, [r3, #0]
			  Etc_Buffer_In.LANLong[0] = ((uint32_t)TxStatus << 16) | (uint32_t)etc_new_command;
 80022a8:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <main+0xed0>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	4a23      	ldr	r2, [pc, #140]	@ (800233c <main+0xed4>)
 80022b0:	8812      	ldrh	r2, [r2, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	4a22      	ldr	r2, [pc, #136]	@ (8002340 <main+0xed8>)
 80022b6:	6013      	str	r3, [r2, #0]
			  Etc_Buffer_In.LANFloat[1] = (float)TxData;
 80022b8:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <main+0xedc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	ee07 3a90 	vmov	s15, r3
 80022c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <main+0xed8>)
 80022c6:	edc3 7a01 	vstr	s15, [r3, #4]
			  continuous_tx_flag = true;  // Mark that data has been sent
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <main+0xeb8>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if (get_command_flag) {
 80022d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002348 <main+0xee0>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f43f a8f0 	beq.w	80014ba <main+0x52>
		  get_sent_count++;
 80022da:	4b1c      	ldr	r3, [pc, #112]	@ (800234c <main+0xee4>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <main+0xee4>)
 80022e4:	701a      	strb	r2, [r3, #0]
			TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 80022e6:	4913      	ldr	r1, [pc, #76]	@ (8002334 <main+0xecc>)
 80022e8:	480c      	ldr	r0, [pc, #48]	@ (800231c <main+0xeb4>)
 80022ea:	f000 ffc5 	bl	8003278 <getEventStatusWord>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <main+0xed0>)
 80022f4:	801a      	strh	r2, [r3, #0]
			Etc_Buffer_In.LANLong[0] = ((uint32_t) TxStatus << 16) | (uint32_t) etc_new_command;
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <main+0xed0>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	041b      	lsls	r3, r3, #16
 80022fc:	4a0f      	ldr	r2, [pc, #60]	@ (800233c <main+0xed4>)
 80022fe:	8812      	ldrh	r2, [r2, #0]
 8002300:	4313      	orrs	r3, r2
 8002302:	4a0f      	ldr	r2, [pc, #60]	@ (8002340 <main+0xed8>)
 8002304:	6013      	str	r3, [r2, #0]
			Etc_Buffer_In.LANFloat[1] = (float)TxData;
 8002306:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <main+0xedc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002312:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <main+0xed8>)
 8002314:	edc3 7a01 	vstr	s15, [r3, #4]
	  if (pcap_init_ok) {
 8002318:	f7ff b8cf 	b.w	80014ba <main+0x52>
 800231c:	200002c0 	.word	0x200002c0
 8002320:	2000031e 	.word	0x2000031e
 8002324:	20000320 	.word	0x20000320
 8002328:	20000324 	.word	0x20000324
 800232c:	2000031c 	.word	0x2000031c
 8002330:	2000034d 	.word	0x2000034d
 8002334:	2000034a 	.word	0x2000034a
 8002338:	20000348 	.word	0x20000348
 800233c:	20000328 	.word	0x20000328
 8002340:	200000a4 	.word	0x200000a4
 8002344:	20000344 	.word	0x20000344
 8002348:	2000031d 	.word	0x2000031d
 800234c:	2000034e 	.word	0x2000034e

08002350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b094      	sub	sp, #80	@ 0x50
 8002354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002356:	f107 0320 	add.w	r3, r7, #32
 800235a:	2230      	movs	r2, #48	@ 0x30
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f004 ffb0 	bl	80072c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	4b27      	ldr	r3, [pc, #156]	@ (8002418 <SystemClock_Config+0xc8>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	4a26      	ldr	r2, [pc, #152]	@ (8002418 <SystemClock_Config+0xc8>)
 800237e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002382:	6413      	str	r3, [r2, #64]	@ 0x40
 8002384:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <SystemClock_Config+0xc8>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002390:	2300      	movs	r3, #0
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <SystemClock_Config+0xcc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a20      	ldr	r2, [pc, #128]	@ (800241c <SystemClock_Config+0xcc>)
 800239a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <SystemClock_Config+0xcc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023ac:	2301      	movs	r3, #1
 80023ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b6:	2302      	movs	r3, #2
 80023b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80023c0:	2319      	movs	r3, #25
 80023c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80023c4:	23c0      	movs	r3, #192	@ 0xc0
 80023c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023c8:	2302      	movs	r3, #2
 80023ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023cc:	2304      	movs	r3, #4
 80023ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d0:	f107 0320 	add.w	r3, r7, #32
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 f825 	bl	8005424 <HAL_RCC_OscConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023e0:	f000 fa1e 	bl	8002820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e4:	230f      	movs	r3, #15
 80023e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e8:	2302      	movs	r3, #2
 80023ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	2103      	movs	r1, #3
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fa87 	bl	8005914 <HAL_RCC_ClockConfig>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800240c:	f000 fa08 	bl	8002820 <Error_Handler>
  }
}
 8002410:	bf00      	nop
 8002412:	3750      	adds	r7, #80	@ 0x50
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	40007000 	.word	0x40007000

08002420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002424:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <MX_I2C1_Init+0x50>)
 8002426:	4a13      	ldr	r2, [pc, #76]	@ (8002474 <MX_I2C1_Init+0x54>)
 8002428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800242a:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <MX_I2C1_Init+0x50>)
 800242c:	4a12      	ldr	r2, [pc, #72]	@ (8002478 <MX_I2C1_Init+0x58>)
 800242e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <MX_I2C1_Init+0x50>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002436:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <MX_I2C1_Init+0x50>)
 8002438:	2200      	movs	r2, #0
 800243a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <MX_I2C1_Init+0x50>)
 800243e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002444:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <MX_I2C1_Init+0x50>)
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <MX_I2C1_Init+0x50>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002450:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <MX_I2C1_Init+0x50>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <MX_I2C1_Init+0x50>)
 8002458:	2200      	movs	r2, #0
 800245a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800245c:	4804      	ldr	r0, [pc, #16]	@ (8002470 <MX_I2C1_Init+0x50>)
 800245e:	f001 fccd 	bl	8003dfc <HAL_I2C_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002468:	f000 f9da 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200000c4 	.word	0x200000c4
 8002474:	40005400 	.word	0x40005400
 8002478:	000186a0 	.word	0x000186a0

0800247c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002480:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <MX_I2C2_Init+0x50>)
 8002482:	4a13      	ldr	r2, [pc, #76]	@ (80024d0 <MX_I2C2_Init+0x54>)
 8002484:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002486:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <MX_I2C2_Init+0x50>)
 8002488:	4a12      	ldr	r2, [pc, #72]	@ (80024d4 <MX_I2C2_Init+0x58>)
 800248a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800248c:	4b0f      	ldr	r3, [pc, #60]	@ (80024cc <MX_I2C2_Init+0x50>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002492:	4b0e      	ldr	r3, [pc, #56]	@ (80024cc <MX_I2C2_Init+0x50>)
 8002494:	2200      	movs	r2, #0
 8002496:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <MX_I2C2_Init+0x50>)
 800249a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800249e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a0:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <MX_I2C2_Init+0x50>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <MX_I2C2_Init+0x50>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ac:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <MX_I2C2_Init+0x50>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <MX_I2C2_Init+0x50>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024b8:	4804      	ldr	r0, [pc, #16]	@ (80024cc <MX_I2C2_Init+0x50>)
 80024ba:	f001 fc9f 	bl	8003dfc <HAL_I2C_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80024c4:	f000 f9ac 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000118 	.word	0x20000118
 80024d0:	40005800 	.word	0x40005800
 80024d4:	000186a0 	.word	0x000186a0

080024d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024dc:	4b17      	ldr	r3, [pc, #92]	@ (800253c <MX_SPI1_Init+0x64>)
 80024de:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <MX_SPI1_Init+0x68>)
 80024e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024e2:	4b16      	ldr	r3, [pc, #88]	@ (800253c <MX_SPI1_Init+0x64>)
 80024e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ea:	4b14      	ldr	r3, [pc, #80]	@ (800253c <MX_SPI1_Init+0x64>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f0:	4b12      	ldr	r3, [pc, #72]	@ (800253c <MX_SPI1_Init+0x64>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80024f6:	4b11      	ldr	r3, [pc, #68]	@ (800253c <MX_SPI1_Init+0x64>)
 80024f8:	2202      	movs	r2, #2
 80024fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <MX_SPI1_Init+0x64>)
 80024fe:	2201      	movs	r2, #1
 8002500:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002502:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <MX_SPI1_Init+0x64>)
 8002504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002508:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800250a:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <MX_SPI1_Init+0x64>)
 800250c:	2220      	movs	r2, #32
 800250e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002510:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <MX_SPI1_Init+0x64>)
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002516:	4b09      	ldr	r3, [pc, #36]	@ (800253c <MX_SPI1_Init+0x64>)
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <MX_SPI1_Init+0x64>)
 800251e:	2200      	movs	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002522:	4b06      	ldr	r3, [pc, #24]	@ (800253c <MX_SPI1_Init+0x64>)
 8002524:	220a      	movs	r2, #10
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002528:	4804      	ldr	r0, [pc, #16]	@ (800253c <MX_SPI1_Init+0x64>)
 800252a:	f003 fbbf 	bl	8005cac <HAL_SPI_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002534:	f000 f974 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	2000016c 	.word	0x2000016c
 8002540:	40013000 	.word	0x40013000

08002544 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002548:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <MX_SPI2_Init+0x64>)
 800254a:	4a18      	ldr	r2, [pc, #96]	@ (80025ac <MX_SPI2_Init+0x68>)
 800254c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800254e:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002550:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002554:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002556:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800255c:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <MX_SPI2_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002564:	2202      	movs	r2, #2
 8002566:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002568:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <MX_SPI2_Init+0x64>)
 800256a:	2201      	movs	r2, #1
 800256c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002574:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002578:	2218      	movs	r2, #24
 800257a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800257c:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <MX_SPI2_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002582:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002588:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <MX_SPI2_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002590:	220a      	movs	r2, #10
 8002592:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002594:	4804      	ldr	r0, [pc, #16]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002596:	f003 fb89 	bl	8005cac <HAL_SPI_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80025a0:	f000 f93e 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200001c4 	.word	0x200001c4
 80025ac:	40003800 	.word	0x40003800

080025b0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80025b4:	4b17      	ldr	r3, [pc, #92]	@ (8002614 <MX_SPI5_Init+0x64>)
 80025b6:	4a18      	ldr	r2, [pc, #96]	@ (8002618 <MX_SPI5_Init+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80025ba:	4b16      	ldr	r3, [pc, #88]	@ (8002614 <MX_SPI5_Init+0x64>)
 80025bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025c0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80025c2:	4b14      	ldr	r3, [pc, #80]	@ (8002614 <MX_SPI5_Init+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c8:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <MX_SPI5_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025ce:	4b11      	ldr	r3, [pc, #68]	@ (8002614 <MX_SPI5_Init+0x64>)
 80025d0:	2202      	movs	r2, #2
 80025d2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <MX_SPI5_Init+0x64>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80025da:	4b0e      	ldr	r3, [pc, #56]	@ (8002614 <MX_SPI5_Init+0x64>)
 80025dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025e0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <MX_SPI5_Init+0x64>)
 80025e4:	2208      	movs	r2, #8
 80025e6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <MX_SPI5_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ee:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <MX_SPI5_Init+0x64>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f4:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <MX_SPI5_Init+0x64>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80025fa:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <MX_SPI5_Init+0x64>)
 80025fc:	220a      	movs	r2, #10
 80025fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	@ (8002614 <MX_SPI5_Init+0x64>)
 8002602:	f003 fb53 	bl	8005cac <HAL_SPI_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800260c:	f000 f908 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000021c 	.word	0x2000021c
 8002618:	40015000 	.word	0x40015000

0800261c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002630:	463b      	mov	r3, r7
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002638:	4b1d      	ldr	r3, [pc, #116]	@ (80026b0 <MX_TIM4_Init+0x94>)
 800263a:	4a1e      	ldr	r2, [pc, #120]	@ (80026b4 <MX_TIM4_Init+0x98>)
 800263c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 800263e:	4b1c      	ldr	r3, [pc, #112]	@ (80026b0 <MX_TIM4_Init+0x94>)
 8002640:	225f      	movs	r2, #95	@ 0x5f
 8002642:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002644:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <MX_TIM4_Init+0x94>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800264a:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <MX_TIM4_Init+0x94>)
 800264c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002650:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002652:	4b17      	ldr	r3, [pc, #92]	@ (80026b0 <MX_TIM4_Init+0x94>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002658:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <MX_TIM4_Init+0x94>)
 800265a:	2200      	movs	r2, #0
 800265c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800265e:	4814      	ldr	r0, [pc, #80]	@ (80026b0 <MX_TIM4_Init+0x94>)
 8002660:	f004 f8fa 	bl	8006858 <HAL_TIM_Base_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800266a:	f000 f8d9 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002672:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	4619      	mov	r1, r3
 800267a:	480d      	ldr	r0, [pc, #52]	@ (80026b0 <MX_TIM4_Init+0x94>)
 800267c:	f004 f9bd 	bl	80069fa <HAL_TIM_ConfigClockSource>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002686:	f000 f8cb 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002692:	463b      	mov	r3, r7
 8002694:	4619      	mov	r1, r3
 8002696:	4806      	ldr	r0, [pc, #24]	@ (80026b0 <MX_TIM4_Init+0x94>)
 8002698:	f004 fb9c 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80026a2:	f000 f8bd 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000274 	.word	0x20000274
 80026b4:	40000800 	.word	0x40000800

080026b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	@ 0x28
 80026bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
 80026cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002810 <MX_GPIO_Init+0x158>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	4a4e      	ldr	r2, [pc, #312]	@ (8002810 <MX_GPIO_Init+0x158>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026de:	4b4c      	ldr	r3, [pc, #304]	@ (8002810 <MX_GPIO_Init+0x158>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b48      	ldr	r3, [pc, #288]	@ (8002810 <MX_GPIO_Init+0x158>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a47      	ldr	r2, [pc, #284]	@ (8002810 <MX_GPIO_Init+0x158>)
 80026f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b45      	ldr	r3, [pc, #276]	@ (8002810 <MX_GPIO_Init+0x158>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b41      	ldr	r3, [pc, #260]	@ (8002810 <MX_GPIO_Init+0x158>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	4a40      	ldr	r2, [pc, #256]	@ (8002810 <MX_GPIO_Init+0x158>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6313      	str	r3, [r2, #48]	@ 0x30
 8002716:	4b3e      	ldr	r3, [pc, #248]	@ (8002810 <MX_GPIO_Init+0x158>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	4b3a      	ldr	r3, [pc, #232]	@ (8002810 <MX_GPIO_Init+0x158>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	4a39      	ldr	r2, [pc, #228]	@ (8002810 <MX_GPIO_Init+0x158>)
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	6313      	str	r3, [r2, #48]	@ 0x30
 8002732:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <MX_GPIO_Init+0x158>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800273e:	2200      	movs	r2, #0
 8002740:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002744:	4833      	ldr	r0, [pc, #204]	@ (8002814 <MX_GPIO_Init+0x15c>)
 8002746:	f001 fb3f 	bl	8003dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TMC4671_CS_Pin|ADXL345_CS_Pin|LAN9252_CS_Pin, GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	f640 2108 	movw	r1, #2568	@ 0xa08
 8002750:	4831      	ldr	r0, [pc, #196]	@ (8002818 <MX_GPIO_Init+0x160>)
 8002752:	f001 fb39 	bl	8003dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CTRL_EN_Pin, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800275c:	482f      	ldr	r0, [pc, #188]	@ (800281c <MX_GPIO_Init+0x164>)
 800275e:	f001 fb33 	bl	8003dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002762:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002768:	2301      	movs	r3, #1
 800276a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4619      	mov	r1, r3
 800277a:	4826      	ldr	r0, [pc, #152]	@ (8002814 <MX_GPIO_Init+0x15c>)
 800277c:	f001 f9a0 	bl	8003ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC4671_CS_Pin ADXL345_CS_Pin LAN9252_CS_Pin */
  GPIO_InitStruct.Pin = TMC4671_CS_Pin|ADXL345_CS_Pin|LAN9252_CS_Pin;
 8002780:	f640 2308 	movw	r3, #2568	@ 0xa08
 8002784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002786:	2301      	movs	r3, #1
 8002788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	4619      	mov	r1, r3
 8002798:	481f      	ldr	r0, [pc, #124]	@ (8002818 <MX_GPIO_Init+0x160>)
 800279a:	f001 f991 	bl	8003ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC6100_CS_Pin */
  GPIO_InitStruct.Pin = TMC6100_CS_Pin;
 800279e:	2310      	movs	r3, #16
 80027a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMC6100_CS_GPIO_Port, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	4819      	ldr	r0, [pc, #100]	@ (8002818 <MX_GPIO_Init+0x160>)
 80027b2:	f001 f985 	bl	8003ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC_STATUS_Pin */
  GPIO_InitStruct.Pin = TMC_STATUS_Pin;
 80027b6:	2302      	movs	r3, #2
 80027b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMC_STATUS_GPIO_Port, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	4814      	ldr	r0, [pc, #80]	@ (800281c <MX_GPIO_Init+0x164>)
 80027ca:	f001 f979 	bl	8003ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_INDEX_Pin */
  GPIO_InitStruct.Pin = ENC_INDEX_Pin;
 80027ce:	2304      	movs	r3, #4
 80027d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80027d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_INDEX_GPIO_Port, &GPIO_InitStruct);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4619      	mov	r1, r3
 80027e2:	480e      	ldr	r0, [pc, #56]	@ (800281c <MX_GPIO_Init+0x164>)
 80027e4:	f001 f96c 	bl	8003ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTRL_EN_Pin */
  GPIO_InitStruct.Pin = CTRL_EN_Pin;
 80027e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ee:	2301      	movs	r3, #1
 80027f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CTRL_EN_GPIO_Port, &GPIO_InitStruct);
 80027fa:	f107 0314 	add.w	r3, r7, #20
 80027fe:	4619      	mov	r1, r3
 8002800:	4806      	ldr	r0, [pc, #24]	@ (800281c <MX_GPIO_Init+0x164>)
 8002802:	f001 f95d 	bl	8003ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002806:	bf00      	nop
 8002808:	3728      	adds	r7, #40	@ 0x28
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	40020800 	.word	0x40020800
 8002818:	40020000 	.word	0x40020000
 800281c:	40020400 	.word	0x40020400

08002820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002824:	b672      	cpsid	i
}
 8002826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <Error_Handler+0x8>

0800282c <initMovingAverage>:
#include "moving_average.h"

void initMovingAverage(MovingAverage *mAvg) {
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MOVING_AVERAGE_LENGTH; i++) {
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e007      	b.n	800284a <initMovingAverage+0x1e>
        mAvg->buffer[i] = 0;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	2100      	movs	r1, #0
 8002840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < MOVING_AVERAGE_LENGTH; i++) {
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3301      	adds	r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b0e      	cmp	r3, #14
 800284e:	ddf4      	ble.n	800283a <initMovingAverage+0xe>
    }
    mAvg->counter = 0;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	879a      	strh	r2, [r3, #60]	@ 0x3c
    mAvg->sum = 0;
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    mAvg->out = 0;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <updateMovingAverage>:

void updateMovingAverage(MovingAverage *mAvg, uint32_t newValue) {
 8002876:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
    mAvg->sum -= mAvg->buffer[mAvg->counter];
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002888:	68f9      	ldr	r1, [r7, #12]
 800288a:	8f89      	ldrh	r1, [r1, #60]	@ 0x3c
 800288c:	4608      	mov	r0, r1
 800288e:	68f9      	ldr	r1, [r7, #12]
 8002890:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002894:	2000      	movs	r0, #0
 8002896:	4688      	mov	r8, r1
 8002898:	4681      	mov	r9, r0
 800289a:	ebb2 0108 	subs.w	r1, r2, r8
 800289e:	6039      	str	r1, [r7, #0]
 80028a0:	eb63 0309 	sbc.w	r3, r3, r9
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80028ac:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
    mAvg->buffer[mAvg->counter] = newValue;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80028b4:	4619      	mov	r1, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    mAvg->sum += newValue;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	2000      	movs	r0, #0
 80028c8:	460c      	mov	r4, r1
 80028ca:	4605      	mov	r5, r0
 80028cc:	eb12 0a04 	adds.w	sl, r2, r4
 80028d0:	eb43 0b05 	adc.w	fp, r3, r5
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	e9c3 ab12 	strd	sl, fp, [r3, #72]	@ 0x48

    mAvg->counter++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80028de:	3301      	adds	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
    if (mAvg->counter >= MOVING_AVERAGE_LENGTH) {
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80028ea:	2b0e      	cmp	r3, #14
 80028ec:	d902      	bls.n	80028f4 <updateMovingAverage+0x7e>
        mAvg->counter = 0;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
    }

    mAvg->out = mAvg->sum / MOVING_AVERAGE_LENGTH;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80028fa:	f04f 020f 	mov.w	r2, #15
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	f7fe f8d3 	bl	8000aac <__aeabi_uldivmod>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002918 <pcap_init>:
uint32_t pcap_capval_check1;
uint32_t pcap_capval_check2;
uint32_t pcap_capval_avg;

// init / check the pcap interface on I2C, return true if init ok
bool pcap_init(){
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af02      	add	r7, sp, #8
	uint8_t buf[10] = {0};
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret;
    // read and check TEST data 1 byte
	buf[0] = PCAP_TEST_ADDR;
 800292c:	237e      	movs	r3, #126	@ 0x7e
 800292e:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 8002930:	1d3a      	adds	r2, r7, #4
 8002932:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2301      	movs	r3, #1
 800293a:	2150      	movs	r1, #80	@ 0x50
 800293c:	481c      	ldr	r0, [pc, #112]	@ (80029b0 <pcap_init+0x98>)
 800293e:	f001 fba1 	bl	8004084 <HAL_I2C_Master_Transmit>
 8002942:	4603      	mov	r3, r0
 8002944:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <pcap_init+0x42>
		printf("Error sending Pcap test command, code = %d\n", ret);
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	4619      	mov	r1, r3
 8002950:	4818      	ldr	r0, [pc, #96]	@ (80029b4 <pcap_init+0x9c>)
 8002952:	f004 fb6f 	bl	8007034 <iprintf>
		return false;
 8002956:	2300      	movs	r3, #0
 8002958:	e025      	b.n	80029a6 <pcap_init+0x8e>
	}else{
		ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 800295a:	1d3a      	adds	r2, r7, #4
 800295c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	2301      	movs	r3, #1
 8002964:	2150      	movs	r1, #80	@ 0x50
 8002966:	4812      	ldr	r0, [pc, #72]	@ (80029b0 <pcap_init+0x98>)
 8002968:	f001 fc8a 	bl	8004280 <HAL_I2C_Master_Receive>
 800296c:	4603      	mov	r3, r0
 800296e:	73fb      	strb	r3, [r7, #15]
		if(ret != HAL_OK){
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <pcap_init+0x6c>
			printf("Bad response while reading Pcap test command, bytes received = %d\n", ret);
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	4619      	mov	r1, r3
 800297a:	480f      	ldr	r0, [pc, #60]	@ (80029b8 <pcap_init+0xa0>)
 800297c:	f004 fb5a 	bl	8007034 <iprintf>
			return false;
 8002980:	2300      	movs	r3, #0
 8002982:	e010      	b.n	80029a6 <pcap_init+0x8e>
		}else{
			if(buf[0] != PCAP_TEST_DATA){
 8002984:	793b      	ldrb	r3, [r7, #4]
 8002986:	2b11      	cmp	r3, #17
 8002988:	d006      	beq.n	8002998 <pcap_init+0x80>
				printf("Bad response received from Pcap test command, data received = %x\n", buf[0]);
 800298a:	793b      	ldrb	r3, [r7, #4]
 800298c:	4619      	mov	r1, r3
 800298e:	480b      	ldr	r0, [pc, #44]	@ (80029bc <pcap_init+0xa4>)
 8002990:	f004 fb50 	bl	8007034 <iprintf>
				return false;
 8002994:	2300      	movs	r3, #0
 8002996:	e006      	b.n	80029a6 <pcap_init+0x8e>
			}
		}
	}
	initMovingAverage(&mAvg);
 8002998:	4809      	ldr	r0, [pc, #36]	@ (80029c0 <pcap_init+0xa8>)
 800299a:	f7ff ff47 	bl	800282c <initMovingAverage>


	printf("Pcap test command succeeded\n");
 800299e:	4809      	ldr	r0, [pc, #36]	@ (80029c4 <pcap_init+0xac>)
 80029a0:	f004 fbb0 	bl	8007104 <puts>
	return true;
 80029a4:	2301      	movs	r3, #1
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200000c4 	.word	0x200000c4
 80029b4:	08007de4 	.word	0x08007de4
 80029b8:	08007e10 	.word	0x08007e10
 80029bc:	08007e54 	.word	0x08007e54
 80029c0:	20000358 	.word	0x20000358
 80029c4:	08007e98 	.word	0x08007e98

080029c8 <pcap_scan>:

// one pcap scan - get sts, cap, temp values
PcapErrorStatus pcap_scan(){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af02      	add	r7, sp, #8
	uint8_t buf[10] = {0};
 80029ce:	2300      	movs	r3, #0
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret;
	PcapErrorStatus errorStatus = PCAP_NO_ERROR;
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]

	// read and display error status 2 bytes
	buf[0] = PCAP_STS_ADDR;
 80029de:	2361      	movs	r3, #97	@ 0x61
 80029e0:	703b      	strb	r3, [r7, #0]
	ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 80029e2:	463a      	mov	r2, r7
 80029e4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2301      	movs	r3, #1
 80029ec:	2150      	movs	r1, #80	@ 0x50
 80029ee:	48a5      	ldr	r0, [pc, #660]	@ (8002c84 <pcap_scan+0x2bc>)
 80029f0:	f001 fb48 	bl	8004084 <HAL_I2C_Master_Transmit>
 80029f4:	4603      	mov	r3, r0
 80029f6:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK){
 80029f8:	7bbb      	ldrb	r3, [r7, #14]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <pcap_scan+0x4a>
		printf("Error sending RD STS command, code = %d\n", ret);
 80029fe:	7bbb      	ldrb	r3, [r7, #14]
 8002a00:	4619      	mov	r1, r3
 8002a02:	48a1      	ldr	r0, [pc, #644]	@ (8002c88 <pcap_scan+0x2c0>)
 8002a04:	f004 fb16 	bl	8007034 <iprintf>
		errorStatus |= PCAP_COMM_ERROR;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
		return;
 8002a10:	e133      	b.n	8002c7a <pcap_scan+0x2b2>
	}else{
		ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 2, PCAP_MAX_DELAY);
 8002a12:	463a      	mov	r2, r7
 8002a14:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	2150      	movs	r1, #80	@ 0x50
 8002a1e:	4899      	ldr	r0, [pc, #612]	@ (8002c84 <pcap_scan+0x2bc>)
 8002a20:	f001 fc2e 	bl	8004280 <HAL_I2C_Master_Receive>
 8002a24:	4603      	mov	r3, r0
 8002a26:	73bb      	strb	r3, [r7, #14]
		if(ret != HAL_OK){
 8002a28:	7bbb      	ldrb	r3, [r7, #14]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <pcap_scan+0x7a>
			printf("Bad response while reading RD STS command, bytes received = %d\n", ret);
 8002a2e:	7bbb      	ldrb	r3, [r7, #14]
 8002a30:	4619      	mov	r1, r3
 8002a32:	4896      	ldr	r0, [pc, #600]	@ (8002c8c <pcap_scan+0x2c4>)
 8002a34:	f004 fafe 	bl	8007034 <iprintf>
			errorStatus |= PCAP_COMM_ERROR;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
			return;
 8002a40:	e11b      	b.n	8002c7a <pcap_scan+0x2b2>
		}else{
			uint16_t pcap_sts = ((uint16_t)buf[1] << 8) | (uint16_t)buf[0];
 8002a42:	787b      	ldrb	r3, [r7, #1]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	b21a      	sxth	r2, r3
 8002a48:	783b      	ldrb	r3, [r7, #0]
 8002a4a:	b21b      	sxth	r3, r3
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	b21b      	sxth	r3, r3
 8002a50:	81bb      	strh	r3, [r7, #12]
			errorStatus = PCAP_NO_ERROR;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
			printf("Status = %x\n", pcap_sts);
 8002a56:	89bb      	ldrh	r3, [r7, #12]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	488d      	ldr	r0, [pc, #564]	@ (8002c90 <pcap_scan+0x2c8>)
 8002a5c:	f004 faea 	bl	8007034 <iprintf>
		}
	}

	// read and display cap value 4 bytes
	buf[0] = PCAP_CAP_ADDR;
 8002a60:	2340      	movs	r3, #64	@ 0x40
 8002a62:	703b      	strb	r3, [r7, #0]
	buf[1] = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	707b      	strb	r3, [r7, #1]
	ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 8002a68:	463a      	mov	r2, r7
 8002a6a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2301      	movs	r3, #1
 8002a72:	2150      	movs	r1, #80	@ 0x50
 8002a74:	4883      	ldr	r0, [pc, #524]	@ (8002c84 <pcap_scan+0x2bc>)
 8002a76:	f001 fb05 	bl	8004084 <HAL_I2C_Master_Transmit>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK){
 8002a7e:	7bbb      	ldrb	r3, [r7, #14]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00c      	beq.n	8002a9e <pcap_scan+0xd6>
		printf("Error sending RD CAP command, code = %d\n", ret);
 8002a84:	7bbb      	ldrb	r3, [r7, #14]
 8002a86:	4619      	mov	r1, r3
 8002a88:	4882      	ldr	r0, [pc, #520]	@ (8002c94 <pcap_scan+0x2cc>)
 8002a8a:	f004 fad3 	bl	8007034 <iprintf>
		Etc_Buffer_In.LANByte[5] |= PCAP_COMM_ERROR;
 8002a8e:	4b82      	ldr	r3, [pc, #520]	@ (8002c98 <pcap_scan+0x2d0>)
 8002a90:	795b      	ldrb	r3, [r3, #5]
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	4b7f      	ldr	r3, [pc, #508]	@ (8002c98 <pcap_scan+0x2d0>)
 8002a9a:	715a      	strb	r2, [r3, #5]
		return;
 8002a9c:	e0ed      	b.n	8002c7a <pcap_scan+0x2b2>
	}else{
		ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 4, PCAP_MAX_DELAY);
 8002a9e:	463a      	mov	r2, r7
 8002aa0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	2150      	movs	r1, #80	@ 0x50
 8002aaa:	4876      	ldr	r0, [pc, #472]	@ (8002c84 <pcap_scan+0x2bc>)
 8002aac:	f001 fbe8 	bl	8004280 <HAL_I2C_Master_Receive>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	73bb      	strb	r3, [r7, #14]
		if(ret != HAL_OK){
 8002ab4:	7bbb      	ldrb	r3, [r7, #14]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <pcap_scan+0x106>
			printf("Bad response while reading RD CAP command, bytes received = %d\n", ret);
 8002aba:	7bbb      	ldrb	r3, [r7, #14]
 8002abc:	4619      	mov	r1, r3
 8002abe:	4877      	ldr	r0, [pc, #476]	@ (8002c9c <pcap_scan+0x2d4>)
 8002ac0:	f004 fab8 	bl	8007034 <iprintf>
			errorStatus |= PCAP_COMM_ERROR;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
			return;
 8002acc:	e0d5      	b.n	8002c7a <pcap_scan+0x2b2>
		}else{
			pcap_capval_check1 = ((uint32_t)buf[3] << 24) | ((uint32_t)buf[2] << 16) | ((uint32_t)buf[1] << 8) | (uint32_t)buf[0];
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	061a      	lsls	r2, r3, #24
 8002ad2:	78bb      	ldrb	r3, [r7, #2]
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	787b      	ldrb	r3, [r7, #1]
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	4313      	orrs	r3, r2
 8002ade:	783a      	ldrb	r2, [r7, #0]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	4a6f      	ldr	r2, [pc, #444]	@ (8002ca0 <pcap_scan+0x2d8>)
 8002ae4:	6013      	str	r3, [r2, #0]

		   delay_us (DEBOUNCE_TIME_US);
 8002ae6:	2096      	movs	r0, #150	@ 0x96
 8002ae8:	f000 f8ee 	bl	8002cc8 <delay_us>

			buf[0] = PCAP_CAP_ADDR;
 8002aec:	2340      	movs	r3, #64	@ 0x40
 8002aee:	703b      	strb	r3, [r7, #0]
			buf[1] = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	707b      	strb	r3, [r7, #1]
			ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 8002af4:	463a      	mov	r2, r7
 8002af6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2301      	movs	r3, #1
 8002afe:	2150      	movs	r1, #80	@ 0x50
 8002b00:	4860      	ldr	r0, [pc, #384]	@ (8002c84 <pcap_scan+0x2bc>)
 8002b02:	f001 fabf 	bl	8004084 <HAL_I2C_Master_Transmit>
 8002b06:	4603      	mov	r3, r0
 8002b08:	73bb      	strb	r3, [r7, #14]
			if(ret != HAL_OK){
 8002b0a:	7bbb      	ldrb	r3, [r7, #14]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <pcap_scan+0x15c>
				printf("Error sending RD CAP command, code = %d\n", ret);
 8002b10:	7bbb      	ldrb	r3, [r7, #14]
 8002b12:	4619      	mov	r1, r3
 8002b14:	485f      	ldr	r0, [pc, #380]	@ (8002c94 <pcap_scan+0x2cc>)
 8002b16:	f004 fa8d 	bl	8007034 <iprintf>
				errorStatus |= PCAP_COMM_ERROR;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
				return;
 8002b22:	e0aa      	b.n	8002c7a <pcap_scan+0x2b2>
			}else{
				ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 4, PCAP_MAX_DELAY);
 8002b24:	463a      	mov	r2, r7
 8002b26:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	2150      	movs	r1, #80	@ 0x50
 8002b30:	4854      	ldr	r0, [pc, #336]	@ (8002c84 <pcap_scan+0x2bc>)
 8002b32:	f001 fba5 	bl	8004280 <HAL_I2C_Master_Receive>
 8002b36:	4603      	mov	r3, r0
 8002b38:	73bb      	strb	r3, [r7, #14]
				if(ret != HAL_OK){
 8002b3a:	7bbb      	ldrb	r3, [r7, #14]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d009      	beq.n	8002b54 <pcap_scan+0x18c>
					printf("Bad response while reading RD CAP command, bytes received = %d\n", ret);
 8002b40:	7bbb      	ldrb	r3, [r7, #14]
 8002b42:	4619      	mov	r1, r3
 8002b44:	4855      	ldr	r0, [pc, #340]	@ (8002c9c <pcap_scan+0x2d4>)
 8002b46:	f004 fa75 	bl	8007034 <iprintf>
					errorStatus |= PCAP_COMM_ERROR;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
					return;
 8002b52:	e092      	b.n	8002c7a <pcap_scan+0x2b2>
				}else{
					pcap_capval_check2 = ((uint32_t)buf[3] << 24) | ((uint32_t)buf[2] << 16) | ((uint32_t)buf[1] << 8) | (uint32_t)buf[0];
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	061a      	lsls	r2, r3, #24
 8002b58:	78bb      	ldrb	r3, [r7, #2]
 8002b5a:	041b      	lsls	r3, r3, #16
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	787b      	ldrb	r3, [r7, #1]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	4313      	orrs	r3, r2
 8002b64:	783a      	ldrb	r2, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	4a4e      	ldr	r2, [pc, #312]	@ (8002ca4 <pcap_scan+0x2dc>)
 8002b6a:	6013      	str	r3, [r2, #0]

					if(abs(pcap_capval_check1 - pcap_capval_check2) < DEBOUNCE_CAP_TOLERANCE){
 8002b6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca0 <pcap_scan+0x2d8>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca4 <pcap_scan+0x2dc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <pcap_scan+0x2e0>)
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	db33      	blt.n	8002be6 <pcap_scan+0x21e>
 8002b7e:	4b48      	ldr	r3, [pc, #288]	@ (8002ca0 <pcap_scan+0x2d8>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b48      	ldr	r3, [pc, #288]	@ (8002ca4 <pcap_scan+0x2dc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b48      	ldr	r3, [pc, #288]	@ (8002cac <pcap_scan+0x2e4>)
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	dc2a      	bgt.n	8002be6 <pcap_scan+0x21e>
						pcap_capval = pcap_capval_check2;
 8002b90:	4b44      	ldr	r3, [pc, #272]	@ (8002ca4 <pcap_scan+0x2dc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a46      	ldr	r2, [pc, #280]	@ (8002cb0 <pcap_scan+0x2e8>)
 8002b96:	6013      	str	r3, [r2, #0]

						if (pcap_capval > DEBOUNCE_CAP_TOLERANCE){
 8002b98:	4b45      	ldr	r3, [pc, #276]	@ (8002cb0 <pcap_scan+0x2e8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a45      	ldr	r2, [pc, #276]	@ (8002cb4 <pcap_scan+0x2ec>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d904      	bls.n	8002bac <pcap_scan+0x1e4>
							Etc_Buffer_In.LANLong[2] = pcap_capval;
 8002ba2:	4b43      	ldr	r3, [pc, #268]	@ (8002cb0 <pcap_scan+0x2e8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8002c98 <pcap_scan+0x2d0>)
 8002ba8:	6093      	str	r3, [r2, #8]
 8002baa:	e01c      	b.n	8002be6 <pcap_scan+0x21e>
						}
						else {
							updateMovingAverage(&mAvg, pcap_capval);
 8002bac:	4b40      	ldr	r3, [pc, #256]	@ (8002cb0 <pcap_scan+0x2e8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4841      	ldr	r0, [pc, #260]	@ (8002cb8 <pcap_scan+0x2f0>)
 8002bb4:	f7ff fe5f 	bl	8002876 <updateMovingAverage>
							pcap_capval_avg = mAvg.out;
 8002bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb8 <pcap_scan+0x2f0>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	4a3f      	ldr	r2, [pc, #252]	@ (8002cbc <pcap_scan+0x2f4>)
 8002bbe:	6013      	str	r3, [r2, #0]

							//Etc_Buffer_In.LANLong[6] = pcap_capval;
							Etc_Buffer_In.LANLong[2] = pcap_capval_avg;
 8002bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8002cbc <pcap_scan+0x2f4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a34      	ldr	r2, [pc, #208]	@ (8002c98 <pcap_scan+0x2d0>)
 8002bc6:	6093      	str	r3, [r2, #8]

							if (pcap_capval_avg == PCAP_TIP_TOUCH) {
 8002bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8002cbc <pcap_scan+0x2f4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d103      	bne.n	8002bda <pcap_scan+0x212>
								errorStatus |= PCAP_TIP_TOUCH_ERROR;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	73fb      	strb	r3, [r7, #15]
							}
							printf("Filtered Capacitive Value = %lu\n", pcap_capval_avg);
 8002bda:	4b38      	ldr	r3, [pc, #224]	@ (8002cbc <pcap_scan+0x2f4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4619      	mov	r1, r3
 8002be0:	4837      	ldr	r0, [pc, #220]	@ (8002cc0 <pcap_scan+0x2f8>)
 8002be2:	f004 fa27 	bl	8007034 <iprintf>
		}

	}

	//read and display temperature value 4 bytes
	buf[0] = PCAP_TEMP_ADDR;
 8002be6:	2358      	movs	r3, #88	@ 0x58
 8002be8:	703b      	strb	r3, [r7, #0]
	buf[1] = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	707b      	strb	r3, [r7, #1]
	buf[2] = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	70bb      	strb	r3, [r7, #2]
	buf[3] = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	70fb      	strb	r3, [r7, #3]
	ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 8002bf6:	463a      	mov	r2, r7
 8002bf8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2301      	movs	r3, #1
 8002c00:	2150      	movs	r1, #80	@ 0x50
 8002c02:	4820      	ldr	r0, [pc, #128]	@ (8002c84 <pcap_scan+0x2bc>)
 8002c04:	f001 fa3e 	bl	8004084 <HAL_I2C_Master_Transmit>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK){
 8002c0c:	7bbb      	ldrb	r3, [r7, #14]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <pcap_scan+0x25e>
		printf("Error sending RD CAP command, code = %d\n", ret);
 8002c12:	7bbb      	ldrb	r3, [r7, #14]
 8002c14:	4619      	mov	r1, r3
 8002c16:	481f      	ldr	r0, [pc, #124]	@ (8002c94 <pcap_scan+0x2cc>)
 8002c18:	f004 fa0c 	bl	8007034 <iprintf>
		errorStatus |= PCAP_COMM_ERROR;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
		return;
 8002c24:	e029      	b.n	8002c7a <pcap_scan+0x2b2>
	}else{
		ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 4, PCAP_MAX_DELAY);
 8002c26:	463a      	mov	r2, r7
 8002c28:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2304      	movs	r3, #4
 8002c30:	2150      	movs	r1, #80	@ 0x50
 8002c32:	4814      	ldr	r0, [pc, #80]	@ (8002c84 <pcap_scan+0x2bc>)
 8002c34:	f001 fb24 	bl	8004280 <HAL_I2C_Master_Receive>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	73bb      	strb	r3, [r7, #14]
		if(ret != HAL_OK){
 8002c3c:	7bbb      	ldrb	r3, [r7, #14]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <pcap_scan+0x28e>
			printf("Bad response while reading RD CAP command, bytes received = %d\n", ret);
 8002c42:	7bbb      	ldrb	r3, [r7, #14]
 8002c44:	4619      	mov	r1, r3
 8002c46:	4815      	ldr	r0, [pc, #84]	@ (8002c9c <pcap_scan+0x2d4>)
 8002c48:	f004 f9f4 	bl	8007034 <iprintf>
			errorStatus |= PCAP_COMM_ERROR;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
			return;
 8002c54:	e011      	b.n	8002c7a <pcap_scan+0x2b2>
		}else{
			pcap_tempval = ((uint32_t)buf[3] << 24) | ((uint32_t)buf[2] << 16) | ((uint32_t)buf[1] << 8) | (uint32_t)buf[0];
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	061a      	lsls	r2, r3, #24
 8002c5a:	78bb      	ldrb	r3, [r7, #2]
 8002c5c:	041b      	lsls	r3, r3, #16
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	4313      	orrs	r3, r2
 8002c66:	783a      	ldrb	r2, [r7, #0]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	4a16      	ldr	r2, [pc, #88]	@ (8002cc4 <pcap_scan+0x2fc>)
 8002c6c:	6013      	str	r3, [r2, #0]
			Etc_Buffer_In.LANLong[3] = pcap_tempval;
 8002c6e:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <pcap_scan+0x2fc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a09      	ldr	r2, [pc, #36]	@ (8002c98 <pcap_scan+0x2d0>)
 8002c74:	60d3      	str	r3, [r2, #12]
			// printf("Temperature Value = %lu\n", pcap_tempval);
		}
	}
	return errorStatus;
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	e7ff      	b.n	8002c7a <pcap_scan+0x2b2>
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200000c4 	.word	0x200000c4
 8002c88:	08007eb4 	.word	0x08007eb4
 8002c8c:	08007ee0 	.word	0x08007ee0
 8002c90:	08007f20 	.word	0x08007f20
 8002c94:	08007f30 	.word	0x08007f30
 8002c98:	200000a4 	.word	0x200000a4
 8002c9c:	08007f5c 	.word	0x08007f5c
 8002ca0:	200003b0 	.word	0x200003b0
 8002ca4:	200003b4 	.word	0x200003b4
 8002ca8:	fa0a1f01 	.word	0xfa0a1f01
 8002cac:	05f5e0ff 	.word	0x05f5e0ff
 8002cb0:	200003a8 	.word	0x200003a8
 8002cb4:	05f5e100 	.word	0x05f5e100
 8002cb8:	20000358 	.word	0x20000358
 8002cbc:	200003b8 	.word	0x200003b8
 8002cc0:	08007f9c 	.word	0x08007f9c
 8002cc4:	200003ac 	.word	0x200003ac

08002cc8 <delay_us>:


//This function is used to create delay in micro second.
void delay_us(uint16_t us) {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&PCAP_TIMER);
 8002cd2:	480a      	ldr	r0, [pc, #40]	@ (8002cfc <delay_us+0x34>)
 8002cd4:	f003 fe10 	bl	80068f8 <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COUNTER(&PCAP_TIMER, 0);  // set the counter value a 0
 8002cd8:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <delay_us+0x34>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	625a      	str	r2, [r3, #36]	@ 0x24

	while (__HAL_TIM_GET_COUNTER(&PCAP_TIMER) < us);  // wait for the counter to reach the us input in the parameter
 8002ce0:	bf00      	nop
 8002ce2:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <delay_us+0x34>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d3f9      	bcc.n	8002ce2 <delay_us+0x1a>

	HAL_TIM_Base_Stop(&PCAP_TIMER);
 8002cee:	4803      	ldr	r0, [pc, #12]	@ (8002cfc <delay_us+0x34>)
 8002cf0:	f003 fe5c 	bl	80069ac <HAL_TIM_Base_Stop>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000274 	.word	0x20000274

08002d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <HAL_MspInit+0x4c>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8002d4c <HAL_MspInit+0x4c>)
 8002d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d16:	4b0d      	ldr	r3, [pc, #52]	@ (8002d4c <HAL_MspInit+0x4c>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <HAL_MspInit+0x4c>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	4a08      	ldr	r2, [pc, #32]	@ (8002d4c <HAL_MspInit+0x4c>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d32:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <HAL_MspInit+0x4c>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800

08002d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08c      	sub	sp, #48	@ 0x30
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	f107 031c 	add.w	r3, r7, #28
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e5c <HAL_I2C_MspInit+0x10c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d12c      	bne.n	8002dcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	4b3a      	ldr	r3, [pc, #232]	@ (8002e60 <HAL_I2C_MspInit+0x110>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	4a39      	ldr	r2, [pc, #228]	@ (8002e60 <HAL_I2C_MspInit+0x110>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d82:	4b37      	ldr	r3, [pc, #220]	@ (8002e60 <HAL_I2C_MspInit+0x110>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = PCAP_SCL_Pin|PCAP_SDA_Pin;
 8002d8e:	23c0      	movs	r3, #192	@ 0xc0
 8002d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d92:	2312      	movs	r3, #18
 8002d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d9e:	2304      	movs	r3, #4
 8002da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da2:	f107 031c 	add.w	r3, r7, #28
 8002da6:	4619      	mov	r1, r3
 8002da8:	482e      	ldr	r0, [pc, #184]	@ (8002e64 <HAL_I2C_MspInit+0x114>)
 8002daa:	f000 fe89 	bl	8003ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e60 <HAL_I2C_MspInit+0x110>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	4a2a      	ldr	r2, [pc, #168]	@ (8002e60 <HAL_I2C_MspInit+0x110>)
 8002db8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dbe:	4b28      	ldr	r3, [pc, #160]	@ (8002e60 <HAL_I2C_MspInit+0x110>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002dca:	e042      	b.n	8002e52 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a25      	ldr	r2, [pc, #148]	@ (8002e68 <HAL_I2C_MspInit+0x118>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d13d      	bne.n	8002e52 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	4b21      	ldr	r3, [pc, #132]	@ (8002e60 <HAL_I2C_MspInit+0x110>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	4a20      	ldr	r2, [pc, #128]	@ (8002e60 <HAL_I2C_MspInit+0x110>)
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e60 <HAL_I2C_MspInit+0x110>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BRL64WE2_SCL_Pin;
 8002df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002df8:	2312      	movs	r3, #18
 8002dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e00:	2303      	movs	r3, #3
 8002e02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e04:	2304      	movs	r3, #4
 8002e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BRL64WE2_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4815      	ldr	r0, [pc, #84]	@ (8002e64 <HAL_I2C_MspInit+0x114>)
 8002e10:	f000 fe56 	bl	8003ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BRL64WE2_SDA_Pin;
 8002e14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e1a:	2312      	movs	r3, #18
 8002e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e22:	2303      	movs	r3, #3
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002e26:	2309      	movs	r3, #9
 8002e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BRL64WE2_SDA_GPIO_Port, &GPIO_InitStruct);
 8002e2a:	f107 031c 	add.w	r3, r7, #28
 8002e2e:	4619      	mov	r1, r3
 8002e30:	480c      	ldr	r0, [pc, #48]	@ (8002e64 <HAL_I2C_MspInit+0x114>)
 8002e32:	f000 fe45 	bl	8003ac0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <HAL_I2C_MspInit+0x110>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	4a08      	ldr	r2, [pc, #32]	@ (8002e60 <HAL_I2C_MspInit+0x110>)
 8002e40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_I2C_MspInit+0x110>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
}
 8002e52:	bf00      	nop
 8002e54:	3730      	adds	r7, #48	@ 0x30
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40005400 	.word	0x40005400
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40005800 	.word	0x40005800

08002e6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b090      	sub	sp, #64	@ 0x40
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a6a      	ldr	r2, [pc, #424]	@ (8003034 <HAL_SPI_MspInit+0x1c8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d14a      	bne.n	8002f24 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e92:	4b69      	ldr	r3, [pc, #420]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e96:	4a68      	ldr	r2, [pc, #416]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002e98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e9e:	4b66      	ldr	r3, [pc, #408]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eae:	4b62      	ldr	r3, [pc, #392]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	4a61      	ldr	r2, [pc, #388]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eba:	4b5f      	ldr	r3, [pc, #380]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
 8002eca:	4b5b      	ldr	r3, [pc, #364]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	4a5a      	ldr	r2, [pc, #360]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed6:	4b58      	ldr	r3, [pc, #352]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	623b      	str	r3, [r7, #32]
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TMC_CLK_Pin;
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ef2:	2305      	movs	r3, #5
 8002ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TMC_CLK_GPIO_Port, &GPIO_InitStruct);
 8002ef6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002efa:	4619      	mov	r1, r3
 8002efc:	484f      	ldr	r0, [pc, #316]	@ (800303c <HAL_SPI_MspInit+0x1d0>)
 8002efe:	f000 fddf 	bl	8003ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TMC_MISO_Pin|TMC_MOSI_Pin;
 8002f02:	2330      	movs	r3, #48	@ 0x30
 8002f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f12:	2305      	movs	r3, #5
 8002f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4848      	ldr	r0, [pc, #288]	@ (8003040 <HAL_SPI_MspInit+0x1d4>)
 8002f1e:	f000 fdcf 	bl	8003ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002f22:	e082      	b.n	800302a <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a46      	ldr	r2, [pc, #280]	@ (8003044 <HAL_SPI_MspInit+0x1d8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d12d      	bne.n	8002f8a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	4b41      	ldr	r3, [pc, #260]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	4a40      	ldr	r2, [pc, #256]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	4a39      	ldr	r2, [pc, #228]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002f54:	f043 0302 	orr.w	r3, r3, #2
 8002f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f5a:	4b37      	ldr	r3, [pc, #220]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ADXL345_CLK_Pin|ADXL345_MISO_Pin|ADXL345_MOSI_Pin;
 8002f66:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f78:	2305      	movs	r3, #5
 8002f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f80:	4619      	mov	r1, r3
 8002f82:	482f      	ldr	r0, [pc, #188]	@ (8003040 <HAL_SPI_MspInit+0x1d4>)
 8002f84:	f000 fd9c 	bl	8003ac0 <HAL_GPIO_Init>
}
 8002f88:	e04f      	b.n	800302a <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI5)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8003048 <HAL_SPI_MspInit+0x1dc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d14a      	bne.n	800302a <HAL_SPI_MspInit+0x1be>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	4b27      	ldr	r3, [pc, #156]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9c:	4a26      	ldr	r2, [pc, #152]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fa2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fa4:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	4b20      	ldr	r3, [pc, #128]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002fba:	f043 0302 	orr.w	r3, r3, #2
 8002fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	4a18      	ldr	r2, [pc, #96]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fdc:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <HAL_SPI_MspInit+0x1cc>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LAN9252_SCK_Pin;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8002ff8:	2306      	movs	r3, #6
 8002ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(LAN9252_SCK_GPIO_Port, &GPIO_InitStruct);
 8002ffc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003000:	4619      	mov	r1, r3
 8003002:	480f      	ldr	r0, [pc, #60]	@ (8003040 <HAL_SPI_MspInit+0x1d4>)
 8003004:	f000 fd5c 	bl	8003ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LAN9252_MOSI_Pin|LAN9252_MISO_Pin;
 8003008:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800300c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300e:	2302      	movs	r3, #2
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003016:	2303      	movs	r3, #3
 8003018:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800301a:	2306      	movs	r3, #6
 800301c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003022:	4619      	mov	r1, r3
 8003024:	4805      	ldr	r0, [pc, #20]	@ (800303c <HAL_SPI_MspInit+0x1d0>)
 8003026:	f000 fd4b 	bl	8003ac0 <HAL_GPIO_Init>
}
 800302a:	bf00      	nop
 800302c:	3740      	adds	r7, #64	@ 0x40
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40013000 	.word	0x40013000
 8003038:	40023800 	.word	0x40023800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400
 8003044:	40003800 	.word	0x40003800
 8003048:	40015000 	.word	0x40015000

0800304c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0b      	ldr	r2, [pc, #44]	@ (8003088 <HAL_TIM_Base_MspInit+0x3c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d10d      	bne.n	800307a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <HAL_TIM_Base_MspInit+0x40>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	4a09      	ldr	r2, [pc, #36]	@ (800308c <HAL_TIM_Base_MspInit+0x40>)
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	6413      	str	r3, [r2, #64]	@ 0x40
 800306e:	4b07      	ldr	r3, [pc, #28]	@ (800308c <HAL_TIM_Base_MspInit+0x40>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40000800 	.word	0x40000800
 800308c:	40023800 	.word	0x40023800

08003090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <NMI_Handler+0x4>

08003098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <HardFault_Handler+0x4>

080030a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a4:	bf00      	nop
 80030a6:	e7fd      	b.n	80030a4 <MemManage_Handler+0x4>

080030a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <BusFault_Handler+0x4>

080030b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b4:	bf00      	nop
 80030b6:	e7fd      	b.n	80030b4 <UsageFault_Handler+0x4>

080030b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e6:	f000 fbc1 	bl	800386c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}

080030ee <_read>:
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	e00a      	b.n	8003116 <_read+0x28>
 8003100:	f3af 8000 	nop.w
 8003104:	4601      	mov	r1, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	60ba      	str	r2, [r7, #8]
 800310c:	b2ca      	uxtb	r2, r1
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	3301      	adds	r3, #1
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	429a      	cmp	r2, r3
 800311c:	dbf0      	blt.n	8003100 <_read+0x12>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_write>:
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e009      	b.n	800314e <_write+0x26>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	60ba      	str	r2, [r7, #8]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f3af 8000 	nop.w
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3301      	adds	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	429a      	cmp	r2, r3
 8003154:	dbf1      	blt.n	800313a <_write+0x12>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_close>:
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	f04f 33ff 	mov.w	r3, #4294967295
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <_fstat>:
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	2300      	movs	r3, #0
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <_isatty>:
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	2301      	movs	r3, #1
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <_lseek>:
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	2300      	movs	r3, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_sbrk>:
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	4a14      	ldr	r2, [pc, #80]	@ (8003224 <_sbrk+0x5c>)
 80031d2:	4b15      	ldr	r3, [pc, #84]	@ (8003228 <_sbrk+0x60>)
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	4b13      	ldr	r3, [pc, #76]	@ (800322c <_sbrk+0x64>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <_sbrk+0x22>
 80031e4:	4b11      	ldr	r3, [pc, #68]	@ (800322c <_sbrk+0x64>)
 80031e6:	4a12      	ldr	r2, [pc, #72]	@ (8003230 <_sbrk+0x68>)
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <_sbrk+0x64>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d207      	bcs.n	8003208 <_sbrk+0x40>
 80031f8:	f004 f8b2 	bl	8007360 <__errno>
 80031fc:	4603      	mov	r3, r0
 80031fe:	220c      	movs	r2, #12
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
 8003206:	e009      	b.n	800321c <_sbrk+0x54>
 8003208:	4b08      	ldr	r3, [pc, #32]	@ (800322c <_sbrk+0x64>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	4b07      	ldr	r3, [pc, #28]	@ (800322c <_sbrk+0x64>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	4a05      	ldr	r2, [pc, #20]	@ (800322c <_sbrk+0x64>)
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20020000 	.word	0x20020000
 8003228:	00000400 	.word	0x00000400
 800322c:	200003bc 	.word	0x200003bc
 8003230:	20000510 	.word	0x20000510

08003234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003238:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <SystemInit+0x20>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323e:	4a05      	ldr	r2, [pc, #20]	@ (8003254 <SystemInit+0x20>)
 8003240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <setWrongCommandFlag>:
		setIncrementalTargetPosition(tmc4671_controller, -STOP_TOLERANCE_DECODER_COUNT);
	}
}

//---------------------------------------------------------------------------------------------------------
void setWrongCommandFlag(TMC4671_Controller *tmc4671_controller, bool is_wrong){
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	70fb      	strb	r3, [r7, #3]
	tmc4671_controller->tmc_flags.wrong_command = is_wrong;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <getEventStatusWord>:
//---------------------------------------------------------------------------------------------------------
TMCStatusFlags getEventStatus(TMC4671_Controller *tmc4671_controller){
	return tmc4671_controller->tmc_flags;
}

uint16_t getEventStatusWord(TMC4671_Controller *tmc4671_controller, PcapErrorStatus *Pcap_status) {
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
	uint16_t status_word = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	81fb      	strh	r3, [r7, #14]

	switch(tmc4671_controller->tmc_flags.limits){
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800328c:	2b04      	cmp	r3, #4
 800328e:	d821      	bhi.n	80032d4 <getEventStatusWord+0x5c>
 8003290:	a201      	add	r2, pc, #4	@ (adr r2, 8003298 <getEventStatusWord+0x20>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	080032d5 	.word	0x080032d5
 800329c:	080032cb 	.word	0x080032cb
 80032a0:	080032c1 	.word	0x080032c1
 80032a4:	080032b7 	.word	0x080032b7
 80032a8:	080032ad 	.word	0x080032ad
	case NO_LIMIT:
		break;

	case HARD_POSITIVE:
		status_word |= 0x0001 << 0;
 80032ac:	89fb      	ldrh	r3, [r7, #14]
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	81fb      	strh	r3, [r7, #14]
		break;
 80032b4:	e00e      	b.n	80032d4 <getEventStatusWord+0x5c>

	case HARD_NEGATIVE:
		status_word |= 0x0001 << 1;
 80032b6:	89fb      	ldrh	r3, [r7, #14]
 80032b8:	f043 0302 	orr.w	r3, r3, #2
 80032bc:	81fb      	strh	r3, [r7, #14]
		break;
 80032be:	e009      	b.n	80032d4 <getEventStatusWord+0x5c>

	case SOFT_POSITIVE:
		status_word |= 0x0001 << 2;
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	f043 0304 	orr.w	r3, r3, #4
 80032c6:	81fb      	strh	r3, [r7, #14]
		break;
 80032c8:	e004      	b.n	80032d4 <getEventStatusWord+0x5c>

	case SOFT_NEGATIVE:
		status_word |= 0x0001 << 3;
 80032ca:	89fb      	ldrh	r3, [r7, #14]
 80032cc:	f043 0308 	orr.w	r3, r3, #8
 80032d0:	81fb      	strh	r3, [r7, #14]
		break;
 80032d2:	bf00      	nop
	}

	if(tmc4671_controller->tmc_flags.target_reached){
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <getEventStatusWord+0x6e>
		status_word |= 0x0001 << 4;
 80032de:	89fb      	ldrh	r3, [r7, #14]
 80032e0:	f043 0310 	orr.w	r3, r3, #16
 80032e4:	81fb      	strh	r3, [r7, #14]
	}

	if(tmc4671_controller->tmc_flags.homing_done){
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <getEventStatusWord+0x80>
		status_word |= 0x0001 << 5;
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	f043 0320 	orr.w	r3, r3, #32
 80032f6:	81fb      	strh	r3, [r7, #14]
	}

	if(tmc4671_controller->tmc_flags.servo_enable){
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <getEventStatusWord+0x92>
		status_word |= 0x0001 << 6;
 8003302:	89fb      	ldrh	r3, [r7, #14]
 8003304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003308:	81fb      	strh	r3, [r7, #14]
	}

	if(tmc4671_controller->tmc_flags.servo_ready){
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <getEventStatusWord+0xa4>
		status_word |= 0x0001 << 7;
 8003314:	89fb      	ldrh	r3, [r7, #14]
 8003316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800331a:	81fb      	strh	r3, [r7, #14]
	}

	switch(tmc4671_controller->tmc_flags.faults){
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003322:	2b04      	cmp	r3, #4
 8003324:	d820      	bhi.n	8003368 <getEventStatusWord+0xf0>
 8003326:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <getEventStatusWord+0xb4>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003369 	.word	0x08003369
 8003330:	0800335f 	.word	0x0800335f
 8003334:	08003355 	.word	0x08003355
 8003338:	0800334b 	.word	0x0800334b
 800333c:	08003341 	.word	0x08003341
	case NO_FAULT:
		break;

	case SHORT_CIRCUIT:
		status_word |= 0x0001 << 8;
 8003340:	89fb      	ldrh	r3, [r7, #14]
 8003342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003346:	81fb      	strh	r3, [r7, #14]
		break;
 8003348:	e00e      	b.n	8003368 <getEventStatusWord+0xf0>

	case UNDER_VOLTAGE:
		status_word |= 0x0001 << 9;
 800334a:	89fb      	ldrh	r3, [r7, #14]
 800334c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003350:	81fb      	strh	r3, [r7, #14]
		break;
 8003352:	e009      	b.n	8003368 <getEventStatusWord+0xf0>

	case OVER_TEMPERATURE:
		status_word |= 0x0001 << 10;
 8003354:	89fb      	ldrh	r3, [r7, #14]
 8003356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800335a:	81fb      	strh	r3, [r7, #14]
		break;
 800335c:	e004      	b.n	8003368 <getEventStatusWord+0xf0>

	case UNKNOWN:
		status_word |= 0x0001 << 11;
 800335e:	89fb      	ldrh	r3, [r7, #14]
 8003360:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003364:	81fb      	strh	r3, [r7, #14]
		break;
 8003366:	bf00      	nop
	}

	if(tmc4671_controller->tmc_flags.wrong_command){
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <getEventStatusWord+0x102>
		status_word |= 0x0001 << 12;
 8003372:	89fb      	ldrh	r3, [r7, #14]
 8003374:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003378:	81fb      	strh	r3, [r7, #14]
	}

	switch (*Pcap_status) {
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d00a      	beq.n	8003398 <getEventStatusWord+0x120>
 8003382:	2b02      	cmp	r3, #2
 8003384:	dc0e      	bgt.n	80033a4 <getEventStatusWord+0x12c>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <getEventStatusWord+0x12a>
 800338a:	2b01      	cmp	r3, #1
 800338c:	d10a      	bne.n	80033a4 <getEventStatusWord+0x12c>
	case PCAP_NO_ERROR:
		break;

	case PCAP_COMM_ERROR:
		status_word |= 0x0001 << 13;
 800338e:	89fb      	ldrh	r3, [r7, #14]
 8003390:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003394:	81fb      	strh	r3, [r7, #14]
		break;
 8003396:	e005      	b.n	80033a4 <getEventStatusWord+0x12c>

	case PCAP_TIP_TOUCH_ERROR:
		status_word |= 0x0001 << 14;
 8003398:	89fb      	ldrh	r3, [r7, #14]
 800339a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800339e:	81fb      	strh	r3, [r7, #14]
		break;
 80033a0:	e000      	b.n	80033a4 <getEventStatusWord+0x12c>
		break;
 80033a2:	bf00      	nop
	}

	return status_word;
 80033a4:	89fb      	ldrh	r3, [r7, #14]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop

080033b4 <getEncoderResolution>:

	uint32_t abn_decoder_ppr = round((1000*TOTAL_MAPPED_TRAVEL_MICRONS)/resolution_nanometers);
	write_register_tmc4671(TMC4671_ABN_DECODER_PPR, abn_decoder_ppr);
}

uint32_t getEncoderResolution(TMC4671_Controller *tmc4671_controller){
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.encoder_resolution;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <getEncoderDirection>:
	encoder_dir &= 0x00000001;
	uint32_t abn_decoder_mode = SET_ABN_DECODER_MODE | (encoder_dir << 12);
	write_register_tmc4671(TMC4671_ABN_DECODER_MODE, abn_decoder_mode);
}

bool getEncoderDirection(TMC4671_Controller *tmc4671_controller){
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	if(tmc4671_controller->tmc_parameters.encoder_direction == 1){
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <getEncoderDirection+0x14>
		return true;
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <getEncoderDirection+0x16>
	}else{
		return false;
 80033e0:	2300      	movs	r3, #0
	}
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <getCoilCurrent>:
//---------------------------------------------------------------------------------------------------------

uint32_t getCoilCurrent(TMC4671_Controller *tmc4671_controller){
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->motor_current;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <getCurrentLimitHoming>:

void setCurrentLimitHoming(TMC4671_Controller *tmc4671_controller, uint32_t current_limit){
	tmc4671_controller->tmc_parameters.current_limit_homing = current_limit;
}

uint32_t getCurrentLimitHoming(TMC4671_Controller *tmc4671_controller){
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.current_limit_homing;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <getCurrentLimitServo>:

void setCurrentLimitServo(TMC4671_Controller *tmc4671_controller, uint32_t current_limit){
	tmc4671_controller->tmc_parameters.current_limit_servo = current_limit;
}

uint32_t getCurrentLimitServo(TMC4671_Controller *tmc4671_controller){
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.current_limit_servo;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <getVoltageLimitHoming>:

void setVoltageLimitHoming(TMC4671_Controller *tmc4671_controller, uint32_t voltage_limit){
	tmc4671_controller->tmc_parameters.voltage_limit_homing = voltage_limit;
}

uint32_t getVoltageLimitHoming(TMC4671_Controller *tmc4671_controller){
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.voltage_limit_homing;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <getVelocityLimitServo>:
void setVelocityLimitServo(TMC4671_Controller *tmc4671_controller, uint32_t velocity_limit){
	tmc4671_controller->tmc_parameters.velocity_limit_servo = velocity_limit;
	write_register_tmc4671(TMC4671_PID_VELOCITY_LIMIT, velocity_limit);
}

uint32_t getVelocityLimitServo(TMC4671_Controller *tmc4671_controller){
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.velocity_limit_servo;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <getTorqueLimitServo>:
void setTorqueLimitServo(TMC4671_Controller *tmc4671_controller, uint32_t torque_limit){
	tmc4671_controller->tmc_parameters.torque_limit_servo = torque_limit;
	write_register_tmc4671(TMC4671_PID_TORQUE_FLUX_LIMITS, torque_limit);
}

uint32_t getTorqueLimitServo(TMC4671_Controller *tmc4671_controller){
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.torque_limit_servo;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <getSoftPositiveLimit>:
void setSoftPositiveLimit(TMC4671_Controller *tmc4671_controller, int32_t limit_microns){
	tmc4671_controller->tmc_parameters.soft_limit_positive = (int32_t)(limit_microns*(TOTAL_DECODER_REGISTER_COUNT/TOTAL_MAPPED_TRAVEL_MICRONS)) + tmc4671_controller->tmc_parameters.encoder_zero_offset;
	write_register_tmc4671(TMC4671_PID_POSITION_LIMIT_HIGH, tmc4671_controller->tmc_parameters.soft_limit_positive);
}

int32_t getSoftPositiveLimit(TMC4671_Controller *tmc4671_controller){
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	int32_t pos_limit = (tmc4671_controller->tmc_parameters.soft_limit_positive - tmc4671_controller->tmc_parameters.encoder_zero_offset);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699a      	ldr	r2, [r3, #24]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	60fb      	str	r3, [r7, #12]
	pos_limit = (int32_t)((pos_limit*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7fd f845 	bl	8000524 <__aeabi_i2d>
 800349a:	a30e      	add	r3, pc, #56	@ (adr r3, 80034d4 <getSoftPositiveLimit+0x54>)
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f7fd f8aa 	bl	80005f8 <__aeabi_dmul>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	4b07      	ldr	r3, [pc, #28]	@ (80034d0 <getSoftPositiveLimit+0x50>)
 80034b2:	f7fd f9cb 	bl	800084c <__aeabi_ddiv>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	f7fd faad 	bl	8000a1c <__aeabi_d2iz>
 80034c2:	4603      	mov	r3, r0
 80034c4:	60fb      	str	r3, [r7, #12]
	return pos_limit;
 80034c6:	68fb      	ldr	r3, [r7, #12]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40f00000 	.word	0x40f00000
 80034d4:	00000000 	.word	0x00000000
 80034d8:	40d38800 	.word	0x40d38800
 80034dc:	00000000 	.word	0x00000000

080034e0 <getSoftNegativeLimit>:
void setSoftNegativeLimit(TMC4671_Controller *tmc4671_controller, int32_t limit_microns){
	tmc4671_controller->tmc_parameters.soft_limit_negative = (int32_t)(limit_microns*(TOTAL_DECODER_REGISTER_COUNT/TOTAL_MAPPED_TRAVEL_MICRONS)) + tmc4671_controller->tmc_parameters.encoder_zero_offset;
	write_register_tmc4671(TMC4671_PID_POSITION_LIMIT_LOW, tmc4671_controller->tmc_parameters.soft_limit_negative);
}

int32_t getSoftNegativeLimit(TMC4671_Controller *tmc4671_controller){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	int32_t neg_limit = (tmc4671_controller->tmc_parameters.soft_limit_negative - tmc4671_controller->tmc_parameters.encoder_zero_offset);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	60fb      	str	r3, [r7, #12]
	neg_limit = (int32_t)((neg_limit*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7fd f815 	bl	8000524 <__aeabi_i2d>
 80034fa:	a30e      	add	r3, pc, #56	@ (adr r3, 8003534 <getSoftNegativeLimit+0x54>)
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f7fd f87a 	bl	80005f8 <__aeabi_dmul>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	4b07      	ldr	r3, [pc, #28]	@ (8003530 <getSoftNegativeLimit+0x50>)
 8003512:	f7fd f99b 	bl	800084c <__aeabi_ddiv>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	f7fd fa7d 	bl	8000a1c <__aeabi_d2iz>
 8003522:	4603      	mov	r3, r0
 8003524:	60fb      	str	r3, [r7, #12]
	return neg_limit;
 8003526:	68fb      	ldr	r3, [r7, #12]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40f00000 	.word	0x40f00000
 8003534:	00000000 	.word	0x00000000
 8003538:	40d38800 	.word	0x40d38800
 800353c:	00000000 	.word	0x00000000

08003540 <getZeroOffset>:

void setZeroOffset(TMC4671_Controller *tmc4671_controller, int32_t offset_microns){
	tmc4671_controller->tmc_parameters.encoder_zero_offset = (int32_t)(offset_microns * (TOTAL_DECODER_REGISTER_COUNT/TOTAL_MAPPED_TRAVEL_MICRONS));
}

int32_t getZeroOffset(TMC4671_Controller *tmc4671_controller){
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	int32_t offset_microns = tmc4671_controller->tmc_parameters.encoder_zero_offset;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	60fb      	str	r3, [r7, #12]
	offset_microns = (int32_t)((offset_microns*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f7fc ffe8 	bl	8000524 <__aeabi_i2d>
 8003554:	a30f      	add	r3, pc, #60	@ (adr r3, 8003594 <getZeroOffset+0x54>)
 8003556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355a:	f7fd f84d 	bl	80005f8 <__aeabi_dmul>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <getZeroOffset+0x50>)
 800356c:	f7fd f96e 	bl	800084c <__aeabi_ddiv>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	f7fd fa50 	bl	8000a1c <__aeabi_d2iz>
 800357c:	4603      	mov	r3, r0
 800357e:	60fb      	str	r3, [r7, #12]
	return offset_microns;
 8003580:	68fb      	ldr	r3, [r7, #12]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	f3af 8000 	nop.w
 8003590:	40f00000 	.word	0x40f00000
 8003594:	00000000 	.word	0x00000000
 8003598:	40d38800 	.word	0x40d38800
 800359c:	00000000 	.word	0x00000000

080035a0 <getActualPosition>:
//---------------------------------------------------------------------------------------------------------

int32_t getActualPosition(TMC4671_Controller *tmc4671_controller){
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	int32_t actual_microns = (tmc4671_controller->current_position - tmc4671_controller->tmc_parameters.encoder_zero_offset);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	60fb      	str	r3, [r7, #12]
	actual_microns = (int32_t)((actual_microns*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7fc ffb5 	bl	8000524 <__aeabi_i2d>
 80035ba:	a30e      	add	r3, pc, #56	@ (adr r3, 80035f4 <getActualPosition+0x54>)
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f7fd f81a 	bl	80005f8 <__aeabi_dmul>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	4b07      	ldr	r3, [pc, #28]	@ (80035f0 <getActualPosition+0x50>)
 80035d2:	f7fd f93b 	bl	800084c <__aeabi_ddiv>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	f7fd fa1d 	bl	8000a1c <__aeabi_d2iz>
 80035e2:	4603      	mov	r3, r0
 80035e4:	60fb      	str	r3, [r7, #12]
	return actual_microns;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40f00000 	.word	0x40f00000
 80035f4:	00000000 	.word	0x00000000
 80035f8:	40d38800 	.word	0x40d38800
 80035fc:	00000000 	.word	0x00000000

08003600 <getTargetPosition>:
void setIncrementalTargetPosition(TMC4671_Controller *tmc4671_controller, int32_t target_microns){
	int32_t current_microns = getActualPosition(tmc4671_controller);
	setAbsoluteTargetPosition(tmc4671_controller, current_microns + target_microns);
}

int32_t getTargetPosition(TMC4671_Controller *tmc4671_controller){
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	int32_t target_pos = (tmc4671_controller->target_position - tmc4671_controller->tmc_parameters.encoder_zero_offset);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	60fb      	str	r3, [r7, #12]
	target_pos = (int32_t)((target_pos*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7fc ff85 	bl	8000524 <__aeabi_i2d>
 800361a:	a30e      	add	r3, pc, #56	@ (adr r3, 8003654 <getTargetPosition+0x54>)
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f7fc ffea 	bl	80005f8 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	4b07      	ldr	r3, [pc, #28]	@ (8003650 <getTargetPosition+0x50>)
 8003632:	f7fd f90b 	bl	800084c <__aeabi_ddiv>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	f7fd f9ed 	bl	8000a1c <__aeabi_d2iz>
 8003642:	4603      	mov	r3, r0
 8003644:	60fb      	str	r3, [r7, #12]
	return target_pos;
 8003646:	68fb      	ldr	r3, [r7, #12]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40f00000 	.word	0x40f00000
 8003654:	00000000 	.word	0x00000000
 8003658:	40d38800 	.word	0x40d38800
 800365c:	00000000 	.word	0x00000000

08003660 <getMaxPositionError>:

void setMaxPositionError(TMC4671_Controller *tmc4671_controller, uint32_t error_microns){
	tmc4671_controller->tmc_parameters.position_error_limit = (uint32_t)(error_microns * (TOTAL_DECODER_REGISTER_COUNT/TOTAL_MAPPED_TRAVEL_MICRONS));
}

uint32_t getMaxPositionError(TMC4671_Controller *tmc4671_controller){
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	uint32_t error_microns = tmc4671_controller->tmc_parameters.position_error_limit;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	60fb      	str	r3, [r7, #12]
	error_microns = (uint32_t)((error_microns*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7fc ff48 	bl	8000504 <__aeabi_ui2d>
 8003674:	a30f      	add	r3, pc, #60	@ (adr r3, 80036b4 <getMaxPositionError+0x54>)
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f7fc ffbd 	bl	80005f8 <__aeabi_dmul>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4610      	mov	r0, r2
 8003684:	4619      	mov	r1, r3
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <getMaxPositionError+0x50>)
 800368c:	f7fd f8de 	bl	800084c <__aeabi_ddiv>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	f7fd f9e8 	bl	8000a6c <__aeabi_d2uiz>
 800369c:	4603      	mov	r3, r0
 800369e:	60fb      	str	r3, [r7, #12]
	return error_microns;
 80036a0:	68fb      	ldr	r3, [r7, #12]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	f3af 8000 	nop.w
 80036b0:	40f00000 	.word	0x40f00000
 80036b4:	00000000 	.word	0x00000000
 80036b8:	40d38800 	.word	0x40d38800

080036bc <getCurrentGainP>:
	uint32_t pid_torque_P_torque_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_TORQUE_P_TORQUE_I, pid_torque_P_torque_I);
	write_register_tmc4671(TMC4671_PID_FLUX_P_FLUX_I, pid_torque_P_torque_I);
}

uint32_t getCurrentGainP(TMC4671_Controller *tmc4671_controller){
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.current_P_gain;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <getCurrentGainI>:
	uint32_t pid_torque_P_torque_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_TORQUE_P_TORQUE_I, pid_torque_P_torque_I);
	write_register_tmc4671(TMC4671_PID_FLUX_P_FLUX_I, pid_torque_P_torque_I);
}

uint32_t getCurrentGainI(TMC4671_Controller *tmc4671_controller){
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.current_I_gain;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <getVelocityGainP>:

	uint32_t pid_velocity_P_velocity_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_VELOCITY_P_VELOCITY_I, pid_velocity_P_velocity_I);
}

uint32_t getVelocityGainP(TMC4671_Controller *tmc4671_controller){
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.velocity_P_gain;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <getVelocityGainI>:

	uint32_t pid_velocity_P_velocity_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_VELOCITY_P_VELOCITY_I, pid_velocity_P_velocity_I);
}

uint32_t getVelocityGainI(TMC4671_Controller *tmc4671_controller){
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.velocity_I_gain;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <getPositionGainP>:

	uint32_t pid_position_P_position_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_POSITION_P_POSITION_I, pid_position_P_position_I);
}

uint32_t getPositionGainP(TMC4671_Controller *tmc4671_controller){
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.position_P_gain;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <getPositionGainI>:

	uint32_t pid_position_P_position_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_POSITION_P_POSITION_I, pid_position_P_position_I);
}

uint32_t getPositionGainI(TMC4671_Controller *tmc4671_controller){
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.position_I_gain;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
}
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <getFirmwareVersion>:
void control_disable(){
	HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CTRL_EN_Pin, GPIO_PIN_RESET);
}
//---------------------------------------------------------------------------------------------------------

uint32_t getFirmwareVersion(){
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
	uint8_t temp_bytes[4];

	EEPROM_Read(DEF_ADDR_VERSION_NUMBER, temp_bytes, 4);
 8003752:	463b      	mov	r3, r7
 8003754:	2204      	movs	r2, #4
 8003756:	4619      	mov	r1, r3
 8003758:	f44f 7022 	mov.w	r0, #648	@ 0x288
 800375c:	f7fd fc1c 	bl	8000f98 <EEPROM_Read>

	uint32_t version_no = bytes2uInt(temp_bytes);
 8003760:	463b      	mov	r3, r7
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd fc36 	bl	8000fd4 <bytes2uInt>
 8003768:	6078      	str	r0, [r7, #4]
	return version_no;
 800376a:	687b      	ldr	r3, [r7, #4]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <Reset_Handler>:
 8003774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037ac <LoopFillZerobss+0xe>
 8003778:	f7ff fd5c 	bl	8003234 <SystemInit>
 800377c:	480c      	ldr	r0, [pc, #48]	@ (80037b0 <LoopFillZerobss+0x12>)
 800377e:	490d      	ldr	r1, [pc, #52]	@ (80037b4 <LoopFillZerobss+0x16>)
 8003780:	4a0d      	ldr	r2, [pc, #52]	@ (80037b8 <LoopFillZerobss+0x1a>)
 8003782:	2300      	movs	r3, #0
 8003784:	e002      	b.n	800378c <LoopCopyDataInit>

08003786 <CopyDataInit>:
 8003786:	58d4      	ldr	r4, [r2, r3]
 8003788:	50c4      	str	r4, [r0, r3]
 800378a:	3304      	adds	r3, #4

0800378c <LoopCopyDataInit>:
 800378c:	18c4      	adds	r4, r0, r3
 800378e:	428c      	cmp	r4, r1
 8003790:	d3f9      	bcc.n	8003786 <CopyDataInit>
 8003792:	4a0a      	ldr	r2, [pc, #40]	@ (80037bc <LoopFillZerobss+0x1e>)
 8003794:	4c0a      	ldr	r4, [pc, #40]	@ (80037c0 <LoopFillZerobss+0x22>)
 8003796:	2300      	movs	r3, #0
 8003798:	e001      	b.n	800379e <LoopFillZerobss>

0800379a <FillZerobss>:
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	3204      	adds	r2, #4

0800379e <LoopFillZerobss>:
 800379e:	42a2      	cmp	r2, r4
 80037a0:	d3fb      	bcc.n	800379a <FillZerobss>
 80037a2:	f003 fde3 	bl	800736c <__libc_init_array>
 80037a6:	f7fd fe5f 	bl	8001468 <main>
 80037aa:	4770      	bx	lr
 80037ac:	20020000 	.word	0x20020000
 80037b0:	20000000 	.word	0x20000000
 80037b4:	20000068 	.word	0x20000068
 80037b8:	0800801c 	.word	0x0800801c
 80037bc:	20000068 	.word	0x20000068
 80037c0:	20000510 	.word	0x20000510

080037c4 <ADC_IRQHandler>:
 80037c4:	e7fe      	b.n	80037c4 <ADC_IRQHandler>
	...

080037c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003808 <HAL_Init+0x40>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003808 <HAL_Init+0x40>)
 80037d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003808 <HAL_Init+0x40>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003808 <HAL_Init+0x40>)
 80037de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037e4:	4b08      	ldr	r3, [pc, #32]	@ (8003808 <HAL_Init+0x40>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a07      	ldr	r2, [pc, #28]	@ (8003808 <HAL_Init+0x40>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037f0:	2003      	movs	r0, #3
 80037f2:	f000 f931 	bl	8003a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037f6:	200f      	movs	r0, #15
 80037f8:	f000 f808 	bl	800380c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037fc:	f7ff fa80 	bl	8002d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023c00 	.word	0x40023c00

0800380c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003814:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <HAL_InitTick+0x54>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4b12      	ldr	r3, [pc, #72]	@ (8003864 <HAL_InitTick+0x58>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	4619      	mov	r1, r3
 800381e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003822:	fbb3 f3f1 	udiv	r3, r3, r1
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f93b 	bl	8003aa6 <HAL_SYSTICK_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e00e      	b.n	8003858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d80a      	bhi.n	8003856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003840:	2200      	movs	r2, #0
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
 8003848:	f000 f911 	bl	8003a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800384c:	4a06      	ldr	r2, [pc, #24]	@ (8003868 <HAL_InitTick+0x5c>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000000 	.word	0x20000000
 8003864:	20000008 	.word	0x20000008
 8003868:	20000004 	.word	0x20000004

0800386c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003870:	4b06      	ldr	r3, [pc, #24]	@ (800388c <HAL_IncTick+0x20>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <HAL_IncTick+0x24>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4413      	add	r3, r2
 800387c:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <HAL_IncTick+0x24>)
 800387e:	6013      	str	r3, [r2, #0]
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000008 	.word	0x20000008
 8003890:	200003c0 	.word	0x200003c0

08003894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return uwTick;
 8003898:	4b03      	ldr	r3, [pc, #12]	@ (80038a8 <HAL_GetTick+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	200003c0 	.word	0x200003c0

080038ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038b4:	f7ff ffee 	bl	8003894 <HAL_GetTick>
 80038b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d005      	beq.n	80038d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038c6:	4b0a      	ldr	r3, [pc, #40]	@ (80038f0 <HAL_Delay+0x44>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038d2:	bf00      	nop
 80038d4:	f7ff ffde 	bl	8003894 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d8f7      	bhi.n	80038d4 <HAL_Delay+0x28>
  {
  }
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000008 	.word	0x20000008

080038f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003904:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <__NVIC_SetPriorityGrouping+0x44>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003910:	4013      	ands	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800391c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003926:	4a04      	ldr	r2, [pc, #16]	@ (8003938 <__NVIC_SetPriorityGrouping+0x44>)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	60d3      	str	r3, [r2, #12]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003940:	4b04      	ldr	r3, [pc, #16]	@ (8003954 <__NVIC_GetPriorityGrouping+0x18>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	f003 0307 	and.w	r3, r3, #7
}
 800394a:	4618      	mov	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003968:	2b00      	cmp	r3, #0
 800396a:	db0a      	blt.n	8003982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	490c      	ldr	r1, [pc, #48]	@ (80039a4 <__NVIC_SetPriority+0x4c>)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	0112      	lsls	r2, r2, #4
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	440b      	add	r3, r1
 800397c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003980:	e00a      	b.n	8003998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4908      	ldr	r1, [pc, #32]	@ (80039a8 <__NVIC_SetPriority+0x50>)
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3b04      	subs	r3, #4
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	440b      	add	r3, r1
 8003996:	761a      	strb	r2, [r3, #24]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000e100 	.word	0xe000e100
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b089      	sub	sp, #36	@ 0x24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f1c3 0307 	rsb	r3, r3, #7
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	bf28      	it	cs
 80039ca:	2304      	movcs	r3, #4
 80039cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d902      	bls.n	80039dc <NVIC_EncodePriority+0x30>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3b03      	subs	r3, #3
 80039da:	e000      	b.n	80039de <NVIC_EncodePriority+0x32>
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	401a      	ands	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	43d9      	mvns	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	4313      	orrs	r3, r2
         );
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3724      	adds	r7, #36	@ 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a24:	d301      	bcc.n	8003a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00f      	b.n	8003a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <SysTick_Config+0x40>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a32:	210f      	movs	r1, #15
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	f7ff ff8e 	bl	8003958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a3c:	4b05      	ldr	r3, [pc, #20]	@ (8003a54 <SysTick_Config+0x40>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a42:	4b04      	ldr	r3, [pc, #16]	@ (8003a54 <SysTick_Config+0x40>)
 8003a44:	2207      	movs	r2, #7
 8003a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000e010 	.word	0xe000e010

08003a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff47 	bl	80038f4 <__NVIC_SetPriorityGrouping>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	4603      	mov	r3, r0
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a80:	f7ff ff5c 	bl	800393c <__NVIC_GetPriorityGrouping>
 8003a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	f7ff ff8e 	bl	80039ac <NVIC_EncodePriority>
 8003a90:	4602      	mov	r2, r0
 8003a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff5d 	bl	8003958 <__NVIC_SetPriority>
}
 8003a9e:	bf00      	nop
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff ffb0 	bl	8003a14 <SysTick_Config>
 8003ab4:	4603      	mov	r3, r0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	@ 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	e159      	b.n	8003d90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003adc:	2201      	movs	r2, #1
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	f040 8148 	bne.w	8003d8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d005      	beq.n	8003b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d130      	bne.n	8003b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b48:	2201      	movs	r2, #1
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 0201 	and.w	r2, r3, #1
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d017      	beq.n	8003bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d123      	bne.n	8003c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	08da      	lsrs	r2, r3, #3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3208      	adds	r2, #8
 8003bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	220f      	movs	r2, #15
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	08da      	lsrs	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3208      	adds	r2, #8
 8003bfe:	69b9      	ldr	r1, [r7, #24]
 8003c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	2203      	movs	r2, #3
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0203 	and.w	r2, r3, #3
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a2 	beq.w	8003d8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	4b57      	ldr	r3, [pc, #348]	@ (8003da8 <HAL_GPIO_Init+0x2e8>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	4a56      	ldr	r2, [pc, #344]	@ (8003da8 <HAL_GPIO_Init+0x2e8>)
 8003c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c56:	4b54      	ldr	r3, [pc, #336]	@ (8003da8 <HAL_GPIO_Init+0x2e8>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c62:	4a52      	ldr	r2, [pc, #328]	@ (8003dac <HAL_GPIO_Init+0x2ec>)
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	089b      	lsrs	r3, r3, #2
 8003c68:	3302      	adds	r3, #2
 8003c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	220f      	movs	r2, #15
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4013      	ands	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a49      	ldr	r2, [pc, #292]	@ (8003db0 <HAL_GPIO_Init+0x2f0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d019      	beq.n	8003cc2 <HAL_GPIO_Init+0x202>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a48      	ldr	r2, [pc, #288]	@ (8003db4 <HAL_GPIO_Init+0x2f4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_GPIO_Init+0x1fe>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a47      	ldr	r2, [pc, #284]	@ (8003db8 <HAL_GPIO_Init+0x2f8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00d      	beq.n	8003cba <HAL_GPIO_Init+0x1fa>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a46      	ldr	r2, [pc, #280]	@ (8003dbc <HAL_GPIO_Init+0x2fc>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <HAL_GPIO_Init+0x1f6>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a45      	ldr	r2, [pc, #276]	@ (8003dc0 <HAL_GPIO_Init+0x300>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d101      	bne.n	8003cb2 <HAL_GPIO_Init+0x1f2>
 8003cae:	2304      	movs	r3, #4
 8003cb0:	e008      	b.n	8003cc4 <HAL_GPIO_Init+0x204>
 8003cb2:	2307      	movs	r3, #7
 8003cb4:	e006      	b.n	8003cc4 <HAL_GPIO_Init+0x204>
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e004      	b.n	8003cc4 <HAL_GPIO_Init+0x204>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e002      	b.n	8003cc4 <HAL_GPIO_Init+0x204>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_GPIO_Init+0x204>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	f002 0203 	and.w	r2, r2, #3
 8003cca:	0092      	lsls	r2, r2, #2
 8003ccc:	4093      	lsls	r3, r2
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cd4:	4935      	ldr	r1, [pc, #212]	@ (8003dac <HAL_GPIO_Init+0x2ec>)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	3302      	adds	r3, #2
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ce2:	4b38      	ldr	r3, [pc, #224]	@ (8003dc4 <HAL_GPIO_Init+0x304>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d06:	4a2f      	ldr	r2, [pc, #188]	@ (8003dc4 <HAL_GPIO_Init+0x304>)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc4 <HAL_GPIO_Init+0x304>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d30:	4a24      	ldr	r2, [pc, #144]	@ (8003dc4 <HAL_GPIO_Init+0x304>)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d36:	4b23      	ldr	r3, [pc, #140]	@ (8003dc4 <HAL_GPIO_Init+0x304>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc4 <HAL_GPIO_Init+0x304>)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d60:	4b18      	ldr	r3, [pc, #96]	@ (8003dc4 <HAL_GPIO_Init+0x304>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d84:	4a0f      	ldr	r2, [pc, #60]	@ (8003dc4 <HAL_GPIO_Init+0x304>)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b0f      	cmp	r3, #15
 8003d94:	f67f aea2 	bls.w	8003adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	3724      	adds	r7, #36	@ 0x24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40013800 	.word	0x40013800
 8003db0:	40020000 	.word	0x40020000
 8003db4:	40020400 	.word	0x40020400
 8003db8:	40020800 	.word	0x40020800
 8003dbc:	40020c00 	.word	0x40020c00
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40013c00 	.word	0x40013c00

08003dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	807b      	strh	r3, [r7, #2]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dd8:	787b      	ldrb	r3, [r7, #1]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dde:	887a      	ldrh	r2, [r7, #2]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003de4:	e003      	b.n	8003dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003de6:	887b      	ldrh	r3, [r7, #2]
 8003de8:	041a      	lsls	r2, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	619a      	str	r2, [r3, #24]
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e12b      	b.n	8004066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fe ff94 	bl	8002d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2224      	movs	r2, #36	@ 0x24
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e60:	f001 ff10 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 8003e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4a81      	ldr	r2, [pc, #516]	@ (8004070 <HAL_I2C_Init+0x274>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d807      	bhi.n	8003e80 <HAL_I2C_Init+0x84>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a80      	ldr	r2, [pc, #512]	@ (8004074 <HAL_I2C_Init+0x278>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	bf94      	ite	ls
 8003e78:	2301      	movls	r3, #1
 8003e7a:	2300      	movhi	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	e006      	b.n	8003e8e <HAL_I2C_Init+0x92>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a7d      	ldr	r2, [pc, #500]	@ (8004078 <HAL_I2C_Init+0x27c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	bf94      	ite	ls
 8003e88:	2301      	movls	r3, #1
 8003e8a:	2300      	movhi	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e0e7      	b.n	8004066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4a78      	ldr	r2, [pc, #480]	@ (800407c <HAL_I2C_Init+0x280>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	0c9b      	lsrs	r3, r3, #18
 8003ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4a6a      	ldr	r2, [pc, #424]	@ (8004070 <HAL_I2C_Init+0x274>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d802      	bhi.n	8003ed0 <HAL_I2C_Init+0xd4>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	e009      	b.n	8003ee4 <HAL_I2C_Init+0xe8>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	4a69      	ldr	r2, [pc, #420]	@ (8004080 <HAL_I2C_Init+0x284>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	099b      	lsrs	r3, r3, #6
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ef6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	495c      	ldr	r1, [pc, #368]	@ (8004070 <HAL_I2C_Init+0x274>)
 8003f00:	428b      	cmp	r3, r1
 8003f02:	d819      	bhi.n	8003f38 <HAL_I2C_Init+0x13c>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1e59      	subs	r1, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f12:	1c59      	adds	r1, r3, #1
 8003f14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f18:	400b      	ands	r3, r1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_I2C_Init+0x138>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1e59      	subs	r1, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f32:	e051      	b.n	8003fd8 <HAL_I2C_Init+0x1dc>
 8003f34:	2304      	movs	r3, #4
 8003f36:	e04f      	b.n	8003fd8 <HAL_I2C_Init+0x1dc>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d111      	bne.n	8003f64 <HAL_I2C_Init+0x168>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1e58      	subs	r0, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6859      	ldr	r1, [r3, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	440b      	add	r3, r1
 8003f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f52:	3301      	adds	r3, #1
 8003f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	e012      	b.n	8003f8a <HAL_I2C_Init+0x18e>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1e58      	subs	r0, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	0099      	lsls	r1, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_I2C_Init+0x196>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e022      	b.n	8003fd8 <HAL_I2C_Init+0x1dc>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10e      	bne.n	8003fb8 <HAL_I2C_Init+0x1bc>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	1e58      	subs	r0, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6859      	ldr	r1, [r3, #4]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	440b      	add	r3, r1
 8003fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fac:	3301      	adds	r3, #1
 8003fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb6:	e00f      	b.n	8003fd8 <HAL_I2C_Init+0x1dc>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e58      	subs	r0, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	0099      	lsls	r1, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	6809      	ldr	r1, [r1, #0]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004006:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6911      	ldr	r1, [r2, #16]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68d2      	ldr	r2, [r2, #12]
 8004012:	4311      	orrs	r1, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	430b      	orrs	r3, r1
 800401a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	000186a0 	.word	0x000186a0
 8004074:	001e847f 	.word	0x001e847f
 8004078:	003d08ff 	.word	0x003d08ff
 800407c:	431bde83 	.word	0x431bde83
 8004080:	10624dd3 	.word	0x10624dd3

08004084 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	461a      	mov	r2, r3
 8004090:	460b      	mov	r3, r1
 8004092:	817b      	strh	r3, [r7, #10]
 8004094:	4613      	mov	r3, r2
 8004096:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004098:	f7ff fbfc 	bl	8003894 <HAL_GetTick>
 800409c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	f040 80e0 	bne.w	800426c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	2319      	movs	r3, #25
 80040b2:	2201      	movs	r2, #1
 80040b4:	4970      	ldr	r1, [pc, #448]	@ (8004278 <HAL_I2C_Master_Transmit+0x1f4>)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 ff7e 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80040c2:	2302      	movs	r3, #2
 80040c4:	e0d3      	b.n	800426e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_I2C_Master_Transmit+0x50>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e0cc      	b.n	800426e <HAL_I2C_Master_Transmit+0x1ea>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d007      	beq.n	80040fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004108:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2221      	movs	r2, #33	@ 0x21
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2210      	movs	r2, #16
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	893a      	ldrh	r2, [r7, #8]
 800412a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4a50      	ldr	r2, [pc, #320]	@ (800427c <HAL_I2C_Master_Transmit+0x1f8>)
 800413a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800413c:	8979      	ldrh	r1, [r7, #10]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	6a3a      	ldr	r2, [r7, #32]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fd00 	bl	8004b48 <I2C_MasterRequestWrite>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e08d      	b.n	800426e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004168:	e066      	b.n	8004238 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	6a39      	ldr	r1, [r7, #32]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f001 f83c 	bl	80051ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00d      	beq.n	8004196 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	2b04      	cmp	r3, #4
 8004180:	d107      	bne.n	8004192 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004190:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e06b      	b.n	800426e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	781a      	ldrb	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d11b      	bne.n	800420c <HAL_I2C_Master_Transmit+0x188>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d017      	beq.n	800420c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	6a39      	ldr	r1, [r7, #32]
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f001 f833 	bl	800527c <I2C_WaitOnBTFFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00d      	beq.n	8004238 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004220:	2b04      	cmp	r3, #4
 8004222:	d107      	bne.n	8004234 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004232:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e01a      	b.n	800426e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423c:	2b00      	cmp	r3, #0
 800423e:	d194      	bne.n	800416a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800424e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e000      	b.n	800426e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
  }
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	00100002 	.word	0x00100002
 800427c:	ffff0000 	.word	0xffff0000

08004280 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08c      	sub	sp, #48	@ 0x30
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	461a      	mov	r2, r3
 800428c:	460b      	mov	r3, r1
 800428e:	817b      	strh	r3, [r7, #10]
 8004290:	4613      	mov	r3, r2
 8004292:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004294:	f7ff fafe 	bl	8003894 <HAL_GetTick>
 8004298:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	f040 8217 	bne.w	80046d6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2319      	movs	r3, #25
 80042ae:	2201      	movs	r2, #1
 80042b0:	497c      	ldr	r1, [pc, #496]	@ (80044a4 <HAL_I2C_Master_Receive+0x224>)
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fe80 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80042be:	2302      	movs	r3, #2
 80042c0:	e20a      	b.n	80046d8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_I2C_Master_Receive+0x50>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e203      	b.n	80046d8 <HAL_I2C_Master_Receive+0x458>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d007      	beq.n	80042f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0201 	orr.w	r2, r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004304:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2222      	movs	r2, #34	@ 0x22
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2210      	movs	r2, #16
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	893a      	ldrh	r2, [r7, #8]
 8004326:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a5c      	ldr	r2, [pc, #368]	@ (80044a8 <HAL_I2C_Master_Receive+0x228>)
 8004336:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004338:	8979      	ldrh	r1, [r7, #10]
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fc84 	bl	8004c4c <I2C_MasterRequestRead>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e1c4      	b.n	80046d8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004352:	2b00      	cmp	r3, #0
 8004354:	d113      	bne.n	800437e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004356:	2300      	movs	r3, #0
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	623b      	str	r3, [r7, #32]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	623b      	str	r3, [r7, #32]
 800436a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	e198      	b.n	80046b0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004382:	2b01      	cmp	r3, #1
 8004384:	d11b      	bne.n	80043be <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e178      	b.n	80046b0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d11b      	bne.n	80043fe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	e158      	b.n	80046b0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800440c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004424:	e144      	b.n	80046b0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442a:	2b03      	cmp	r3, #3
 800442c:	f200 80f1 	bhi.w	8004612 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004434:	2b01      	cmp	r3, #1
 8004436:	d123      	bne.n	8004480 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 ff65 	bl	800530c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e145      	b.n	80046d8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800447e:	e117      	b.n	80046b0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004484:	2b02      	cmp	r3, #2
 8004486:	d14e      	bne.n	8004526 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448e:	2200      	movs	r2, #0
 8004490:	4906      	ldr	r1, [pc, #24]	@ (80044ac <HAL_I2C_Master_Receive+0x22c>)
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fd90 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d008      	beq.n	80044b0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e11a      	b.n	80046d8 <HAL_I2C_Master_Receive+0x458>
 80044a2:	bf00      	nop
 80044a4:	00100002 	.word	0x00100002
 80044a8:	ffff0000 	.word	0xffff0000
 80044ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004524:	e0c4      	b.n	80046b0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	2200      	movs	r2, #0
 800452e:	496c      	ldr	r1, [pc, #432]	@ (80046e0 <HAL_I2C_Master_Receive+0x460>)
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fd41 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0cb      	b.n	80046d8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800454e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	2200      	movs	r2, #0
 800458a:	4955      	ldr	r1, [pc, #340]	@ (80046e0 <HAL_I2C_Master_Receive+0x460>)
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fd13 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e09d      	b.n	80046d8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004610:	e04e      	b.n	80046b0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 fe78 	bl	800530c <I2C_WaitOnRXNEFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e058      	b.n	80046d8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b04      	cmp	r3, #4
 8004664:	d124      	bne.n	80046b0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466a:	2b03      	cmp	r3, #3
 800466c:	d107      	bne.n	800467e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800467c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f47f aeb6 	bne.w	8004426 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e000      	b.n	80046d8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
  }
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3728      	adds	r7, #40	@ 0x28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	00010004 	.word	0x00010004

080046e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08c      	sub	sp, #48	@ 0x30
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	4608      	mov	r0, r1
 80046ee:	4611      	mov	r1, r2
 80046f0:	461a      	mov	r2, r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	817b      	strh	r3, [r7, #10]
 80046f6:	460b      	mov	r3, r1
 80046f8:	813b      	strh	r3, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046fe:	f7ff f8c9 	bl	8003894 <HAL_GetTick>
 8004702:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b20      	cmp	r3, #32
 800470e:	f040 8214 	bne.w	8004b3a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	2319      	movs	r3, #25
 8004718:	2201      	movs	r2, #1
 800471a:	497b      	ldr	r1, [pc, #492]	@ (8004908 <HAL_I2C_Mem_Read+0x224>)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fc4b 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
 800472a:	e207      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_I2C_Mem_Read+0x56>
 8004736:	2302      	movs	r3, #2
 8004738:	e200      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d007      	beq.n	8004760 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800476e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2222      	movs	r2, #34	@ 0x22
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2240      	movs	r2, #64	@ 0x40
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800478a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004790:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a5b      	ldr	r2, [pc, #364]	@ (800490c <HAL_I2C_Mem_Read+0x228>)
 80047a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047a2:	88f8      	ldrh	r0, [r7, #6]
 80047a4:	893a      	ldrh	r2, [r7, #8]
 80047a6:	8979      	ldrh	r1, [r7, #10]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	4603      	mov	r3, r0
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fb18 	bl	8004de8 <I2C_RequestMemoryRead>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e1bc      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d113      	bne.n	80047f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	623b      	str	r3, [r7, #32]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	623b      	str	r3, [r7, #32]
 80047de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e190      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d11b      	bne.n	8004832 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004808:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e170      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004836:	2b02      	cmp	r3, #2
 8004838:	d11b      	bne.n	8004872 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004848:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	e150      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004888:	e144      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488e:	2b03      	cmp	r3, #3
 8004890:	f200 80f1 	bhi.w	8004a76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004898:	2b01      	cmp	r3, #1
 800489a:	d123      	bne.n	80048e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fd33 	bl	800530c <I2C_WaitOnRXNEFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e145      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048e2:	e117      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d14e      	bne.n	800498a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f2:	2200      	movs	r2, #0
 80048f4:	4906      	ldr	r1, [pc, #24]	@ (8004910 <HAL_I2C_Mem_Read+0x22c>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fb5e 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e11a      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
 8004906:	bf00      	nop
 8004908:	00100002 	.word	0x00100002
 800490c:	ffff0000 	.word	0xffff0000
 8004910:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004988:	e0c4      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004990:	2200      	movs	r2, #0
 8004992:	496c      	ldr	r1, [pc, #432]	@ (8004b44 <HAL_I2C_Mem_Read+0x460>)
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fb0f 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0cb      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ec:	2200      	movs	r2, #0
 80049ee:	4955      	ldr	r1, [pc, #340]	@ (8004b44 <HAL_I2C_Mem_Read+0x460>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fae1 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e09d      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a74:	e04e      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fc46 	bl	800530c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e058      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d124      	bne.n	8004b14 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d107      	bne.n	8004ae2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ae0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f47f aeb6 	bne.w	800488a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3728      	adds	r7, #40	@ 0x28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	00010004 	.word	0x00010004

08004b48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	460b      	mov	r3, r1
 8004b56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d006      	beq.n	8004b72 <I2C_MasterRequestWrite+0x2a>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d003      	beq.n	8004b72 <I2C_MasterRequestWrite+0x2a>
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b70:	d108      	bne.n	8004b84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e00b      	b.n	8004b9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b88:	2b12      	cmp	r3, #18
 8004b8a:	d107      	bne.n	8004b9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fa05 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc2:	d103      	bne.n	8004bcc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e035      	b.n	8004c3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bd8:	d108      	bne.n	8004bec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bda:	897b      	ldrh	r3, [r7, #10]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004be8:	611a      	str	r2, [r3, #16]
 8004bea:	e01b      	b.n	8004c24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bec:	897b      	ldrh	r3, [r7, #10]
 8004bee:	11db      	asrs	r3, r3, #7
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f003 0306 	and.w	r3, r3, #6
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f063 030f 	orn	r3, r3, #15
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	490e      	ldr	r1, [pc, #56]	@ (8004c44 <I2C_MasterRequestWrite+0xfc>)
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fa4e 	bl	80050ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e010      	b.n	8004c3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c1a:	897b      	ldrh	r3, [r7, #10]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	4907      	ldr	r1, [pc, #28]	@ (8004c48 <I2C_MasterRequestWrite+0x100>)
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fa3e 	bl	80050ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	00010008 	.word	0x00010008
 8004c48:	00010002 	.word	0x00010002

08004c4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d006      	beq.n	8004c86 <I2C_MasterRequestRead+0x3a>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d003      	beq.n	8004c86 <I2C_MasterRequestRead+0x3a>
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c84:	d108      	bne.n	8004c98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	e00b      	b.n	8004cb0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9c:	2b11      	cmp	r3, #17
 8004c9e:	d107      	bne.n	8004cb0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f97b 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00d      	beq.n	8004ce4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cd6:	d103      	bne.n	8004ce0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e079      	b.n	8004dd8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cec:	d108      	bne.n	8004d00 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004cee:	897b      	ldrh	r3, [r7, #10]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	611a      	str	r2, [r3, #16]
 8004cfe:	e05f      	b.n	8004dc0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d00:	897b      	ldrh	r3, [r7, #10]
 8004d02:	11db      	asrs	r3, r3, #7
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	f003 0306 	and.w	r3, r3, #6
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	f063 030f 	orn	r3, r3, #15
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	4930      	ldr	r1, [pc, #192]	@ (8004de0 <I2C_MasterRequestRead+0x194>)
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f9c4 	bl	80050ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e054      	b.n	8004dd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d2e:	897b      	ldrh	r3, [r7, #10]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	4929      	ldr	r1, [pc, #164]	@ (8004de4 <I2C_MasterRequestRead+0x198>)
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f9b4 	bl	80050ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e044      	b.n	8004dd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 f919 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00d      	beq.n	8004da8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d9a:	d103      	bne.n	8004da4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004da2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e017      	b.n	8004dd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004da8:	897b      	ldrh	r3, [r7, #10]
 8004daa:	11db      	asrs	r3, r3, #7
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f003 0306 	and.w	r3, r3, #6
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f063 030e 	orn	r3, r3, #14
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	4907      	ldr	r1, [pc, #28]	@ (8004de4 <I2C_MasterRequestRead+0x198>)
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f970 	bl	80050ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	00010008 	.word	0x00010008
 8004de4:	00010002 	.word	0x00010002

08004de8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	4608      	mov	r0, r1
 8004df2:	4611      	mov	r1, r2
 8004df4:	461a      	mov	r2, r3
 8004df6:	4603      	mov	r3, r0
 8004df8:	817b      	strh	r3, [r7, #10]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	813b      	strh	r3, [r7, #8]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f8c2 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00d      	beq.n	8004e56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e48:	d103      	bne.n	8004e52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e0aa      	b.n	8004fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e56:	897b      	ldrh	r3, [r7, #10]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	6a3a      	ldr	r2, [r7, #32]
 8004e6a:	4952      	ldr	r1, [pc, #328]	@ (8004fb4 <I2C_RequestMemoryRead+0x1cc>)
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f91d 	bl	80050ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e097      	b.n	8004fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e94:	6a39      	ldr	r1, [r7, #32]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f9a8 	bl	80051ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00d      	beq.n	8004ebe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d107      	bne.n	8004eba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e076      	b.n	8004fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d105      	bne.n	8004ed0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ec4:	893b      	ldrh	r3, [r7, #8]
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	611a      	str	r2, [r3, #16]
 8004ece:	e021      	b.n	8004f14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ed0:	893b      	ldrh	r3, [r7, #8]
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee0:	6a39      	ldr	r1, [r7, #32]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f982 	bl	80051ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00d      	beq.n	8004f0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d107      	bne.n	8004f06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e050      	b.n	8004fac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f0a:	893b      	ldrh	r3, [r7, #8]
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f16:	6a39      	ldr	r1, [r7, #32]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f967 	bl	80051ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00d      	beq.n	8004f40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d107      	bne.n	8004f3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e035      	b.n	8004fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f82b 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00d      	beq.n	8004f84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f76:	d103      	bne.n	8004f80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e013      	b.n	8004fac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f84:	897b      	ldrh	r3, [r7, #10]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	4906      	ldr	r1, [pc, #24]	@ (8004fb4 <I2C_RequestMemoryRead+0x1cc>)
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f886 	bl	80050ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	00010002 	.word	0x00010002

08004fb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fc8:	e048      	b.n	800505c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d044      	beq.n	800505c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd2:	f7fe fc5f 	bl	8003894 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d302      	bcc.n	8004fe8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d139      	bne.n	800505c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	0c1b      	lsrs	r3, r3, #16
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d10d      	bne.n	800500e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	43da      	mvns	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	e00c      	b.n	8005028 <I2C_WaitOnFlagUntilTimeout+0x70>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	43da      	mvns	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	4013      	ands	r3, r2
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf0c      	ite	eq
 8005020:	2301      	moveq	r3, #1
 8005022:	2300      	movne	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	429a      	cmp	r2, r3
 800502c:	d116      	bne.n	800505c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e023      	b.n	80050a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	0c1b      	lsrs	r3, r3, #16
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b01      	cmp	r3, #1
 8005064:	d10d      	bne.n	8005082 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	43da      	mvns	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4013      	ands	r3, r2
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	bf0c      	ite	eq
 8005078:	2301      	moveq	r3, #1
 800507a:	2300      	movne	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	e00c      	b.n	800509c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	43da      	mvns	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4013      	ands	r3, r2
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d093      	beq.n	8004fca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050ba:	e071      	b.n	80051a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ca:	d123      	bne.n	8005114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005100:	f043 0204 	orr.w	r2, r3, #4
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e067      	b.n	80051e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511a:	d041      	beq.n	80051a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511c:	f7fe fbba 	bl	8003894 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	429a      	cmp	r2, r3
 800512a:	d302      	bcc.n	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d136      	bne.n	80051a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	d10c      	bne.n	8005156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	43da      	mvns	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4013      	ands	r3, r2
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	bf14      	ite	ne
 800514e:	2301      	movne	r3, #1
 8005150:	2300      	moveq	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	e00b      	b.n	800516e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	43da      	mvns	r2, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4013      	ands	r3, r2
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d016      	beq.n	80051a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e021      	b.n	80051e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	0c1b      	lsrs	r3, r3, #16
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d10c      	bne.n	80051c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	43da      	mvns	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4013      	ands	r3, r2
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bf14      	ite	ne
 80051bc:	2301      	movne	r3, #1
 80051be:	2300      	moveq	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	e00b      	b.n	80051dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	43da      	mvns	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4013      	ands	r3, r2
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf14      	ite	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	2300      	moveq	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f47f af6d 	bne.w	80050bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051f8:	e034      	b.n	8005264 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f8e3 	bl	80053c6 <I2C_IsAcknowledgeFailed>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e034      	b.n	8005274 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d028      	beq.n	8005264 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005212:	f7fe fb3f 	bl	8003894 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	429a      	cmp	r2, r3
 8005220:	d302      	bcc.n	8005228 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d11d      	bne.n	8005264 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005232:	2b80      	cmp	r3, #128	@ 0x80
 8005234:	d016      	beq.n	8005264 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005250:	f043 0220 	orr.w	r2, r3, #32
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e007      	b.n	8005274 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526e:	2b80      	cmp	r3, #128	@ 0x80
 8005270:	d1c3      	bne.n	80051fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005288:	e034      	b.n	80052f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f89b 	bl	80053c6 <I2C_IsAcknowledgeFailed>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e034      	b.n	8005304 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d028      	beq.n	80052f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a2:	f7fe faf7 	bl	8003894 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d11d      	bne.n	80052f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d016      	beq.n	80052f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e0:	f043 0220 	orr.w	r2, r3, #32
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e007      	b.n	8005304 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d1c3      	bne.n	800528a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005318:	e049      	b.n	80053ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b10      	cmp	r3, #16
 8005326:	d119      	bne.n	800535c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0210 	mvn.w	r2, #16
 8005330:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e030      	b.n	80053be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535c:	f7fe fa9a 	bl	8003894 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	429a      	cmp	r2, r3
 800536a:	d302      	bcc.n	8005372 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d11d      	bne.n	80053ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537c:	2b40      	cmp	r3, #64	@ 0x40
 800537e:	d016      	beq.n	80053ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	f043 0220 	orr.w	r2, r3, #32
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e007      	b.n	80053be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b8:	2b40      	cmp	r3, #64	@ 0x40
 80053ba:	d1ae      	bne.n	800531a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053dc:	d11b      	bne.n	8005416 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005402:	f043 0204 	orr.w	r2, r3, #4
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e267      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d075      	beq.n	800552e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005442:	4b88      	ldr	r3, [pc, #544]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b04      	cmp	r3, #4
 800544c:	d00c      	beq.n	8005468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800544e:	4b85      	ldr	r3, [pc, #532]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005456:	2b08      	cmp	r3, #8
 8005458:	d112      	bne.n	8005480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800545a:	4b82      	ldr	r3, [pc, #520]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005462:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005466:	d10b      	bne.n	8005480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	4b7e      	ldr	r3, [pc, #504]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d05b      	beq.n	800552c <HAL_RCC_OscConfig+0x108>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d157      	bne.n	800552c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e242      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005488:	d106      	bne.n	8005498 <HAL_RCC_OscConfig+0x74>
 800548a:	4b76      	ldr	r3, [pc, #472]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a75      	ldr	r2, [pc, #468]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 8005490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e01d      	b.n	80054d4 <HAL_RCC_OscConfig+0xb0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCC_OscConfig+0x98>
 80054a2:	4b70      	ldr	r3, [pc, #448]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a6f      	ldr	r2, [pc, #444]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80054a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a6c      	ldr	r2, [pc, #432]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e00b      	b.n	80054d4 <HAL_RCC_OscConfig+0xb0>
 80054bc:	4b69      	ldr	r3, [pc, #420]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a68      	ldr	r2, [pc, #416]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80054c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4b66      	ldr	r3, [pc, #408]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a65      	ldr	r2, [pc, #404]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d013      	beq.n	8005504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054dc:	f7fe f9da 	bl	8003894 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054e4:	f7fe f9d6 	bl	8003894 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	@ 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e207      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0xc0>
 8005502:	e014      	b.n	800552e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fe f9c6 	bl	8003894 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800550c:	f7fe f9c2 	bl	8003894 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	@ 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e1f3      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800551e:	4b51      	ldr	r3, [pc, #324]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0xe8>
 800552a:	e000      	b.n	800552e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d063      	beq.n	8005602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800553a:	4b4a      	ldr	r3, [pc, #296]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005546:	4b47      	ldr	r3, [pc, #284]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800554e:	2b08      	cmp	r3, #8
 8005550:	d11c      	bne.n	800558c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005552:	4b44      	ldr	r3, [pc, #272]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d116      	bne.n	800558c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800555e:	4b41      	ldr	r3, [pc, #260]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_RCC_OscConfig+0x152>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d001      	beq.n	8005576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e1c7      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005576:	4b3b      	ldr	r3, [pc, #236]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4937      	ldr	r1, [pc, #220]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800558a:	e03a      	b.n	8005602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d020      	beq.n	80055d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005594:	4b34      	ldr	r3, [pc, #208]	@ (8005668 <HAL_RCC_OscConfig+0x244>)
 8005596:	2201      	movs	r2, #1
 8005598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559a:	f7fe f97b 	bl	8003894 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055a2:	f7fe f977 	bl	8003894 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e1a8      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c0:	4b28      	ldr	r3, [pc, #160]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	4925      	ldr	r1, [pc, #148]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	600b      	str	r3, [r1, #0]
 80055d4:	e015      	b.n	8005602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055d6:	4b24      	ldr	r3, [pc, #144]	@ (8005668 <HAL_RCC_OscConfig+0x244>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7fe f95a 	bl	8003894 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055e4:	f7fe f956 	bl	8003894 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e187      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d036      	beq.n	800567c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d016      	beq.n	8005644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005616:	4b15      	ldr	r3, [pc, #84]	@ (800566c <HAL_RCC_OscConfig+0x248>)
 8005618:	2201      	movs	r2, #1
 800561a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561c:	f7fe f93a 	bl	8003894 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005624:	f7fe f936 	bl	8003894 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e167      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005636:	4b0b      	ldr	r3, [pc, #44]	@ (8005664 <HAL_RCC_OscConfig+0x240>)
 8005638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x200>
 8005642:	e01b      	b.n	800567c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005644:	4b09      	ldr	r3, [pc, #36]	@ (800566c <HAL_RCC_OscConfig+0x248>)
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564a:	f7fe f923 	bl	8003894 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005650:	e00e      	b.n	8005670 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005652:	f7fe f91f 	bl	8003894 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d907      	bls.n	8005670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e150      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 8005664:	40023800 	.word	0x40023800
 8005668:	42470000 	.word	0x42470000
 800566c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005670:	4b88      	ldr	r3, [pc, #544]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 8005672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1ea      	bne.n	8005652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8097 	beq.w	80057b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800568a:	2300      	movs	r3, #0
 800568c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800568e:	4b81      	ldr	r3, [pc, #516]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10f      	bne.n	80056ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800569a:	2300      	movs	r3, #0
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	4b7d      	ldr	r3, [pc, #500]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 80056a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80056aa:	4b7a      	ldr	r3, [pc, #488]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056b6:	2301      	movs	r3, #1
 80056b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ba:	4b77      	ldr	r3, [pc, #476]	@ (8005898 <HAL_RCC_OscConfig+0x474>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d118      	bne.n	80056f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056c6:	4b74      	ldr	r3, [pc, #464]	@ (8005898 <HAL_RCC_OscConfig+0x474>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a73      	ldr	r2, [pc, #460]	@ (8005898 <HAL_RCC_OscConfig+0x474>)
 80056cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056d2:	f7fe f8df 	bl	8003894 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056da:	f7fe f8db 	bl	8003894 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e10c      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005898 <HAL_RCC_OscConfig+0x474>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0f0      	beq.n	80056da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d106      	bne.n	800570e <HAL_RCC_OscConfig+0x2ea>
 8005700:	4b64      	ldr	r3, [pc, #400]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 8005702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005704:	4a63      	ldr	r2, [pc, #396]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 8005706:	f043 0301 	orr.w	r3, r3, #1
 800570a:	6713      	str	r3, [r2, #112]	@ 0x70
 800570c:	e01c      	b.n	8005748 <HAL_RCC_OscConfig+0x324>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b05      	cmp	r3, #5
 8005714:	d10c      	bne.n	8005730 <HAL_RCC_OscConfig+0x30c>
 8005716:	4b5f      	ldr	r3, [pc, #380]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571a:	4a5e      	ldr	r2, [pc, #376]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 800571c:	f043 0304 	orr.w	r3, r3, #4
 8005720:	6713      	str	r3, [r2, #112]	@ 0x70
 8005722:	4b5c      	ldr	r3, [pc, #368]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005726:	4a5b      	ldr	r2, [pc, #364]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6713      	str	r3, [r2, #112]	@ 0x70
 800572e:	e00b      	b.n	8005748 <HAL_RCC_OscConfig+0x324>
 8005730:	4b58      	ldr	r3, [pc, #352]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005734:	4a57      	ldr	r2, [pc, #348]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	6713      	str	r3, [r2, #112]	@ 0x70
 800573c:	4b55      	ldr	r3, [pc, #340]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005740:	4a54      	ldr	r2, [pc, #336]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 8005742:	f023 0304 	bic.w	r3, r3, #4
 8005746:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d015      	beq.n	800577c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005750:	f7fe f8a0 	bl	8003894 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005756:	e00a      	b.n	800576e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005758:	f7fe f89c 	bl	8003894 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e0cb      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576e:	4b49      	ldr	r3, [pc, #292]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0ee      	beq.n	8005758 <HAL_RCC_OscConfig+0x334>
 800577a:	e014      	b.n	80057a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800577c:	f7fe f88a 	bl	8003894 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005782:	e00a      	b.n	800579a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005784:	f7fe f886 	bl	8003894 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e0b5      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800579a:	4b3e      	ldr	r3, [pc, #248]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 800579c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1ee      	bne.n	8005784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d105      	bne.n	80057b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ac:	4b39      	ldr	r3, [pc, #228]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 80057ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b0:	4a38      	ldr	r2, [pc, #224]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 80057b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80a1 	beq.w	8005904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057c2:	4b34      	ldr	r3, [pc, #208]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 030c 	and.w	r3, r3, #12
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d05c      	beq.n	8005888 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d141      	bne.n	800585a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d6:	4b31      	ldr	r3, [pc, #196]	@ (800589c <HAL_RCC_OscConfig+0x478>)
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057dc:	f7fe f85a 	bl	8003894 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e4:	f7fe f856 	bl	8003894 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e087      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f6:	4b27      	ldr	r3, [pc, #156]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69da      	ldr	r2, [r3, #28]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	019b      	lsls	r3, r3, #6
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005818:	085b      	lsrs	r3, r3, #1
 800581a:	3b01      	subs	r3, #1
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	061b      	lsls	r3, r3, #24
 8005826:	491b      	ldr	r1, [pc, #108]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 8005828:	4313      	orrs	r3, r2
 800582a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800582c:	4b1b      	ldr	r3, [pc, #108]	@ (800589c <HAL_RCC_OscConfig+0x478>)
 800582e:	2201      	movs	r2, #1
 8005830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005832:	f7fe f82f 	bl	8003894 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800583a:	f7fe f82b 	bl	8003894 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e05c      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800584c:	4b11      	ldr	r3, [pc, #68]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f0      	beq.n	800583a <HAL_RCC_OscConfig+0x416>
 8005858:	e054      	b.n	8005904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585a:	4b10      	ldr	r3, [pc, #64]	@ (800589c <HAL_RCC_OscConfig+0x478>)
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005860:	f7fe f818 	bl	8003894 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005868:	f7fe f814 	bl	8003894 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e045      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800587a:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <HAL_RCC_OscConfig+0x470>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x444>
 8005886:	e03d      	b.n	8005904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d107      	bne.n	80058a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e038      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
 8005894:	40023800 	.word	0x40023800
 8005898:	40007000 	.word	0x40007000
 800589c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005910 <HAL_RCC_OscConfig+0x4ec>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d028      	beq.n	8005900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d121      	bne.n	8005900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d11a      	bne.n	8005900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80058d0:	4013      	ands	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058d8:	4293      	cmp	r3, r2
 80058da:	d111      	bne.n	8005900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	3b01      	subs	r3, #1
 80058ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800

08005914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0cc      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005928:	4b68      	ldr	r3, [pc, #416]	@ (8005acc <HAL_RCC_ClockConfig+0x1b8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d90c      	bls.n	8005950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005936:	4b65      	ldr	r3, [pc, #404]	@ (8005acc <HAL_RCC_ClockConfig+0x1b8>)
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800593e:	4b63      	ldr	r3, [pc, #396]	@ (8005acc <HAL_RCC_ClockConfig+0x1b8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d001      	beq.n	8005950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0b8      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005968:	4b59      	ldr	r3, [pc, #356]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	4a58      	ldr	r2, [pc, #352]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800596e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005980:	4b53      	ldr	r3, [pc, #332]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4a52      	ldr	r2, [pc, #328]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800598a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800598c:	4b50      	ldr	r3, [pc, #320]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	494d      	ldr	r1, [pc, #308]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	4313      	orrs	r3, r2
 800599c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d044      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d107      	bne.n	80059c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059b2:	4b47      	ldr	r3, [pc, #284]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d119      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e07f      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d003      	beq.n	80059d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d107      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d2:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e06f      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e067      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059f2:	4b37      	ldr	r3, [pc, #220]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f023 0203 	bic.w	r2, r3, #3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	4934      	ldr	r1, [pc, #208]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a04:	f7fd ff46 	bl	8003894 <HAL_GetTick>
 8005a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0a:	e00a      	b.n	8005a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a0c:	f7fd ff42 	bl	8003894 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e04f      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a22:	4b2b      	ldr	r3, [pc, #172]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 020c 	and.w	r2, r3, #12
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d1eb      	bne.n	8005a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a34:	4b25      	ldr	r3, [pc, #148]	@ (8005acc <HAL_RCC_ClockConfig+0x1b8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d20c      	bcs.n	8005a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a42:	4b22      	ldr	r3, [pc, #136]	@ (8005acc <HAL_RCC_ClockConfig+0x1b8>)
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4a:	4b20      	ldr	r3, [pc, #128]	@ (8005acc <HAL_RCC_ClockConfig+0x1b8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d001      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e032      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a68:	4b19      	ldr	r3, [pc, #100]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	4916      	ldr	r1, [pc, #88]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a86:	4b12      	ldr	r3, [pc, #72]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	490e      	ldr	r1, [pc, #56]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a9a:	f000 f821 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	091b      	lsrs	r3, r3, #4
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	490a      	ldr	r1, [pc, #40]	@ (8005ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8005aac:	5ccb      	ldrb	r3, [r1, r3]
 8005aae:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab2:	4a09      	ldr	r2, [pc, #36]	@ (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ab6:	4b09      	ldr	r3, [pc, #36]	@ (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fd fea6 	bl	800380c <HAL_InitTick>

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40023c00 	.word	0x40023c00
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	08007fc0 	.word	0x08007fc0
 8005ad8:	20000000 	.word	0x20000000
 8005adc:	20000004 	.word	0x20000004

08005ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ae4:	b090      	sub	sp, #64	@ 0x40
 8005ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aec:	2300      	movs	r3, #0
 8005aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005af0:	2300      	movs	r3, #0
 8005af2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005af8:	4b59      	ldr	r3, [pc, #356]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 030c 	and.w	r3, r3, #12
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d00d      	beq.n	8005b20 <HAL_RCC_GetSysClockFreq+0x40>
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	f200 80a1 	bhi.w	8005c4c <HAL_RCC_GetSysClockFreq+0x16c>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_RCC_GetSysClockFreq+0x34>
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d003      	beq.n	8005b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8005b12:	e09b      	b.n	8005c4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b14:	4b53      	ldr	r3, [pc, #332]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b16:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005b18:	e09b      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b1a:	4b53      	ldr	r3, [pc, #332]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b1e:	e098      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b20:	4b4f      	ldr	r3, [pc, #316]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b28:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b2a:	4b4d      	ldr	r3, [pc, #308]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d028      	beq.n	8005b88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b36:	4b4a      	ldr	r3, [pc, #296]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	099b      	lsrs	r3, r3, #6
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	623b      	str	r3, [r7, #32]
 8005b40:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4b47      	ldr	r3, [pc, #284]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b4c:	fb03 f201 	mul.w	r2, r3, r1
 8005b50:	2300      	movs	r3, #0
 8005b52:	fb00 f303 	mul.w	r3, r0, r3
 8005b56:	4413      	add	r3, r2
 8005b58:	4a43      	ldr	r2, [pc, #268]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b5a:	fba0 1202 	umull	r1, r2, r0, r2
 8005b5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b60:	460a      	mov	r2, r1
 8005b62:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005b64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b66:	4413      	add	r3, r2
 8005b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	61bb      	str	r3, [r7, #24]
 8005b70:	61fa      	str	r2, [r7, #28]
 8005b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005b7a:	f7fa ff97 	bl	8000aac <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4613      	mov	r3, r2
 8005b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b86:	e053      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b88:	4b35      	ldr	r3, [pc, #212]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	099b      	lsrs	r3, r3, #6
 8005b8e:	2200      	movs	r2, #0
 8005b90:	613b      	str	r3, [r7, #16]
 8005b92:	617a      	str	r2, [r7, #20]
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b9a:	f04f 0b00 	mov.w	fp, #0
 8005b9e:	4652      	mov	r2, sl
 8005ba0:	465b      	mov	r3, fp
 8005ba2:	f04f 0000 	mov.w	r0, #0
 8005ba6:	f04f 0100 	mov.w	r1, #0
 8005baa:	0159      	lsls	r1, r3, #5
 8005bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bb0:	0150      	lsls	r0, r2, #5
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	ebb2 080a 	subs.w	r8, r2, sl
 8005bba:	eb63 090b 	sbc.w	r9, r3, fp
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005bca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005bce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005bd2:	ebb2 0408 	subs.w	r4, r2, r8
 8005bd6:	eb63 0509 	sbc.w	r5, r3, r9
 8005bda:	f04f 0200 	mov.w	r2, #0
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	00eb      	lsls	r3, r5, #3
 8005be4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005be8:	00e2      	lsls	r2, r4, #3
 8005bea:	4614      	mov	r4, r2
 8005bec:	461d      	mov	r5, r3
 8005bee:	eb14 030a 	adds.w	r3, r4, sl
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	eb45 030b 	adc.w	r3, r5, fp
 8005bf8:	607b      	str	r3, [r7, #4]
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c06:	4629      	mov	r1, r5
 8005c08:	028b      	lsls	r3, r1, #10
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c10:	4621      	mov	r1, r4
 8005c12:	028a      	lsls	r2, r1, #10
 8005c14:	4610      	mov	r0, r2
 8005c16:	4619      	mov	r1, r3
 8005c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	60fa      	str	r2, [r7, #12]
 8005c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c24:	f7fa ff42 	bl	8000aac <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c30:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005c40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c4a:	e002      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c4c:	4b05      	ldr	r3, [pc, #20]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3740      	adds	r7, #64	@ 0x40
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800
 8005c64:	00f42400 	.word	0x00f42400
 8005c68:	017d7840 	.word	0x017d7840

08005c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c70:	4b03      	ldr	r3, [pc, #12]	@ (8005c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c72:	681b      	ldr	r3, [r3, #0]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000000 	.word	0x20000000

08005c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c88:	f7ff fff0 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	0a9b      	lsrs	r3, r3, #10
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	4903      	ldr	r1, [pc, #12]	@ (8005ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c9a:	5ccb      	ldrb	r3, [r1, r3]
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	08007fd0 	.word	0x08007fd0

08005cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e07b      	b.n	8005db6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d108      	bne.n	8005cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cce:	d009      	beq.n	8005ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	61da      	str	r2, [r3, #28]
 8005cd6:	e005      	b.n	8005ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fd f8b4 	bl	8002e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d68:	ea42 0103 	orr.w	r1, r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	0c1b      	lsrs	r3, r3, #16
 8005d82:	f003 0104 	and.w	r1, r3, #4
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8a:	f003 0210 	and.w	r2, r3, #16
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005da4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b088      	sub	sp, #32
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	603b      	str	r3, [r7, #0]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_SPI_Transmit+0x22>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e12d      	b.n	800603c <HAL_SPI_Transmit+0x27e>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005de8:	f7fd fd54 	bl	8003894 <HAL_GetTick>
 8005dec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d002      	beq.n	8005e04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dfe:	2302      	movs	r3, #2
 8005e00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e02:	e116      	b.n	8006032 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_SPI_Transmit+0x52>
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e14:	e10d      	b.n	8006032 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2203      	movs	r2, #3
 8005e1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	88fa      	ldrh	r2, [r7, #6]
 8005e2e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	88fa      	ldrh	r2, [r7, #6]
 8005e34:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e5c:	d10f      	bne.n	8005e7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e88:	2b40      	cmp	r3, #64	@ 0x40
 8005e8a:	d007      	beq.n	8005e9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea4:	d14f      	bne.n	8005f46 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_SPI_Transmit+0xf6>
 8005eae:	8afb      	ldrh	r3, [r7, #22]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d142      	bne.n	8005f3a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb8:	881a      	ldrh	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec4:	1c9a      	adds	r2, r3, #2
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ed8:	e02f      	b.n	8005f3a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d112      	bne.n	8005f0e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eec:	881a      	ldrh	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef8:	1c9a      	adds	r2, r3, #2
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f0c:	e015      	b.n	8005f3a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f0e:	f7fd fcc1 	bl	8003894 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d803      	bhi.n	8005f26 <HAL_SPI_Transmit+0x168>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f24:	d102      	bne.n	8005f2c <HAL_SPI_Transmit+0x16e>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d106      	bne.n	8005f3a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005f38:	e07b      	b.n	8006032 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1ca      	bne.n	8005eda <HAL_SPI_Transmit+0x11c>
 8005f44:	e050      	b.n	8005fe8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_SPI_Transmit+0x196>
 8005f4e:	8afb      	ldrh	r3, [r7, #22]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d144      	bne.n	8005fde <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f7a:	e030      	b.n	8005fde <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d113      	bne.n	8005fb2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	330c      	adds	r3, #12
 8005f94:	7812      	ldrb	r2, [r2, #0]
 8005f96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fb0:	e015      	b.n	8005fde <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fb2:	f7fd fc6f 	bl	8003894 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d803      	bhi.n	8005fca <HAL_SPI_Transmit+0x20c>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d102      	bne.n	8005fd0 <HAL_SPI_Transmit+0x212>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d106      	bne.n	8005fde <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005fdc:	e029      	b.n	8006032 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1c9      	bne.n	8005f7c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fbdf 	bl	80067b0 <SPI_EndRxTxTransaction>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006006:	2300      	movs	r3, #0
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e003      	b.n	8006032 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800603a:	7ffb      	ldrb	r3, [r7, #31]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af02      	add	r7, sp, #8
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	d002      	beq.n	800606a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006064:	2302      	movs	r3, #2
 8006066:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006068:	e0fb      	b.n	8006262 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006072:	d112      	bne.n	800609a <HAL_SPI_Receive+0x56>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10e      	bne.n	800609a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2204      	movs	r2, #4
 8006080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006084:	88fa      	ldrh	r2, [r7, #6]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	4613      	mov	r3, r2
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f8ef 	bl	8006274 <HAL_SPI_TransmitReceive>
 8006096:	4603      	mov	r3, r0
 8006098:	e0e8      	b.n	800626c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_SPI_Receive+0x64>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e0e1      	b.n	800626c <HAL_SPI_Receive+0x228>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060b0:	f7fd fbf0 	bl	8003894 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <HAL_SPI_Receive+0x7e>
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d102      	bne.n	80060c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060c6:	e0cc      	b.n	8006262 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2204      	movs	r2, #4
 80060cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	88fa      	ldrh	r2, [r7, #6]
 80060e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	88fa      	ldrh	r2, [r7, #6]
 80060e6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800610e:	d10f      	bne.n	8006130 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800611e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800612e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613a:	2b40      	cmp	r3, #64	@ 0x40
 800613c:	d007      	beq.n	800614e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800614c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d16a      	bne.n	800622c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006156:	e032      	b.n	80061be <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b01      	cmp	r3, #1
 8006164:	d115      	bne.n	8006192 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f103 020c 	add.w	r2, r3, #12
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006172:	7812      	ldrb	r2, [r2, #0]
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006190:	e015      	b.n	80061be <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006192:	f7fd fb7f 	bl	8003894 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d803      	bhi.n	80061aa <HAL_SPI_Receive+0x166>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d102      	bne.n	80061b0 <HAL_SPI_Receive+0x16c>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80061bc:	e051      	b.n	8006262 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1c7      	bne.n	8006158 <HAL_SPI_Receive+0x114>
 80061c8:	e035      	b.n	8006236 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d113      	bne.n	8006200 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e2:	b292      	uxth	r2, r2
 80061e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ea:	1c9a      	adds	r2, r3, #2
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061fe:	e015      	b.n	800622c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006200:	f7fd fb48 	bl	8003894 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d803      	bhi.n	8006218 <HAL_SPI_Receive+0x1d4>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006216:	d102      	bne.n	800621e <HAL_SPI_Receive+0x1da>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800622a:	e01a      	b.n	8006262 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1c9      	bne.n	80061ca <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 fa52 	bl	80066e4 <SPI_EndRxTransaction>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2220      	movs	r2, #32
 800624a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
 8006258:	e003      	b.n	8006262 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800626a:	7dfb      	ldrb	r3, [r7, #23]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08c      	sub	sp, #48	@ 0x30
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006282:	2301      	movs	r3, #1
 8006284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_SPI_TransmitReceive+0x26>
 8006296:	2302      	movs	r3, #2
 8006298:	e198      	b.n	80065cc <HAL_SPI_TransmitReceive+0x358>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062a2:	f7fd faf7 	bl	8003894 <HAL_GetTick>
 80062a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062b8:	887b      	ldrh	r3, [r7, #2]
 80062ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d00f      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x70>
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062ca:	d107      	bne.n	80062dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d103      	bne.n	80062dc <HAL_SPI_TransmitReceive+0x68>
 80062d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d003      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062dc:	2302      	movs	r3, #2
 80062de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80062e2:	e16d      	b.n	80065c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d005      	beq.n	80062f6 <HAL_SPI_TransmitReceive+0x82>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <HAL_SPI_TransmitReceive+0x82>
 80062f0:	887b      	ldrh	r3, [r7, #2]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d103      	bne.n	80062fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80062fc:	e160      	b.n	80065c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b04      	cmp	r3, #4
 8006308:	d003      	beq.n	8006312 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2205      	movs	r2, #5
 800630e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	887a      	ldrh	r2, [r7, #2]
 8006322:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	887a      	ldrh	r2, [r7, #2]
 8006328:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	887a      	ldrh	r2, [r7, #2]
 8006334:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	887a      	ldrh	r2, [r7, #2]
 800633a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006352:	2b40      	cmp	r3, #64	@ 0x40
 8006354:	d007      	beq.n	8006366 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006364:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800636e:	d17c      	bne.n	800646a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_SPI_TransmitReceive+0x10a>
 8006378:	8b7b      	ldrh	r3, [r7, #26]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d16a      	bne.n	8006454 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006382:	881a      	ldrh	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638e:	1c9a      	adds	r2, r3, #2
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a2:	e057      	b.n	8006454 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d11b      	bne.n	80063ea <HAL_SPI_TransmitReceive+0x176>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d016      	beq.n	80063ea <HAL_SPI_TransmitReceive+0x176>
 80063bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d113      	bne.n	80063ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c6:	881a      	ldrh	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d2:	1c9a      	adds	r2, r3, #2
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d119      	bne.n	800642c <HAL_SPI_TransmitReceive+0x1b8>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d014      	beq.n	800642c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640c:	b292      	uxth	r2, r2
 800640e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006414:	1c9a      	adds	r2, r3, #2
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006428:	2301      	movs	r3, #1
 800642a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800642c:	f7fd fa32 	bl	8003894 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006438:	429a      	cmp	r2, r3
 800643a:	d80b      	bhi.n	8006454 <HAL_SPI_TransmitReceive+0x1e0>
 800643c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006442:	d007      	beq.n	8006454 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006452:	e0b5      	b.n	80065c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1a2      	bne.n	80063a4 <HAL_SPI_TransmitReceive+0x130>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d19d      	bne.n	80063a4 <HAL_SPI_TransmitReceive+0x130>
 8006468:	e080      	b.n	800656c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <HAL_SPI_TransmitReceive+0x204>
 8006472:	8b7b      	ldrh	r3, [r7, #26]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d16f      	bne.n	8006558 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	330c      	adds	r3, #12
 8006482:	7812      	ldrb	r2, [r2, #0]
 8006484:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006494:	b29b      	uxth	r3, r3
 8006496:	3b01      	subs	r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800649e:	e05b      	b.n	8006558 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d11c      	bne.n	80064e8 <HAL_SPI_TransmitReceive+0x274>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d017      	beq.n	80064e8 <HAL_SPI_TransmitReceive+0x274>
 80064b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d114      	bne.n	80064e8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	7812      	ldrb	r2, [r2, #0]
 80064ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d119      	bne.n	800652a <HAL_SPI_TransmitReceive+0x2b6>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d014      	beq.n	800652a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006526:	2301      	movs	r3, #1
 8006528:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800652a:	f7fd f9b3 	bl	8003894 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006536:	429a      	cmp	r2, r3
 8006538:	d803      	bhi.n	8006542 <HAL_SPI_TransmitReceive+0x2ce>
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d102      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x2d4>
 8006542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006544:	2b00      	cmp	r3, #0
 8006546:	d107      	bne.n	8006558 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006556:	e033      	b.n	80065c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d19e      	bne.n	80064a0 <HAL_SPI_TransmitReceive+0x22c>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d199      	bne.n	80064a0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800656c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800656e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f91d 	bl	80067b0 <SPI_EndRxTxTransaction>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d006      	beq.n	800658a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2220      	movs	r2, #32
 8006586:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006588:	e01a      	b.n	80065c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065b6:	e003      	b.n	80065c0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80065c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3730      	adds	r7, #48	@ 0x30
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065e4:	f7fd f956 	bl	8003894 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	4413      	add	r3, r2
 80065f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065f4:	f7fd f94e 	bl	8003894 <HAL_GetTick>
 80065f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065fa:	4b39      	ldr	r3, [pc, #228]	@ (80066e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	015b      	lsls	r3, r3, #5
 8006600:	0d1b      	lsrs	r3, r3, #20
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	fb02 f303 	mul.w	r3, r2, r3
 8006608:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800660a:	e054      	b.n	80066b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d050      	beq.n	80066b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006614:	f7fd f93e 	bl	8003894 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	69fa      	ldr	r2, [r7, #28]
 8006620:	429a      	cmp	r2, r3
 8006622:	d902      	bls.n	800662a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d13d      	bne.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006638:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006642:	d111      	bne.n	8006668 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800664c:	d004      	beq.n	8006658 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006656:	d107      	bne.n	8006668 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006666:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006670:	d10f      	bne.n	8006692 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006690:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e017      	b.n	80066d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4013      	ands	r3, r2
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	bf0c      	ite	eq
 80066c6:	2301      	moveq	r3, #1
 80066c8:	2300      	movne	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d19b      	bne.n	800660c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3720      	adds	r7, #32
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20000000 	.word	0x20000000

080066e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066f8:	d111      	bne.n	800671e <SPI_EndRxTransaction+0x3a>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006702:	d004      	beq.n	800670e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800670c:	d107      	bne.n	800671e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800671c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006726:	d12a      	bne.n	800677e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006730:	d012      	beq.n	8006758 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2200      	movs	r2, #0
 800673a:	2180      	movs	r1, #128	@ 0x80
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f7ff ff49 	bl	80065d4 <SPI_WaitFlagStateUntilTimeout>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d02d      	beq.n	80067a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674c:	f043 0220 	orr.w	r2, r3, #32
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e026      	b.n	80067a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2200      	movs	r2, #0
 8006760:	2101      	movs	r1, #1
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f7ff ff36 	bl	80065d4 <SPI_WaitFlagStateUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01a      	beq.n	80067a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006772:	f043 0220 	orr.w	r2, r3, #32
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e013      	b.n	80067a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2200      	movs	r2, #0
 8006786:	2101      	movs	r1, #1
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff ff23 	bl	80065d4 <SPI_WaitFlagStateUntilTimeout>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006798:	f043 0220 	orr.w	r2, r3, #32
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e000      	b.n	80067a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2201      	movs	r2, #1
 80067c4:	2102      	movs	r1, #2
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff ff04 	bl	80065d4 <SPI_WaitFlagStateUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d6:	f043 0220 	orr.w	r2, r3, #32
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e032      	b.n	8006848 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006850 <SPI_EndRxTxTransaction+0xa0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006854 <SPI_EndRxTxTransaction+0xa4>)
 80067e8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ec:	0d5b      	lsrs	r3, r3, #21
 80067ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80067f2:	fb02 f303 	mul.w	r3, r2, r3
 80067f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006800:	d112      	bne.n	8006828 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2200      	movs	r2, #0
 800680a:	2180      	movs	r1, #128	@ 0x80
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7ff fee1 	bl	80065d4 <SPI_WaitFlagStateUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d016      	beq.n	8006846 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681c:	f043 0220 	orr.w	r2, r3, #32
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e00f      	b.n	8006848 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	3b01      	subs	r3, #1
 8006832:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800683e:	2b80      	cmp	r3, #128	@ 0x80
 8006840:	d0f2      	beq.n	8006828 <SPI_EndRxTxTransaction+0x78>
 8006842:	e000      	b.n	8006846 <SPI_EndRxTxTransaction+0x96>
        break;
 8006844:	bf00      	nop
  }

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20000000 	.word	0x20000000
 8006854:	165e9f81 	.word	0x165e9f81

08006858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e041      	b.n	80068ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fc fbe4 	bl	800304c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3304      	adds	r3, #4
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f000 f976 	bl	8006b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b01      	cmp	r3, #1
 800690a:	d001      	beq.n	8006910 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e03c      	b.n	800698a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1e      	ldr	r2, [pc, #120]	@ (8006998 <HAL_TIM_Base_Start+0xa0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d018      	beq.n	8006954 <HAL_TIM_Base_Start+0x5c>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800692a:	d013      	beq.n	8006954 <HAL_TIM_Base_Start+0x5c>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1a      	ldr	r2, [pc, #104]	@ (800699c <HAL_TIM_Base_Start+0xa4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00e      	beq.n	8006954 <HAL_TIM_Base_Start+0x5c>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a19      	ldr	r2, [pc, #100]	@ (80069a0 <HAL_TIM_Base_Start+0xa8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d009      	beq.n	8006954 <HAL_TIM_Base_Start+0x5c>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a17      	ldr	r2, [pc, #92]	@ (80069a4 <HAL_TIM_Base_Start+0xac>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d004      	beq.n	8006954 <HAL_TIM_Base_Start+0x5c>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a16      	ldr	r2, [pc, #88]	@ (80069a8 <HAL_TIM_Base_Start+0xb0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d111      	bne.n	8006978 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b06      	cmp	r3, #6
 8006964:	d010      	beq.n	8006988 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f042 0201 	orr.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006976:	e007      	b.n	8006988 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40010000 	.word	0x40010000
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	40014000 	.word	0x40014000

080069ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6a1a      	ldr	r2, [r3, #32]
 80069ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 80069be:	4013      	ands	r3, r2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10f      	bne.n	80069e4 <HAL_TIM_Base_Stop+0x38>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6a1a      	ldr	r2, [r3, #32]
 80069ca:	f240 4344 	movw	r3, #1092	@ 0x444
 80069ce:	4013      	ands	r3, r2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d107      	bne.n	80069e4 <HAL_TIM_Base_Stop+0x38>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0201 	bic.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_TIM_ConfigClockSource+0x1c>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e0b4      	b.n	8006b80 <HAL_TIM_ConfigClockSource+0x186>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a3c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a4e:	d03e      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0xd4>
 8006a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a54:	f200 8087 	bhi.w	8006b66 <HAL_TIM_ConfigClockSource+0x16c>
 8006a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a5c:	f000 8086 	beq.w	8006b6c <HAL_TIM_ConfigClockSource+0x172>
 8006a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a64:	d87f      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x16c>
 8006a66:	2b70      	cmp	r3, #112	@ 0x70
 8006a68:	d01a      	beq.n	8006aa0 <HAL_TIM_ConfigClockSource+0xa6>
 8006a6a:	2b70      	cmp	r3, #112	@ 0x70
 8006a6c:	d87b      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x16c>
 8006a6e:	2b60      	cmp	r3, #96	@ 0x60
 8006a70:	d050      	beq.n	8006b14 <HAL_TIM_ConfigClockSource+0x11a>
 8006a72:	2b60      	cmp	r3, #96	@ 0x60
 8006a74:	d877      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x16c>
 8006a76:	2b50      	cmp	r3, #80	@ 0x50
 8006a78:	d03c      	beq.n	8006af4 <HAL_TIM_ConfigClockSource+0xfa>
 8006a7a:	2b50      	cmp	r3, #80	@ 0x50
 8006a7c:	d873      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x16c>
 8006a7e:	2b40      	cmp	r3, #64	@ 0x40
 8006a80:	d058      	beq.n	8006b34 <HAL_TIM_ConfigClockSource+0x13a>
 8006a82:	2b40      	cmp	r3, #64	@ 0x40
 8006a84:	d86f      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x16c>
 8006a86:	2b30      	cmp	r3, #48	@ 0x30
 8006a88:	d064      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x15a>
 8006a8a:	2b30      	cmp	r3, #48	@ 0x30
 8006a8c:	d86b      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x16c>
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d060      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x15a>
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d867      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x16c>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d05c      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x15a>
 8006a9a:	2b10      	cmp	r3, #16
 8006a9c:	d05a      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x15a>
 8006a9e:	e062      	b.n	8006b66 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ab0:	f000 f970 	bl	8006d94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ac2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	609a      	str	r2, [r3, #8]
      break;
 8006acc:	e04f      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ade:	f000 f959 	bl	8006d94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006af0:	609a      	str	r2, [r3, #8]
      break;
 8006af2:	e03c      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b00:	461a      	mov	r2, r3
 8006b02:	f000 f8cd 	bl	8006ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2150      	movs	r1, #80	@ 0x50
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 f926 	bl	8006d5e <TIM_ITRx_SetConfig>
      break;
 8006b12:	e02c      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b20:	461a      	mov	r2, r3
 8006b22:	f000 f8ec 	bl	8006cfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2160      	movs	r1, #96	@ 0x60
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 f916 	bl	8006d5e <TIM_ITRx_SetConfig>
      break;
 8006b32:	e01c      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b40:	461a      	mov	r2, r3
 8006b42:	f000 f8ad 	bl	8006ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2140      	movs	r1, #64	@ 0x40
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 f906 	bl	8006d5e <TIM_ITRx_SetConfig>
      break;
 8006b52:	e00c      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f000 f8fd 	bl	8006d5e <TIM_ITRx_SetConfig>
      break;
 8006b64:	e003      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	73fb      	strb	r3, [r7, #15]
      break;
 8006b6a:	e000      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a3a      	ldr	r2, [pc, #232]	@ (8006c84 <TIM_Base_SetConfig+0xfc>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00f      	beq.n	8006bc0 <TIM_Base_SetConfig+0x38>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba6:	d00b      	beq.n	8006bc0 <TIM_Base_SetConfig+0x38>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a37      	ldr	r2, [pc, #220]	@ (8006c88 <TIM_Base_SetConfig+0x100>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d007      	beq.n	8006bc0 <TIM_Base_SetConfig+0x38>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a36      	ldr	r2, [pc, #216]	@ (8006c8c <TIM_Base_SetConfig+0x104>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d003      	beq.n	8006bc0 <TIM_Base_SetConfig+0x38>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a35      	ldr	r2, [pc, #212]	@ (8006c90 <TIM_Base_SetConfig+0x108>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d108      	bne.n	8006bd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8006c84 <TIM_Base_SetConfig+0xfc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d01b      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be0:	d017      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a28      	ldr	r2, [pc, #160]	@ (8006c88 <TIM_Base_SetConfig+0x100>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d013      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a27      	ldr	r2, [pc, #156]	@ (8006c8c <TIM_Base_SetConfig+0x104>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00f      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a26      	ldr	r2, [pc, #152]	@ (8006c90 <TIM_Base_SetConfig+0x108>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00b      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a25      	ldr	r2, [pc, #148]	@ (8006c94 <TIM_Base_SetConfig+0x10c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d007      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a24      	ldr	r2, [pc, #144]	@ (8006c98 <TIM_Base_SetConfig+0x110>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d003      	beq.n	8006c12 <TIM_Base_SetConfig+0x8a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a23      	ldr	r2, [pc, #140]	@ (8006c9c <TIM_Base_SetConfig+0x114>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d108      	bne.n	8006c24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8006c84 <TIM_Base_SetConfig+0xfc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d103      	bne.n	8006c58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d105      	bne.n	8006c76 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f023 0201 	bic.w	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	611a      	str	r2, [r3, #16]
  }
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40010000 	.word	0x40010000
 8006c88:	40000400 	.word	0x40000400
 8006c8c:	40000800 	.word	0x40000800
 8006c90:	40000c00 	.word	0x40000c00
 8006c94:	40014000 	.word	0x40014000
 8006c98:	40014400 	.word	0x40014400
 8006c9c:	40014800 	.word	0x40014800

08006ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f023 0201 	bic.w	r2, r3, #1
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f023 030a 	bic.w	r3, r3, #10
 8006cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	621a      	str	r2, [r3, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b087      	sub	sp, #28
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	f023 0210 	bic.w	r2, r3, #16
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	031b      	lsls	r3, r3, #12
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	f043 0307 	orr.w	r3, r3, #7
 8006d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	609a      	str	r2, [r3, #8]
}
 8006d88:	bf00      	nop
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	021a      	lsls	r2, r3, #8
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	609a      	str	r2, [r3, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e050      	b.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d018      	beq.n	8006e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e38:	d013      	beq.n	8006e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a18      	ldr	r2, [pc, #96]	@ (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00e      	beq.n	8006e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a16      	ldr	r2, [pc, #88]	@ (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d009      	beq.n	8006e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a15      	ldr	r2, [pc, #84]	@ (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d004      	beq.n	8006e62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a13      	ldr	r2, [pc, #76]	@ (8006eac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d10c      	bne.n	8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40010000 	.word	0x40010000
 8006ea0:	40000400 	.word	0x40000400
 8006ea4:	40000800 	.word	0x40000800
 8006ea8:	40000c00 	.word	0x40000c00
 8006eac:	40014000 	.word	0x40014000

08006eb0 <std>:
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	b510      	push	{r4, lr}
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	e9c0 3300 	strd	r3, r3, [r0]
 8006eba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ebe:	6083      	str	r3, [r0, #8]
 8006ec0:	8181      	strh	r1, [r0, #12]
 8006ec2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ec4:	81c2      	strh	r2, [r0, #14]
 8006ec6:	6183      	str	r3, [r0, #24]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	2208      	movs	r2, #8
 8006ecc:	305c      	adds	r0, #92	@ 0x5c
 8006ece:	f000 f9f9 	bl	80072c4 <memset>
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f08 <std+0x58>)
 8006ed4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f0c <std+0x5c>)
 8006ed8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006eda:	4b0d      	ldr	r3, [pc, #52]	@ (8006f10 <std+0x60>)
 8006edc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ede:	4b0d      	ldr	r3, [pc, #52]	@ (8006f14 <std+0x64>)
 8006ee0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f18 <std+0x68>)
 8006ee4:	6224      	str	r4, [r4, #32]
 8006ee6:	429c      	cmp	r4, r3
 8006ee8:	d006      	beq.n	8006ef8 <std+0x48>
 8006eea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006eee:	4294      	cmp	r4, r2
 8006ef0:	d002      	beq.n	8006ef8 <std+0x48>
 8006ef2:	33d0      	adds	r3, #208	@ 0xd0
 8006ef4:	429c      	cmp	r4, r3
 8006ef6:	d105      	bne.n	8006f04 <std+0x54>
 8006ef8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f00:	f000 ba58 	b.w	80073b4 <__retarget_lock_init_recursive>
 8006f04:	bd10      	pop	{r4, pc}
 8006f06:	bf00      	nop
 8006f08:	08007115 	.word	0x08007115
 8006f0c:	08007137 	.word	0x08007137
 8006f10:	0800716f 	.word	0x0800716f
 8006f14:	08007193 	.word	0x08007193
 8006f18:	200003c4 	.word	0x200003c4

08006f1c <stdio_exit_handler>:
 8006f1c:	4a02      	ldr	r2, [pc, #8]	@ (8006f28 <stdio_exit_handler+0xc>)
 8006f1e:	4903      	ldr	r1, [pc, #12]	@ (8006f2c <stdio_exit_handler+0x10>)
 8006f20:	4803      	ldr	r0, [pc, #12]	@ (8006f30 <stdio_exit_handler+0x14>)
 8006f22:	f000 b869 	b.w	8006ff8 <_fwalk_sglue>
 8006f26:	bf00      	nop
 8006f28:	2000000c 	.word	0x2000000c
 8006f2c:	08007c55 	.word	0x08007c55
 8006f30:	2000001c 	.word	0x2000001c

08006f34 <cleanup_stdio>:
 8006f34:	6841      	ldr	r1, [r0, #4]
 8006f36:	4b0c      	ldr	r3, [pc, #48]	@ (8006f68 <cleanup_stdio+0x34>)
 8006f38:	4299      	cmp	r1, r3
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	d001      	beq.n	8006f44 <cleanup_stdio+0x10>
 8006f40:	f000 fe88 	bl	8007c54 <_fflush_r>
 8006f44:	68a1      	ldr	r1, [r4, #8]
 8006f46:	4b09      	ldr	r3, [pc, #36]	@ (8006f6c <cleanup_stdio+0x38>)
 8006f48:	4299      	cmp	r1, r3
 8006f4a:	d002      	beq.n	8006f52 <cleanup_stdio+0x1e>
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 fe81 	bl	8007c54 <_fflush_r>
 8006f52:	68e1      	ldr	r1, [r4, #12]
 8006f54:	4b06      	ldr	r3, [pc, #24]	@ (8006f70 <cleanup_stdio+0x3c>)
 8006f56:	4299      	cmp	r1, r3
 8006f58:	d004      	beq.n	8006f64 <cleanup_stdio+0x30>
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f60:	f000 be78 	b.w	8007c54 <_fflush_r>
 8006f64:	bd10      	pop	{r4, pc}
 8006f66:	bf00      	nop
 8006f68:	200003c4 	.word	0x200003c4
 8006f6c:	2000042c 	.word	0x2000042c
 8006f70:	20000494 	.word	0x20000494

08006f74 <global_stdio_init.part.0>:
 8006f74:	b510      	push	{r4, lr}
 8006f76:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa4 <global_stdio_init.part.0+0x30>)
 8006f78:	4c0b      	ldr	r4, [pc, #44]	@ (8006fa8 <global_stdio_init.part.0+0x34>)
 8006f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8006fac <global_stdio_init.part.0+0x38>)
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	4620      	mov	r0, r4
 8006f80:	2200      	movs	r2, #0
 8006f82:	2104      	movs	r1, #4
 8006f84:	f7ff ff94 	bl	8006eb0 <std>
 8006f88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	2109      	movs	r1, #9
 8006f90:	f7ff ff8e 	bl	8006eb0 <std>
 8006f94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f98:	2202      	movs	r2, #2
 8006f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f9e:	2112      	movs	r1, #18
 8006fa0:	f7ff bf86 	b.w	8006eb0 <std>
 8006fa4:	200004fc 	.word	0x200004fc
 8006fa8:	200003c4 	.word	0x200003c4
 8006fac:	08006f1d 	.word	0x08006f1d

08006fb0 <__sfp_lock_acquire>:
 8006fb0:	4801      	ldr	r0, [pc, #4]	@ (8006fb8 <__sfp_lock_acquire+0x8>)
 8006fb2:	f000 ba00 	b.w	80073b6 <__retarget_lock_acquire_recursive>
 8006fb6:	bf00      	nop
 8006fb8:	20000505 	.word	0x20000505

08006fbc <__sfp_lock_release>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	@ (8006fc4 <__sfp_lock_release+0x8>)
 8006fbe:	f000 b9fb 	b.w	80073b8 <__retarget_lock_release_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	20000505 	.word	0x20000505

08006fc8 <__sinit>:
 8006fc8:	b510      	push	{r4, lr}
 8006fca:	4604      	mov	r4, r0
 8006fcc:	f7ff fff0 	bl	8006fb0 <__sfp_lock_acquire>
 8006fd0:	6a23      	ldr	r3, [r4, #32]
 8006fd2:	b11b      	cbz	r3, 8006fdc <__sinit+0x14>
 8006fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fd8:	f7ff bff0 	b.w	8006fbc <__sfp_lock_release>
 8006fdc:	4b04      	ldr	r3, [pc, #16]	@ (8006ff0 <__sinit+0x28>)
 8006fde:	6223      	str	r3, [r4, #32]
 8006fe0:	4b04      	ldr	r3, [pc, #16]	@ (8006ff4 <__sinit+0x2c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1f5      	bne.n	8006fd4 <__sinit+0xc>
 8006fe8:	f7ff ffc4 	bl	8006f74 <global_stdio_init.part.0>
 8006fec:	e7f2      	b.n	8006fd4 <__sinit+0xc>
 8006fee:	bf00      	nop
 8006ff0:	08006f35 	.word	0x08006f35
 8006ff4:	200004fc 	.word	0x200004fc

08006ff8 <_fwalk_sglue>:
 8006ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	4688      	mov	r8, r1
 8007000:	4614      	mov	r4, r2
 8007002:	2600      	movs	r6, #0
 8007004:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007008:	f1b9 0901 	subs.w	r9, r9, #1
 800700c:	d505      	bpl.n	800701a <_fwalk_sglue+0x22>
 800700e:	6824      	ldr	r4, [r4, #0]
 8007010:	2c00      	cmp	r4, #0
 8007012:	d1f7      	bne.n	8007004 <_fwalk_sglue+0xc>
 8007014:	4630      	mov	r0, r6
 8007016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800701a:	89ab      	ldrh	r3, [r5, #12]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d907      	bls.n	8007030 <_fwalk_sglue+0x38>
 8007020:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007024:	3301      	adds	r3, #1
 8007026:	d003      	beq.n	8007030 <_fwalk_sglue+0x38>
 8007028:	4629      	mov	r1, r5
 800702a:	4638      	mov	r0, r7
 800702c:	47c0      	blx	r8
 800702e:	4306      	orrs	r6, r0
 8007030:	3568      	adds	r5, #104	@ 0x68
 8007032:	e7e9      	b.n	8007008 <_fwalk_sglue+0x10>

08007034 <iprintf>:
 8007034:	b40f      	push	{r0, r1, r2, r3}
 8007036:	b507      	push	{r0, r1, r2, lr}
 8007038:	4906      	ldr	r1, [pc, #24]	@ (8007054 <iprintf+0x20>)
 800703a:	ab04      	add	r3, sp, #16
 800703c:	6808      	ldr	r0, [r1, #0]
 800703e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007042:	6881      	ldr	r1, [r0, #8]
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	f000 fadb 	bl	8007600 <_vfiprintf_r>
 800704a:	b003      	add	sp, #12
 800704c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007050:	b004      	add	sp, #16
 8007052:	4770      	bx	lr
 8007054:	20000018 	.word	0x20000018

08007058 <_puts_r>:
 8007058:	6a03      	ldr	r3, [r0, #32]
 800705a:	b570      	push	{r4, r5, r6, lr}
 800705c:	6884      	ldr	r4, [r0, #8]
 800705e:	4605      	mov	r5, r0
 8007060:	460e      	mov	r6, r1
 8007062:	b90b      	cbnz	r3, 8007068 <_puts_r+0x10>
 8007064:	f7ff ffb0 	bl	8006fc8 <__sinit>
 8007068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800706a:	07db      	lsls	r3, r3, #31
 800706c:	d405      	bmi.n	800707a <_puts_r+0x22>
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	0598      	lsls	r0, r3, #22
 8007072:	d402      	bmi.n	800707a <_puts_r+0x22>
 8007074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007076:	f000 f99e 	bl	80073b6 <__retarget_lock_acquire_recursive>
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	0719      	lsls	r1, r3, #28
 800707e:	d502      	bpl.n	8007086 <_puts_r+0x2e>
 8007080:	6923      	ldr	r3, [r4, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d135      	bne.n	80070f2 <_puts_r+0x9a>
 8007086:	4621      	mov	r1, r4
 8007088:	4628      	mov	r0, r5
 800708a:	f000 f8c5 	bl	8007218 <__swsetup_r>
 800708e:	b380      	cbz	r0, 80070f2 <_puts_r+0x9a>
 8007090:	f04f 35ff 	mov.w	r5, #4294967295
 8007094:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007096:	07da      	lsls	r2, r3, #31
 8007098:	d405      	bmi.n	80070a6 <_puts_r+0x4e>
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	059b      	lsls	r3, r3, #22
 800709e:	d402      	bmi.n	80070a6 <_puts_r+0x4e>
 80070a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070a2:	f000 f989 	bl	80073b8 <__retarget_lock_release_recursive>
 80070a6:	4628      	mov	r0, r5
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da04      	bge.n	80070b8 <_puts_r+0x60>
 80070ae:	69a2      	ldr	r2, [r4, #24]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	dc17      	bgt.n	80070e4 <_puts_r+0x8c>
 80070b4:	290a      	cmp	r1, #10
 80070b6:	d015      	beq.n	80070e4 <_puts_r+0x8c>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	6022      	str	r2, [r4, #0]
 80070be:	7019      	strb	r1, [r3, #0]
 80070c0:	68a3      	ldr	r3, [r4, #8]
 80070c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80070c6:	3b01      	subs	r3, #1
 80070c8:	60a3      	str	r3, [r4, #8]
 80070ca:	2900      	cmp	r1, #0
 80070cc:	d1ed      	bne.n	80070aa <_puts_r+0x52>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	da11      	bge.n	80070f6 <_puts_r+0x9e>
 80070d2:	4622      	mov	r2, r4
 80070d4:	210a      	movs	r1, #10
 80070d6:	4628      	mov	r0, r5
 80070d8:	f000 f85f 	bl	800719a <__swbuf_r>
 80070dc:	3001      	adds	r0, #1
 80070de:	d0d7      	beq.n	8007090 <_puts_r+0x38>
 80070e0:	250a      	movs	r5, #10
 80070e2:	e7d7      	b.n	8007094 <_puts_r+0x3c>
 80070e4:	4622      	mov	r2, r4
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 f857 	bl	800719a <__swbuf_r>
 80070ec:	3001      	adds	r0, #1
 80070ee:	d1e7      	bne.n	80070c0 <_puts_r+0x68>
 80070f0:	e7ce      	b.n	8007090 <_puts_r+0x38>
 80070f2:	3e01      	subs	r6, #1
 80070f4:	e7e4      	b.n	80070c0 <_puts_r+0x68>
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	6022      	str	r2, [r4, #0]
 80070fc:	220a      	movs	r2, #10
 80070fe:	701a      	strb	r2, [r3, #0]
 8007100:	e7ee      	b.n	80070e0 <_puts_r+0x88>
	...

08007104 <puts>:
 8007104:	4b02      	ldr	r3, [pc, #8]	@ (8007110 <puts+0xc>)
 8007106:	4601      	mov	r1, r0
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	f7ff bfa5 	b.w	8007058 <_puts_r>
 800710e:	bf00      	nop
 8007110:	20000018 	.word	0x20000018

08007114 <__sread>:
 8007114:	b510      	push	{r4, lr}
 8007116:	460c      	mov	r4, r1
 8007118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800711c:	f000 f8fc 	bl	8007318 <_read_r>
 8007120:	2800      	cmp	r0, #0
 8007122:	bfab      	itete	ge
 8007124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007126:	89a3      	ldrhlt	r3, [r4, #12]
 8007128:	181b      	addge	r3, r3, r0
 800712a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800712e:	bfac      	ite	ge
 8007130:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007132:	81a3      	strhlt	r3, [r4, #12]
 8007134:	bd10      	pop	{r4, pc}

08007136 <__swrite>:
 8007136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800713a:	461f      	mov	r7, r3
 800713c:	898b      	ldrh	r3, [r1, #12]
 800713e:	05db      	lsls	r3, r3, #23
 8007140:	4605      	mov	r5, r0
 8007142:	460c      	mov	r4, r1
 8007144:	4616      	mov	r6, r2
 8007146:	d505      	bpl.n	8007154 <__swrite+0x1e>
 8007148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800714c:	2302      	movs	r3, #2
 800714e:	2200      	movs	r2, #0
 8007150:	f000 f8d0 	bl	80072f4 <_lseek_r>
 8007154:	89a3      	ldrh	r3, [r4, #12]
 8007156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800715a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	4632      	mov	r2, r6
 8007162:	463b      	mov	r3, r7
 8007164:	4628      	mov	r0, r5
 8007166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800716a:	f000 b8e7 	b.w	800733c <_write_r>

0800716e <__sseek>:
 800716e:	b510      	push	{r4, lr}
 8007170:	460c      	mov	r4, r1
 8007172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007176:	f000 f8bd 	bl	80072f4 <_lseek_r>
 800717a:	1c43      	adds	r3, r0, #1
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	bf15      	itete	ne
 8007180:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800718a:	81a3      	strheq	r3, [r4, #12]
 800718c:	bf18      	it	ne
 800718e:	81a3      	strhne	r3, [r4, #12]
 8007190:	bd10      	pop	{r4, pc}

08007192 <__sclose>:
 8007192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007196:	f000 b89d 	b.w	80072d4 <_close_r>

0800719a <__swbuf_r>:
 800719a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719c:	460e      	mov	r6, r1
 800719e:	4614      	mov	r4, r2
 80071a0:	4605      	mov	r5, r0
 80071a2:	b118      	cbz	r0, 80071ac <__swbuf_r+0x12>
 80071a4:	6a03      	ldr	r3, [r0, #32]
 80071a6:	b90b      	cbnz	r3, 80071ac <__swbuf_r+0x12>
 80071a8:	f7ff ff0e 	bl	8006fc8 <__sinit>
 80071ac:	69a3      	ldr	r3, [r4, #24]
 80071ae:	60a3      	str	r3, [r4, #8]
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	071a      	lsls	r2, r3, #28
 80071b4:	d501      	bpl.n	80071ba <__swbuf_r+0x20>
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	b943      	cbnz	r3, 80071cc <__swbuf_r+0x32>
 80071ba:	4621      	mov	r1, r4
 80071bc:	4628      	mov	r0, r5
 80071be:	f000 f82b 	bl	8007218 <__swsetup_r>
 80071c2:	b118      	cbz	r0, 80071cc <__swbuf_r+0x32>
 80071c4:	f04f 37ff 	mov.w	r7, #4294967295
 80071c8:	4638      	mov	r0, r7
 80071ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	6922      	ldr	r2, [r4, #16]
 80071d0:	1a98      	subs	r0, r3, r2
 80071d2:	6963      	ldr	r3, [r4, #20]
 80071d4:	b2f6      	uxtb	r6, r6
 80071d6:	4283      	cmp	r3, r0
 80071d8:	4637      	mov	r7, r6
 80071da:	dc05      	bgt.n	80071e8 <__swbuf_r+0x4e>
 80071dc:	4621      	mov	r1, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 fd38 	bl	8007c54 <_fflush_r>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d1ed      	bne.n	80071c4 <__swbuf_r+0x2a>
 80071e8:	68a3      	ldr	r3, [r4, #8]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	60a3      	str	r3, [r4, #8]
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	6022      	str	r2, [r4, #0]
 80071f4:	701e      	strb	r6, [r3, #0]
 80071f6:	6962      	ldr	r2, [r4, #20]
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d004      	beq.n	8007208 <__swbuf_r+0x6e>
 80071fe:	89a3      	ldrh	r3, [r4, #12]
 8007200:	07db      	lsls	r3, r3, #31
 8007202:	d5e1      	bpl.n	80071c8 <__swbuf_r+0x2e>
 8007204:	2e0a      	cmp	r6, #10
 8007206:	d1df      	bne.n	80071c8 <__swbuf_r+0x2e>
 8007208:	4621      	mov	r1, r4
 800720a:	4628      	mov	r0, r5
 800720c:	f000 fd22 	bl	8007c54 <_fflush_r>
 8007210:	2800      	cmp	r0, #0
 8007212:	d0d9      	beq.n	80071c8 <__swbuf_r+0x2e>
 8007214:	e7d6      	b.n	80071c4 <__swbuf_r+0x2a>
	...

08007218 <__swsetup_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4b29      	ldr	r3, [pc, #164]	@ (80072c0 <__swsetup_r+0xa8>)
 800721c:	4605      	mov	r5, r0
 800721e:	6818      	ldr	r0, [r3, #0]
 8007220:	460c      	mov	r4, r1
 8007222:	b118      	cbz	r0, 800722c <__swsetup_r+0x14>
 8007224:	6a03      	ldr	r3, [r0, #32]
 8007226:	b90b      	cbnz	r3, 800722c <__swsetup_r+0x14>
 8007228:	f7ff fece 	bl	8006fc8 <__sinit>
 800722c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007230:	0719      	lsls	r1, r3, #28
 8007232:	d422      	bmi.n	800727a <__swsetup_r+0x62>
 8007234:	06da      	lsls	r2, r3, #27
 8007236:	d407      	bmi.n	8007248 <__swsetup_r+0x30>
 8007238:	2209      	movs	r2, #9
 800723a:	602a      	str	r2, [r5, #0]
 800723c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007240:	81a3      	strh	r3, [r4, #12]
 8007242:	f04f 30ff 	mov.w	r0, #4294967295
 8007246:	e033      	b.n	80072b0 <__swsetup_r+0x98>
 8007248:	0758      	lsls	r0, r3, #29
 800724a:	d512      	bpl.n	8007272 <__swsetup_r+0x5a>
 800724c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800724e:	b141      	cbz	r1, 8007262 <__swsetup_r+0x4a>
 8007250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007254:	4299      	cmp	r1, r3
 8007256:	d002      	beq.n	800725e <__swsetup_r+0x46>
 8007258:	4628      	mov	r0, r5
 800725a:	f000 f8af 	bl	80073bc <_free_r>
 800725e:	2300      	movs	r3, #0
 8007260:	6363      	str	r3, [r4, #52]	@ 0x34
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007268:	81a3      	strh	r3, [r4, #12]
 800726a:	2300      	movs	r3, #0
 800726c:	6063      	str	r3, [r4, #4]
 800726e:	6923      	ldr	r3, [r4, #16]
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	89a3      	ldrh	r3, [r4, #12]
 8007274:	f043 0308 	orr.w	r3, r3, #8
 8007278:	81a3      	strh	r3, [r4, #12]
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	b94b      	cbnz	r3, 8007292 <__swsetup_r+0x7a>
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007288:	d003      	beq.n	8007292 <__swsetup_r+0x7a>
 800728a:	4621      	mov	r1, r4
 800728c:	4628      	mov	r0, r5
 800728e:	f000 fd2f 	bl	8007cf0 <__smakebuf_r>
 8007292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007296:	f013 0201 	ands.w	r2, r3, #1
 800729a:	d00a      	beq.n	80072b2 <__swsetup_r+0x9a>
 800729c:	2200      	movs	r2, #0
 800729e:	60a2      	str	r2, [r4, #8]
 80072a0:	6962      	ldr	r2, [r4, #20]
 80072a2:	4252      	negs	r2, r2
 80072a4:	61a2      	str	r2, [r4, #24]
 80072a6:	6922      	ldr	r2, [r4, #16]
 80072a8:	b942      	cbnz	r2, 80072bc <__swsetup_r+0xa4>
 80072aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072ae:	d1c5      	bne.n	800723c <__swsetup_r+0x24>
 80072b0:	bd38      	pop	{r3, r4, r5, pc}
 80072b2:	0799      	lsls	r1, r3, #30
 80072b4:	bf58      	it	pl
 80072b6:	6962      	ldrpl	r2, [r4, #20]
 80072b8:	60a2      	str	r2, [r4, #8]
 80072ba:	e7f4      	b.n	80072a6 <__swsetup_r+0x8e>
 80072bc:	2000      	movs	r0, #0
 80072be:	e7f7      	b.n	80072b0 <__swsetup_r+0x98>
 80072c0:	20000018 	.word	0x20000018

080072c4 <memset>:
 80072c4:	4402      	add	r2, r0
 80072c6:	4603      	mov	r3, r0
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d100      	bne.n	80072ce <memset+0xa>
 80072cc:	4770      	bx	lr
 80072ce:	f803 1b01 	strb.w	r1, [r3], #1
 80072d2:	e7f9      	b.n	80072c8 <memset+0x4>

080072d4 <_close_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4d06      	ldr	r5, [pc, #24]	@ (80072f0 <_close_r+0x1c>)
 80072d8:	2300      	movs	r3, #0
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	f7fb ff3e 	bl	8003160 <_close>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d102      	bne.n	80072ee <_close_r+0x1a>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	b103      	cbz	r3, 80072ee <_close_r+0x1a>
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	20000500 	.word	0x20000500

080072f4 <_lseek_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4d07      	ldr	r5, [pc, #28]	@ (8007314 <_lseek_r+0x20>)
 80072f8:	4604      	mov	r4, r0
 80072fa:	4608      	mov	r0, r1
 80072fc:	4611      	mov	r1, r2
 80072fe:	2200      	movs	r2, #0
 8007300:	602a      	str	r2, [r5, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	f7fb ff53 	bl	80031ae <_lseek>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_lseek_r+0x1e>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	b103      	cbz	r3, 8007312 <_lseek_r+0x1e>
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	20000500 	.word	0x20000500

08007318 <_read_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4d07      	ldr	r5, [pc, #28]	@ (8007338 <_read_r+0x20>)
 800731c:	4604      	mov	r4, r0
 800731e:	4608      	mov	r0, r1
 8007320:	4611      	mov	r1, r2
 8007322:	2200      	movs	r2, #0
 8007324:	602a      	str	r2, [r5, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	f7fb fee1 	bl	80030ee <_read>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_read_r+0x1e>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	b103      	cbz	r3, 8007336 <_read_r+0x1e>
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	20000500 	.word	0x20000500

0800733c <_write_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4d07      	ldr	r5, [pc, #28]	@ (800735c <_write_r+0x20>)
 8007340:	4604      	mov	r4, r0
 8007342:	4608      	mov	r0, r1
 8007344:	4611      	mov	r1, r2
 8007346:	2200      	movs	r2, #0
 8007348:	602a      	str	r2, [r5, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	f7fb feec 	bl	8003128 <_write>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_write_r+0x1e>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_write_r+0x1e>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	20000500 	.word	0x20000500

08007360 <__errno>:
 8007360:	4b01      	ldr	r3, [pc, #4]	@ (8007368 <__errno+0x8>)
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20000018 	.word	0x20000018

0800736c <__libc_init_array>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	4d0d      	ldr	r5, [pc, #52]	@ (80073a4 <__libc_init_array+0x38>)
 8007370:	4c0d      	ldr	r4, [pc, #52]	@ (80073a8 <__libc_init_array+0x3c>)
 8007372:	1b64      	subs	r4, r4, r5
 8007374:	10a4      	asrs	r4, r4, #2
 8007376:	2600      	movs	r6, #0
 8007378:	42a6      	cmp	r6, r4
 800737a:	d109      	bne.n	8007390 <__libc_init_array+0x24>
 800737c:	4d0b      	ldr	r5, [pc, #44]	@ (80073ac <__libc_init_array+0x40>)
 800737e:	4c0c      	ldr	r4, [pc, #48]	@ (80073b0 <__libc_init_array+0x44>)
 8007380:	f000 fd24 	bl	8007dcc <_init>
 8007384:	1b64      	subs	r4, r4, r5
 8007386:	10a4      	asrs	r4, r4, #2
 8007388:	2600      	movs	r6, #0
 800738a:	42a6      	cmp	r6, r4
 800738c:	d105      	bne.n	800739a <__libc_init_array+0x2e>
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	f855 3b04 	ldr.w	r3, [r5], #4
 8007394:	4798      	blx	r3
 8007396:	3601      	adds	r6, #1
 8007398:	e7ee      	b.n	8007378 <__libc_init_array+0xc>
 800739a:	f855 3b04 	ldr.w	r3, [r5], #4
 800739e:	4798      	blx	r3
 80073a0:	3601      	adds	r6, #1
 80073a2:	e7f2      	b.n	800738a <__libc_init_array+0x1e>
 80073a4:	08008014 	.word	0x08008014
 80073a8:	08008014 	.word	0x08008014
 80073ac:	08008014 	.word	0x08008014
 80073b0:	08008018 	.word	0x08008018

080073b4 <__retarget_lock_init_recursive>:
 80073b4:	4770      	bx	lr

080073b6 <__retarget_lock_acquire_recursive>:
 80073b6:	4770      	bx	lr

080073b8 <__retarget_lock_release_recursive>:
 80073b8:	4770      	bx	lr
	...

080073bc <_free_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4605      	mov	r5, r0
 80073c0:	2900      	cmp	r1, #0
 80073c2:	d041      	beq.n	8007448 <_free_r+0x8c>
 80073c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c8:	1f0c      	subs	r4, r1, #4
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bfb8      	it	lt
 80073ce:	18e4      	addlt	r4, r4, r3
 80073d0:	f000 f8e0 	bl	8007594 <__malloc_lock>
 80073d4:	4a1d      	ldr	r2, [pc, #116]	@ (800744c <_free_r+0x90>)
 80073d6:	6813      	ldr	r3, [r2, #0]
 80073d8:	b933      	cbnz	r3, 80073e8 <_free_r+0x2c>
 80073da:	6063      	str	r3, [r4, #4]
 80073dc:	6014      	str	r4, [r2, #0]
 80073de:	4628      	mov	r0, r5
 80073e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073e4:	f000 b8dc 	b.w	80075a0 <__malloc_unlock>
 80073e8:	42a3      	cmp	r3, r4
 80073ea:	d908      	bls.n	80073fe <_free_r+0x42>
 80073ec:	6820      	ldr	r0, [r4, #0]
 80073ee:	1821      	adds	r1, r4, r0
 80073f0:	428b      	cmp	r3, r1
 80073f2:	bf01      	itttt	eq
 80073f4:	6819      	ldreq	r1, [r3, #0]
 80073f6:	685b      	ldreq	r3, [r3, #4]
 80073f8:	1809      	addeq	r1, r1, r0
 80073fa:	6021      	streq	r1, [r4, #0]
 80073fc:	e7ed      	b.n	80073da <_free_r+0x1e>
 80073fe:	461a      	mov	r2, r3
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	b10b      	cbz	r3, 8007408 <_free_r+0x4c>
 8007404:	42a3      	cmp	r3, r4
 8007406:	d9fa      	bls.n	80073fe <_free_r+0x42>
 8007408:	6811      	ldr	r1, [r2, #0]
 800740a:	1850      	adds	r0, r2, r1
 800740c:	42a0      	cmp	r0, r4
 800740e:	d10b      	bne.n	8007428 <_free_r+0x6c>
 8007410:	6820      	ldr	r0, [r4, #0]
 8007412:	4401      	add	r1, r0
 8007414:	1850      	adds	r0, r2, r1
 8007416:	4283      	cmp	r3, r0
 8007418:	6011      	str	r1, [r2, #0]
 800741a:	d1e0      	bne.n	80073de <_free_r+0x22>
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	6053      	str	r3, [r2, #4]
 8007422:	4408      	add	r0, r1
 8007424:	6010      	str	r0, [r2, #0]
 8007426:	e7da      	b.n	80073de <_free_r+0x22>
 8007428:	d902      	bls.n	8007430 <_free_r+0x74>
 800742a:	230c      	movs	r3, #12
 800742c:	602b      	str	r3, [r5, #0]
 800742e:	e7d6      	b.n	80073de <_free_r+0x22>
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	1821      	adds	r1, r4, r0
 8007434:	428b      	cmp	r3, r1
 8007436:	bf04      	itt	eq
 8007438:	6819      	ldreq	r1, [r3, #0]
 800743a:	685b      	ldreq	r3, [r3, #4]
 800743c:	6063      	str	r3, [r4, #4]
 800743e:	bf04      	itt	eq
 8007440:	1809      	addeq	r1, r1, r0
 8007442:	6021      	streq	r1, [r4, #0]
 8007444:	6054      	str	r4, [r2, #4]
 8007446:	e7ca      	b.n	80073de <_free_r+0x22>
 8007448:	bd38      	pop	{r3, r4, r5, pc}
 800744a:	bf00      	nop
 800744c:	2000050c 	.word	0x2000050c

08007450 <sbrk_aligned>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	4e0f      	ldr	r6, [pc, #60]	@ (8007490 <sbrk_aligned+0x40>)
 8007454:	460c      	mov	r4, r1
 8007456:	6831      	ldr	r1, [r6, #0]
 8007458:	4605      	mov	r5, r0
 800745a:	b911      	cbnz	r1, 8007462 <sbrk_aligned+0x12>
 800745c:	f000 fca6 	bl	8007dac <_sbrk_r>
 8007460:	6030      	str	r0, [r6, #0]
 8007462:	4621      	mov	r1, r4
 8007464:	4628      	mov	r0, r5
 8007466:	f000 fca1 	bl	8007dac <_sbrk_r>
 800746a:	1c43      	adds	r3, r0, #1
 800746c:	d103      	bne.n	8007476 <sbrk_aligned+0x26>
 800746e:	f04f 34ff 	mov.w	r4, #4294967295
 8007472:	4620      	mov	r0, r4
 8007474:	bd70      	pop	{r4, r5, r6, pc}
 8007476:	1cc4      	adds	r4, r0, #3
 8007478:	f024 0403 	bic.w	r4, r4, #3
 800747c:	42a0      	cmp	r0, r4
 800747e:	d0f8      	beq.n	8007472 <sbrk_aligned+0x22>
 8007480:	1a21      	subs	r1, r4, r0
 8007482:	4628      	mov	r0, r5
 8007484:	f000 fc92 	bl	8007dac <_sbrk_r>
 8007488:	3001      	adds	r0, #1
 800748a:	d1f2      	bne.n	8007472 <sbrk_aligned+0x22>
 800748c:	e7ef      	b.n	800746e <sbrk_aligned+0x1e>
 800748e:	bf00      	nop
 8007490:	20000508 	.word	0x20000508

08007494 <_malloc_r>:
 8007494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007498:	1ccd      	adds	r5, r1, #3
 800749a:	f025 0503 	bic.w	r5, r5, #3
 800749e:	3508      	adds	r5, #8
 80074a0:	2d0c      	cmp	r5, #12
 80074a2:	bf38      	it	cc
 80074a4:	250c      	movcc	r5, #12
 80074a6:	2d00      	cmp	r5, #0
 80074a8:	4606      	mov	r6, r0
 80074aa:	db01      	blt.n	80074b0 <_malloc_r+0x1c>
 80074ac:	42a9      	cmp	r1, r5
 80074ae:	d904      	bls.n	80074ba <_malloc_r+0x26>
 80074b0:	230c      	movs	r3, #12
 80074b2:	6033      	str	r3, [r6, #0]
 80074b4:	2000      	movs	r0, #0
 80074b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007590 <_malloc_r+0xfc>
 80074be:	f000 f869 	bl	8007594 <__malloc_lock>
 80074c2:	f8d8 3000 	ldr.w	r3, [r8]
 80074c6:	461c      	mov	r4, r3
 80074c8:	bb44      	cbnz	r4, 800751c <_malloc_r+0x88>
 80074ca:	4629      	mov	r1, r5
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7ff ffbf 	bl	8007450 <sbrk_aligned>
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	4604      	mov	r4, r0
 80074d6:	d158      	bne.n	800758a <_malloc_r+0xf6>
 80074d8:	f8d8 4000 	ldr.w	r4, [r8]
 80074dc:	4627      	mov	r7, r4
 80074de:	2f00      	cmp	r7, #0
 80074e0:	d143      	bne.n	800756a <_malloc_r+0xd6>
 80074e2:	2c00      	cmp	r4, #0
 80074e4:	d04b      	beq.n	800757e <_malloc_r+0xea>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	4639      	mov	r1, r7
 80074ea:	4630      	mov	r0, r6
 80074ec:	eb04 0903 	add.w	r9, r4, r3
 80074f0:	f000 fc5c 	bl	8007dac <_sbrk_r>
 80074f4:	4581      	cmp	r9, r0
 80074f6:	d142      	bne.n	800757e <_malloc_r+0xea>
 80074f8:	6821      	ldr	r1, [r4, #0]
 80074fa:	1a6d      	subs	r5, r5, r1
 80074fc:	4629      	mov	r1, r5
 80074fe:	4630      	mov	r0, r6
 8007500:	f7ff ffa6 	bl	8007450 <sbrk_aligned>
 8007504:	3001      	adds	r0, #1
 8007506:	d03a      	beq.n	800757e <_malloc_r+0xea>
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	442b      	add	r3, r5
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	f8d8 3000 	ldr.w	r3, [r8]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	bb62      	cbnz	r2, 8007570 <_malloc_r+0xdc>
 8007516:	f8c8 7000 	str.w	r7, [r8]
 800751a:	e00f      	b.n	800753c <_malloc_r+0xa8>
 800751c:	6822      	ldr	r2, [r4, #0]
 800751e:	1b52      	subs	r2, r2, r5
 8007520:	d420      	bmi.n	8007564 <_malloc_r+0xd0>
 8007522:	2a0b      	cmp	r2, #11
 8007524:	d917      	bls.n	8007556 <_malloc_r+0xc2>
 8007526:	1961      	adds	r1, r4, r5
 8007528:	42a3      	cmp	r3, r4
 800752a:	6025      	str	r5, [r4, #0]
 800752c:	bf18      	it	ne
 800752e:	6059      	strne	r1, [r3, #4]
 8007530:	6863      	ldr	r3, [r4, #4]
 8007532:	bf08      	it	eq
 8007534:	f8c8 1000 	streq.w	r1, [r8]
 8007538:	5162      	str	r2, [r4, r5]
 800753a:	604b      	str	r3, [r1, #4]
 800753c:	4630      	mov	r0, r6
 800753e:	f000 f82f 	bl	80075a0 <__malloc_unlock>
 8007542:	f104 000b 	add.w	r0, r4, #11
 8007546:	1d23      	adds	r3, r4, #4
 8007548:	f020 0007 	bic.w	r0, r0, #7
 800754c:	1ac2      	subs	r2, r0, r3
 800754e:	bf1c      	itt	ne
 8007550:	1a1b      	subne	r3, r3, r0
 8007552:	50a3      	strne	r3, [r4, r2]
 8007554:	e7af      	b.n	80074b6 <_malloc_r+0x22>
 8007556:	6862      	ldr	r2, [r4, #4]
 8007558:	42a3      	cmp	r3, r4
 800755a:	bf0c      	ite	eq
 800755c:	f8c8 2000 	streq.w	r2, [r8]
 8007560:	605a      	strne	r2, [r3, #4]
 8007562:	e7eb      	b.n	800753c <_malloc_r+0xa8>
 8007564:	4623      	mov	r3, r4
 8007566:	6864      	ldr	r4, [r4, #4]
 8007568:	e7ae      	b.n	80074c8 <_malloc_r+0x34>
 800756a:	463c      	mov	r4, r7
 800756c:	687f      	ldr	r7, [r7, #4]
 800756e:	e7b6      	b.n	80074de <_malloc_r+0x4a>
 8007570:	461a      	mov	r2, r3
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	42a3      	cmp	r3, r4
 8007576:	d1fb      	bne.n	8007570 <_malloc_r+0xdc>
 8007578:	2300      	movs	r3, #0
 800757a:	6053      	str	r3, [r2, #4]
 800757c:	e7de      	b.n	800753c <_malloc_r+0xa8>
 800757e:	230c      	movs	r3, #12
 8007580:	6033      	str	r3, [r6, #0]
 8007582:	4630      	mov	r0, r6
 8007584:	f000 f80c 	bl	80075a0 <__malloc_unlock>
 8007588:	e794      	b.n	80074b4 <_malloc_r+0x20>
 800758a:	6005      	str	r5, [r0, #0]
 800758c:	e7d6      	b.n	800753c <_malloc_r+0xa8>
 800758e:	bf00      	nop
 8007590:	2000050c 	.word	0x2000050c

08007594 <__malloc_lock>:
 8007594:	4801      	ldr	r0, [pc, #4]	@ (800759c <__malloc_lock+0x8>)
 8007596:	f7ff bf0e 	b.w	80073b6 <__retarget_lock_acquire_recursive>
 800759a:	bf00      	nop
 800759c:	20000504 	.word	0x20000504

080075a0 <__malloc_unlock>:
 80075a0:	4801      	ldr	r0, [pc, #4]	@ (80075a8 <__malloc_unlock+0x8>)
 80075a2:	f7ff bf09 	b.w	80073b8 <__retarget_lock_release_recursive>
 80075a6:	bf00      	nop
 80075a8:	20000504 	.word	0x20000504

080075ac <__sfputc_r>:
 80075ac:	6893      	ldr	r3, [r2, #8]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	b410      	push	{r4}
 80075b4:	6093      	str	r3, [r2, #8]
 80075b6:	da08      	bge.n	80075ca <__sfputc_r+0x1e>
 80075b8:	6994      	ldr	r4, [r2, #24]
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	db01      	blt.n	80075c2 <__sfputc_r+0x16>
 80075be:	290a      	cmp	r1, #10
 80075c0:	d103      	bne.n	80075ca <__sfputc_r+0x1e>
 80075c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075c6:	f7ff bde8 	b.w	800719a <__swbuf_r>
 80075ca:	6813      	ldr	r3, [r2, #0]
 80075cc:	1c58      	adds	r0, r3, #1
 80075ce:	6010      	str	r0, [r2, #0]
 80075d0:	7019      	strb	r1, [r3, #0]
 80075d2:	4608      	mov	r0, r1
 80075d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d8:	4770      	bx	lr

080075da <__sfputs_r>:
 80075da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075dc:	4606      	mov	r6, r0
 80075de:	460f      	mov	r7, r1
 80075e0:	4614      	mov	r4, r2
 80075e2:	18d5      	adds	r5, r2, r3
 80075e4:	42ac      	cmp	r4, r5
 80075e6:	d101      	bne.n	80075ec <__sfputs_r+0x12>
 80075e8:	2000      	movs	r0, #0
 80075ea:	e007      	b.n	80075fc <__sfputs_r+0x22>
 80075ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f0:	463a      	mov	r2, r7
 80075f2:	4630      	mov	r0, r6
 80075f4:	f7ff ffda 	bl	80075ac <__sfputc_r>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d1f3      	bne.n	80075e4 <__sfputs_r+0xa>
 80075fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007600 <_vfiprintf_r>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	460d      	mov	r5, r1
 8007606:	b09d      	sub	sp, #116	@ 0x74
 8007608:	4614      	mov	r4, r2
 800760a:	4698      	mov	r8, r3
 800760c:	4606      	mov	r6, r0
 800760e:	b118      	cbz	r0, 8007618 <_vfiprintf_r+0x18>
 8007610:	6a03      	ldr	r3, [r0, #32]
 8007612:	b90b      	cbnz	r3, 8007618 <_vfiprintf_r+0x18>
 8007614:	f7ff fcd8 	bl	8006fc8 <__sinit>
 8007618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800761a:	07d9      	lsls	r1, r3, #31
 800761c:	d405      	bmi.n	800762a <_vfiprintf_r+0x2a>
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	059a      	lsls	r2, r3, #22
 8007622:	d402      	bmi.n	800762a <_vfiprintf_r+0x2a>
 8007624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007626:	f7ff fec6 	bl	80073b6 <__retarget_lock_acquire_recursive>
 800762a:	89ab      	ldrh	r3, [r5, #12]
 800762c:	071b      	lsls	r3, r3, #28
 800762e:	d501      	bpl.n	8007634 <_vfiprintf_r+0x34>
 8007630:	692b      	ldr	r3, [r5, #16]
 8007632:	b99b      	cbnz	r3, 800765c <_vfiprintf_r+0x5c>
 8007634:	4629      	mov	r1, r5
 8007636:	4630      	mov	r0, r6
 8007638:	f7ff fdee 	bl	8007218 <__swsetup_r>
 800763c:	b170      	cbz	r0, 800765c <_vfiprintf_r+0x5c>
 800763e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007640:	07dc      	lsls	r4, r3, #31
 8007642:	d504      	bpl.n	800764e <_vfiprintf_r+0x4e>
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
 8007648:	b01d      	add	sp, #116	@ 0x74
 800764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764e:	89ab      	ldrh	r3, [r5, #12]
 8007650:	0598      	lsls	r0, r3, #22
 8007652:	d4f7      	bmi.n	8007644 <_vfiprintf_r+0x44>
 8007654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007656:	f7ff feaf 	bl	80073b8 <__retarget_lock_release_recursive>
 800765a:	e7f3      	b.n	8007644 <_vfiprintf_r+0x44>
 800765c:	2300      	movs	r3, #0
 800765e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007660:	2320      	movs	r3, #32
 8007662:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007666:	f8cd 800c 	str.w	r8, [sp, #12]
 800766a:	2330      	movs	r3, #48	@ 0x30
 800766c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800781c <_vfiprintf_r+0x21c>
 8007670:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007674:	f04f 0901 	mov.w	r9, #1
 8007678:	4623      	mov	r3, r4
 800767a:	469a      	mov	sl, r3
 800767c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007680:	b10a      	cbz	r2, 8007686 <_vfiprintf_r+0x86>
 8007682:	2a25      	cmp	r2, #37	@ 0x25
 8007684:	d1f9      	bne.n	800767a <_vfiprintf_r+0x7a>
 8007686:	ebba 0b04 	subs.w	fp, sl, r4
 800768a:	d00b      	beq.n	80076a4 <_vfiprintf_r+0xa4>
 800768c:	465b      	mov	r3, fp
 800768e:	4622      	mov	r2, r4
 8007690:	4629      	mov	r1, r5
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff ffa1 	bl	80075da <__sfputs_r>
 8007698:	3001      	adds	r0, #1
 800769a:	f000 80a7 	beq.w	80077ec <_vfiprintf_r+0x1ec>
 800769e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076a0:	445a      	add	r2, fp
 80076a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80076a4:	f89a 3000 	ldrb.w	r3, [sl]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 809f 	beq.w	80077ec <_vfiprintf_r+0x1ec>
 80076ae:	2300      	movs	r3, #0
 80076b0:	f04f 32ff 	mov.w	r2, #4294967295
 80076b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076b8:	f10a 0a01 	add.w	sl, sl, #1
 80076bc:	9304      	str	r3, [sp, #16]
 80076be:	9307      	str	r3, [sp, #28]
 80076c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80076c6:	4654      	mov	r4, sl
 80076c8:	2205      	movs	r2, #5
 80076ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ce:	4853      	ldr	r0, [pc, #332]	@ (800781c <_vfiprintf_r+0x21c>)
 80076d0:	f7f8 fd86 	bl	80001e0 <memchr>
 80076d4:	9a04      	ldr	r2, [sp, #16]
 80076d6:	b9d8      	cbnz	r0, 8007710 <_vfiprintf_r+0x110>
 80076d8:	06d1      	lsls	r1, r2, #27
 80076da:	bf44      	itt	mi
 80076dc:	2320      	movmi	r3, #32
 80076de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076e2:	0713      	lsls	r3, r2, #28
 80076e4:	bf44      	itt	mi
 80076e6:	232b      	movmi	r3, #43	@ 0x2b
 80076e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076ec:	f89a 3000 	ldrb.w	r3, [sl]
 80076f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80076f2:	d015      	beq.n	8007720 <_vfiprintf_r+0x120>
 80076f4:	9a07      	ldr	r2, [sp, #28]
 80076f6:	4654      	mov	r4, sl
 80076f8:	2000      	movs	r0, #0
 80076fa:	f04f 0c0a 	mov.w	ip, #10
 80076fe:	4621      	mov	r1, r4
 8007700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007704:	3b30      	subs	r3, #48	@ 0x30
 8007706:	2b09      	cmp	r3, #9
 8007708:	d94b      	bls.n	80077a2 <_vfiprintf_r+0x1a2>
 800770a:	b1b0      	cbz	r0, 800773a <_vfiprintf_r+0x13a>
 800770c:	9207      	str	r2, [sp, #28]
 800770e:	e014      	b.n	800773a <_vfiprintf_r+0x13a>
 8007710:	eba0 0308 	sub.w	r3, r0, r8
 8007714:	fa09 f303 	lsl.w	r3, r9, r3
 8007718:	4313      	orrs	r3, r2
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	46a2      	mov	sl, r4
 800771e:	e7d2      	b.n	80076c6 <_vfiprintf_r+0xc6>
 8007720:	9b03      	ldr	r3, [sp, #12]
 8007722:	1d19      	adds	r1, r3, #4
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	9103      	str	r1, [sp, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	bfbb      	ittet	lt
 800772c:	425b      	neglt	r3, r3
 800772e:	f042 0202 	orrlt.w	r2, r2, #2
 8007732:	9307      	strge	r3, [sp, #28]
 8007734:	9307      	strlt	r3, [sp, #28]
 8007736:	bfb8      	it	lt
 8007738:	9204      	strlt	r2, [sp, #16]
 800773a:	7823      	ldrb	r3, [r4, #0]
 800773c:	2b2e      	cmp	r3, #46	@ 0x2e
 800773e:	d10a      	bne.n	8007756 <_vfiprintf_r+0x156>
 8007740:	7863      	ldrb	r3, [r4, #1]
 8007742:	2b2a      	cmp	r3, #42	@ 0x2a
 8007744:	d132      	bne.n	80077ac <_vfiprintf_r+0x1ac>
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	9203      	str	r2, [sp, #12]
 800774e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007752:	3402      	adds	r4, #2
 8007754:	9305      	str	r3, [sp, #20]
 8007756:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800782c <_vfiprintf_r+0x22c>
 800775a:	7821      	ldrb	r1, [r4, #0]
 800775c:	2203      	movs	r2, #3
 800775e:	4650      	mov	r0, sl
 8007760:	f7f8 fd3e 	bl	80001e0 <memchr>
 8007764:	b138      	cbz	r0, 8007776 <_vfiprintf_r+0x176>
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	eba0 000a 	sub.w	r0, r0, sl
 800776c:	2240      	movs	r2, #64	@ 0x40
 800776e:	4082      	lsls	r2, r0
 8007770:	4313      	orrs	r3, r2
 8007772:	3401      	adds	r4, #1
 8007774:	9304      	str	r3, [sp, #16]
 8007776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800777a:	4829      	ldr	r0, [pc, #164]	@ (8007820 <_vfiprintf_r+0x220>)
 800777c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007780:	2206      	movs	r2, #6
 8007782:	f7f8 fd2d 	bl	80001e0 <memchr>
 8007786:	2800      	cmp	r0, #0
 8007788:	d03f      	beq.n	800780a <_vfiprintf_r+0x20a>
 800778a:	4b26      	ldr	r3, [pc, #152]	@ (8007824 <_vfiprintf_r+0x224>)
 800778c:	bb1b      	cbnz	r3, 80077d6 <_vfiprintf_r+0x1d6>
 800778e:	9b03      	ldr	r3, [sp, #12]
 8007790:	3307      	adds	r3, #7
 8007792:	f023 0307 	bic.w	r3, r3, #7
 8007796:	3308      	adds	r3, #8
 8007798:	9303      	str	r3, [sp, #12]
 800779a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779c:	443b      	add	r3, r7
 800779e:	9309      	str	r3, [sp, #36]	@ 0x24
 80077a0:	e76a      	b.n	8007678 <_vfiprintf_r+0x78>
 80077a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077a6:	460c      	mov	r4, r1
 80077a8:	2001      	movs	r0, #1
 80077aa:	e7a8      	b.n	80076fe <_vfiprintf_r+0xfe>
 80077ac:	2300      	movs	r3, #0
 80077ae:	3401      	adds	r4, #1
 80077b0:	9305      	str	r3, [sp, #20]
 80077b2:	4619      	mov	r1, r3
 80077b4:	f04f 0c0a 	mov.w	ip, #10
 80077b8:	4620      	mov	r0, r4
 80077ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077be:	3a30      	subs	r2, #48	@ 0x30
 80077c0:	2a09      	cmp	r2, #9
 80077c2:	d903      	bls.n	80077cc <_vfiprintf_r+0x1cc>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0c6      	beq.n	8007756 <_vfiprintf_r+0x156>
 80077c8:	9105      	str	r1, [sp, #20]
 80077ca:	e7c4      	b.n	8007756 <_vfiprintf_r+0x156>
 80077cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80077d0:	4604      	mov	r4, r0
 80077d2:	2301      	movs	r3, #1
 80077d4:	e7f0      	b.n	80077b8 <_vfiprintf_r+0x1b8>
 80077d6:	ab03      	add	r3, sp, #12
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	462a      	mov	r2, r5
 80077dc:	4b12      	ldr	r3, [pc, #72]	@ (8007828 <_vfiprintf_r+0x228>)
 80077de:	a904      	add	r1, sp, #16
 80077e0:	4630      	mov	r0, r6
 80077e2:	f3af 8000 	nop.w
 80077e6:	4607      	mov	r7, r0
 80077e8:	1c78      	adds	r0, r7, #1
 80077ea:	d1d6      	bne.n	800779a <_vfiprintf_r+0x19a>
 80077ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077ee:	07d9      	lsls	r1, r3, #31
 80077f0:	d405      	bmi.n	80077fe <_vfiprintf_r+0x1fe>
 80077f2:	89ab      	ldrh	r3, [r5, #12]
 80077f4:	059a      	lsls	r2, r3, #22
 80077f6:	d402      	bmi.n	80077fe <_vfiprintf_r+0x1fe>
 80077f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077fa:	f7ff fddd 	bl	80073b8 <__retarget_lock_release_recursive>
 80077fe:	89ab      	ldrh	r3, [r5, #12]
 8007800:	065b      	lsls	r3, r3, #25
 8007802:	f53f af1f 	bmi.w	8007644 <_vfiprintf_r+0x44>
 8007806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007808:	e71e      	b.n	8007648 <_vfiprintf_r+0x48>
 800780a:	ab03      	add	r3, sp, #12
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	462a      	mov	r2, r5
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <_vfiprintf_r+0x228>)
 8007812:	a904      	add	r1, sp, #16
 8007814:	4630      	mov	r0, r6
 8007816:	f000 f879 	bl	800790c <_printf_i>
 800781a:	e7e4      	b.n	80077e6 <_vfiprintf_r+0x1e6>
 800781c:	08007fd8 	.word	0x08007fd8
 8007820:	08007fe2 	.word	0x08007fe2
 8007824:	00000000 	.word	0x00000000
 8007828:	080075db 	.word	0x080075db
 800782c:	08007fde 	.word	0x08007fde

08007830 <_printf_common>:
 8007830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007834:	4616      	mov	r6, r2
 8007836:	4698      	mov	r8, r3
 8007838:	688a      	ldr	r2, [r1, #8]
 800783a:	690b      	ldr	r3, [r1, #16]
 800783c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007840:	4293      	cmp	r3, r2
 8007842:	bfb8      	it	lt
 8007844:	4613      	movlt	r3, r2
 8007846:	6033      	str	r3, [r6, #0]
 8007848:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800784c:	4607      	mov	r7, r0
 800784e:	460c      	mov	r4, r1
 8007850:	b10a      	cbz	r2, 8007856 <_printf_common+0x26>
 8007852:	3301      	adds	r3, #1
 8007854:	6033      	str	r3, [r6, #0]
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	0699      	lsls	r1, r3, #26
 800785a:	bf42      	ittt	mi
 800785c:	6833      	ldrmi	r3, [r6, #0]
 800785e:	3302      	addmi	r3, #2
 8007860:	6033      	strmi	r3, [r6, #0]
 8007862:	6825      	ldr	r5, [r4, #0]
 8007864:	f015 0506 	ands.w	r5, r5, #6
 8007868:	d106      	bne.n	8007878 <_printf_common+0x48>
 800786a:	f104 0a19 	add.w	sl, r4, #25
 800786e:	68e3      	ldr	r3, [r4, #12]
 8007870:	6832      	ldr	r2, [r6, #0]
 8007872:	1a9b      	subs	r3, r3, r2
 8007874:	42ab      	cmp	r3, r5
 8007876:	dc26      	bgt.n	80078c6 <_printf_common+0x96>
 8007878:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800787c:	6822      	ldr	r2, [r4, #0]
 800787e:	3b00      	subs	r3, #0
 8007880:	bf18      	it	ne
 8007882:	2301      	movne	r3, #1
 8007884:	0692      	lsls	r2, r2, #26
 8007886:	d42b      	bmi.n	80078e0 <_printf_common+0xb0>
 8007888:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800788c:	4641      	mov	r1, r8
 800788e:	4638      	mov	r0, r7
 8007890:	47c8      	blx	r9
 8007892:	3001      	adds	r0, #1
 8007894:	d01e      	beq.n	80078d4 <_printf_common+0xa4>
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	6922      	ldr	r2, [r4, #16]
 800789a:	f003 0306 	and.w	r3, r3, #6
 800789e:	2b04      	cmp	r3, #4
 80078a0:	bf02      	ittt	eq
 80078a2:	68e5      	ldreq	r5, [r4, #12]
 80078a4:	6833      	ldreq	r3, [r6, #0]
 80078a6:	1aed      	subeq	r5, r5, r3
 80078a8:	68a3      	ldr	r3, [r4, #8]
 80078aa:	bf0c      	ite	eq
 80078ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078b0:	2500      	movne	r5, #0
 80078b2:	4293      	cmp	r3, r2
 80078b4:	bfc4      	itt	gt
 80078b6:	1a9b      	subgt	r3, r3, r2
 80078b8:	18ed      	addgt	r5, r5, r3
 80078ba:	2600      	movs	r6, #0
 80078bc:	341a      	adds	r4, #26
 80078be:	42b5      	cmp	r5, r6
 80078c0:	d11a      	bne.n	80078f8 <_printf_common+0xc8>
 80078c2:	2000      	movs	r0, #0
 80078c4:	e008      	b.n	80078d8 <_printf_common+0xa8>
 80078c6:	2301      	movs	r3, #1
 80078c8:	4652      	mov	r2, sl
 80078ca:	4641      	mov	r1, r8
 80078cc:	4638      	mov	r0, r7
 80078ce:	47c8      	blx	r9
 80078d0:	3001      	adds	r0, #1
 80078d2:	d103      	bne.n	80078dc <_printf_common+0xac>
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295
 80078d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078dc:	3501      	adds	r5, #1
 80078de:	e7c6      	b.n	800786e <_printf_common+0x3e>
 80078e0:	18e1      	adds	r1, r4, r3
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	2030      	movs	r0, #48	@ 0x30
 80078e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078ea:	4422      	add	r2, r4
 80078ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078f4:	3302      	adds	r3, #2
 80078f6:	e7c7      	b.n	8007888 <_printf_common+0x58>
 80078f8:	2301      	movs	r3, #1
 80078fa:	4622      	mov	r2, r4
 80078fc:	4641      	mov	r1, r8
 80078fe:	4638      	mov	r0, r7
 8007900:	47c8      	blx	r9
 8007902:	3001      	adds	r0, #1
 8007904:	d0e6      	beq.n	80078d4 <_printf_common+0xa4>
 8007906:	3601      	adds	r6, #1
 8007908:	e7d9      	b.n	80078be <_printf_common+0x8e>
	...

0800790c <_printf_i>:
 800790c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007910:	7e0f      	ldrb	r7, [r1, #24]
 8007912:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007914:	2f78      	cmp	r7, #120	@ 0x78
 8007916:	4691      	mov	r9, r2
 8007918:	4680      	mov	r8, r0
 800791a:	460c      	mov	r4, r1
 800791c:	469a      	mov	sl, r3
 800791e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007922:	d807      	bhi.n	8007934 <_printf_i+0x28>
 8007924:	2f62      	cmp	r7, #98	@ 0x62
 8007926:	d80a      	bhi.n	800793e <_printf_i+0x32>
 8007928:	2f00      	cmp	r7, #0
 800792a:	f000 80d2 	beq.w	8007ad2 <_printf_i+0x1c6>
 800792e:	2f58      	cmp	r7, #88	@ 0x58
 8007930:	f000 80b9 	beq.w	8007aa6 <_printf_i+0x19a>
 8007934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007938:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800793c:	e03a      	b.n	80079b4 <_printf_i+0xa8>
 800793e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007942:	2b15      	cmp	r3, #21
 8007944:	d8f6      	bhi.n	8007934 <_printf_i+0x28>
 8007946:	a101      	add	r1, pc, #4	@ (adr r1, 800794c <_printf_i+0x40>)
 8007948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800794c:	080079a5 	.word	0x080079a5
 8007950:	080079b9 	.word	0x080079b9
 8007954:	08007935 	.word	0x08007935
 8007958:	08007935 	.word	0x08007935
 800795c:	08007935 	.word	0x08007935
 8007960:	08007935 	.word	0x08007935
 8007964:	080079b9 	.word	0x080079b9
 8007968:	08007935 	.word	0x08007935
 800796c:	08007935 	.word	0x08007935
 8007970:	08007935 	.word	0x08007935
 8007974:	08007935 	.word	0x08007935
 8007978:	08007ab9 	.word	0x08007ab9
 800797c:	080079e3 	.word	0x080079e3
 8007980:	08007a73 	.word	0x08007a73
 8007984:	08007935 	.word	0x08007935
 8007988:	08007935 	.word	0x08007935
 800798c:	08007adb 	.word	0x08007adb
 8007990:	08007935 	.word	0x08007935
 8007994:	080079e3 	.word	0x080079e3
 8007998:	08007935 	.word	0x08007935
 800799c:	08007935 	.word	0x08007935
 80079a0:	08007a7b 	.word	0x08007a7b
 80079a4:	6833      	ldr	r3, [r6, #0]
 80079a6:	1d1a      	adds	r2, r3, #4
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6032      	str	r2, [r6, #0]
 80079ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079b4:	2301      	movs	r3, #1
 80079b6:	e09d      	b.n	8007af4 <_printf_i+0x1e8>
 80079b8:	6833      	ldr	r3, [r6, #0]
 80079ba:	6820      	ldr	r0, [r4, #0]
 80079bc:	1d19      	adds	r1, r3, #4
 80079be:	6031      	str	r1, [r6, #0]
 80079c0:	0606      	lsls	r6, r0, #24
 80079c2:	d501      	bpl.n	80079c8 <_printf_i+0xbc>
 80079c4:	681d      	ldr	r5, [r3, #0]
 80079c6:	e003      	b.n	80079d0 <_printf_i+0xc4>
 80079c8:	0645      	lsls	r5, r0, #25
 80079ca:	d5fb      	bpl.n	80079c4 <_printf_i+0xb8>
 80079cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079d0:	2d00      	cmp	r5, #0
 80079d2:	da03      	bge.n	80079dc <_printf_i+0xd0>
 80079d4:	232d      	movs	r3, #45	@ 0x2d
 80079d6:	426d      	negs	r5, r5
 80079d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079dc:	4859      	ldr	r0, [pc, #356]	@ (8007b44 <_printf_i+0x238>)
 80079de:	230a      	movs	r3, #10
 80079e0:	e011      	b.n	8007a06 <_printf_i+0xfa>
 80079e2:	6821      	ldr	r1, [r4, #0]
 80079e4:	6833      	ldr	r3, [r6, #0]
 80079e6:	0608      	lsls	r0, r1, #24
 80079e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80079ec:	d402      	bmi.n	80079f4 <_printf_i+0xe8>
 80079ee:	0649      	lsls	r1, r1, #25
 80079f0:	bf48      	it	mi
 80079f2:	b2ad      	uxthmi	r5, r5
 80079f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80079f6:	4853      	ldr	r0, [pc, #332]	@ (8007b44 <_printf_i+0x238>)
 80079f8:	6033      	str	r3, [r6, #0]
 80079fa:	bf14      	ite	ne
 80079fc:	230a      	movne	r3, #10
 80079fe:	2308      	moveq	r3, #8
 8007a00:	2100      	movs	r1, #0
 8007a02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a06:	6866      	ldr	r6, [r4, #4]
 8007a08:	60a6      	str	r6, [r4, #8]
 8007a0a:	2e00      	cmp	r6, #0
 8007a0c:	bfa2      	ittt	ge
 8007a0e:	6821      	ldrge	r1, [r4, #0]
 8007a10:	f021 0104 	bicge.w	r1, r1, #4
 8007a14:	6021      	strge	r1, [r4, #0]
 8007a16:	b90d      	cbnz	r5, 8007a1c <_printf_i+0x110>
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	d04b      	beq.n	8007ab4 <_printf_i+0x1a8>
 8007a1c:	4616      	mov	r6, r2
 8007a1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a22:	fb03 5711 	mls	r7, r3, r1, r5
 8007a26:	5dc7      	ldrb	r7, [r0, r7]
 8007a28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a2c:	462f      	mov	r7, r5
 8007a2e:	42bb      	cmp	r3, r7
 8007a30:	460d      	mov	r5, r1
 8007a32:	d9f4      	bls.n	8007a1e <_printf_i+0x112>
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d10b      	bne.n	8007a50 <_printf_i+0x144>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	07df      	lsls	r7, r3, #31
 8007a3c:	d508      	bpl.n	8007a50 <_printf_i+0x144>
 8007a3e:	6923      	ldr	r3, [r4, #16]
 8007a40:	6861      	ldr	r1, [r4, #4]
 8007a42:	4299      	cmp	r1, r3
 8007a44:	bfde      	ittt	le
 8007a46:	2330      	movle	r3, #48	@ 0x30
 8007a48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a50:	1b92      	subs	r2, r2, r6
 8007a52:	6122      	str	r2, [r4, #16]
 8007a54:	f8cd a000 	str.w	sl, [sp]
 8007a58:	464b      	mov	r3, r9
 8007a5a:	aa03      	add	r2, sp, #12
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4640      	mov	r0, r8
 8007a60:	f7ff fee6 	bl	8007830 <_printf_common>
 8007a64:	3001      	adds	r0, #1
 8007a66:	d14a      	bne.n	8007afe <_printf_i+0x1f2>
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6c:	b004      	add	sp, #16
 8007a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	f043 0320 	orr.w	r3, r3, #32
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	4833      	ldr	r0, [pc, #204]	@ (8007b48 <_printf_i+0x23c>)
 8007a7c:	2778      	movs	r7, #120	@ 0x78
 8007a7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	6831      	ldr	r1, [r6, #0]
 8007a86:	061f      	lsls	r7, r3, #24
 8007a88:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a8c:	d402      	bmi.n	8007a94 <_printf_i+0x188>
 8007a8e:	065f      	lsls	r7, r3, #25
 8007a90:	bf48      	it	mi
 8007a92:	b2ad      	uxthmi	r5, r5
 8007a94:	6031      	str	r1, [r6, #0]
 8007a96:	07d9      	lsls	r1, r3, #31
 8007a98:	bf44      	itt	mi
 8007a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8007a9e:	6023      	strmi	r3, [r4, #0]
 8007aa0:	b11d      	cbz	r5, 8007aaa <_printf_i+0x19e>
 8007aa2:	2310      	movs	r3, #16
 8007aa4:	e7ac      	b.n	8007a00 <_printf_i+0xf4>
 8007aa6:	4827      	ldr	r0, [pc, #156]	@ (8007b44 <_printf_i+0x238>)
 8007aa8:	e7e9      	b.n	8007a7e <_printf_i+0x172>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	f023 0320 	bic.w	r3, r3, #32
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	e7f6      	b.n	8007aa2 <_printf_i+0x196>
 8007ab4:	4616      	mov	r6, r2
 8007ab6:	e7bd      	b.n	8007a34 <_printf_i+0x128>
 8007ab8:	6833      	ldr	r3, [r6, #0]
 8007aba:	6825      	ldr	r5, [r4, #0]
 8007abc:	6961      	ldr	r1, [r4, #20]
 8007abe:	1d18      	adds	r0, r3, #4
 8007ac0:	6030      	str	r0, [r6, #0]
 8007ac2:	062e      	lsls	r6, r5, #24
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	d501      	bpl.n	8007acc <_printf_i+0x1c0>
 8007ac8:	6019      	str	r1, [r3, #0]
 8007aca:	e002      	b.n	8007ad2 <_printf_i+0x1c6>
 8007acc:	0668      	lsls	r0, r5, #25
 8007ace:	d5fb      	bpl.n	8007ac8 <_printf_i+0x1bc>
 8007ad0:	8019      	strh	r1, [r3, #0]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	6123      	str	r3, [r4, #16]
 8007ad6:	4616      	mov	r6, r2
 8007ad8:	e7bc      	b.n	8007a54 <_printf_i+0x148>
 8007ada:	6833      	ldr	r3, [r6, #0]
 8007adc:	1d1a      	adds	r2, r3, #4
 8007ade:	6032      	str	r2, [r6, #0]
 8007ae0:	681e      	ldr	r6, [r3, #0]
 8007ae2:	6862      	ldr	r2, [r4, #4]
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f7f8 fb7a 	bl	80001e0 <memchr>
 8007aec:	b108      	cbz	r0, 8007af2 <_printf_i+0x1e6>
 8007aee:	1b80      	subs	r0, r0, r6
 8007af0:	6060      	str	r0, [r4, #4]
 8007af2:	6863      	ldr	r3, [r4, #4]
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	2300      	movs	r3, #0
 8007af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007afc:	e7aa      	b.n	8007a54 <_printf_i+0x148>
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	4632      	mov	r2, r6
 8007b02:	4649      	mov	r1, r9
 8007b04:	4640      	mov	r0, r8
 8007b06:	47d0      	blx	sl
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d0ad      	beq.n	8007a68 <_printf_i+0x15c>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	079b      	lsls	r3, r3, #30
 8007b10:	d413      	bmi.n	8007b3a <_printf_i+0x22e>
 8007b12:	68e0      	ldr	r0, [r4, #12]
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	4298      	cmp	r0, r3
 8007b18:	bfb8      	it	lt
 8007b1a:	4618      	movlt	r0, r3
 8007b1c:	e7a6      	b.n	8007a6c <_printf_i+0x160>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4632      	mov	r2, r6
 8007b22:	4649      	mov	r1, r9
 8007b24:	4640      	mov	r0, r8
 8007b26:	47d0      	blx	sl
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d09d      	beq.n	8007a68 <_printf_i+0x15c>
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	68e3      	ldr	r3, [r4, #12]
 8007b30:	9903      	ldr	r1, [sp, #12]
 8007b32:	1a5b      	subs	r3, r3, r1
 8007b34:	42ab      	cmp	r3, r5
 8007b36:	dcf2      	bgt.n	8007b1e <_printf_i+0x212>
 8007b38:	e7eb      	b.n	8007b12 <_printf_i+0x206>
 8007b3a:	2500      	movs	r5, #0
 8007b3c:	f104 0619 	add.w	r6, r4, #25
 8007b40:	e7f5      	b.n	8007b2e <_printf_i+0x222>
 8007b42:	bf00      	nop
 8007b44:	08007fe9 	.word	0x08007fe9
 8007b48:	08007ffa 	.word	0x08007ffa

08007b4c <__sflush_r>:
 8007b4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b54:	0716      	lsls	r6, r2, #28
 8007b56:	4605      	mov	r5, r0
 8007b58:	460c      	mov	r4, r1
 8007b5a:	d454      	bmi.n	8007c06 <__sflush_r+0xba>
 8007b5c:	684b      	ldr	r3, [r1, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	dc02      	bgt.n	8007b68 <__sflush_r+0x1c>
 8007b62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dd48      	ble.n	8007bfa <__sflush_r+0xae>
 8007b68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b6a:	2e00      	cmp	r6, #0
 8007b6c:	d045      	beq.n	8007bfa <__sflush_r+0xae>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b74:	682f      	ldr	r7, [r5, #0]
 8007b76:	6a21      	ldr	r1, [r4, #32]
 8007b78:	602b      	str	r3, [r5, #0]
 8007b7a:	d030      	beq.n	8007bde <__sflush_r+0x92>
 8007b7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	0759      	lsls	r1, r3, #29
 8007b82:	d505      	bpl.n	8007b90 <__sflush_r+0x44>
 8007b84:	6863      	ldr	r3, [r4, #4]
 8007b86:	1ad2      	subs	r2, r2, r3
 8007b88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b8a:	b10b      	cbz	r3, 8007b90 <__sflush_r+0x44>
 8007b8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b8e:	1ad2      	subs	r2, r2, r3
 8007b90:	2300      	movs	r3, #0
 8007b92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b94:	6a21      	ldr	r1, [r4, #32]
 8007b96:	4628      	mov	r0, r5
 8007b98:	47b0      	blx	r6
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	d106      	bne.n	8007bae <__sflush_r+0x62>
 8007ba0:	6829      	ldr	r1, [r5, #0]
 8007ba2:	291d      	cmp	r1, #29
 8007ba4:	d82b      	bhi.n	8007bfe <__sflush_r+0xb2>
 8007ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8007c50 <__sflush_r+0x104>)
 8007ba8:	410a      	asrs	r2, r1
 8007baa:	07d6      	lsls	r6, r2, #31
 8007bac:	d427      	bmi.n	8007bfe <__sflush_r+0xb2>
 8007bae:	2200      	movs	r2, #0
 8007bb0:	6062      	str	r2, [r4, #4]
 8007bb2:	04d9      	lsls	r1, r3, #19
 8007bb4:	6922      	ldr	r2, [r4, #16]
 8007bb6:	6022      	str	r2, [r4, #0]
 8007bb8:	d504      	bpl.n	8007bc4 <__sflush_r+0x78>
 8007bba:	1c42      	adds	r2, r0, #1
 8007bbc:	d101      	bne.n	8007bc2 <__sflush_r+0x76>
 8007bbe:	682b      	ldr	r3, [r5, #0]
 8007bc0:	b903      	cbnz	r3, 8007bc4 <__sflush_r+0x78>
 8007bc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bc6:	602f      	str	r7, [r5, #0]
 8007bc8:	b1b9      	cbz	r1, 8007bfa <__sflush_r+0xae>
 8007bca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bce:	4299      	cmp	r1, r3
 8007bd0:	d002      	beq.n	8007bd8 <__sflush_r+0x8c>
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f7ff fbf2 	bl	80073bc <_free_r>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bdc:	e00d      	b.n	8007bfa <__sflush_r+0xae>
 8007bde:	2301      	movs	r3, #1
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b0      	blx	r6
 8007be4:	4602      	mov	r2, r0
 8007be6:	1c50      	adds	r0, r2, #1
 8007be8:	d1c9      	bne.n	8007b7e <__sflush_r+0x32>
 8007bea:	682b      	ldr	r3, [r5, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0c6      	beq.n	8007b7e <__sflush_r+0x32>
 8007bf0:	2b1d      	cmp	r3, #29
 8007bf2:	d001      	beq.n	8007bf8 <__sflush_r+0xac>
 8007bf4:	2b16      	cmp	r3, #22
 8007bf6:	d11e      	bne.n	8007c36 <__sflush_r+0xea>
 8007bf8:	602f      	str	r7, [r5, #0]
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	e022      	b.n	8007c44 <__sflush_r+0xf8>
 8007bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c02:	b21b      	sxth	r3, r3
 8007c04:	e01b      	b.n	8007c3e <__sflush_r+0xf2>
 8007c06:	690f      	ldr	r7, [r1, #16]
 8007c08:	2f00      	cmp	r7, #0
 8007c0a:	d0f6      	beq.n	8007bfa <__sflush_r+0xae>
 8007c0c:	0793      	lsls	r3, r2, #30
 8007c0e:	680e      	ldr	r6, [r1, #0]
 8007c10:	bf08      	it	eq
 8007c12:	694b      	ldreq	r3, [r1, #20]
 8007c14:	600f      	str	r7, [r1, #0]
 8007c16:	bf18      	it	ne
 8007c18:	2300      	movne	r3, #0
 8007c1a:	eba6 0807 	sub.w	r8, r6, r7
 8007c1e:	608b      	str	r3, [r1, #8]
 8007c20:	f1b8 0f00 	cmp.w	r8, #0
 8007c24:	dde9      	ble.n	8007bfa <__sflush_r+0xae>
 8007c26:	6a21      	ldr	r1, [r4, #32]
 8007c28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c2a:	4643      	mov	r3, r8
 8007c2c:	463a      	mov	r2, r7
 8007c2e:	4628      	mov	r0, r5
 8007c30:	47b0      	blx	r6
 8007c32:	2800      	cmp	r0, #0
 8007c34:	dc08      	bgt.n	8007c48 <__sflush_r+0xfc>
 8007c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c3e:	81a3      	strh	r3, [r4, #12]
 8007c40:	f04f 30ff 	mov.w	r0, #4294967295
 8007c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c48:	4407      	add	r7, r0
 8007c4a:	eba8 0800 	sub.w	r8, r8, r0
 8007c4e:	e7e7      	b.n	8007c20 <__sflush_r+0xd4>
 8007c50:	dfbffffe 	.word	0xdfbffffe

08007c54 <_fflush_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	690b      	ldr	r3, [r1, #16]
 8007c58:	4605      	mov	r5, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	b913      	cbnz	r3, 8007c64 <_fflush_r+0x10>
 8007c5e:	2500      	movs	r5, #0
 8007c60:	4628      	mov	r0, r5
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	b118      	cbz	r0, 8007c6e <_fflush_r+0x1a>
 8007c66:	6a03      	ldr	r3, [r0, #32]
 8007c68:	b90b      	cbnz	r3, 8007c6e <_fflush_r+0x1a>
 8007c6a:	f7ff f9ad 	bl	8006fc8 <__sinit>
 8007c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0f3      	beq.n	8007c5e <_fflush_r+0xa>
 8007c76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c78:	07d0      	lsls	r0, r2, #31
 8007c7a:	d404      	bmi.n	8007c86 <_fflush_r+0x32>
 8007c7c:	0599      	lsls	r1, r3, #22
 8007c7e:	d402      	bmi.n	8007c86 <_fflush_r+0x32>
 8007c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c82:	f7ff fb98 	bl	80073b6 <__retarget_lock_acquire_recursive>
 8007c86:	4628      	mov	r0, r5
 8007c88:	4621      	mov	r1, r4
 8007c8a:	f7ff ff5f 	bl	8007b4c <__sflush_r>
 8007c8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c90:	07da      	lsls	r2, r3, #31
 8007c92:	4605      	mov	r5, r0
 8007c94:	d4e4      	bmi.n	8007c60 <_fflush_r+0xc>
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	059b      	lsls	r3, r3, #22
 8007c9a:	d4e1      	bmi.n	8007c60 <_fflush_r+0xc>
 8007c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c9e:	f7ff fb8b 	bl	80073b8 <__retarget_lock_release_recursive>
 8007ca2:	e7dd      	b.n	8007c60 <_fflush_r+0xc>

08007ca4 <__swhatbuf_r>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cac:	2900      	cmp	r1, #0
 8007cae:	b096      	sub	sp, #88	@ 0x58
 8007cb0:	4615      	mov	r5, r2
 8007cb2:	461e      	mov	r6, r3
 8007cb4:	da0d      	bge.n	8007cd2 <__swhatbuf_r+0x2e>
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007cbc:	f04f 0100 	mov.w	r1, #0
 8007cc0:	bf14      	ite	ne
 8007cc2:	2340      	movne	r3, #64	@ 0x40
 8007cc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007cc8:	2000      	movs	r0, #0
 8007cca:	6031      	str	r1, [r6, #0]
 8007ccc:	602b      	str	r3, [r5, #0]
 8007cce:	b016      	add	sp, #88	@ 0x58
 8007cd0:	bd70      	pop	{r4, r5, r6, pc}
 8007cd2:	466a      	mov	r2, sp
 8007cd4:	f000 f848 	bl	8007d68 <_fstat_r>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	dbec      	blt.n	8007cb6 <__swhatbuf_r+0x12>
 8007cdc:	9901      	ldr	r1, [sp, #4]
 8007cde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ce2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ce6:	4259      	negs	r1, r3
 8007ce8:	4159      	adcs	r1, r3
 8007cea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cee:	e7eb      	b.n	8007cc8 <__swhatbuf_r+0x24>

08007cf0 <__smakebuf_r>:
 8007cf0:	898b      	ldrh	r3, [r1, #12]
 8007cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cf4:	079d      	lsls	r5, r3, #30
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	d507      	bpl.n	8007d0c <__smakebuf_r+0x1c>
 8007cfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	6123      	str	r3, [r4, #16]
 8007d04:	2301      	movs	r3, #1
 8007d06:	6163      	str	r3, [r4, #20]
 8007d08:	b003      	add	sp, #12
 8007d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d0c:	ab01      	add	r3, sp, #4
 8007d0e:	466a      	mov	r2, sp
 8007d10:	f7ff ffc8 	bl	8007ca4 <__swhatbuf_r>
 8007d14:	9f00      	ldr	r7, [sp, #0]
 8007d16:	4605      	mov	r5, r0
 8007d18:	4639      	mov	r1, r7
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f7ff fbba 	bl	8007494 <_malloc_r>
 8007d20:	b948      	cbnz	r0, 8007d36 <__smakebuf_r+0x46>
 8007d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d26:	059a      	lsls	r2, r3, #22
 8007d28:	d4ee      	bmi.n	8007d08 <__smakebuf_r+0x18>
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	f043 0302 	orr.w	r3, r3, #2
 8007d32:	81a3      	strh	r3, [r4, #12]
 8007d34:	e7e2      	b.n	8007cfc <__smakebuf_r+0xc>
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	6020      	str	r0, [r4, #0]
 8007d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d3e:	81a3      	strh	r3, [r4, #12]
 8007d40:	9b01      	ldr	r3, [sp, #4]
 8007d42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d46:	b15b      	cbz	r3, 8007d60 <__smakebuf_r+0x70>
 8007d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f000 f81d 	bl	8007d8c <_isatty_r>
 8007d52:	b128      	cbz	r0, 8007d60 <__smakebuf_r+0x70>
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	f043 0301 	orr.w	r3, r3, #1
 8007d5e:	81a3      	strh	r3, [r4, #12]
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	431d      	orrs	r5, r3
 8007d64:	81a5      	strh	r5, [r4, #12]
 8007d66:	e7cf      	b.n	8007d08 <__smakebuf_r+0x18>

08007d68 <_fstat_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4d07      	ldr	r5, [pc, #28]	@ (8007d88 <_fstat_r+0x20>)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	4611      	mov	r1, r2
 8007d74:	602b      	str	r3, [r5, #0]
 8007d76:	f7fb f9ff 	bl	8003178 <_fstat>
 8007d7a:	1c43      	adds	r3, r0, #1
 8007d7c:	d102      	bne.n	8007d84 <_fstat_r+0x1c>
 8007d7e:	682b      	ldr	r3, [r5, #0]
 8007d80:	b103      	cbz	r3, 8007d84 <_fstat_r+0x1c>
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	bd38      	pop	{r3, r4, r5, pc}
 8007d86:	bf00      	nop
 8007d88:	20000500 	.word	0x20000500

08007d8c <_isatty_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4d06      	ldr	r5, [pc, #24]	@ (8007da8 <_isatty_r+0x1c>)
 8007d90:	2300      	movs	r3, #0
 8007d92:	4604      	mov	r4, r0
 8007d94:	4608      	mov	r0, r1
 8007d96:	602b      	str	r3, [r5, #0]
 8007d98:	f7fb f9fe 	bl	8003198 <_isatty>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d102      	bne.n	8007da6 <_isatty_r+0x1a>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	b103      	cbz	r3, 8007da6 <_isatty_r+0x1a>
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	20000500 	.word	0x20000500

08007dac <_sbrk_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	4d06      	ldr	r5, [pc, #24]	@ (8007dc8 <_sbrk_r+0x1c>)
 8007db0:	2300      	movs	r3, #0
 8007db2:	4604      	mov	r4, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	602b      	str	r3, [r5, #0]
 8007db8:	f7fb fa06 	bl	80031c8 <_sbrk>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_sbrk_r+0x1a>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_sbrk_r+0x1a>
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	20000500 	.word	0x20000500

08007dcc <_init>:
 8007dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dce:	bf00      	nop
 8007dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd2:	bc08      	pop	{r3}
 8007dd4:	469e      	mov	lr, r3
 8007dd6:	4770      	bx	lr

08007dd8 <_fini>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	bf00      	nop
 8007ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dde:	bc08      	pop	{r3}
 8007de0:	469e      	mov	lr, r3
 8007de2:	4770      	bx	lr


test-0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007d0c  08007d0c  00008d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f34  08007f34  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007f34  08007f34  00008f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f3c  08007f3c  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f3c  08007f3c  00008f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f40  08007f40  00008f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007f44  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000068  08007fac  00009068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08007fac  00009508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ef2  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a98  00000000  00000000  0001af8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0001da28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2e  00000000  00000000  0001ec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b19  00000000  00000000  0001fa9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001630a  00000000  00000000  000395b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966b4  00000000  00000000  0004f8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e5f75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  000e5ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000eb660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007cf4 	.word	0x08007cf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007cf4 	.word	0x08007cf4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <adxl_write>:
#define CS_SET() 	HAL_GPIO_WritePin(ADXL345_CS_GPIO_Port, ADXL345_CS_Pin, GPIO_PIN_SET)
#define CS_RESET() 	HAL_GPIO_WritePin(ADXL345_CS_GPIO_Port, ADXL345_CS_Pin, GPIO_PIN_RESET)


void adxl_write (uint8_t address, uint8_t value)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	460a      	mov	r2, r1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = address | ADXL_SPI_MULTI_BYTE;  // multibyte write enabled
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	737b      	strb	r3, [r7, #13]
	CS_RESET();     // pull the cs pin low to enable the slave
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc0:	4809      	ldr	r0, [pc, #36]	@ (8000de8 <adxl_write+0x4c>)
 8000dc2:	f002 ff95 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ADXL345_PORT, data, 2, 100);  // transmit the address and data
 8000dc6:	f107 010c 	add.w	r1, r7, #12
 8000dca:	2364      	movs	r3, #100	@ 0x64
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4807      	ldr	r0, [pc, #28]	@ (8000dec <adxl_write+0x50>)
 8000dd0:	f004 ff89 	bl	8005ce6 <HAL_SPI_Transmit>
	CS_SET(); // pull the cs pin high to disable the slave
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dda:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <adxl_write+0x4c>)
 8000ddc:	f002 ff88 	bl	8003cf0 <HAL_GPIO_WritePin>
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40020000 	.word	0x40020000
 8000dec:	200001c4 	.word	0x200001c4

08000df0 <adxl_read>:


void adxl_read(uint8_t address, uint8_t* data_rec) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
    address |= ADXL_SPI_READ;  // read operation
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	71fb      	strb	r3, [r7, #7]
    address |= ADXL_SPI_MULTI_BYTE;  // multibyte read
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	71fb      	strb	r3, [r7, #7]
    CS_RESET();  // pull the cs pin low to enable the slave
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e16:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <adxl_read+0x58>)
 8000e18:	f002 ff6a 	bl	8003cf0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ADXL345_PORT, &address, 1, 100);  // send the address from where you want to read data
 8000e1c:	1df9      	adds	r1, r7, #7
 8000e1e:	2364      	movs	r3, #100	@ 0x64
 8000e20:	2201      	movs	r2, #1
 8000e22:	480a      	ldr	r0, [pc, #40]	@ (8000e4c <adxl_read+0x5c>)
 8000e24:	f004 ff5f 	bl	8005ce6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&ADXL345_PORT, data_rec, 6, 100);  // read 6 bytes of data
 8000e28:	2364      	movs	r3, #100	@ 0x64
 8000e2a:	2206      	movs	r2, #6
 8000e2c:	6839      	ldr	r1, [r7, #0]
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <adxl_read+0x5c>)
 8000e30:	f005 f89c 	bl	8005f6c <HAL_SPI_Receive>
    CS_SET();  // pull the cs pin high to disable the slave
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3a:	4803      	ldr	r0, [pc, #12]	@ (8000e48 <adxl_read+0x58>)
 8000e3c:	f002 ff58 	bl	8003cf0 <HAL_GPIO_WritePin>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	200001c4 	.word	0x200001c4

08000e50 <Adxl345_init>:

bool Adxl345_init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	adxl_write (ADXL_REG_DATA_FORMAT, ADXL_RANGE_4G);  // data_format range= +- 4g
 8000e54:	2101      	movs	r1, #1
 8000e56:	2031      	movs	r0, #49	@ 0x31
 8000e58:	f7ff ffa0 	bl	8000d9c <adxl_write>
	adxl_write (ADXL_REG_POWER_CTL, ADXL_RES_10BIT);  // reset all bits
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	202d      	movs	r0, #45	@ 0x2d
 8000e60:	f7ff ff9c 	bl	8000d9c <adxl_write>
	adxl_write (ADXL_REG_POWER_CTL, ADXL_FULL_RES);  // power_cntl measure and wake up 8hz
 8000e64:	2108      	movs	r1, #8
 8000e66:	202d      	movs	r0, #45	@ 0x2d
 8000e68:	f7ff ff98 	bl	8000d9c <adxl_write>
	return true;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	0000      	movs	r0, r0
 8000e74:	0000      	movs	r0, r0
	...

08000e78 <getAcceleration>:

int32_t getAcceleration(char axis) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
    uint8_t accel_data[6];  // Buffer to store raw acceleration data from the ADXL345
    int16_t raw_accel_x, raw_accel_y, raw_accel_z;  // Raw acceleration values for the X, Y, and Z axes
    int16_t raw_accel;  // Declare raw_accel to store the selected axis value

    // Read acceleration data from ADXL345
    adxl_read(ADXL_REG_DATAX0, accel_data);
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	4619      	mov	r1, r3
 8000e88:	2032      	movs	r0, #50	@ 0x32
 8000e8a:	f7ff ffb1 	bl	8000df0 <adxl_read>

    raw_accel_x = ((accel_data[1] << 8) | accel_data[0]);
 8000e8e:	7b7b      	ldrb	r3, [r7, #13]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	7b3b      	ldrb	r3, [r7, #12]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	83bb      	strh	r3, [r7, #28]
    raw_accel_y = ((accel_data[3] << 8) | accel_data[2]);
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	837b      	strh	r3, [r7, #26]
    raw_accel_z = ((accel_data[5] << 8) | accel_data[4]);
 8000eaa:	7c7b      	ldrb	r3, [r7, #17]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	7c3b      	ldrb	r3, [r7, #16]
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	833b      	strh	r3, [r7, #24]

    // Select the correct axis based on the input character 'X', 'Y', or 'Z'
    switch (axis) {
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ebc:	d00c      	beq.n	8000ed8 <getAcceleration+0x60>
 8000ebe:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ec0:	dc0d      	bgt.n	8000ede <getAcceleration+0x66>
 8000ec2:	2b58      	cmp	r3, #88	@ 0x58
 8000ec4:	d002      	beq.n	8000ecc <getAcceleration+0x54>
 8000ec6:	2b59      	cmp	r3, #89	@ 0x59
 8000ec8:	d003      	beq.n	8000ed2 <getAcceleration+0x5a>
            break;
        case 'Z':
            raw_accel = raw_accel_z;
            break;
        default:
            break;
 8000eca:	e008      	b.n	8000ede <getAcceleration+0x66>
            raw_accel = raw_accel_x;
 8000ecc:	8bbb      	ldrh	r3, [r7, #28]
 8000ece:	83fb      	strh	r3, [r7, #30]
            break;
 8000ed0:	e006      	b.n	8000ee0 <getAcceleration+0x68>
            raw_accel = raw_accel_y;
 8000ed2:	8b7b      	ldrh	r3, [r7, #26]
 8000ed4:	83fb      	strh	r3, [r7, #30]
            break;
 8000ed6:	e003      	b.n	8000ee0 <getAcceleration+0x68>
            raw_accel = raw_accel_z;
 8000ed8:	8b3b      	ldrh	r3, [r7, #24]
 8000eda:	83fb      	strh	r3, [r7, #30]
            break;
 8000edc:	e000      	b.n	8000ee0 <getAcceleration+0x68>
            break;
 8000ede:	bf00      	nop
    }

    // Convert the raw value to g and apply offset encoding to store as uint32_t
    int32_t accel_g = ((raw_accel * ADXL345_SCALE_FACTOR_4G) * ACCEL_SCALING_FACTOR);
 8000ee0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb1d 	bl	8000524 <__aeabi_i2d>
 8000eea:	a30d      	add	r3, pc, #52	@ (adr r3, 8000f20 <getAcceleration+0xa8>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fb82 	bl	80005f8 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	a30a      	add	r3, pc, #40	@ (adr r3, 8000f28 <getAcceleration+0xb0>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff fb79 	bl	80005f8 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f7ff fd85 	bl	8000a1c <__aeabi_d2iz>
 8000f12:	4603      	mov	r3, r0
 8000f14:	617b      	str	r3, [r7, #20]

    return accel_g;
 8000f16:	697b      	ldr	r3, [r7, #20]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	8e8a71de 	.word	0x8e8a71de
 8000f24:	3f7ff2e4 	.word	0x3f7ff2e4
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	40c38800 	.word	0x40c38800

08000f30 <EEPROM_Read>:
    HAL_I2C_Mem_Write(&EEPROM_PORT, EEPROM_ADDRESS_WRITE, addr, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
    HAL_Delay(5);
}

// This function helps to read from EEPROM
void EEPROM_Read(uint16_t addr, uint8_t *data, uint16_t size) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af04      	add	r7, sp, #16
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	80fb      	strh	r3, [r7, #6]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&EEPROM_PORT, EEPROM_ADDRESS_READ, addr, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
 8000f40:	88fa      	ldrh	r2, [r7, #6]
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2310      	movs	r3, #16
 8000f52:	21a1      	movs	r1, #161	@ 0xa1
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <EEPROM_Read+0x38>)
 8000f56:	f003 fb59 	bl	800460c <HAL_I2C_Mem_Read>
    HAL_Delay(5);
 8000f5a:	2005      	movs	r0, #5
 8000f5c:	f002 fc3a 	bl	80037d4 <HAL_Delay>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000118 	.word	0x20000118

08000f6c <bytes2uInt>:
    for (uint8_t i = 0; i < 4; i++) {
      bytes_data[i] = DataMem.b_data[i];
    }
}

uint32_t bytes2uInt(uint8_t *bytes_data){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
    union {
      uint32_t f_data;
      uint8_t b_data[4];
    }DataMem;

    for (uint8_t i = 0; i < 4; i++) {
 8000f74:	2300      	movs	r3, #0
 8000f76:	75fb      	strb	r3, [r7, #23]
 8000f78:	e00b      	b.n	8000f92 <bytes2uInt+0x26>
    	DataMem.b_data[i] = bytes_data[i];
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	441a      	add	r2, r3
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	3318      	adds	r3, #24
 8000f86:	443b      	add	r3, r7
 8000f88:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d9f0      	bls.n	8000f7a <bytes2uInt+0xe>
    }

   uint32_t variable =  DataMem.f_data;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	613b      	str	r3, [r7, #16]
   return variable;
 8000f9c:	693b      	ldr	r3, [r7, #16]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	371c      	adds	r7, #28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <Etc_Read_Reg>:
PROCBUFFER Etc_Buffer_Out = {.LANByte = 0};
PROCBUFFER Etc_Buffer_In = {.LANByte = 0};

//reads a directly addressable register
//address = register to read, length = number of bytes to read (1,2,3,4), long is returned but only the requested bytes are meaningful, starting from LsByte
uint32_t Etc_Read_Reg(uint16_t address, uint8_t length){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	80fb      	strh	r3, [r7, #6]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	717b      	strb	r3, [r7, #5]
	ULONG Result;
	UWORD Addr;
	uint8_t i;
	uint8_t xfrbuf[7];				//buffer for spi xfr

	Addr.LANWord = address;
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	82bb      	strh	r3, [r7, #20]
	xfrbuf[0] = COMM_SPI_READ;		//SPI read command
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	733b      	strb	r3, [r7, #12]
	xfrbuf[1] = Addr.LANByte[1];	//address of the register
 8000fc4:	7d7b      	ldrb	r3, [r7, #21]
 8000fc6:	737b      	strb	r3, [r7, #13]
	xfrbuf[2] = Addr.LANByte[0];	//to read MSByte first
 8000fc8:	7d3b      	ldrb	r3, [r7, #20]
 8000fca:	73bb      	strb	r3, [r7, #14]
	for(i=0; i< length; i++){		//fill dummy bytes
 8000fcc:	2300      	movs	r3, #0
 8000fce:	77fb      	strb	r3, [r7, #31]
 8000fd0:	e009      	b.n	8000fe6 <Etc_Read_Reg+0x3a>
		xfrbuf[i+3] = DUMMY_BYTE;
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	3320      	adds	r3, #32
 8000fd8:	443b      	add	r3, r7
 8000fda:	22ff      	movs	r2, #255	@ 0xff
 8000fdc:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i=0; i< length; i++){		//fill dummy bytes
 8000fe0:	7ffb      	ldrb	r3, [r7, #31]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	77fb      	strb	r3, [r7, #31]
 8000fe6:	7ffa      	ldrb	r2, [r7, #31]
 8000fe8:	797b      	ldrb	r3, [r7, #5]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d3f1      	bcc.n	8000fd2 <Etc_Read_Reg+0x26>
	}

	CS_SET();						//send L+3 bytes and get back into same buffer
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ff4:	4819      	ldr	r0, [pc, #100]	@ (800105c <Etc_Read_Reg+0xb0>)
 8000ff6:	f002 fe7b 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&LAN9252_PORT, xfrbuf, xfrbuf, length+3, HAL_MAX_DELAY);
 8000ffa:	797b      	ldrb	r3, [r7, #5]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	3303      	adds	r3, #3
 8001000:	b29b      	uxth	r3, r3
 8001002:	f107 020c 	add.w	r2, r7, #12
 8001006:	f107 010c 	add.w	r1, r7, #12
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	9000      	str	r0, [sp, #0]
 8001010:	4813      	ldr	r0, [pc, #76]	@ (8001060 <Etc_Read_Reg+0xb4>)
 8001012:	f005 f8c3 	bl	800619c <HAL_SPI_TransmitReceive>
	CS_RESET();
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800101c:	480f      	ldr	r0, [pc, #60]	@ (800105c <Etc_Read_Reg+0xb0>)
 800101e:	f002 fe67 	bl	8003cf0 <HAL_GPIO_WritePin>

	Result.LANLong = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
	for(i=0; i<length; i++){		//read the requested number of bytes LSByte first
 8001026:	2300      	movs	r3, #0
 8001028:	77fb      	strb	r3, [r7, #31]
 800102a:	e00d      	b.n	8001048 <Etc_Read_Reg+0x9c>
		Result.LANByte[i] = xfrbuf[i+3];
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	1cda      	adds	r2, r3, #3
 8001030:	7ffb      	ldrb	r3, [r7, #31]
 8001032:	3220      	adds	r2, #32
 8001034:	443a      	add	r2, r7
 8001036:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800103a:	3320      	adds	r3, #32
 800103c:	443b      	add	r3, r7
 800103e:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<length; i++){		//read the requested number of bytes LSByte first
 8001042:	7ffb      	ldrb	r3, [r7, #31]
 8001044:	3301      	adds	r3, #1
 8001046:	77fb      	strb	r3, [r7, #31]
 8001048:	7ffa      	ldrb	r2, [r7, #31]
 800104a:	797b      	ldrb	r3, [r7, #5]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3ed      	bcc.n	800102c <Etc_Read_Reg+0x80>
	}
	return Result.LANLong;
 8001050:	69bb      	ldr	r3, [r7, #24]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020000 	.word	0x40020000
 8001060:	2000021c 	.word	0x2000021c

08001064 <Etc_Write_Reg>:

// write a directly addressable register, 4 bytes always
// Address = register to write, DataOut = data to write
void Etc_Write_Reg(uint16_t address, uint32_t DataOut)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	80fb      	strh	r3, [r7, #6]
	ULONG Data;
	UWORD Addr;
	uint8_t i;
	uint8_t xfrbuf[7]; 				// buffer for spi xfr

	Addr.LANWord = address;
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	82bb      	strh	r3, [r7, #20]
	Data.LANLong = DataOut;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	61bb      	str	r3, [r7, #24]
	xfrbuf[0] = COMM_SPI_WRITE;     // SPI write command
 8001078:	2302      	movs	r3, #2
 800107a:	733b      	strb	r3, [r7, #12]
	xfrbuf[1] = Addr.LANByte[1];    // address of the register
 800107c:	7d7b      	ldrb	r3, [r7, #21]
 800107e:	737b      	strb	r3, [r7, #13]
	xfrbuf[2] = Addr.LANByte[0];    // to read, MsByte first
 8001080:	7d3b      	ldrb	r3, [r7, #20]
 8001082:	73bb      	strb	r3, [r7, #14]
	for (i=0; i<4; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	77fb      	strb	r3, [r7, #31]
 8001088:	e00d      	b.n	80010a6 <Etc_Write_Reg+0x42>
	{
		xfrbuf[i+3] = Data.LANByte[i];	// fill bytes to send, lsb first
 800108a:	7ffa      	ldrb	r2, [r7, #31]
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	3303      	adds	r3, #3
 8001090:	3220      	adds	r2, #32
 8001092:	443a      	add	r2, r7
 8001094:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8001098:	3320      	adds	r3, #32
 800109a:	443b      	add	r3, r7
 800109c:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i=0; i<4; i++)
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	3301      	adds	r3, #1
 80010a4:	77fb      	strb	r3, [r7, #31]
 80010a6:	7ffb      	ldrb	r3, [r7, #31]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d9ee      	bls.n	800108a <Etc_Write_Reg+0x26>
	}

	CS_SET();						//send 7 bytes and get back into same bfr
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010b2:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <Etc_Write_Reg+0x80>)
 80010b4:	f002 fe1c 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&LAN9252_PORT, xfrbuf, xfrbuf, 7, HAL_MAX_DELAY);
 80010b8:	f107 020c 	add.w	r2, r7, #12
 80010bc:	f107 010c 	add.w	r1, r7, #12
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2307      	movs	r3, #7
 80010c8:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <Etc_Write_Reg+0x84>)
 80010ca:	f005 f867 	bl	800619c <HAL_SPI_TransmitReceive>
	CS_RESET();
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <Etc_Write_Reg+0x80>)
 80010d6:	f002 fe0b 	bl	8003cf0 <HAL_GPIO_WritePin>
}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40020000 	.word	0x40020000
 80010e8:	2000021c 	.word	0x2000021c

080010ec <Etc_Read_Reg_Wait>:

// read an indirectly addressable register
uint32_t Etc_Read_Reg_Wait(uint16_t address, uint8_t length)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	80fb      	strh	r3, [r7, #6]
 80010f8:	4613      	mov	r3, r2
 80010fa:	717b      	strb	r3, [r7, #5]
	ULONG TempLong;
	UWORD Addr;

	Addr.LANWord = address;
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	813b      	strh	r3, [r7, #8]
	TempLong.LANByte[0] = Addr.LANByte[0];    				//address of the register
 8001100:	7a3b      	ldrb	r3, [r7, #8]
 8001102:	733b      	strb	r3, [r7, #12]
	TempLong.LANByte[1] = Addr.LANByte[1];    				//to read, LsByte first
 8001104:	7a7b      	ldrb	r3, [r7, #9]
 8001106:	737b      	strb	r3, [r7, #13]
	TempLong.LANByte[2] = length;                 			//number of bytes to read
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	73bb      	strb	r3, [r7, #14]
	TempLong.LANByte[3] = ESC_READ;               			// ESC read
 800110c:	23c0      	movs	r3, #192	@ 0xc0
 800110e:	73fb      	strb	r3, [r7, #15]

	Etc_Write_Reg(ECAT_CSR_CMD, TempLong.LANLong);			// write the command
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4619      	mov	r1, r3
 8001114:	f44f 7041 	mov.w	r0, #772	@ 0x304
 8001118:	f7ff ffa4 	bl	8001064 <Etc_Write_Reg>
	TempLong.LANByte[3] = ECAT_CSR_BUSY;
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	73fb      	strb	r3, [r7, #15]

	do{														// wait for command execution
		TempLong.LANLong = Etc_Read_Reg(ECAT_CSR_CMD, 4);
 8001120:	2104      	movs	r1, #4
 8001122:	f44f 7041 	mov.w	r0, #772	@ 0x304
 8001126:	f7ff ff41 	bl	8000fac <Etc_Read_Reg>
 800112a:	4603      	mov	r3, r0
 800112c:	60fb      	str	r3, [r7, #12]
	}while(TempLong.LANByte[3] & ECAT_CSR_BUSY);
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	b25b      	sxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	dbf4      	blt.n	8001120 <Etc_Read_Reg_Wait+0x34>

	TempLong.LANLong = Etc_Read_Reg(ECAT_CSR_DATA, length);   // read the requested register
 8001136:	797b      	ldrb	r3, [r7, #5]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800113e:	f7ff ff35 	bl	8000fac <Etc_Read_Reg>
 8001142:	4603      	mov	r3, r0
 8001144:	60fb      	str	r3, [r7, #12]

	return TempLong.LANLong;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <Etc_Read_Fifo>:
	}while(TempLong.LANByte[3] & ECAT_CSR_BUSY);
}

// read from process ram fifo
void Etc_Read_Fifo()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	@ 0x38
 8001154:	af02      	add	r7, sp, #8
	ULONG TempLong;
	uint8_t xfrbuf[35]; 										// buffer for spi xfr
	uint8_t i;

	Etc_Write_Reg(ECAT_PRAM_RD_ADDR_LEN, 0x00201000);   		// we always read 32 bytes (0x0020), output process ram offset 0x1000
 8001156:	4935      	ldr	r1, [pc, #212]	@ (800122c <Etc_Read_Fifo+0xdc>)
 8001158:	f44f 7042 	mov.w	r0, #776	@ 0x308
 800115c:	f7ff ff82 	bl	8001064 <Etc_Write_Reg>
	Etc_Write_Reg(ECAT_PRAM_RD_CMD, 0x80000000);        		// start command
 8001160:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001164:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 8001168:	f7ff ff7c 	bl	8001064 <Etc_Write_Reg>
	TempLong.LANLong = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
	do{                                                   		// wait for data to be transferred                                                   // from the output process ram
		TempLong.LANLong = Etc_Read_Reg(ECAT_PRAM_RD_CMD, 4); 	// to the read fifo
 8001170:	2104      	movs	r1, #4
 8001172:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 8001176:	f7ff ff19 	bl	8000fac <Etc_Read_Reg>
 800117a:	4603      	mov	r3, r0
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
	}while (!(TempLong.LANByte[0] & PRAM_READ_AVAIL) || (TempLong.LANByte[1] != 8));
 800117e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f2      	beq.n	8001170 <Etc_Read_Fifo+0x20>
 800118a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800118e:	2b08      	cmp	r3, #8
 8001190:	d1ee      	bne.n	8001170 <Etc_Read_Fifo+0x20>

	xfrbuf[0] = COMM_SPI_READ;                                	// SPI read command
 8001192:	2303      	movs	r3, #3
 8001194:	713b      	strb	r3, [r7, #4]
	xfrbuf[1] = 0x00;                                         	// address of the read
 8001196:	2300      	movs	r3, #0
 8001198:	717b      	strb	r3, [r7, #5]
	xfrbuf[2] = 0x00;                                         	// fifo MsByte first
 800119a:	2300      	movs	r3, #0
 800119c:	71bb      	strb	r3, [r7, #6]
	for (i=0; i<32; i++)                                      	// 32 bytes dummy data
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011a4:	e00c      	b.n	80011c0 <Etc_Read_Fifo+0x70>
	{
		xfrbuf[i+3] = DUMMY_BYTE;
 80011a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011aa:	3303      	adds	r3, #3
 80011ac:	3330      	adds	r3, #48	@ 0x30
 80011ae:	443b      	add	r3, r7
 80011b0:	22ff      	movs	r2, #255	@ 0xff
 80011b2:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i=0; i<32; i++)                                      	// 32 bytes dummy data
 80011b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011ba:	3301      	adds	r3, #1
 80011bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011c4:	2b1f      	cmp	r3, #31
 80011c6:	d9ee      	bls.n	80011a6 <Etc_Read_Fifo+0x56>
	}

	CS_SET();													//send 35 bytes and get back into same buffer
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011ce:	4818      	ldr	r0, [pc, #96]	@ (8001230 <Etc_Read_Fifo+0xe0>)
 80011d0:	f002 fd8e 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&LAN9252_PORT, xfrbuf, xfrbuf, 35, HAL_MAX_DELAY);
 80011d4:	1d3a      	adds	r2, r7, #4
 80011d6:	1d39      	adds	r1, r7, #4
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2323      	movs	r3, #35	@ 0x23
 80011e0:	4814      	ldr	r0, [pc, #80]	@ (8001234 <Etc_Read_Fifo+0xe4>)
 80011e2:	f004 ffdb 	bl	800619c <HAL_SPI_TransmitReceive>
	CS_RESET();
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011ec:	4810      	ldr	r0, [pc, #64]	@ (8001230 <Etc_Read_Fifo+0xe0>)
 80011ee:	f002 fd7f 	bl	8003cf0 <HAL_GPIO_WritePin>

	for (i=0; i<32; i++)                                   		// 32 bytes read data to usable buffer
 80011f2:	2300      	movs	r3, #0
 80011f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011f8:	e00f      	b.n	800121a <Etc_Read_Fifo+0xca>
	{
		Etc_Buffer_Out.LANByte[i] = xfrbuf[i+3];
 80011fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011fe:	1cda      	adds	r2, r3, #3
 8001200:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001204:	3230      	adds	r2, #48	@ 0x30
 8001206:	443a      	add	r2, r7
 8001208:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 800120c:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <Etc_Read_Fifo+0xe8>)
 800120e:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<32; i++)                                   		// 32 bytes read data to usable buffer
 8001210:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001214:	3301      	adds	r3, #1
 8001216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800121a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800121e:	2b1f      	cmp	r3, #31
 8001220:	d9eb      	bls.n	80011fa <Etc_Read_Fifo+0xaa>
	}
}
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	3730      	adds	r7, #48	@ 0x30
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	00201000 	.word	0x00201000
 8001230:	40020000 	.word	0x40020000
 8001234:	2000021c 	.word	0x2000021c
 8001238:	20000084 	.word	0x20000084

0800123c <Etc_Write_Fifo>:

// write to the process ram fifo
void Etc_Write_Fifo()    										// write 32 bytes to the input process ram, through the fifo
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af02      	add	r7, sp, #8
	ULONG TempLong;
	uint8_t xfrbuf[35]; // buffer for spi xfr
	uint8_t i;

	Etc_Write_Reg(ECAT_PRAM_WR_ADDR_LEN, 0x00201200);   		// we always write 32 bytes (0x0020), input process ram offset 0x1200
 8001242:	492a      	ldr	r1, [pc, #168]	@ (80012ec <Etc_Write_Fifo+0xb0>)
 8001244:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001248:	f7ff ff0c 	bl	8001064 <Etc_Write_Reg>
	Etc_Write_Reg(ECAT_PRAM_WR_CMD, 0x80000000);        		// start command
 800124c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001250:	f44f 7045 	mov.w	r0, #788	@ 0x314
 8001254:	f7ff ff06 	bl	8001064 <Etc_Write_Reg>
	TempLong.LANLong = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
	do{                                                   		// check fifo has available space
		TempLong.LANLong = Etc_Read_Reg(ECAT_PRAM_WR_CMD, 4);	// for data to be written
 800125c:	2104      	movs	r1, #4
 800125e:	f44f 7045 	mov.w	r0, #788	@ 0x314
 8001262:	f7ff fea3 	bl	8000fac <Etc_Read_Reg>
 8001266:	4603      	mov	r3, r0
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	while(!(TempLong.LANByte[0] & PRAM_WRITE_AVAIL) || (TempLong.LANByte[1] < 8));
 800126a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f2      	beq.n	800125c <Etc_Write_Fifo+0x20>
 8001276:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800127a:	2b07      	cmp	r3, #7
 800127c:	d9ee      	bls.n	800125c <Etc_Write_Fifo+0x20>

	xfrbuf[0] = COMM_SPI_WRITE;                               	// SPI write command
 800127e:	2302      	movs	r3, #2
 8001280:	713b      	strb	r3, [r7, #4]
	xfrbuf[1] = 0x00;                                         	// address of the write fifo
 8001282:	2300      	movs	r3, #0
 8001284:	717b      	strb	r3, [r7, #5]
	xfrbuf[2] = 0x20;                                         	// MsByte first
 8001286:	2320      	movs	r3, #32
 8001288:	71bb      	strb	r3, [r7, #6]
	for (i=0; i<32; i++)                                      	// 32 bytes write loop
 800128a:	2300      	movs	r3, #0
 800128c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001290:	e00f      	b.n	80012b2 <Etc_Write_Fifo+0x76>
	{
		xfrbuf[i+3] = Etc_Buffer_In.LANByte[i];
 8001292:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800129a:	3303      	adds	r3, #3
 800129c:	4914      	ldr	r1, [pc, #80]	@ (80012f0 <Etc_Write_Fifo+0xb4>)
 800129e:	5c8a      	ldrb	r2, [r1, r2]
 80012a0:	3330      	adds	r3, #48	@ 0x30
 80012a2:	443b      	add	r3, r7
 80012a4:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i=0; i<32; i++)                                      	// 32 bytes write loop
 80012a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012ac:	3301      	adds	r3, #1
 80012ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012b6:	2b1f      	cmp	r3, #31
 80012b8:	d9eb      	bls.n	8001292 <Etc_Write_Fifo+0x56>
	}

	CS_SET();													//send 35 bytes and get back into same buffer
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <Etc_Write_Fifo+0xb8>)
 80012c2:	f002 fd15 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&LAN9252_PORT, xfrbuf, xfrbuf, 35, HAL_MAX_DELAY);
 80012c6:	1d3a      	adds	r2, r7, #4
 80012c8:	1d39      	adds	r1, r7, #4
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2323      	movs	r3, #35	@ 0x23
 80012d2:	4809      	ldr	r0, [pc, #36]	@ (80012f8 <Etc_Write_Fifo+0xbc>)
 80012d4:	f004 ff62 	bl	800619c <HAL_SPI_TransmitReceive>
	CS_RESET();
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <Etc_Write_Fifo+0xb8>)
 80012e0:	f002 fd06 	bl	8003cf0 <HAL_GPIO_WritePin>
}
 80012e4:	bf00      	nop
 80012e6:	3730      	adds	r7, #48	@ 0x30
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	00201200 	.word	0x00201200
 80012f0:	200000a4 	.word	0x200000a4
 80012f4:	40020000 	.word	0x40020000
 80012f8:	2000021c 	.word	0x2000021c

080012fc <etc_init>:

// initialize / check the etc interface on SPI, return true if initialization is ok
bool etc_init()
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	ULONG TempLong;

	Etc_Write_Reg(RESET_CTL, (DIGITAL_RST & ETHERCAT_RST)); 	// LAN9252 reset
 8001302:	2100      	movs	r1, #0
 8001304:	f44f 70fc 	mov.w	r0, #504	@ 0x1f8
 8001308:	f7ff feac 	bl	8001064 <Etc_Write_Reg>
	HAL_Delay(100);
 800130c:	2064      	movs	r0, #100	@ 0x64
 800130e:	f002 fa61 	bl	80037d4 <HAL_Delay>
	TempLong.LANLong = Etc_Read_Reg(BYTE_TEST, 4);             	// read test register
 8001312:	2104      	movs	r1, #4
 8001314:	2064      	movs	r0, #100	@ 0x64
 8001316:	f7ff fe49 	bl	8000fac <Etc_Read_Reg>
 800131a:	4603      	mov	r3, r0
 800131c:	607b      	str	r3, [r7, #4]

	if(TempLong.LANLong != 0x87654321)                     		// if the test register is not ok
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <etc_init+0x54>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d001      	beq.n	800132a <etc_init+0x2e>
	{
		/*printf("Bad response received from Etc Test command, data received = ");
		printf("%ld\n", TempLong.LANLong);*/
		return false;
 8001326:	2300      	movs	r3, #0
 8001328:	e00d      	b.n	8001346 <etc_init+0x4a>
	}

	TempLong.LANLong = Etc_Read_Reg(HW_CFG, 4);              	// check also the READY flag
 800132a:	2104      	movs	r1, #4
 800132c:	2074      	movs	r0, #116	@ 0x74
 800132e:	f7ff fe3d 	bl	8000fac <Etc_Read_Reg>
 8001332:	4603      	mov	r3, r0
 8001334:	607b      	str	r3, [r7, #4]
	if((TempLong.LANLong & READY) == 0){
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <etc_init+0x48>
		/*printf("Ready not received from Etc HW Cfg, data received = ");
		printf("%ld\n", TempLong.LANLong);*/
		return false;
 8001340:	2300      	movs	r3, #0
 8001342:	e000      	b.n	8001346 <etc_init+0x4a>
	}

	/*printf("Etc Test Command succeeded\n");*/
  	return true;
 8001344:	2301      	movs	r3, #1
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	87654321 	.word	0x87654321

08001354 <etc_scan>:

// one scan of etc
uint8_t etc_scan()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
	bool WatchDog = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
	bool Operational = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	ULONG TempLong;
	uint8_t Status;

	TempLong.LANLong = Etc_Read_Reg_Wait(WDOG_STATUS, 1); 		// read watchdog status
 8001362:	2101      	movs	r1, #1
 8001364:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 8001368:	f7ff fec0 	bl	80010ec <Etc_Read_Reg_Wait>
 800136c:	4603      	mov	r3, r0
 800136e:	603b      	str	r3, [r7, #0]
	if ((TempLong.LANByte[0] & 0x01) == 0x01)
 8001370:	783b      	ldrb	r3, [r7, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <etc_scan+0x2c>
		WatchDog = 0;                                           // set/reset the corresponding flag
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	e001      	b.n	8001384 <etc_scan+0x30>
	else
	{
		WatchDog = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	71fb      	strb	r3, [r7, #7]
		/*printf("Etc Watchdog active\n");*/
	}

	TempLong.LANLong = Etc_Read_Reg_Wait(AL_STATUS_REG_0, 1);   // read the EtherCAT State Machine status
 8001384:	2101      	movs	r1, #1
 8001386:	f44f 7098 	mov.w	r0, #304	@ 0x130
 800138a:	f7ff feaf 	bl	80010ec <Etc_Read_Reg_Wait>
 800138e:	4603      	mov	r3, r0
 8001390:	603b      	str	r3, [r7, #0]
	Status = TempLong.LANByte[0] & 0x0F;
 8001392:	783b      	ldrb	r3, [r7, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	713b      	strb	r3, [r7, #4]
	if (Status == ESM_OP){                                     	// to see if we are in operational state
 800139a:	793b      	ldrb	r3, [r7, #4]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d102      	bne.n	80013a6 <etc_scan+0x52>
		Operational = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	71bb      	strb	r3, [r7, #6]
 80013a4:	e001      	b.n	80013aa <etc_scan+0x56>
	}else{
		Operational = 0;                                        // set/reset the corresponding flag
 80013a6:	2300      	movs	r3, #0
 80013a8:	71bb      	strb	r3, [r7, #6]
		/*printf("Etc not operational\n");*/
	}

	//--- process data transfers ----------
	if (WatchDog | !Operational)                              	// if watchdog is active or we are
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	f083 0301 	eor.w	r3, r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00e      	beq.n	80013da <etc_scan+0x86>
	{                                                         	// not in operational state, reset
		for (i=0; i<8; i++){                                    // the output buffer
 80013bc:	2300      	movs	r3, #0
 80013be:	717b      	strb	r3, [r7, #5]
 80013c0:	e007      	b.n	80013d2 <etc_scan+0x7e>
			Etc_Buffer_Out.LANLong[i] = 0;                      //
 80013c2:	797b      	ldrb	r3, [r7, #5]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <etc_scan+0xa8>)
 80013c6:	2100      	movs	r1, #0
 80013c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i=0; i<8; i++){                                    // the output buffer
 80013cc:	797b      	ldrb	r3, [r7, #5]
 80013ce:	3301      	adds	r3, #1
 80013d0:	717b      	strb	r3, [r7, #5]
 80013d2:	797b      	ldrb	r3, [r7, #5]
 80013d4:	2b07      	cmp	r3, #7
 80013d6:	d9f4      	bls.n	80013c2 <etc_scan+0x6e>
 80013d8:	e001      	b.n	80013de <etc_scan+0x8a>
		}
	}else{
		/*printf("Read fifo\n");*/
		Etc_Read_Fifo();                                        // otherwise transfer process data from
 80013da:	f7ff feb9 	bl	8001150 <Etc_Read_Fifo>
	}                                                         	// the EtherCAT core to the output buffer
	/*printf("Write fifo\n");*/
	Etc_Write_Fifo();                                         	// we always transfer process data from
 80013de:	f7ff ff2d 	bl	800123c <Etc_Write_Fifo>
                                                            	// the input buffer to the EtherCAT core

	if (WatchDog)                                             	// return the status of the State Machine
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <etc_scan+0x9c>
	{                                                         	// and of the watchdog
		Status |= 0x80;
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013ee:	713b      	strb	r3, [r7, #4]
	}
	return Status;
 80013f0:	793b      	ldrb	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000084 	.word	0x20000084

08001400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001406:	f002 f973 	bl	80036f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140a:	f000 ff81 	bl	8002310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140e:	f001 f933 	bl	8002678 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001412:	f000 ffe5 	bl	80023e0 <MX_I2C1_Init>
  MX_SPI5_Init();
 8001416:	f001 f8ab 	bl	8002570 <MX_SPI5_Init>
  MX_TIM4_Init();
 800141a:	f001 f8df 	bl	80025dc <MX_TIM4_Init>
  MX_I2C2_Init();
 800141e:	f001 f80d 	bl	800243c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001422:	f001 f86f 	bl	8002504 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001426:	f001 f837 	bl	8002498 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

   etc_init_ok = etc_init();
 800142a:	f7ff ff67 	bl	80012fc <etc_init>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4bbf      	ldr	r3, [pc, #764]	@ (8001730 <main+0x330>)
 8001434:	701a      	strb	r2, [r3, #0]
   pcap_init_ok = pcap_init();
 8001436:	f001 fa4f 	bl	80028d8 <pcap_init>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4bbd      	ldr	r3, [pc, #756]	@ (8001734 <main+0x334>)
 8001440:	701a      	strb	r2, [r3, #0]
   Adxl345_init_ok = Adxl345_init();
 8001442:	f7ff fd05 	bl	8000e50 <Adxl345_init>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4bbb      	ldr	r3, [pc, #748]	@ (8001738 <main+0x338>)
 800144c:	701a      	strb	r2, [r3, #0]
	   no_error_drive = true;
   } else {
	   no_error_drive = false;
   }*/

   HAL_Delay(200);
 800144e:	20c8      	movs	r0, #200	@ 0xc8
 8001450:	f002 f9c0 	bl	80037d4 <HAL_Delay>

    /* USER CODE BEGIN 3 */

	  /*-------------------------- GET DATA FROM PCAP AND ETHERCAT----------------------------------------*/

	  if (pcap_init_ok) {
 8001454:	4bb7      	ldr	r3, [pc, #732]	@ (8001734 <main+0x334>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <main+0x62>
		  pcap_scan();
 800145c:	f001 fa94 	bl	8002988 <pcap_scan>
 8001460:	e005      	b.n	800146e <main+0x6e>
	  } else {
		  pcap_init_ok = pcap_init();
 8001462:	f001 fa39 	bl	80028d8 <pcap_init>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4bb2      	ldr	r3, [pc, #712]	@ (8001734 <main+0x334>)
 800146c:	701a      	strb	r2, [r3, #0]
	  }

	  if (etc_init_ok) {
 800146e:	4bb0      	ldr	r3, [pc, #704]	@ (8001730 <main+0x330>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <main+0x7c>
		  etc_scan();
 8001476:	f7ff ff6d 	bl	8001354 <etc_scan>
 800147a:	e005      	b.n	8001488 <main+0x88>
	  } else {
		  etc_init_ok = etc_init();
 800147c:	f7ff ff3e 	bl	80012fc <etc_init>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4baa      	ldr	r3, [pc, #680]	@ (8001730 <main+0x330>)
 8001486:	701a      	strb	r2, [r3, #0]
	  }

	  /*-------------------------- RECEIVED DATA FROM ETHERCAT ----------------------------------------*/

	  etc_new_command = (uint16_t)Etc_Buffer_Out.LANLong[0];
 8001488:	4bac      	ldr	r3, [pc, #688]	@ (800173c <main+0x33c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29a      	uxth	r2, r3
 800148e:	4bac      	ldr	r3, [pc, #688]	@ (8001740 <main+0x340>)
 8001490:	801a      	strh	r2, [r3, #0]
	  etc_new_data =  Etc_Buffer_Out.LANLong[1];
 8001492:	4baa      	ldr	r3, [pc, #680]	@ (800173c <main+0x33c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	4aab      	ldr	r2, [pc, #684]	@ (8001744 <main+0x344>)
 8001498:	6013      	str	r3, [r2, #0]

	  if (((etc_new_command >= 0) && (etc_new_command <= 19)) || ((etc_new_command >= 100) && (etc_new_command <= 105))) {
 800149a:	4ba9      	ldr	r3, [pc, #676]	@ (8001740 <main+0x340>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	2b13      	cmp	r3, #19
 80014a0:	d907      	bls.n	80014b2 <main+0xb2>
 80014a2:	4ba7      	ldr	r3, [pc, #668]	@ (8001740 <main+0x340>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	2b63      	cmp	r3, #99	@ 0x63
 80014a8:	d907      	bls.n	80014ba <main+0xba>
 80014aa:	4ba5      	ldr	r3, [pc, #660]	@ (8001740 <main+0x340>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	2b69      	cmp	r3, #105	@ 0x69
 80014b0:	d803      	bhi.n	80014ba <main+0xba>
	      set_command_flag = true;
 80014b2:	4ba5      	ldr	r3, [pc, #660]	@ (8001748 <main+0x348>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e002      	b.n	80014c0 <main+0xc0>
	  } else {
		  set_command_flag = false;
 80014ba:	4ba3      	ldr	r3, [pc, #652]	@ (8001748 <main+0x348>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
	  }

	  if ((etc_new_command >= 50 && etc_new_command <= 70)) {
 80014c0:	4b9f      	ldr	r3, [pc, #636]	@ (8001740 <main+0x340>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	2b31      	cmp	r3, #49	@ 0x31
 80014c6:	d907      	bls.n	80014d8 <main+0xd8>
 80014c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001740 <main+0x340>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	2b46      	cmp	r3, #70	@ 0x46
 80014ce:	d803      	bhi.n	80014d8 <main+0xd8>
		  get_command_flag = true;
 80014d0:	4b9e      	ldr	r3, [pc, #632]	@ (800174c <main+0x34c>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
 80014d6:	e002      	b.n	80014de <main+0xde>
	  } else {
		  get_command_flag = false;
 80014d8:	4b9c      	ldr	r3, [pc, #624]	@ (800174c <main+0x34c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
	  }

	  if ((etc_new_command == 301 || etc_new_command == 302 || etc_new_command == 303)) {
 80014de:	4b98      	ldr	r3, [pc, #608]	@ (8001740 <main+0x340>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	f240 122d 	movw	r2, #301	@ 0x12d
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00a      	beq.n	8001500 <main+0x100>
 80014ea:	4b95      	ldr	r3, [pc, #596]	@ (8001740 <main+0x340>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	f5b3 7f97 	cmp.w	r3, #302	@ 0x12e
 80014f2:	d005      	beq.n	8001500 <main+0x100>
 80014f4:	4b92      	ldr	r3, [pc, #584]	@ (8001740 <main+0x340>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	f240 122f 	movw	r2, #303	@ 0x12f
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d103      	bne.n	8001508 <main+0x108>
		  accelerometer_flag = true;
 8001500:	4b93      	ldr	r3, [pc, #588]	@ (8001750 <main+0x350>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e002      	b.n	800150e <main+0x10e>
	  } else {
		  accelerometer_flag = false;
 8001508:	4b91      	ldr	r3, [pc, #580]	@ (8001750 <main+0x350>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	  }

	  etc_digital_output = Etc_Buffer_Out.LANLong[5];
 800150e:	4b8b      	ldr	r3, [pc, #556]	@ (800173c <main+0x33c>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	4a90      	ldr	r2, [pc, #576]	@ (8001754 <main+0x354>)
 8001514:	6013      	str	r3, [r2, #0]
	  etc_analog_output_0_1 = Etc_Buffer_Out.LANLong[6];
 8001516:	4b89      	ldr	r3, [pc, #548]	@ (800173c <main+0x33c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a8f      	ldr	r2, [pc, #572]	@ (8001758 <main+0x358>)
 800151c:	6013      	str	r3, [r2, #0]
	  etc_analog_output_2_3 = Etc_Buffer_Out.LANLong[7];
 800151e:	4b87      	ldr	r3, [pc, #540]	@ (800173c <main+0x33c>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a8e      	ldr	r2, [pc, #568]	@ (800175c <main+0x35c>)
 8001524:	6013      	str	r3, [r2, #0]

	  // Split the 32-bit floats into two 16-bit outputs each
	  etc_analog_output_0 = (uint16_t)(((uint32_t)etc_analog_output_0_1) & 0xFFFF);
 8001526:	4b8c      	ldr	r3, [pc, #560]	@ (8001758 <main+0x358>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b8c      	ldr	r3, [pc, #560]	@ (8001760 <main+0x360>)
 800152e:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_1 = (uint16_t)((((uint32_t)etc_analog_output_0_1) >> 16) & 0xFFFF);
 8001530:	4b89      	ldr	r3, [pc, #548]	@ (8001758 <main+0x358>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b8a      	ldr	r3, [pc, #552]	@ (8001764 <main+0x364>)
 800153a:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_2 = (uint16_t)(((uint32_t)etc_analog_output_2_3) & 0xFFFF);
 800153c:	4b87      	ldr	r3, [pc, #540]	@ (800175c <main+0x35c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b89      	ldr	r3, [pc, #548]	@ (8001768 <main+0x368>)
 8001544:	801a      	strh	r2, [r3, #0]
	  etc_analog_output_3 = (uint16_t)((((uint32_t)etc_analog_output_2_3) >> 16) & 0xFFFF);
 8001546:	4b85      	ldr	r3, [pc, #532]	@ (800175c <main+0x35c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0c1b      	lsrs	r3, r3, #16
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b87      	ldr	r3, [pc, #540]	@ (800176c <main+0x36c>)
 8001550:	801a      	strh	r2, [r3, #0]

	  /*---------------------------PROCESS REECIVED COMMAND AND DATA-----------------------------------------*/

	  if (set_command_flag) {
 8001552:	4b7d      	ldr	r3, [pc, #500]	@ (8001748 <main+0x348>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8354 	beq.w	8001c04 <main+0x804>
		  if ((etc_old_command != etc_new_command) || (etc_old_data != etc_new_data)) {
 800155c:	4b84      	ldr	r3, [pc, #528]	@ (8001770 <main+0x370>)
 800155e:	881a      	ldrh	r2, [r3, #0]
 8001560:	4b77      	ldr	r3, [pc, #476]	@ (8001740 <main+0x340>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d106      	bne.n	8001576 <main+0x176>
 8001568:	4b82      	ldr	r3, [pc, #520]	@ (8001774 <main+0x374>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b75      	ldr	r3, [pc, #468]	@ (8001744 <main+0x344>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	f000 864c 	beq.w	800220e <main+0xe0e>
				switch (etc_new_command) {
 8001576:	4b72      	ldr	r3, [pc, #456]	@ (8001740 <main+0x340>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	2b69      	cmp	r3, #105	@ 0x69
 800157c:	f200 8327 	bhi.w	8001bce <main+0x7ce>
 8001580:	a201      	add	r2, pc, #4	@ (adr r2, 8001588 <main+0x188>)
 8001582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001586:	bf00      	nop
 8001588:	08001779 	.word	0x08001779
 800158c:	0800178b 	.word	0x0800178b
 8001590:	080017c3 	.word	0x080017c3
 8001594:	080017f9 	.word	0x080017f9
 8001598:	0800182d 	.word	0x0800182d
 800159c:	0800185d 	.word	0x0800185d
 80015a0:	0800188b 	.word	0x0800188b
 80015a4:	080018b7 	.word	0x080018b7
 80015a8:	080018e5 	.word	0x080018e5
 80015ac:	08001913 	.word	0x08001913
 80015b0:	0800193f 	.word	0x0800193f
 80015b4:	0800196b 	.word	0x0800196b
 80015b8:	08001999 	.word	0x08001999
 80015bc:	080019e9 	.word	0x080019e9
 80015c0:	08001a17 	.word	0x08001a17
 80015c4:	08001a45 	.word	0x08001a45
 80015c8:	08001a73 	.word	0x08001a73
 80015cc:	08001aa1 	.word	0x08001aa1
 80015d0:	08001acf 	.word	0x08001acf
 80015d4:	08001b03 	.word	0x08001b03
 80015d8:	08001bcf 	.word	0x08001bcf
 80015dc:	08001bcf 	.word	0x08001bcf
 80015e0:	08001bcf 	.word	0x08001bcf
 80015e4:	08001bcf 	.word	0x08001bcf
 80015e8:	08001bcf 	.word	0x08001bcf
 80015ec:	08001bcf 	.word	0x08001bcf
 80015f0:	08001bcf 	.word	0x08001bcf
 80015f4:	08001bcf 	.word	0x08001bcf
 80015f8:	08001bcf 	.word	0x08001bcf
 80015fc:	08001bcf 	.word	0x08001bcf
 8001600:	08001bcf 	.word	0x08001bcf
 8001604:	08001bcf 	.word	0x08001bcf
 8001608:	08001bcf 	.word	0x08001bcf
 800160c:	08001bcf 	.word	0x08001bcf
 8001610:	08001bcf 	.word	0x08001bcf
 8001614:	08001bcf 	.word	0x08001bcf
 8001618:	08001bcf 	.word	0x08001bcf
 800161c:	08001bcf 	.word	0x08001bcf
 8001620:	08001bcf 	.word	0x08001bcf
 8001624:	08001bcf 	.word	0x08001bcf
 8001628:	08001bcf 	.word	0x08001bcf
 800162c:	08001bcf 	.word	0x08001bcf
 8001630:	08001bcf 	.word	0x08001bcf
 8001634:	08001bcf 	.word	0x08001bcf
 8001638:	08001bcf 	.word	0x08001bcf
 800163c:	08001bcf 	.word	0x08001bcf
 8001640:	08001bcf 	.word	0x08001bcf
 8001644:	08001bcf 	.word	0x08001bcf
 8001648:	08001bcf 	.word	0x08001bcf
 800164c:	08001bcf 	.word	0x08001bcf
 8001650:	08001bcf 	.word	0x08001bcf
 8001654:	08001bcf 	.word	0x08001bcf
 8001658:	08001bcf 	.word	0x08001bcf
 800165c:	08001bcf 	.word	0x08001bcf
 8001660:	08001bcf 	.word	0x08001bcf
 8001664:	08001bcf 	.word	0x08001bcf
 8001668:	08001bcf 	.word	0x08001bcf
 800166c:	08001bcf 	.word	0x08001bcf
 8001670:	08001bcf 	.word	0x08001bcf
 8001674:	08001bcf 	.word	0x08001bcf
 8001678:	08001bcf 	.word	0x08001bcf
 800167c:	08001bcf 	.word	0x08001bcf
 8001680:	08001bcf 	.word	0x08001bcf
 8001684:	08001bcf 	.word	0x08001bcf
 8001688:	08001bcf 	.word	0x08001bcf
 800168c:	08001bcf 	.word	0x08001bcf
 8001690:	08001bcf 	.word	0x08001bcf
 8001694:	08001bcf 	.word	0x08001bcf
 8001698:	08001bcf 	.word	0x08001bcf
 800169c:	08001bcf 	.word	0x08001bcf
 80016a0:	08001bcf 	.word	0x08001bcf
 80016a4:	08001bcf 	.word	0x08001bcf
 80016a8:	08001bcf 	.word	0x08001bcf
 80016ac:	08001bcf 	.word	0x08001bcf
 80016b0:	08001bcf 	.word	0x08001bcf
 80016b4:	08001bcf 	.word	0x08001bcf
 80016b8:	08001bcf 	.word	0x08001bcf
 80016bc:	08001bcf 	.word	0x08001bcf
 80016c0:	08001bcf 	.word	0x08001bcf
 80016c4:	08001bcf 	.word	0x08001bcf
 80016c8:	08001bcf 	.word	0x08001bcf
 80016cc:	08001bcf 	.word	0x08001bcf
 80016d0:	08001bcf 	.word	0x08001bcf
 80016d4:	08001bcf 	.word	0x08001bcf
 80016d8:	08001bcf 	.word	0x08001bcf
 80016dc:	08001bcf 	.word	0x08001bcf
 80016e0:	08001bcf 	.word	0x08001bcf
 80016e4:	08001bcf 	.word	0x08001bcf
 80016e8:	08001bcf 	.word	0x08001bcf
 80016ec:	08001bcf 	.word	0x08001bcf
 80016f0:	08001bcf 	.word	0x08001bcf
 80016f4:	08001bcf 	.word	0x08001bcf
 80016f8:	08001bcf 	.word	0x08001bcf
 80016fc:	08001bcf 	.word	0x08001bcf
 8001700:	08001bcf 	.word	0x08001bcf
 8001704:	08001bcf 	.word	0x08001bcf
 8001708:	08001bcf 	.word	0x08001bcf
 800170c:	08001bcf 	.word	0x08001bcf
 8001710:	08001bcf 	.word	0x08001bcf
 8001714:	08001bcf 	.word	0x08001bcf
 8001718:	08001b37 	.word	0x08001b37
 800171c:	08001b61 	.word	0x08001b61
 8001720:	08001b77 	.word	0x08001b77
 8001724:	08001b8d 	.word	0x08001b8d
 8001728:	08001ba3 	.word	0x08001ba3
 800172c:	08001bb9 	.word	0x08001bb9
 8001730:	200002bd 	.word	0x200002bd
 8001734:	200002bc 	.word	0x200002bc
 8001738:	200002be 	.word	0x200002be
 800173c:	20000084 	.word	0x20000084
 8001740:	20000328 	.word	0x20000328
 8001744:	2000032c 	.word	0x2000032c
 8001748:	2000031c 	.word	0x2000031c
 800174c:	2000031d 	.word	0x2000031d
 8001750:	2000031f 	.word	0x2000031f
 8001754:	20000330 	.word	0x20000330
 8001758:	20000334 	.word	0x20000334
 800175c:	20000338 	.word	0x20000338
 8001760:	2000033c 	.word	0x2000033c
 8001764:	2000033e 	.word	0x2000033e
 8001768:	20000340 	.word	0x20000340
 800176c:	20000342 	.word	0x20000342
 8001770:	20000320 	.word	0x20000320
 8001774:	20000324 	.word	0x20000324
				case 0:
					TxData = etc_new_data;
 8001778:	4b93      	ldr	r3, [pc, #588]	@ (80019c8 <main+0x5c8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b93      	ldr	r3, [pc, #588]	@ (80019cc <main+0x5cc>)
 8001780:	601a      	str	r2, [r3, #0]
					continuous_tx_flag = false;
 8001782:	4b93      	ldr	r3, [pc, #588]	@ (80019d0 <main+0x5d0>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
					break;
 8001788:	e222      	b.n	8001bd0 <main+0x7d0>

				case 1:
					TxData = etc_new_data;
 800178a:	4b8f      	ldr	r3, [pc, #572]	@ (80019c8 <main+0x5c8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	4b8e      	ldr	r3, [pc, #568]	@ (80019cc <main+0x5cc>)
 8001792:	601a      	str	r2, [r3, #0]
					set_Execution_count++;
 8001794:	4b8f      	ldr	r3, [pc, #572]	@ (80019d4 <main+0x5d4>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b8d      	ldr	r3, [pc, #564]	@ (80019d4 <main+0x5d4>)
 800179e:	701a      	strb	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 1000000)) {
 80017a0:	4b89      	ldr	r3, [pc, #548]	@ (80019c8 <main+0x5c8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <main+0x3b2>
 80017a8:	4b87      	ldr	r3, [pc, #540]	@ (80019c8 <main+0x5c8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a8a      	ldr	r2, [pc, #552]	@ (80019d8 <main+0x5d8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d903      	bls.n	80017ba <main+0x3ba>
						setWrongCommandFlag(&tmc4671_controller, true);
 80017b2:	2101      	movs	r1, #1
 80017b4:	4889      	ldr	r0, [pc, #548]	@ (80019dc <main+0x5dc>)
 80017b6:	f001 fd2f 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setEncoderResolution(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80017ba:	4b85      	ldr	r3, [pc, #532]	@ (80019d0 <main+0x5d0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
					break;
 80017c0:	e206      	b.n	8001bd0 <main+0x7d0>

				case 2:
					TxData = etc_new_data;
 80017c2:	4b81      	ldr	r3, [pc, #516]	@ (80019c8 <main+0x5c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b80      	ldr	r3, [pc, #512]	@ (80019cc <main+0x5cc>)
 80017ca:	601a      	str	r2, [r3, #0]
					set_Execution_count++;
 80017cc:	4b81      	ldr	r3, [pc, #516]	@ (80019d4 <main+0x5d4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b7f      	ldr	r3, [pc, #508]	@ (80019d4 <main+0x5d4>)
 80017d6:	701a      	strb	r2, [r3, #0]
					if ((etc_new_data != 0) && (etc_new_data != 1)) {//cannot be anything other than 0 or 1
 80017d8:	4b7b      	ldr	r3, [pc, #492]	@ (80019c8 <main+0x5c8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <main+0x3f0>
 80017e0:	4b79      	ldr	r3, [pc, #484]	@ (80019c8 <main+0x5c8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d003      	beq.n	80017f0 <main+0x3f0>
						setWrongCommandFlag(&tmc4671_controller, true);
 80017e8:	2101      	movs	r1, #1
 80017ea:	487c      	ldr	r0, [pc, #496]	@ (80019dc <main+0x5dc>)
 80017ec:	f001 fd14 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setEncoderDirection(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80017f0:	4b77      	ldr	r3, [pc, #476]	@ (80019d0 <main+0x5d0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
					break;
 80017f6:	e1eb      	b.n	8001bd0 <main+0x7d0>

				case 3:
					TxData = etc_new_data;
 80017f8:	4b73      	ldr	r3, [pc, #460]	@ (80019c8 <main+0x5c8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b73      	ldr	r3, [pc, #460]	@ (80019cc <main+0x5cc>)
 8001800:	601a      	str	r2, [r3, #0]
					if (((int32_t) etc_new_data <= -5000) || ((int32_t) etc_new_data >= 5000)) {//cannot be less than -5000um = -5mm or greater than 5000um = 5mm
 8001802:	4b71      	ldr	r3, [pc, #452]	@ (80019c8 <main+0x5c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b75      	ldr	r3, [pc, #468]	@ (80019e0 <main+0x5e0>)
 800180a:	429a      	cmp	r2, r3
 800180c:	db06      	blt.n	800181c <main+0x41c>
 800180e:	4b6e      	ldr	r3, [pc, #440]	@ (80019c8 <main+0x5c8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	f241 3387 	movw	r3, #4999	@ 0x1387
 8001818:	429a      	cmp	r2, r3
 800181a:	dd03      	ble.n	8001824 <main+0x424>
						setWrongCommandFlag(&tmc4671_controller, true);
 800181c:	2101      	movs	r1, #1
 800181e:	486f      	ldr	r0, [pc, #444]	@ (80019dc <main+0x5dc>)
 8001820:	f001 fcfa 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setZeroOffset(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001824:	4b6a      	ldr	r3, [pc, #424]	@ (80019d0 <main+0x5d0>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
					break;
 800182a:	e1d1      	b.n	8001bd0 <main+0x7d0>

				case 4:
					TxData = etc_new_data;
 800182c:	4b66      	ldr	r3, [pc, #408]	@ (80019c8 <main+0x5c8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b66      	ldr	r3, [pc, #408]	@ (80019cc <main+0x5cc>)
 8001834:	601a      	str	r2, [r3, #0]
					if (((int32_t) etc_new_data <= 0) || ((int32_t) etc_new_data > 12000)) {//cannot be 0, negative number or more than 12000um = 12mm
 8001836:	4b64      	ldr	r3, [pc, #400]	@ (80019c8 <main+0x5c8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	dd06      	ble.n	800184c <main+0x44c>
 800183e:	4b62      	ldr	r3, [pc, #392]	@ (80019c8 <main+0x5c8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001848:	429a      	cmp	r2, r3
 800184a:	dd03      	ble.n	8001854 <main+0x454>
						setWrongCommandFlag(&tmc4671_controller, true);
 800184c:	2101      	movs	r1, #1
 800184e:	4863      	ldr	r0, [pc, #396]	@ (80019dc <main+0x5dc>)
 8001850:	f001 fce2 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setSoftPositiveLimit(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001854:	4b5e      	ldr	r3, [pc, #376]	@ (80019d0 <main+0x5d0>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
					break;
 800185a:	e1b9      	b.n	8001bd0 <main+0x7d0>

				case 5:
					TxData = etc_new_data;
 800185c:	4b5a      	ldr	r3, [pc, #360]	@ (80019c8 <main+0x5c8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b5a      	ldr	r3, [pc, #360]	@ (80019cc <main+0x5cc>)
 8001864:	601a      	str	r2, [r3, #0]
					if (((int32_t) etc_new_data >= 0) || ((int32_t) etc_new_data < -12000)) {	//cannot be 0, positive number or less than -12000um = -12mm
 8001866:	4b58      	ldr	r3, [pc, #352]	@ (80019c8 <main+0x5c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	da05      	bge.n	800187a <main+0x47a>
 800186e:	4b56      	ldr	r3, [pc, #344]	@ (80019c8 <main+0x5c8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b5b      	ldr	r3, [pc, #364]	@ (80019e4 <main+0x5e4>)
 8001876:	429a      	cmp	r2, r3
 8001878:	da03      	bge.n	8001882 <main+0x482>
						setWrongCommandFlag(&tmc4671_controller, true);
 800187a:	2101      	movs	r1, #1
 800187c:	4857      	ldr	r0, [pc, #348]	@ (80019dc <main+0x5dc>)
 800187e:	f001 fccb 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setSoftNegativeLimit(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001882:	4b53      	ldr	r3, [pc, #332]	@ (80019d0 <main+0x5d0>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
					break;
 8001888:	e1a2      	b.n	8001bd0 <main+0x7d0>

				case 6:
					TxData = etc_new_data;
 800188a:	4b4f      	ldr	r3, [pc, #316]	@ (80019c8 <main+0x5c8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	4b4e      	ldr	r3, [pc, #312]	@ (80019cc <main+0x5cc>)
 8001892:	601a      	str	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 2000)) {	//cannot be 0, negative number or more than 2000um = 2mm
 8001894:	4b4c      	ldr	r3, [pc, #304]	@ (80019c8 <main+0x5c8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <main+0x4a6>
 800189c:	4b4a      	ldr	r3, [pc, #296]	@ (80019c8 <main+0x5c8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80018a4:	d903      	bls.n	80018ae <main+0x4ae>
						setWrongCommandFlag(&tmc4671_controller, true);
 80018a6:	2101      	movs	r1, #1
 80018a8:	484c      	ldr	r0, [pc, #304]	@ (80019dc <main+0x5dc>)
 80018aa:	f001 fcb5 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setMaxPositionError(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80018ae:	4b48      	ldr	r3, [pc, #288]	@ (80019d0 <main+0x5d0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
					break;
 80018b4:	e18c      	b.n	8001bd0 <main+0x7d0>

				case 7:
					TxData = etc_new_data;
 80018b6:	4b44      	ldr	r3, [pc, #272]	@ (80019c8 <main+0x5c8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b43      	ldr	r3, [pc, #268]	@ (80019cc <main+0x5cc>)
 80018be:	601a      	str	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 5000)) {	//cannot be 0, negative number or more than 5000
 80018c0:	4b41      	ldr	r3, [pc, #260]	@ (80019c8 <main+0x5c8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <main+0x4d4>
 80018c8:	4b3f      	ldr	r3, [pc, #252]	@ (80019c8 <main+0x5c8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d903      	bls.n	80018dc <main+0x4dc>
						setWrongCommandFlag(&tmc4671_controller, true);
 80018d4:	2101      	movs	r1, #1
 80018d6:	4841      	ldr	r0, [pc, #260]	@ (80019dc <main+0x5dc>)
 80018d8:	f001 fc9e 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setCurrentLimitHoming(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80018dc:	4b3c      	ldr	r3, [pc, #240]	@ (80019d0 <main+0x5d0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
					break;
 80018e2:	e175      	b.n	8001bd0 <main+0x7d0>

				case 8:
					TxData = etc_new_data;
 80018e4:	4b38      	ldr	r3, [pc, #224]	@ (80019c8 <main+0x5c8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b38      	ldr	r3, [pc, #224]	@ (80019cc <main+0x5cc>)
 80018ec:	601a      	str	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 15000)) {//cannot be 0, negative number or more than 15000
 80018ee:	4b36      	ldr	r3, [pc, #216]	@ (80019c8 <main+0x5c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <main+0x502>
 80018f6:	4b34      	ldr	r3, [pc, #208]	@ (80019c8 <main+0x5c8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80018fe:	4293      	cmp	r3, r2
 8001900:	d903      	bls.n	800190a <main+0x50a>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001902:	2101      	movs	r1, #1
 8001904:	4835      	ldr	r0, [pc, #212]	@ (80019dc <main+0x5dc>)
 8001906:	f001 fc87 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setCurrentLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 800190a:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <main+0x5d0>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
					break;
 8001910:	e15e      	b.n	8001bd0 <main+0x7d0>

				case 9:
					TxData = etc_new_data;
 8001912:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <main+0x5c8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	4b2c      	ldr	r3, [pc, #176]	@ (80019cc <main+0x5cc>)
 800191a:	601a      	str	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 8000)) {	//cannot be 0, negative number or more than 8000
 800191c:	4b2a      	ldr	r3, [pc, #168]	@ (80019c8 <main+0x5c8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <main+0x52e>
 8001924:	4b28      	ldr	r3, [pc, #160]	@ (80019c8 <main+0x5c8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800192c:	d903      	bls.n	8001936 <main+0x536>
						setWrongCommandFlag(&tmc4671_controller, true);
 800192e:	2101      	movs	r1, #1
 8001930:	482a      	ldr	r0, [pc, #168]	@ (80019dc <main+0x5dc>)
 8001932:	f001 fc71 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setVoltageLimitHoming(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <main+0x5d0>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
					break;
 800193c:	e148      	b.n	8001bd0 <main+0x7d0>

				case 10:
					TxData = etc_new_data;
 800193e:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <main+0x5c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <main+0x5cc>)
 8001946:	601a      	str	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 500)) {//cannot be 0, negative number or more than 500
 8001948:	4b1f      	ldr	r3, [pc, #124]	@ (80019c8 <main+0x5c8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d004      	beq.n	800195a <main+0x55a>
 8001950:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <main+0x5c8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001958:	d903      	bls.n	8001962 <main+0x562>
						setWrongCommandFlag(&tmc4671_controller, true);
 800195a:	2101      	movs	r1, #1
 800195c:	481f      	ldr	r0, [pc, #124]	@ (80019dc <main+0x5dc>)
 800195e:	f001 fc5b 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setVelocityLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001962:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <main+0x5d0>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
					break;
 8001968:	e132      	b.n	8001bd0 <main+0x7d0>

				case 11:
					TxData = etc_new_data;
 800196a:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <main+0x5c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <main+0x5cc>)
 8001972:	601a      	str	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 30000)) {//cannot be 0, negative number or more than 30000
 8001974:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <main+0x5c8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <main+0x588>
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <main+0x5c8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001984:	4293      	cmp	r3, r2
 8001986:	d903      	bls.n	8001990 <main+0x590>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001988:	2101      	movs	r1, #1
 800198a:	4814      	ldr	r0, [pc, #80]	@ (80019dc <main+0x5dc>)
 800198c:	f001 fc44 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setTorqueLimitServo(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001990:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <main+0x5d0>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
					break;
 8001996:	e11b      	b.n	8001bd0 <main+0x7d0>

				case 12:
					TxData = etc_new_data;
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <main+0x5c8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <main+0x5cc>)
 80019a0:	601a      	str	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <main+0x5c8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <main+0x5b6>
 80019aa:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <main+0x5c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d903      	bls.n	80019be <main+0x5be>
						setWrongCommandFlag(&tmc4671_controller, true);
 80019b6:	2101      	movs	r1, #1
 80019b8:	4808      	ldr	r0, [pc, #32]	@ (80019dc <main+0x5dc>)
 80019ba:	f001 fc2d 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setCurrentGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 80019be:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <main+0x5d0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
					break;
 80019c4:	e104      	b.n	8001bd0 <main+0x7d0>
 80019c6:	bf00      	nop
 80019c8:	2000032c 	.word	0x2000032c
 80019cc:	20000344 	.word	0x20000344
 80019d0:	2000031e 	.word	0x2000031e
 80019d4:	2000034b 	.word	0x2000034b
 80019d8:	000f4240 	.word	0x000f4240
 80019dc:	200002c0 	.word	0x200002c0
 80019e0:	ffffec79 	.word	0xffffec79
 80019e4:	ffffd120 	.word	0xffffd120

				case 13:
					TxData = etc_new_data;
 80019e8:	4b7e      	ldr	r3, [pc, #504]	@ (8001be4 <main+0x7e4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b7e      	ldr	r3, [pc, #504]	@ (8001be8 <main+0x7e8>)
 80019f0:	601a      	str	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 80019f2:	4b7c      	ldr	r3, [pc, #496]	@ (8001be4 <main+0x7e4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <main+0x606>
 80019fa:	4b7a      	ldr	r3, [pc, #488]	@ (8001be4 <main+0x7e4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d903      	bls.n	8001a0e <main+0x60e>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a06:	2101      	movs	r1, #1
 8001a08:	4878      	ldr	r0, [pc, #480]	@ (8001bec <main+0x7ec>)
 8001a0a:	f001 fc05 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setCurrentGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a0e:	4b78      	ldr	r3, [pc, #480]	@ (8001bf0 <main+0x7f0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
					break;
 8001a14:	e0dc      	b.n	8001bd0 <main+0x7d0>

				case 14:
					TxData = etc_new_data;
 8001a16:	4b73      	ldr	r3, [pc, #460]	@ (8001be4 <main+0x7e4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b72      	ldr	r3, [pc, #456]	@ (8001be8 <main+0x7e8>)
 8001a1e:	601a      	str	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a20:	4b70      	ldr	r3, [pc, #448]	@ (8001be4 <main+0x7e4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <main+0x634>
 8001a28:	4b6e      	ldr	r3, [pc, #440]	@ (8001be4 <main+0x7e4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d903      	bls.n	8001a3c <main+0x63c>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a34:	2101      	movs	r1, #1
 8001a36:	486d      	ldr	r0, [pc, #436]	@ (8001bec <main+0x7ec>)
 8001a38:	f001 fbee 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setVelocityGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001bf0 <main+0x7f0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
					break;
 8001a42:	e0c5      	b.n	8001bd0 <main+0x7d0>

				case 15:
					TxData = etc_new_data;
 8001a44:	4b67      	ldr	r3, [pc, #412]	@ (8001be4 <main+0x7e4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b67      	ldr	r3, [pc, #412]	@ (8001be8 <main+0x7e8>)
 8001a4c:	601a      	str	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a4e:	4b65      	ldr	r3, [pc, #404]	@ (8001be4 <main+0x7e4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <main+0x662>
 8001a56:	4b63      	ldr	r3, [pc, #396]	@ (8001be4 <main+0x7e4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d903      	bls.n	8001a6a <main+0x66a>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a62:	2101      	movs	r1, #1
 8001a64:	4861      	ldr	r0, [pc, #388]	@ (8001bec <main+0x7ec>)
 8001a66:	f001 fbd7 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setVelocityGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a6a:	4b61      	ldr	r3, [pc, #388]	@ (8001bf0 <main+0x7f0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
					break;
 8001a70:	e0ae      	b.n	8001bd0 <main+0x7d0>

				case 16:
					TxData = etc_new_data;
 8001a72:	4b5c      	ldr	r3, [pc, #368]	@ (8001be4 <main+0x7e4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b5b      	ldr	r3, [pc, #364]	@ (8001be8 <main+0x7e8>)
 8001a7a:	601a      	str	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001a7c:	4b59      	ldr	r3, [pc, #356]	@ (8001be4 <main+0x7e4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <main+0x690>
 8001a84:	4b57      	ldr	r3, [pc, #348]	@ (8001be4 <main+0x7e4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d903      	bls.n	8001a98 <main+0x698>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001a90:	2101      	movs	r1, #1
 8001a92:	4856      	ldr	r0, [pc, #344]	@ (8001bec <main+0x7ec>)
 8001a94:	f001 fbc0 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setPositionGainP(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001a98:	4b55      	ldr	r3, [pc, #340]	@ (8001bf0 <main+0x7f0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
					break;
 8001a9e:	e097      	b.n	8001bd0 <main+0x7d0>

				case 17:
					TxData = etc_new_data;
 8001aa0:	4b50      	ldr	r3, [pc, #320]	@ (8001be4 <main+0x7e4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b50      	ldr	r3, [pc, #320]	@ (8001be8 <main+0x7e8>)
 8001aa8:	601a      	str	r2, [r3, #0]
					if ((etc_new_data <= 0) || (etc_new_data > 32500)) {//cannot be 0, negative number or more than 32500
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8001be4 <main+0x7e4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <main+0x6be>
 8001ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8001be4 <main+0x7e4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f647 62f4 	movw	r2, #32500	@ 0x7ef4
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d903      	bls.n	8001ac6 <main+0x6c6>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001abe:	2101      	movs	r1, #1
 8001ac0:	484a      	ldr	r0, [pc, #296]	@ (8001bec <main+0x7ec>)
 8001ac2:	f001 fba9 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setPositionGainI(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf0 <main+0x7f0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
					break;
 8001acc:	e080      	b.n	8001bd0 <main+0x7d0>

				case 18:
					TxData = etc_new_data;
 8001ace:	4b45      	ldr	r3, [pc, #276]	@ (8001be4 <main+0x7e4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b44      	ldr	r3, [pc, #272]	@ (8001be8 <main+0x7e8>)
 8001ad6:	601a      	str	r2, [r3, #0]
					if (((int32_t) etc_new_data < -12000) || ((int32_t) etc_new_data > 12000)) {//cannot be less than -12000um = -12mm or greater than 12000um = 12mm
 8001ad8:	4b42      	ldr	r3, [pc, #264]	@ (8001be4 <main+0x7e4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b45      	ldr	r3, [pc, #276]	@ (8001bf4 <main+0x7f4>)
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	db06      	blt.n	8001af2 <main+0x6f2>
 8001ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8001be4 <main+0x7e4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dd03      	ble.n	8001afa <main+0x6fa>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001af2:	2101      	movs	r1, #1
 8001af4:	483d      	ldr	r0, [pc, #244]	@ (8001bec <main+0x7ec>)
 8001af6:	f001 fb8f 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setAbsoluteTargetPosition(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001afa:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf0 <main+0x7f0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
					break;
 8001b00:	e066      	b.n	8001bd0 <main+0x7d0>

				case 19:
					TxData = etc_new_data;
 8001b02:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <main+0x7e4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b37      	ldr	r3, [pc, #220]	@ (8001be8 <main+0x7e8>)
 8001b0a:	601a      	str	r2, [r3, #0]
					if (((int32_t) etc_new_data < -12000) || ((int32_t) etc_new_data > 12000)) {//cannot be less than -12000um = -12mm or greater than 12000um = 12mm
 8001b0c:	4b35      	ldr	r3, [pc, #212]	@ (8001be4 <main+0x7e4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <main+0x7f4>)
 8001b14:	429a      	cmp	r2, r3
 8001b16:	db06      	blt.n	8001b26 <main+0x726>
 8001b18:	4b32      	ldr	r3, [pc, #200]	@ (8001be4 <main+0x7e4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dd03      	ble.n	8001b2e <main+0x72e>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001b26:	2101      	movs	r1, #1
 8001b28:	4830      	ldr	r0, [pc, #192]	@ (8001bec <main+0x7ec>)
 8001b2a:	f001 fb75 	bl	8003218 <setWrongCommandFlag>
					} else {
//						setIncrementalTargetPosition(&tmc4671_controller, (int32_t) etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001b2e:	4b30      	ldr	r3, [pc, #192]	@ (8001bf0 <main+0x7f0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
					break;
 8001b34:	e04c      	b.n	8001bd0 <main+0x7d0>

				case 100:
					TxData = etc_new_data;
 8001b36:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <main+0x7e4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001be8 <main+0x7e8>)
 8001b3e:	601a      	str	r2, [r3, #0]
					if ((etc_new_data != 0) && (etc_new_data != 1)) {//cannot be anything other than 0 or 1
 8001b40:	4b28      	ldr	r3, [pc, #160]	@ (8001be4 <main+0x7e4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <main+0x758>
 8001b48:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <main+0x7e4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d003      	beq.n	8001b58 <main+0x758>
						setWrongCommandFlag(&tmc4671_controller, true);
 8001b50:	2101      	movs	r1, #1
 8001b52:	4826      	ldr	r0, [pc, #152]	@ (8001bec <main+0x7ec>)
 8001b54:	f001 fb60 	bl	8003218 <setWrongCommandFlag>
					} else {
//						servoEnable(&tmc4671_controller, etc_new_data);
//						setWrongCommandFlag(&tmc4671_controller, false);
					}
					continuous_tx_flag = false;
 8001b58:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <main+0x7f0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
					break;
 8001b5e:	e037      	b.n	8001bd0 <main+0x7d0>

				case 101:
					TxData = 0;
 8001b60:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <main+0x7e8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
//					startHoming(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b66:	2100      	movs	r1, #0
 8001b68:	4820      	ldr	r0, [pc, #128]	@ (8001bec <main+0x7ec>)
 8001b6a:	f001 fb55 	bl	8003218 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b6e:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <main+0x7f0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
					break;
 8001b74:	e02c      	b.n	8001bd0 <main+0x7d0>

				case 102:
					TxData = 0;
 8001b76:	4b1c      	ldr	r3, [pc, #112]	@ (8001be8 <main+0x7e8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
//					clearFaults(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	481b      	ldr	r0, [pc, #108]	@ (8001bec <main+0x7ec>)
 8001b80:	f001 fb4a 	bl	8003218 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <main+0x7f0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
					break;
 8001b8a:	e021      	b.n	8001bd0 <main+0x7d0>

				case 103:
					TxData = 0;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <main+0x7e8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
					//saveParameters(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001b92:	2100      	movs	r1, #0
 8001b94:	4815      	ldr	r0, [pc, #84]	@ (8001bec <main+0x7ec>)
 8001b96:	f001 fb3f 	bl	8003218 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <main+0x7f0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
					break;
 8001ba0:	e016      	b.n	8001bd0 <main+0x7d0>

				case 104:
					TxData = 0;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <main+0x7e8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
					//loadDefaultParameters(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4810      	ldr	r0, [pc, #64]	@ (8001bec <main+0x7ec>)
 8001bac:	f001 fb34 	bl	8003218 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <main+0x7f0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
					break;
 8001bb6:	e00b      	b.n	8001bd0 <main+0x7d0>

				case 105:
					TxData = 0;
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <main+0x7e8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
					//stopMovement(&tmc4671_controller);
					setWrongCommandFlag(&tmc4671_controller, false);
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	480a      	ldr	r0, [pc, #40]	@ (8001bec <main+0x7ec>)
 8001bc2:	f001 fb29 	bl	8003218 <setWrongCommandFlag>
					continuous_tx_flag = false;
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <main+0x7f0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
					break;
 8001bcc:	e000      	b.n	8001bd0 <main+0x7d0>

				default:
					break;
 8001bce:	bf00      	nop
				}
				etc_old_command = etc_new_command;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <main+0x7f8>)
 8001bd2:	881a      	ldrh	r2, [r3, #0]
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <main+0x7fc>)
 8001bd6:	801a      	strh	r2, [r3, #0]
				etc_old_data = etc_new_data;
 8001bd8:	4b02      	ldr	r3, [pc, #8]	@ (8001be4 <main+0x7e4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a08      	ldr	r2, [pc, #32]	@ (8001c00 <main+0x800>)
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e315      	b.n	800220e <main+0xe0e>
 8001be2:	bf00      	nop
 8001be4:	2000032c 	.word	0x2000032c
 8001be8:	20000344 	.word	0x20000344
 8001bec:	200002c0 	.word	0x200002c0
 8001bf0:	2000031e 	.word	0x2000031e
 8001bf4:	ffffd120 	.word	0xffffd120
 8001bf8:	20000328 	.word	0x20000328
 8001bfc:	20000320 	.word	0x20000320
 8001c00:	20000324 	.word	0x20000324
		  }
	  } else if (get_command_flag) {
 8001c04:	4bd9      	ldr	r3, [pc, #868]	@ (8001f6c <main+0xb6c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8298 	beq.w	800213e <main+0xd3e>
		  switch(etc_new_command) {
 8001c0e:	4bd8      	ldr	r3, [pc, #864]	@ (8001f70 <main+0xb70>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	3b32      	subs	r3, #50	@ 0x32
 8001c14:	2b96      	cmp	r3, #150	@ 0x96
 8001c16:	f200 8280 	bhi.w	800211a <main+0xd1a>
 8001c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c20 <main+0x820>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001e7d 	.word	0x08001e7d
 8001c24:	08001e95 	.word	0x08001e95
 8001c28:	08001ea5 	.word	0x08001ea5
 8001c2c:	08001ec1 	.word	0x08001ec1
 8001c30:	08001ed7 	.word	0x08001ed7
 8001c34:	08001ef3 	.word	0x08001ef3
 8001c38:	08001f11 	.word	0x08001f11
 8001c3c:	08001f2f 	.word	0x08001f2f
 8001c40:	08001f4d 	.word	0x08001f4d
 8001c44:	08001f85 	.word	0x08001f85
 8001c48:	08001fa3 	.word	0x08001fa3
 8001c4c:	08001fc1 	.word	0x08001fc1
 8001c50:	08001fdf 	.word	0x08001fdf
 8001c54:	08001ffd 	.word	0x08001ffd
 8001c58:	0800201b 	.word	0x0800201b
 8001c5c:	08002039 	.word	0x08002039
 8001c60:	08002057 	.word	0x08002057
 8001c64:	08002075 	.word	0x08002075
 8001c68:	08002091 	.word	0x08002091
 8001c6c:	080020ad 	.word	0x080020ad
 8001c70:	080020cb 	.word	0x080020cb
 8001c74:	0800211b 	.word	0x0800211b
 8001c78:	0800211b 	.word	0x0800211b
 8001c7c:	0800211b 	.word	0x0800211b
 8001c80:	0800211b 	.word	0x0800211b
 8001c84:	0800211b 	.word	0x0800211b
 8001c88:	0800211b 	.word	0x0800211b
 8001c8c:	0800211b 	.word	0x0800211b
 8001c90:	0800211b 	.word	0x0800211b
 8001c94:	0800211b 	.word	0x0800211b
 8001c98:	0800211b 	.word	0x0800211b
 8001c9c:	0800211b 	.word	0x0800211b
 8001ca0:	0800211b 	.word	0x0800211b
 8001ca4:	0800211b 	.word	0x0800211b
 8001ca8:	0800211b 	.word	0x0800211b
 8001cac:	0800211b 	.word	0x0800211b
 8001cb0:	0800211b 	.word	0x0800211b
 8001cb4:	0800211b 	.word	0x0800211b
 8001cb8:	0800211b 	.word	0x0800211b
 8001cbc:	0800211b 	.word	0x0800211b
 8001cc0:	0800211b 	.word	0x0800211b
 8001cc4:	0800211b 	.word	0x0800211b
 8001cc8:	0800211b 	.word	0x0800211b
 8001ccc:	0800211b 	.word	0x0800211b
 8001cd0:	0800211b 	.word	0x0800211b
 8001cd4:	0800211b 	.word	0x0800211b
 8001cd8:	0800211b 	.word	0x0800211b
 8001cdc:	0800211b 	.word	0x0800211b
 8001ce0:	0800211b 	.word	0x0800211b
 8001ce4:	0800211b 	.word	0x0800211b
 8001ce8:	0800211b 	.word	0x0800211b
 8001cec:	0800211b 	.word	0x0800211b
 8001cf0:	0800211b 	.word	0x0800211b
 8001cf4:	0800211b 	.word	0x0800211b
 8001cf8:	0800211b 	.word	0x0800211b
 8001cfc:	0800211b 	.word	0x0800211b
 8001d00:	0800211b 	.word	0x0800211b
 8001d04:	0800211b 	.word	0x0800211b
 8001d08:	0800211b 	.word	0x0800211b
 8001d0c:	0800211b 	.word	0x0800211b
 8001d10:	0800211b 	.word	0x0800211b
 8001d14:	0800211b 	.word	0x0800211b
 8001d18:	0800211b 	.word	0x0800211b
 8001d1c:	0800211b 	.word	0x0800211b
 8001d20:	0800211b 	.word	0x0800211b
 8001d24:	0800211b 	.word	0x0800211b
 8001d28:	0800211b 	.word	0x0800211b
 8001d2c:	0800211b 	.word	0x0800211b
 8001d30:	0800211b 	.word	0x0800211b
 8001d34:	0800211b 	.word	0x0800211b
 8001d38:	0800211b 	.word	0x0800211b
 8001d3c:	0800211b 	.word	0x0800211b
 8001d40:	0800211b 	.word	0x0800211b
 8001d44:	0800211b 	.word	0x0800211b
 8001d48:	0800211b 	.word	0x0800211b
 8001d4c:	0800211b 	.word	0x0800211b
 8001d50:	0800211b 	.word	0x0800211b
 8001d54:	0800211b 	.word	0x0800211b
 8001d58:	0800211b 	.word	0x0800211b
 8001d5c:	0800211b 	.word	0x0800211b
 8001d60:	0800211b 	.word	0x0800211b
 8001d64:	0800211b 	.word	0x0800211b
 8001d68:	0800211b 	.word	0x0800211b
 8001d6c:	0800211b 	.word	0x0800211b
 8001d70:	0800211b 	.word	0x0800211b
 8001d74:	0800211b 	.word	0x0800211b
 8001d78:	0800211b 	.word	0x0800211b
 8001d7c:	0800211b 	.word	0x0800211b
 8001d80:	0800211b 	.word	0x0800211b
 8001d84:	0800211b 	.word	0x0800211b
 8001d88:	0800211b 	.word	0x0800211b
 8001d8c:	0800211b 	.word	0x0800211b
 8001d90:	0800211b 	.word	0x0800211b
 8001d94:	0800211b 	.word	0x0800211b
 8001d98:	0800211b 	.word	0x0800211b
 8001d9c:	0800211b 	.word	0x0800211b
 8001da0:	0800211b 	.word	0x0800211b
 8001da4:	0800211b 	.word	0x0800211b
 8001da8:	0800211b 	.word	0x0800211b
 8001dac:	0800211b 	.word	0x0800211b
 8001db0:	0800211b 	.word	0x0800211b
 8001db4:	0800211b 	.word	0x0800211b
 8001db8:	0800211b 	.word	0x0800211b
 8001dbc:	0800211b 	.word	0x0800211b
 8001dc0:	0800211b 	.word	0x0800211b
 8001dc4:	0800211b 	.word	0x0800211b
 8001dc8:	0800211b 	.word	0x0800211b
 8001dcc:	0800211b 	.word	0x0800211b
 8001dd0:	0800211b 	.word	0x0800211b
 8001dd4:	0800211b 	.word	0x0800211b
 8001dd8:	0800211b 	.word	0x0800211b
 8001ddc:	0800211b 	.word	0x0800211b
 8001de0:	0800211b 	.word	0x0800211b
 8001de4:	0800211b 	.word	0x0800211b
 8001de8:	0800211b 	.word	0x0800211b
 8001dec:	0800211b 	.word	0x0800211b
 8001df0:	0800211b 	.word	0x0800211b
 8001df4:	0800211b 	.word	0x0800211b
 8001df8:	0800211b 	.word	0x0800211b
 8001dfc:	0800211b 	.word	0x0800211b
 8001e00:	0800211b 	.word	0x0800211b
 8001e04:	0800211b 	.word	0x0800211b
 8001e08:	0800211b 	.word	0x0800211b
 8001e0c:	0800211b 	.word	0x0800211b
 8001e10:	0800211b 	.word	0x0800211b
 8001e14:	0800211b 	.word	0x0800211b
 8001e18:	0800211b 	.word	0x0800211b
 8001e1c:	0800211b 	.word	0x0800211b
 8001e20:	0800211b 	.word	0x0800211b
 8001e24:	0800211b 	.word	0x0800211b
 8001e28:	0800211b 	.word	0x0800211b
 8001e2c:	0800211b 	.word	0x0800211b
 8001e30:	0800211b 	.word	0x0800211b
 8001e34:	0800211b 	.word	0x0800211b
 8001e38:	0800211b 	.word	0x0800211b
 8001e3c:	0800211b 	.word	0x0800211b
 8001e40:	0800211b 	.word	0x0800211b
 8001e44:	0800211b 	.word	0x0800211b
 8001e48:	0800211b 	.word	0x0800211b
 8001e4c:	0800211b 	.word	0x0800211b
 8001e50:	0800211b 	.word	0x0800211b
 8001e54:	0800211b 	.word	0x0800211b
 8001e58:	0800211b 	.word	0x0800211b
 8001e5c:	0800211b 	.word	0x0800211b
 8001e60:	0800211b 	.word	0x0800211b
 8001e64:	0800211b 	.word	0x0800211b
 8001e68:	0800211b 	.word	0x0800211b
 8001e6c:	0800211b 	.word	0x0800211b
 8001e70:	0800211b 	.word	0x0800211b
 8001e74:	0800211b 	.word	0x0800211b
 8001e78:	080020e9 	.word	0x080020e9
			case 50:
				TxData = (uint32_t)1000;
 8001e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f74 <main+0xb74>)
 8001e7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e82:	601a      	str	r2, [r3, #0]
				//TxData = getEncoderResolution(&tmc4671_controller);
				setWrongCommandFlag(&tmc4671_controller, false);
 8001e84:	2100      	movs	r1, #0
 8001e86:	483c      	ldr	r0, [pc, #240]	@ (8001f78 <main+0xb78>)
 8001e88:	f001 f9c6 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f7c <main+0xb7c>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]
				break;
 8001e92:	e14d      	b.n	8002130 <main+0xd30>

			case 51:
				//TxData = getEncoderDirection(&tmc4671_controller);
				setWrongCommandFlag(&tmc4671_controller, false);
 8001e94:	2100      	movs	r1, #0
 8001e96:	4838      	ldr	r0, [pc, #224]	@ (8001f78 <main+0xb78>)
 8001e98:	f001 f9be 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001e9c:	4b37      	ldr	r3, [pc, #220]	@ (8001f7c <main+0xb7c>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
				break;
 8001ea2:	e145      	b.n	8002130 <main+0xd30>

			case 52:
				// int32_t zero_offset = getZeroOffset(&tmc4671_controller);
				// TxData = (uint32_t) zero_offset;  // Cast int32_t to uint32_t
				 TxData = getZeroOffset(&tmc4671_controller);
 8001ea4:	4834      	ldr	r0, [pc, #208]	@ (8001f78 <main+0xb78>)
 8001ea6:	f001 fadf 	bl	8003468 <getZeroOffset>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a31      	ldr	r2, [pc, #196]	@ (8001f74 <main+0xb74>)
 8001eae:	6013      	str	r3, [r2, #0]
				 setWrongCommandFlag(&tmc4671_controller, false);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4831      	ldr	r0, [pc, #196]	@ (8001f78 <main+0xb78>)
 8001eb4:	f001 f9b0 	bl	8003218 <setWrongCommandFlag>
				 continuous_tx_flag = true;
 8001eb8:	4b30      	ldr	r3, [pc, #192]	@ (8001f7c <main+0xb7c>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
				 break;
 8001ebe:	e137      	b.n	8002130 <main+0xd30>

			case 53:
				TxData = -1000;
 8001ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f74 <main+0xb74>)
 8001ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8001f80 <main+0xb80>)
 8001ec4:	601a      	str	r2, [r3, #0]
			//	int32_t soft_pos_limit = getSoftPositiveLimit(&tmc4671_controller);
			//	TxData = (uint32_t) soft_pos_limit;  // Cast int32_t to uint32_t
				//TxData = getSoftPositiveLimit(&tmc4671_controller);
				setWrongCommandFlag(&tmc4671_controller, false);
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	482b      	ldr	r0, [pc, #172]	@ (8001f78 <main+0xb78>)
 8001eca:	f001 f9a5 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ece:	4b2b      	ldr	r3, [pc, #172]	@ (8001f7c <main+0xb7c>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
				break;
 8001ed4:	e12c      	b.n	8002130 <main+0xd30>


			case 54:
			//	int32_t soft_neg_limit = getSoftNegativeLimit(&tmc4671_controller);
			//	TxData = (uint32_t) soft_neg_limit;  // Cast int32_t to uint32_t
				TxData =  getSoftNegativeLimit(&tmc4671_controller);
 8001ed6:	4828      	ldr	r0, [pc, #160]	@ (8001f78 <main+0xb78>)
 8001ed8:	f001 fa96 	bl	8003408 <getSoftNegativeLimit>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4a25      	ldr	r2, [pc, #148]	@ (8001f74 <main+0xb74>)
 8001ee0:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4824      	ldr	r0, [pc, #144]	@ (8001f78 <main+0xb78>)
 8001ee6:	f001 f997 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001eea:	4b24      	ldr	r3, [pc, #144]	@ (8001f7c <main+0xb7c>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
				break;
 8001ef0:	e11e      	b.n	8002130 <main+0xd30>

			case 55:
				TxData = getMaxPositionError(&tmc4671_controller);
 8001ef2:	4821      	ldr	r0, [pc, #132]	@ (8001f78 <main+0xb78>)
 8001ef4:	f001 fb48 	bl	8003588 <getMaxPositionError>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <main+0xb74>)
 8001efe:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f00:	2100      	movs	r1, #0
 8001f02:	481d      	ldr	r0, [pc, #116]	@ (8001f78 <main+0xb78>)
 8001f04:	f001 f988 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <main+0xb7c>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
				break;
 8001f0e:	e10f      	b.n	8002130 <main+0xd30>

			case 56:
				TxData = getCurrentLimitHoming(&tmc4671_controller);
 8001f10:	4819      	ldr	r0, [pc, #100]	@ (8001f78 <main+0xb78>)
 8001f12:	f001 fa3b 	bl	800338c <getCurrentLimitHoming>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <main+0xb74>)
 8001f1c:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4815      	ldr	r0, [pc, #84]	@ (8001f78 <main+0xb78>)
 8001f22:	f001 f979 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <main+0xb7c>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
				break;
 8001f2c:	e100      	b.n	8002130 <main+0xd30>

			case 57:
				TxData = getCurrentLimitServo(&tmc4671_controller);
 8001f2e:	4812      	ldr	r0, [pc, #72]	@ (8001f78 <main+0xb78>)
 8001f30:	f001 fa38 	bl	80033a4 <getCurrentLimitServo>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <main+0xb74>)
 8001f3a:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	480e      	ldr	r0, [pc, #56]	@ (8001f78 <main+0xb78>)
 8001f40:	f001 f96a 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f44:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <main+0xb7c>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
				break;
 8001f4a:	e0f1      	b.n	8002130 <main+0xd30>

			case 58:
				TxData = getVoltageLimitHoming(&tmc4671_controller);
 8001f4c:	480a      	ldr	r0, [pc, #40]	@ (8001f78 <main+0xb78>)
 8001f4e:	f001 fa35 	bl	80033bc <getVoltageLimitHoming>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <main+0xb74>)
 8001f58:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4806      	ldr	r0, [pc, #24]	@ (8001f78 <main+0xb78>)
 8001f5e:	f001 f95b 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <main+0xb7c>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
				break;
 8001f68:	e0e2      	b.n	8002130 <main+0xd30>
 8001f6a:	bf00      	nop
 8001f6c:	2000031d 	.word	0x2000031d
 8001f70:	20000328 	.word	0x20000328
 8001f74:	20000344 	.word	0x20000344
 8001f78:	200002c0 	.word	0x200002c0
 8001f7c:	2000031e 	.word	0x2000031e
 8001f80:	fffffc18 	.word	0xfffffc18

			case 59:
				TxData = getVelocityLimitServo(&tmc4671_controller);
 8001f84:	488d      	ldr	r0, [pc, #564]	@ (80021bc <main+0xdbc>)
 8001f86:	f001 fa25 	bl	80033d4 <getVelocityLimitServo>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b8c      	ldr	r3, [pc, #560]	@ (80021c0 <main+0xdc0>)
 8001f90:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001f92:	2100      	movs	r1, #0
 8001f94:	4889      	ldr	r0, [pc, #548]	@ (80021bc <main+0xdbc>)
 8001f96:	f001 f93f 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001f9a:	4b8a      	ldr	r3, [pc, #552]	@ (80021c4 <main+0xdc4>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
				break;
 8001fa0:	e0c6      	b.n	8002130 <main+0xd30>

			case 60:
				TxData = getTorqueLimitServo(&tmc4671_controller);
 8001fa2:	4886      	ldr	r0, [pc, #536]	@ (80021bc <main+0xdbc>)
 8001fa4:	f001 fa22 	bl	80033ec <getTorqueLimitServo>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b84      	ldr	r3, [pc, #528]	@ (80021c0 <main+0xdc0>)
 8001fae:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4882      	ldr	r0, [pc, #520]	@ (80021bc <main+0xdbc>)
 8001fb4:	f001 f930 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001fb8:	4b82      	ldr	r3, [pc, #520]	@ (80021c4 <main+0xdc4>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
				break;
 8001fbe:	e0b7      	b.n	8002130 <main+0xd30>

			case 61:
				TxData = getCurrentGainP(&tmc4671_controller);
 8001fc0:	487e      	ldr	r0, [pc, #504]	@ (80021bc <main+0xdbc>)
 8001fc2:	f001 fb0f 	bl	80035e4 <getCurrentGainP>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b7d      	ldr	r3, [pc, #500]	@ (80021c0 <main+0xdc0>)
 8001fcc:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fce:	2100      	movs	r1, #0
 8001fd0:	487a      	ldr	r0, [pc, #488]	@ (80021bc <main+0xdbc>)
 8001fd2:	f001 f921 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80021c4 <main+0xdc4>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
				break;
 8001fdc:	e0a8      	b.n	8002130 <main+0xd30>

			case 62:
				TxData = getCurrentGainI(&tmc4671_controller);
 8001fde:	4877      	ldr	r0, [pc, #476]	@ (80021bc <main+0xdbc>)
 8001fe0:	f001 fb0c 	bl	80035fc <getCurrentGainI>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b75      	ldr	r3, [pc, #468]	@ (80021c0 <main+0xdc0>)
 8001fea:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8001fec:	2100      	movs	r1, #0
 8001fee:	4873      	ldr	r0, [pc, #460]	@ (80021bc <main+0xdbc>)
 8001ff0:	f001 f912 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8001ff4:	4b73      	ldr	r3, [pc, #460]	@ (80021c4 <main+0xdc4>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
				break;
 8001ffa:	e099      	b.n	8002130 <main+0xd30>

			case 63:
				TxData = getVelocityGainP(&tmc4671_controller);
 8001ffc:	486f      	ldr	r0, [pc, #444]	@ (80021bc <main+0xdbc>)
 8001ffe:	f001 fb09 	bl	8003614 <getVelocityGainP>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	4b6e      	ldr	r3, [pc, #440]	@ (80021c0 <main+0xdc0>)
 8002008:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 800200a:	2100      	movs	r1, #0
 800200c:	486b      	ldr	r0, [pc, #428]	@ (80021bc <main+0xdbc>)
 800200e:	f001 f903 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002012:	4b6c      	ldr	r3, [pc, #432]	@ (80021c4 <main+0xdc4>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
				break;
 8002018:	e08a      	b.n	8002130 <main+0xd30>

			case 64:
				TxData = getVelocityGainI(&tmc4671_controller);
 800201a:	4868      	ldr	r0, [pc, #416]	@ (80021bc <main+0xdbc>)
 800201c:	f001 fb06 	bl	800362c <getVelocityGainI>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	4b66      	ldr	r3, [pc, #408]	@ (80021c0 <main+0xdc0>)
 8002026:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002028:	2100      	movs	r1, #0
 800202a:	4864      	ldr	r0, [pc, #400]	@ (80021bc <main+0xdbc>)
 800202c:	f001 f8f4 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002030:	4b64      	ldr	r3, [pc, #400]	@ (80021c4 <main+0xdc4>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
				break;
 8002036:	e07b      	b.n	8002130 <main+0xd30>

			case 65:
				TxData = getPositionGainP(&tmc4671_controller);
 8002038:	4860      	ldr	r0, [pc, #384]	@ (80021bc <main+0xdbc>)
 800203a:	f001 fb03 	bl	8003644 <getPositionGainP>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	4b5f      	ldr	r3, [pc, #380]	@ (80021c0 <main+0xdc0>)
 8002044:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002046:	2100      	movs	r1, #0
 8002048:	485c      	ldr	r0, [pc, #368]	@ (80021bc <main+0xdbc>)
 800204a:	f001 f8e5 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 800204e:	4b5d      	ldr	r3, [pc, #372]	@ (80021c4 <main+0xdc4>)
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
				break;
 8002054:	e06c      	b.n	8002130 <main+0xd30>

			case 66:
				TxData = getPositionGainI(&tmc4671_controller);
 8002056:	4859      	ldr	r0, [pc, #356]	@ (80021bc <main+0xdbc>)
 8002058:	f001 fb00 	bl	800365c <getPositionGainI>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	4b57      	ldr	r3, [pc, #348]	@ (80021c0 <main+0xdc0>)
 8002062:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002064:	2100      	movs	r1, #0
 8002066:	4855      	ldr	r0, [pc, #340]	@ (80021bc <main+0xdbc>)
 8002068:	f001 f8d6 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 800206c:	4b55      	ldr	r3, [pc, #340]	@ (80021c4 <main+0xdc4>)
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
				break;
 8002072:	e05d      	b.n	8002130 <main+0xd30>

			case 67:
			//	int32_t target_position = getTargetPosition(&tmc4671_controller);
			//	TxData = (uint32_t) target_position;  // Cast int32_t to uint32_t
				TxData = getTargetPosition(&tmc4671_controller);
 8002074:	4851      	ldr	r0, [pc, #324]	@ (80021bc <main+0xdbc>)
 8002076:	f001 fa57 	bl	8003528 <getTargetPosition>
 800207a:	4603      	mov	r3, r0
 800207c:	4a50      	ldr	r2, [pc, #320]	@ (80021c0 <main+0xdc0>)
 800207e:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 8002080:	2100      	movs	r1, #0
 8002082:	484e      	ldr	r0, [pc, #312]	@ (80021bc <main+0xdbc>)
 8002084:	f001 f8c8 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 8002088:	4b4e      	ldr	r3, [pc, #312]	@ (80021c4 <main+0xdc4>)
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
				break;
 800208e:	e04f      	b.n	8002130 <main+0xd30>

			case 68:
			//	int32_t actual_position = getActualPosition(&tmc4671_controller);
			//	TxData = (uint32_t) actual_position;  // Cast int32_t to uint32_t
				TxData = getActualPosition(&tmc4671_controller);
 8002090:	484a      	ldr	r0, [pc, #296]	@ (80021bc <main+0xdbc>)
 8002092:	f001 fa19 	bl	80034c8 <getActualPosition>
 8002096:	4603      	mov	r3, r0
 8002098:	4a49      	ldr	r2, [pc, #292]	@ (80021c0 <main+0xdc0>)
 800209a:	6013      	str	r3, [r2, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 800209c:	2100      	movs	r1, #0
 800209e:	4847      	ldr	r0, [pc, #284]	@ (80021bc <main+0xdbc>)
 80020a0:	f001 f8ba 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 80020a4:	4b47      	ldr	r3, [pc, #284]	@ (80021c4 <main+0xdc4>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
				break;
 80020aa:	e041      	b.n	8002130 <main+0xd30>

			case 69:
				TxData = getCoilCurrent(&tmc4671_controller);
 80020ac:	4843      	ldr	r0, [pc, #268]	@ (80021bc <main+0xdbc>)
 80020ae:	f001 f961 	bl	8003374 <getCoilCurrent>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b42      	ldr	r3, [pc, #264]	@ (80021c0 <main+0xdc0>)
 80020b8:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 80020ba:	2100      	movs	r1, #0
 80020bc:	483f      	ldr	r0, [pc, #252]	@ (80021bc <main+0xdbc>)
 80020be:	f001 f8ab 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 80020c2:	4b40      	ldr	r3, [pc, #256]	@ (80021c4 <main+0xdc4>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
				break;
 80020c8:	e032      	b.n	8002130 <main+0xd30>

			case 70:
				TxData = getFirmwareVersion(&tmc4671_controller);
 80020ca:	483c      	ldr	r0, [pc, #240]	@ (80021bc <main+0xdbc>)
 80020cc:	f001 fad2 	bl	8003674 <getFirmwareVersion>
 80020d0:	4603      	mov	r3, r0
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b3a      	ldr	r3, [pc, #232]	@ (80021c0 <main+0xdc0>)
 80020d6:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 80020d8:	2100      	movs	r1, #0
 80020da:	4838      	ldr	r0, [pc, #224]	@ (80021bc <main+0xdbc>)
 80020dc:	f001 f89c 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = true;
 80020e0:	4b38      	ldr	r3, [pc, #224]	@ (80021c4 <main+0xdc4>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
				break;
 80020e6:	e023      	b.n	8002130 <main+0xd30>

			case 200:
				TxData = 0;
 80020e8:	4b35      	ldr	r3, [pc, #212]	@ (80021c0 <main+0xdc0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
				get_Execution_count++;
 80020ee:	4b36      	ldr	r3, [pc, #216]	@ (80021c8 <main+0xdc8>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <main+0xdc8>)
 80020f8:	701a      	strb	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, false);
 80020fa:	2100      	movs	r1, #0
 80020fc:	482f      	ldr	r0, [pc, #188]	@ (80021bc <main+0xdbc>)
 80020fe:	f001 f88b 	bl	8003218 <setWrongCommandFlag>
				TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 8002102:	4932      	ldr	r1, [pc, #200]	@ (80021cc <main+0xdcc>)
 8002104:	482d      	ldr	r0, [pc, #180]	@ (80021bc <main+0xdbc>)
 8002106:	f001 f897 	bl	8003238 <getEventStatusWord>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	4b30      	ldr	r3, [pc, #192]	@ (80021d0 <main+0xdd0>)
 8002110:	801a      	strh	r2, [r3, #0]
				continuous_tx_flag = false;
 8002112:	4b2c      	ldr	r3, [pc, #176]	@ (80021c4 <main+0xdc4>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
				break;
 8002118:	e00a      	b.n	8002130 <main+0xd30>

			default:
				TxData = 0;
 800211a:	4b29      	ldr	r3, [pc, #164]	@ (80021c0 <main+0xdc0>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
				setWrongCommandFlag(&tmc4671_controller, true);
 8002120:	2101      	movs	r1, #1
 8002122:	4826      	ldr	r0, [pc, #152]	@ (80021bc <main+0xdbc>)
 8002124:	f001 f878 	bl	8003218 <setWrongCommandFlag>
				continuous_tx_flag = false;
 8002128:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <main+0xdc4>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
				break;
 800212e:	bf00      	nop
		  }
		  etc_old_command = 0;
 8002130:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <main+0xdd4>)
 8002132:	2200      	movs	r2, #0
 8002134:	801a      	strh	r2, [r3, #0]
		  etc_old_data = 0;
 8002136:	4b28      	ldr	r3, [pc, #160]	@ (80021d8 <main+0xdd8>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e067      	b.n	800220e <main+0xe0e>
	  } else if (accelerometer_flag) {
 800213e:	4b27      	ldr	r3, [pc, #156]	@ (80021dc <main+0xddc>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d063      	beq.n	800220e <main+0xe0e>
		  switch(etc_new_command) {
 8002146:	4b26      	ldr	r3, [pc, #152]	@ (80021e0 <main+0xde0>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	f240 122f 	movw	r2, #303	@ 0x12f
 800214e:	4293      	cmp	r3, r2
 8002150:	d048      	beq.n	80021e4 <main+0xde4>
 8002152:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8002156:	da54      	bge.n	8002202 <main+0xe02>
 8002158:	f240 122d 	movw	r2, #301	@ 0x12d
 800215c:	4293      	cmp	r3, r2
 800215e:	d003      	beq.n	8002168 <main+0xd68>
 8002160:	f5b3 7f97 	cmp.w	r3, #302	@ 0x12e
 8002164:	d015      	beq.n	8002192 <main+0xd92>
 8002166:	e04c      	b.n	8002202 <main+0xe02>
		  case 301:
			  get_Execution_count++;
 8002168:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <main+0xdc8>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	3301      	adds	r3, #1
 800216e:	b2da      	uxtb	r2, r3
 8002170:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <main+0xdc8>)
 8002172:	701a      	strb	r2, [r3, #0]
			  setWrongCommandFlag(&tmc4671_controller, false);
 8002174:	2100      	movs	r1, #0
 8002176:	4811      	ldr	r0, [pc, #68]	@ (80021bc <main+0xdbc>)
 8002178:	f001 f84e 	bl	8003218 <setWrongCommandFlag>
			  int32_t Accel_x = getAcceleration('X');
 800217c:	2058      	movs	r0, #88	@ 0x58
 800217e:	f7fe fe7b 	bl	8000e78 <getAcceleration>
 8002182:	6078      	str	r0, [r7, #4]
			  TxData = (uint32_t) Accel_x;
 8002184:	4a0e      	ldr	r2, [pc, #56]	@ (80021c0 <main+0xdc0>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6013      	str	r3, [r2, #0]
			  continuous_tx_flag = true;
 800218a:	4b0e      	ldr	r3, [pc, #56]	@ (80021c4 <main+0xdc4>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
			  break;
 8002190:	e037      	b.n	8002202 <main+0xe02>

		  case 302:
			  get_Execution_count++;
 8002192:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <main+0xdc8>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <main+0xdc8>)
 800219c:	701a      	strb	r2, [r3, #0]
			  setWrongCommandFlag(&tmc4671_controller, false);
 800219e:	2100      	movs	r1, #0
 80021a0:	4806      	ldr	r0, [pc, #24]	@ (80021bc <main+0xdbc>)
 80021a2:	f001 f839 	bl	8003218 <setWrongCommandFlag>
			  int32_t Accel_y = getAcceleration('Y');
 80021a6:	2059      	movs	r0, #89	@ 0x59
 80021a8:	f7fe fe66 	bl	8000e78 <getAcceleration>
 80021ac:	60b8      	str	r0, [r7, #8]
			  TxData = (uint32_t) Accel_y;
 80021ae:	4a04      	ldr	r2, [pc, #16]	@ (80021c0 <main+0xdc0>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	6013      	str	r3, [r2, #0]
			  continuous_tx_flag = true;
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <main+0xdc4>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]
			  break;
 80021ba:	e022      	b.n	8002202 <main+0xe02>
 80021bc:	200002c0 	.word	0x200002c0
 80021c0:	20000344 	.word	0x20000344
 80021c4:	2000031e 	.word	0x2000031e
 80021c8:	2000034c 	.word	0x2000034c
 80021cc:	2000034a 	.word	0x2000034a
 80021d0:	20000348 	.word	0x20000348
 80021d4:	20000320 	.word	0x20000320
 80021d8:	20000324 	.word	0x20000324
 80021dc:	2000031f 	.word	0x2000031f
 80021e0:	20000328 	.word	0x20000328

		  case 303:
			  setWrongCommandFlag(&tmc4671_controller, false);
 80021e4:	2100      	movs	r1, #0
 80021e6:	483b      	ldr	r0, [pc, #236]	@ (80022d4 <main+0xed4>)
 80021e8:	f001 f816 	bl	8003218 <setWrongCommandFlag>
			  int32_t Accel_z = getAcceleration('Z');
 80021ec:	205a      	movs	r0, #90	@ 0x5a
 80021ee:	f7fe fe43 	bl	8000e78 <getAcceleration>
 80021f2:	60f8      	str	r0, [r7, #12]
			  TxData = (uint32_t) Accel_z;
 80021f4:	4a38      	ldr	r2, [pc, #224]	@ (80022d8 <main+0xed8>)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6013      	str	r3, [r2, #0]
			  continuous_tx_flag = true;
 80021fa:	4b38      	ldr	r3, [pc, #224]	@ (80022dc <main+0xedc>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
			  break;
 8002200:	bf00      	nop
		  }
		  etc_old_command = 0;
 8002202:	4b37      	ldr	r3, [pc, #220]	@ (80022e0 <main+0xee0>)
 8002204:	2200      	movs	r2, #0
 8002206:	801a      	strh	r2, [r3, #0]
		  etc_old_data = 0;
 8002208:	4b36      	ldr	r3, [pc, #216]	@ (80022e4 <main+0xee4>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
		  no_error_drive = true;
	  }*/

	  /*---------------------------TRANSMIT DATA TO ETHERCAT ---------------------------------------------*/

	  if (set_command_flag) {
 800220e:	4b36      	ldr	r3, [pc, #216]	@ (80022e8 <main+0xee8>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d024      	beq.n	8002260 <main+0xe60>
		  if (!continuous_tx_flag) {
 8002216:	4b31      	ldr	r3, [pc, #196]	@ (80022dc <main+0xedc>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	f083 0301 	eor.w	r3, r3, #1
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01d      	beq.n	8002260 <main+0xe60>
			  set_sent_count++;
 8002224:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <main+0xeec>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b2f      	ldr	r3, [pc, #188]	@ (80022ec <main+0xeec>)
 800222e:	701a      	strb	r2, [r3, #0]
			  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 8002230:	492f      	ldr	r1, [pc, #188]	@ (80022f0 <main+0xef0>)
 8002232:	4828      	ldr	r0, [pc, #160]	@ (80022d4 <main+0xed4>)
 8002234:	f001 f800 	bl	8003238 <getEventStatusWord>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b2d      	ldr	r3, [pc, #180]	@ (80022f4 <main+0xef4>)
 800223e:	801a      	strh	r2, [r3, #0]
			  Etc_Buffer_In.LANLong[0] = ((uint32_t)TxStatus << 16) | (uint32_t)etc_new_command;
 8002240:	4b2c      	ldr	r3, [pc, #176]	@ (80022f4 <main+0xef4>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	4a2c      	ldr	r2, [pc, #176]	@ (80022f8 <main+0xef8>)
 8002248:	8812      	ldrh	r2, [r2, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	4a2b      	ldr	r2, [pc, #172]	@ (80022fc <main+0xefc>)
 800224e:	6013      	str	r3, [r2, #0]
			  Etc_Buffer_In.LANLong[1] = (int32_t)TxData;
 8002250:	4b21      	ldr	r3, [pc, #132]	@ (80022d8 <main+0xed8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <main+0xefc>)
 8002258:	605a      	str	r2, [r3, #4]
			  continuous_tx_flag = true;  // Mark that data has been sent
 800225a:	4b20      	ldr	r3, [pc, #128]	@ (80022dc <main+0xedc>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if (get_command_flag) {
 8002260:	4b27      	ldr	r3, [pc, #156]	@ (8002300 <main+0xf00>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01a      	beq.n	800229e <main+0xe9e>
		  get_sent_count++;
 8002268:	4b26      	ldr	r3, [pc, #152]	@ (8002304 <main+0xf04>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b24      	ldr	r3, [pc, #144]	@ (8002304 <main+0xf04>)
 8002272:	701a      	strb	r2, [r3, #0]
		  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 8002274:	491e      	ldr	r1, [pc, #120]	@ (80022f0 <main+0xef0>)
 8002276:	4817      	ldr	r0, [pc, #92]	@ (80022d4 <main+0xed4>)
 8002278:	f000 ffde 	bl	8003238 <getEventStatusWord>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	4b1c      	ldr	r3, [pc, #112]	@ (80022f4 <main+0xef4>)
 8002282:	801a      	strh	r2, [r3, #0]
		  Etc_Buffer_In.LANLong[0] = ((uint32_t) TxStatus << 16) | (uint32_t) etc_new_command;
 8002284:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <main+0xef4>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	4a1b      	ldr	r2, [pc, #108]	@ (80022f8 <main+0xef8>)
 800228c:	8812      	ldrh	r2, [r2, #0]
 800228e:	4313      	orrs	r3, r2
 8002290:	4a1a      	ldr	r2, [pc, #104]	@ (80022fc <main+0xefc>)
 8002292:	6013      	str	r3, [r2, #0]
		  Etc_Buffer_In.LANLong[1] = TxData;
 8002294:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <main+0xed8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b18      	ldr	r3, [pc, #96]	@ (80022fc <main+0xefc>)
 800229c:	605a      	str	r2, [r3, #4]
		 // Etc_Buffer_In.LANInt[1] = TxData;
	  }

	  if(accelerometer_flag) {
 800229e:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <main+0xf08>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f43f a8d6 	beq.w	8001454 <main+0x54>
		  adxl_sent_count++;
 80022a8:	4b18      	ldr	r3, [pc, #96]	@ (800230c <main+0xf0c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	4b16      	ldr	r3, [pc, #88]	@ (800230c <main+0xf0c>)
 80022b2:	701a      	strb	r2, [r3, #0]
		  TxStatus = getEventStatusWord(&tmc4671_controller, &Pcap_status);
 80022b4:	490e      	ldr	r1, [pc, #56]	@ (80022f0 <main+0xef0>)
 80022b6:	4807      	ldr	r0, [pc, #28]	@ (80022d4 <main+0xed4>)
 80022b8:	f000 ffbe 	bl	8003238 <getEventStatusWord>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <main+0xef4>)
 80022c2:	801a      	strh	r2, [r3, #0]
	//	  Etc_Buffer_In.LANLong[0] = ((uint32_t) TxStatus << 16) | (uint32_t) etc_new_command;
		  Etc_Buffer_In.LANLong[1] = (int32_t)TxData;
 80022c4:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <main+0xed8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <main+0xefc>)
 80022cc:	605a      	str	r2, [r3, #4]
	  if (pcap_init_ok) {
 80022ce:	f7ff b8c1 	b.w	8001454 <main+0x54>
 80022d2:	bf00      	nop
 80022d4:	200002c0 	.word	0x200002c0
 80022d8:	20000344 	.word	0x20000344
 80022dc:	2000031e 	.word	0x2000031e
 80022e0:	20000320 	.word	0x20000320
 80022e4:	20000324 	.word	0x20000324
 80022e8:	2000031c 	.word	0x2000031c
 80022ec:	2000034d 	.word	0x2000034d
 80022f0:	2000034a 	.word	0x2000034a
 80022f4:	20000348 	.word	0x20000348
 80022f8:	20000328 	.word	0x20000328
 80022fc:	200000a4 	.word	0x200000a4
 8002300:	2000031d 	.word	0x2000031d
 8002304:	2000034e 	.word	0x2000034e
 8002308:	2000031f 	.word	0x2000031f
 800230c:	2000034f 	.word	0x2000034f

08002310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b094      	sub	sp, #80	@ 0x50
 8002314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002316:	f107 0320 	add.w	r3, r7, #32
 800231a:	2230      	movs	r2, #48	@ 0x30
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f004 ff64 	bl	80071ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	4b27      	ldr	r3, [pc, #156]	@ (80023d8 <SystemClock_Config+0xc8>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	4a26      	ldr	r2, [pc, #152]	@ (80023d8 <SystemClock_Config+0xc8>)
 800233e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002342:	6413      	str	r3, [r2, #64]	@ 0x40
 8002344:	4b24      	ldr	r3, [pc, #144]	@ (80023d8 <SystemClock_Config+0xc8>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002350:	2300      	movs	r3, #0
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	4b21      	ldr	r3, [pc, #132]	@ (80023dc <SystemClock_Config+0xcc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a20      	ldr	r2, [pc, #128]	@ (80023dc <SystemClock_Config+0xcc>)
 800235a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <SystemClock_Config+0xcc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800236c:	2301      	movs	r3, #1
 800236e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002370:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002376:	2302      	movs	r3, #2
 8002378:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800237a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800237e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002380:	2319      	movs	r3, #25
 8002382:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002384:	23c0      	movs	r3, #192	@ 0xc0
 8002386:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002388:	2302      	movs	r3, #2
 800238a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800238c:	2304      	movs	r3, #4
 800238e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002390:	f107 0320 	add.w	r3, r7, #32
 8002394:	4618      	mov	r0, r3
 8002396:	f002 ffd9 	bl	800534c <HAL_RCC_OscConfig>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023a0:	f000 fa1e 	bl	80027e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a4:	230f      	movs	r3, #15
 80023a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a8:	2302      	movs	r3, #2
 80023aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	2103      	movs	r1, #3
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 fa3b 	bl	800583c <HAL_RCC_ClockConfig>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80023cc:	f000 fa08 	bl	80027e0 <Error_Handler>
  }
}
 80023d0:	bf00      	nop
 80023d2:	3750      	adds	r7, #80	@ 0x50
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40007000 	.word	0x40007000

080023e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023e4:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <MX_I2C1_Init+0x50>)
 80023e6:	4a13      	ldr	r2, [pc, #76]	@ (8002434 <MX_I2C1_Init+0x54>)
 80023e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023ea:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <MX_I2C1_Init+0x50>)
 80023ec:	4a12      	ldr	r2, [pc, #72]	@ (8002438 <MX_I2C1_Init+0x58>)
 80023ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <MX_I2C1_Init+0x50>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <MX_I2C1_Init+0x50>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <MX_I2C1_Init+0x50>)
 80023fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002402:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002404:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <MX_I2C1_Init+0x50>)
 8002406:	2200      	movs	r2, #0
 8002408:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <MX_I2C1_Init+0x50>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002410:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <MX_I2C1_Init+0x50>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <MX_I2C1_Init+0x50>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800241c:	4804      	ldr	r0, [pc, #16]	@ (8002430 <MX_I2C1_Init+0x50>)
 800241e:	f001 fc81 	bl	8003d24 <HAL_I2C_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002428:	f000 f9da 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200000c4 	.word	0x200000c4
 8002434:	40005400 	.word	0x40005400
 8002438:	000186a0 	.word	0x000186a0

0800243c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002440:	4b12      	ldr	r3, [pc, #72]	@ (800248c <MX_I2C2_Init+0x50>)
 8002442:	4a13      	ldr	r2, [pc, #76]	@ (8002490 <MX_I2C2_Init+0x54>)
 8002444:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <MX_I2C2_Init+0x50>)
 8002448:	4a12      	ldr	r2, [pc, #72]	@ (8002494 <MX_I2C2_Init+0x58>)
 800244a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800244c:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <MX_I2C2_Init+0x50>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002452:	4b0e      	ldr	r3, [pc, #56]	@ (800248c <MX_I2C2_Init+0x50>)
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <MX_I2C2_Init+0x50>)
 800245a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800245e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002460:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <MX_I2C2_Init+0x50>)
 8002462:	2200      	movs	r2, #0
 8002464:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002466:	4b09      	ldr	r3, [pc, #36]	@ (800248c <MX_I2C2_Init+0x50>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800246c:	4b07      	ldr	r3, [pc, #28]	@ (800248c <MX_I2C2_Init+0x50>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <MX_I2C2_Init+0x50>)
 8002474:	2200      	movs	r2, #0
 8002476:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002478:	4804      	ldr	r0, [pc, #16]	@ (800248c <MX_I2C2_Init+0x50>)
 800247a:	f001 fc53 	bl	8003d24 <HAL_I2C_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002484:	f000 f9ac 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000118 	.word	0x20000118
 8002490:	40005800 	.word	0x40005800
 8002494:	000186a0 	.word	0x000186a0

08002498 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800249c:	4b17      	ldr	r3, [pc, #92]	@ (80024fc <MX_SPI1_Init+0x64>)
 800249e:	4a18      	ldr	r2, [pc, #96]	@ (8002500 <MX_SPI1_Init+0x68>)
 80024a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024a2:	4b16      	ldr	r3, [pc, #88]	@ (80024fc <MX_SPI1_Init+0x64>)
 80024a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024aa:	4b14      	ldr	r3, [pc, #80]	@ (80024fc <MX_SPI1_Init+0x64>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024b0:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <MX_SPI1_Init+0x64>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80024b6:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <MX_SPI1_Init+0x64>)
 80024b8:	2202      	movs	r2, #2
 80024ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80024bc:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <MX_SPI1_Init+0x64>)
 80024be:	2201      	movs	r2, #1
 80024c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	@ (80024fc <MX_SPI1_Init+0x64>)
 80024c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80024ca:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <MX_SPI1_Init+0x64>)
 80024cc:	2220      	movs	r2, #32
 80024ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024d0:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <MX_SPI1_Init+0x64>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <MX_SPI1_Init+0x64>)
 80024d8:	2200      	movs	r2, #0
 80024da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024dc:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <MX_SPI1_Init+0x64>)
 80024de:	2200      	movs	r2, #0
 80024e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <MX_SPI1_Init+0x64>)
 80024e4:	220a      	movs	r2, #10
 80024e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024e8:	4804      	ldr	r0, [pc, #16]	@ (80024fc <MX_SPI1_Init+0x64>)
 80024ea:	f003 fb73 	bl	8005bd4 <HAL_SPI_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024f4:	f000 f974 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	2000016c 	.word	0x2000016c
 8002500:	40013000 	.word	0x40013000

08002504 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002508:	4b17      	ldr	r3, [pc, #92]	@ (8002568 <MX_SPI2_Init+0x64>)
 800250a:	4a18      	ldr	r2, [pc, #96]	@ (800256c <MX_SPI2_Init+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002510:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002514:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002516:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800251c:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <MX_SPI2_Init+0x64>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002524:	2202      	movs	r2, #2
 8002526:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002528:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <MX_SPI2_Init+0x64>)
 800252a:	2201      	movs	r2, #1
 800252c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002534:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002536:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002538:	2218      	movs	r2, #24
 800253a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800253c:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <MX_SPI2_Init+0x64>)
 800253e:	2200      	movs	r2, #0
 8002540:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002542:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002544:	2200      	movs	r2, #0
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002548:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <MX_SPI2_Init+0x64>)
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800254e:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002550:	220a      	movs	r2, #10
 8002552:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002554:	4804      	ldr	r0, [pc, #16]	@ (8002568 <MX_SPI2_Init+0x64>)
 8002556:	f003 fb3d 	bl	8005bd4 <HAL_SPI_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002560:	f000 f93e 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200001c4 	.word	0x200001c4
 800256c:	40003800 	.word	0x40003800

08002570 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002574:	4b17      	ldr	r3, [pc, #92]	@ (80025d4 <MX_SPI5_Init+0x64>)
 8002576:	4a18      	ldr	r2, [pc, #96]	@ (80025d8 <MX_SPI5_Init+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800257a:	4b16      	ldr	r3, [pc, #88]	@ (80025d4 <MX_SPI5_Init+0x64>)
 800257c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002580:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002582:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <MX_SPI5_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002588:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <MX_SPI5_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800258e:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <MX_SPI5_Init+0x64>)
 8002590:	2202      	movs	r2, #2
 8002592:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002594:	4b0f      	ldr	r3, [pc, #60]	@ (80025d4 <MX_SPI5_Init+0x64>)
 8002596:	2201      	movs	r2, #1
 8002598:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800259a:	4b0e      	ldr	r3, [pc, #56]	@ (80025d4 <MX_SPI5_Init+0x64>)
 800259c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025a0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025a2:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <MX_SPI5_Init+0x64>)
 80025a4:	2208      	movs	r2, #8
 80025a6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025a8:	4b0a      	ldr	r3, [pc, #40]	@ (80025d4 <MX_SPI5_Init+0x64>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ae:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <MX_SPI5_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025b4:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <MX_SPI5_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <MX_SPI5_Init+0x64>)
 80025bc:	220a      	movs	r2, #10
 80025be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80025c0:	4804      	ldr	r0, [pc, #16]	@ (80025d4 <MX_SPI5_Init+0x64>)
 80025c2:	f003 fb07 	bl	8005bd4 <HAL_SPI_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80025cc:	f000 f908 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	2000021c 	.word	0x2000021c
 80025d8:	40015000 	.word	0x40015000

080025dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f0:	463b      	mov	r3, r7
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002670 <MX_TIM4_Init+0x94>)
 80025fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002674 <MX_TIM4_Init+0x98>)
 80025fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 80025fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <MX_TIM4_Init+0x94>)
 8002600:	225f      	movs	r2, #95	@ 0x5f
 8002602:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002604:	4b1a      	ldr	r3, [pc, #104]	@ (8002670 <MX_TIM4_Init+0x94>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800260a:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <MX_TIM4_Init+0x94>)
 800260c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002610:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002612:	4b17      	ldr	r3, [pc, #92]	@ (8002670 <MX_TIM4_Init+0x94>)
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002618:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <MX_TIM4_Init+0x94>)
 800261a:	2200      	movs	r2, #0
 800261c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800261e:	4814      	ldr	r0, [pc, #80]	@ (8002670 <MX_TIM4_Init+0x94>)
 8002620:	f004 f8ae 	bl	8006780 <HAL_TIM_Base_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800262a:	f000 f8d9 	bl	80027e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800262e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002632:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002634:	f107 0308 	add.w	r3, r7, #8
 8002638:	4619      	mov	r1, r3
 800263a:	480d      	ldr	r0, [pc, #52]	@ (8002670 <MX_TIM4_Init+0x94>)
 800263c:	f004 f971 	bl	8006922 <HAL_TIM_ConfigClockSource>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002646:	f000 f8cb 	bl	80027e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002652:	463b      	mov	r3, r7
 8002654:	4619      	mov	r1, r3
 8002656:	4806      	ldr	r0, [pc, #24]	@ (8002670 <MX_TIM4_Init+0x94>)
 8002658:	f004 fb50 	bl	8006cfc <HAL_TIMEx_MasterConfigSynchronization>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002662:	f000 f8bd 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000274 	.word	0x20000274
 8002674:	40000800 	.word	0x40000800

08002678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	@ 0x28
 800267c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	4b4f      	ldr	r3, [pc, #316]	@ (80027d0 <MX_GPIO_Init+0x158>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	4a4e      	ldr	r2, [pc, #312]	@ (80027d0 <MX_GPIO_Init+0x158>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6313      	str	r3, [r2, #48]	@ 0x30
 800269e:	4b4c      	ldr	r3, [pc, #304]	@ (80027d0 <MX_GPIO_Init+0x158>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	4b48      	ldr	r3, [pc, #288]	@ (80027d0 <MX_GPIO_Init+0x158>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	4a47      	ldr	r2, [pc, #284]	@ (80027d0 <MX_GPIO_Init+0x158>)
 80026b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ba:	4b45      	ldr	r3, [pc, #276]	@ (80027d0 <MX_GPIO_Init+0x158>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <MX_GPIO_Init+0x158>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	4a40      	ldr	r2, [pc, #256]	@ (80027d0 <MX_GPIO_Init+0x158>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d6:	4b3e      	ldr	r3, [pc, #248]	@ (80027d0 <MX_GPIO_Init+0x158>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	4b3a      	ldr	r3, [pc, #232]	@ (80027d0 <MX_GPIO_Init+0x158>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	4a39      	ldr	r2, [pc, #228]	@ (80027d0 <MX_GPIO_Init+0x158>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f2:	4b37      	ldr	r3, [pc, #220]	@ (80027d0 <MX_GPIO_Init+0x158>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80026fe:	2200      	movs	r2, #0
 8002700:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002704:	4833      	ldr	r0, [pc, #204]	@ (80027d4 <MX_GPIO_Init+0x15c>)
 8002706:	f001 faf3 	bl	8003cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TMC4671_CS_Pin|ADXL345_CS_Pin|LAN9252_CS_Pin, GPIO_PIN_RESET);
 800270a:	2200      	movs	r2, #0
 800270c:	f640 2108 	movw	r1, #2568	@ 0xa08
 8002710:	4831      	ldr	r0, [pc, #196]	@ (80027d8 <MX_GPIO_Init+0x160>)
 8002712:	f001 faed 	bl	8003cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CTRL_EN_Pin, GPIO_PIN_RESET);
 8002716:	2200      	movs	r2, #0
 8002718:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800271c:	482f      	ldr	r0, [pc, #188]	@ (80027dc <MX_GPIO_Init+0x164>)
 800271e:	f001 fae7 	bl	8003cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002722:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002728:	2301      	movs	r3, #1
 800272a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	4826      	ldr	r0, [pc, #152]	@ (80027d4 <MX_GPIO_Init+0x15c>)
 800273c:	f001 f954 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC4671_CS_Pin ADXL345_CS_Pin LAN9252_CS_Pin */
  GPIO_InitStruct.Pin = TMC4671_CS_Pin|ADXL345_CS_Pin|LAN9252_CS_Pin;
 8002740:	f640 2308 	movw	r3, #2568	@ 0xa08
 8002744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002746:	2301      	movs	r3, #1
 8002748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	481f      	ldr	r0, [pc, #124]	@ (80027d8 <MX_GPIO_Init+0x160>)
 800275a:	f001 f945 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC6100_CS_Pin */
  GPIO_InitStruct.Pin = TMC6100_CS_Pin;
 800275e:	2310      	movs	r3, #16
 8002760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMC6100_CS_GPIO_Port, &GPIO_InitStruct);
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	4619      	mov	r1, r3
 8002770:	4819      	ldr	r0, [pc, #100]	@ (80027d8 <MX_GPIO_Init+0x160>)
 8002772:	f001 f939 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC_STATUS_Pin */
  GPIO_InitStruct.Pin = TMC_STATUS_Pin;
 8002776:	2302      	movs	r3, #2
 8002778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMC_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	4814      	ldr	r0, [pc, #80]	@ (80027dc <MX_GPIO_Init+0x164>)
 800278a:	f001 f92d 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_INDEX_Pin */
  GPIO_InitStruct.Pin = ENC_INDEX_Pin;
 800278e:	2304      	movs	r3, #4
 8002790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002792:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_INDEX_GPIO_Port, &GPIO_InitStruct);
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4619      	mov	r1, r3
 80027a2:	480e      	ldr	r0, [pc, #56]	@ (80027dc <MX_GPIO_Init+0x164>)
 80027a4:	f001 f920 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTRL_EN_Pin */
  GPIO_InitStruct.Pin = CTRL_EN_Pin;
 80027a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ae:	2301      	movs	r3, #1
 80027b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CTRL_EN_GPIO_Port, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	4806      	ldr	r0, [pc, #24]	@ (80027dc <MX_GPIO_Init+0x164>)
 80027c2:	f001 f911 	bl	80039e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027c6:	bf00      	nop
 80027c8:	3728      	adds	r7, #40	@ 0x28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020000 	.word	0x40020000
 80027dc:	40020400 	.word	0x40020400

080027e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e4:	b672      	cpsid	i
}
 80027e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <Error_Handler+0x8>

080027ec <initMovingAverage>:
#include "moving_average.h"

void initMovingAverage(MovingAverage *mAvg) {
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MOVING_AVERAGE_LENGTH; i++) {
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e007      	b.n	800280a <initMovingAverage+0x1e>
        mAvg->buffer[i] = 0;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	2100      	movs	r1, #0
 8002800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < MOVING_AVERAGE_LENGTH; i++) {
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3301      	adds	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b0e      	cmp	r3, #14
 800280e:	ddf4      	ble.n	80027fa <initMovingAverage+0xe>
    }
    mAvg->counter = 0;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	879a      	strh	r2, [r3, #60]	@ 0x3c
    mAvg->sum = 0;
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    mAvg->out = 0;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <updateMovingAverage>:

void updateMovingAverage(MovingAverage *mAvg, uint32_t newValue) {
 8002836:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
    mAvg->sum -= mAvg->buffer[mAvg->counter];
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	8f89      	ldrh	r1, [r1, #60]	@ 0x3c
 800284c:	4608      	mov	r0, r1
 800284e:	68f9      	ldr	r1, [r7, #12]
 8002850:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002854:	2000      	movs	r0, #0
 8002856:	4688      	mov	r8, r1
 8002858:	4681      	mov	r9, r0
 800285a:	ebb2 0108 	subs.w	r1, r2, r8
 800285e:	6039      	str	r1, [r7, #0]
 8002860:	eb63 0309 	sbc.w	r3, r3, r9
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	e9d7 1200 	ldrd	r1, r2, [r7]
 800286c:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
    mAvg->buffer[mAvg->counter] = newValue;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002874:	4619      	mov	r1, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    mAvg->sum += newValue;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	2000      	movs	r0, #0
 8002888:	460c      	mov	r4, r1
 800288a:	4605      	mov	r5, r0
 800288c:	eb12 0a04 	adds.w	sl, r2, r4
 8002890:	eb43 0b05 	adc.w	fp, r3, r5
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	e9c3 ab12 	strd	sl, fp, [r3, #72]	@ 0x48

    mAvg->counter++;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800289e:	3301      	adds	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
    if (mAvg->counter >= MOVING_AVERAGE_LENGTH) {
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80028aa:	2b0e      	cmp	r3, #14
 80028ac:	d902      	bls.n	80028b4 <updateMovingAverage+0x7e>
        mAvg->counter = 0;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
    }

    mAvg->out = mAvg->sum / MOVING_AVERAGE_LENGTH;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80028ba:	f04f 020f 	mov.w	r2, #15
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	f7fe f8f3 	bl	8000aac <__aeabi_uldivmod>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080028d8 <pcap_init>:
uint32_t pcap_capval_check1;
uint32_t pcap_capval_check2;
uint32_t pcap_capval_avg;

// init / check the pcap interface on I2C, return true if init ok
bool pcap_init(){
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af02      	add	r7, sp, #8
	uint8_t buf[10] = {0};
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret;
    // read and check TEST data 1 byte
	buf[0] = PCAP_TEST_ADDR;
 80028ec:	237e      	movs	r3, #126	@ 0x7e
 80028ee:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 80028f0:	1d3a      	adds	r2, r7, #4
 80028f2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2301      	movs	r3, #1
 80028fa:	2150      	movs	r1, #80	@ 0x50
 80028fc:	481c      	ldr	r0, [pc, #112]	@ (8002970 <pcap_init+0x98>)
 80028fe:	f001 fb55 	bl	8003fac <HAL_I2C_Master_Transmit>
 8002902:	4603      	mov	r3, r0
 8002904:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d006      	beq.n	800291a <pcap_init+0x42>
		printf("Error sending Pcap test command, code = %d\n", ret);
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	4619      	mov	r1, r3
 8002910:	4818      	ldr	r0, [pc, #96]	@ (8002974 <pcap_init+0x9c>)
 8002912:	f004 fb23 	bl	8006f5c <iprintf>
		return false;
 8002916:	2300      	movs	r3, #0
 8002918:	e025      	b.n	8002966 <pcap_init+0x8e>
	}else{
		ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 800291a:	1d3a      	adds	r2, r7, #4
 800291c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2301      	movs	r3, #1
 8002924:	2150      	movs	r1, #80	@ 0x50
 8002926:	4812      	ldr	r0, [pc, #72]	@ (8002970 <pcap_init+0x98>)
 8002928:	f001 fc3e 	bl	80041a8 <HAL_I2C_Master_Receive>
 800292c:	4603      	mov	r3, r0
 800292e:	73fb      	strb	r3, [r7, #15]
		if(ret != HAL_OK){
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d006      	beq.n	8002944 <pcap_init+0x6c>
			printf("Bad response while reading Pcap test command, bytes received = %d\n", ret);
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	4619      	mov	r1, r3
 800293a:	480f      	ldr	r0, [pc, #60]	@ (8002978 <pcap_init+0xa0>)
 800293c:	f004 fb0e 	bl	8006f5c <iprintf>
			return false;
 8002940:	2300      	movs	r3, #0
 8002942:	e010      	b.n	8002966 <pcap_init+0x8e>
		}else{
			if(buf[0] != PCAP_TEST_DATA){
 8002944:	793b      	ldrb	r3, [r7, #4]
 8002946:	2b11      	cmp	r3, #17
 8002948:	d006      	beq.n	8002958 <pcap_init+0x80>
				printf("Bad response received from Pcap test command, data received = %x\n", buf[0]);
 800294a:	793b      	ldrb	r3, [r7, #4]
 800294c:	4619      	mov	r1, r3
 800294e:	480b      	ldr	r0, [pc, #44]	@ (800297c <pcap_init+0xa4>)
 8002950:	f004 fb04 	bl	8006f5c <iprintf>
				return false;
 8002954:	2300      	movs	r3, #0
 8002956:	e006      	b.n	8002966 <pcap_init+0x8e>
			}
		}
	}
	initMovingAverage(&mAvg);
 8002958:	4809      	ldr	r0, [pc, #36]	@ (8002980 <pcap_init+0xa8>)
 800295a:	f7ff ff47 	bl	80027ec <initMovingAverage>


	printf("Pcap test command succeeded\n");
 800295e:	4809      	ldr	r0, [pc, #36]	@ (8002984 <pcap_init+0xac>)
 8002960:	f004 fb64 	bl	800702c <puts>
	return true;
 8002964:	2301      	movs	r3, #1
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200000c4 	.word	0x200000c4
 8002974:	08007d0c 	.word	0x08007d0c
 8002978:	08007d38 	.word	0x08007d38
 800297c:	08007d7c 	.word	0x08007d7c
 8002980:	20000350 	.word	0x20000350
 8002984:	08007dc0 	.word	0x08007dc0

08002988 <pcap_scan>:

// one pcap scan - get sts, cap, temp values
PcapErrorStatus pcap_scan(){
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af02      	add	r7, sp, #8
	uint8_t buf[10] = {0};
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret;
	PcapErrorStatus errorStatus = PCAP_NO_ERROR;
 800299a:	2300      	movs	r3, #0
 800299c:	73fb      	strb	r3, [r7, #15]

	// read and display error status 2 bytes
	buf[0] = PCAP_STS_ADDR;
 800299e:	2361      	movs	r3, #97	@ 0x61
 80029a0:	703b      	strb	r3, [r7, #0]
	ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 80029a2:	463a      	mov	r2, r7
 80029a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2301      	movs	r3, #1
 80029ac:	2150      	movs	r1, #80	@ 0x50
 80029ae:	48a5      	ldr	r0, [pc, #660]	@ (8002c44 <pcap_scan+0x2bc>)
 80029b0:	f001 fafc 	bl	8003fac <HAL_I2C_Master_Transmit>
 80029b4:	4603      	mov	r3, r0
 80029b6:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK){
 80029b8:	7bbb      	ldrb	r3, [r7, #14]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <pcap_scan+0x4a>
		printf("Error sending RD STS command, code = %d\n", ret);
 80029be:	7bbb      	ldrb	r3, [r7, #14]
 80029c0:	4619      	mov	r1, r3
 80029c2:	48a1      	ldr	r0, [pc, #644]	@ (8002c48 <pcap_scan+0x2c0>)
 80029c4:	f004 faca 	bl	8006f5c <iprintf>
		errorStatus |= PCAP_COMM_ERROR;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
		return;
 80029d0:	e133      	b.n	8002c3a <pcap_scan+0x2b2>
	}else{
		ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 2, PCAP_MAX_DELAY);
 80029d2:	463a      	mov	r2, r7
 80029d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2302      	movs	r3, #2
 80029dc:	2150      	movs	r1, #80	@ 0x50
 80029de:	4899      	ldr	r0, [pc, #612]	@ (8002c44 <pcap_scan+0x2bc>)
 80029e0:	f001 fbe2 	bl	80041a8 <HAL_I2C_Master_Receive>
 80029e4:	4603      	mov	r3, r0
 80029e6:	73bb      	strb	r3, [r7, #14]
		if(ret != HAL_OK){
 80029e8:	7bbb      	ldrb	r3, [r7, #14]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <pcap_scan+0x7a>
			printf("Bad response while reading RD STS command, bytes received = %d\n", ret);
 80029ee:	7bbb      	ldrb	r3, [r7, #14]
 80029f0:	4619      	mov	r1, r3
 80029f2:	4896      	ldr	r0, [pc, #600]	@ (8002c4c <pcap_scan+0x2c4>)
 80029f4:	f004 fab2 	bl	8006f5c <iprintf>
			errorStatus |= PCAP_COMM_ERROR;
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
			return;
 8002a00:	e11b      	b.n	8002c3a <pcap_scan+0x2b2>
		}else{
			uint16_t pcap_sts = ((uint16_t)buf[1] << 8) | (uint16_t)buf[0];
 8002a02:	787b      	ldrb	r3, [r7, #1]
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	b21a      	sxth	r2, r3
 8002a08:	783b      	ldrb	r3, [r7, #0]
 8002a0a:	b21b      	sxth	r3, r3
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b21b      	sxth	r3, r3
 8002a10:	81bb      	strh	r3, [r7, #12]
			errorStatus = PCAP_NO_ERROR;
 8002a12:	2300      	movs	r3, #0
 8002a14:	73fb      	strb	r3, [r7, #15]
			printf("Status = %x\n", pcap_sts);
 8002a16:	89bb      	ldrh	r3, [r7, #12]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	488d      	ldr	r0, [pc, #564]	@ (8002c50 <pcap_scan+0x2c8>)
 8002a1c:	f004 fa9e 	bl	8006f5c <iprintf>
		}
	}

	// read and display cap value 4 bytes
	buf[0] = PCAP_CAP_ADDR;
 8002a20:	2340      	movs	r3, #64	@ 0x40
 8002a22:	703b      	strb	r3, [r7, #0]
	buf[1] = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	707b      	strb	r3, [r7, #1]
	ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 8002a28:	463a      	mov	r2, r7
 8002a2a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2301      	movs	r3, #1
 8002a32:	2150      	movs	r1, #80	@ 0x50
 8002a34:	4883      	ldr	r0, [pc, #524]	@ (8002c44 <pcap_scan+0x2bc>)
 8002a36:	f001 fab9 	bl	8003fac <HAL_I2C_Master_Transmit>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK){
 8002a3e:	7bbb      	ldrb	r3, [r7, #14]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00c      	beq.n	8002a5e <pcap_scan+0xd6>
		printf("Error sending RD CAP command, code = %d\n", ret);
 8002a44:	7bbb      	ldrb	r3, [r7, #14]
 8002a46:	4619      	mov	r1, r3
 8002a48:	4882      	ldr	r0, [pc, #520]	@ (8002c54 <pcap_scan+0x2cc>)
 8002a4a:	f004 fa87 	bl	8006f5c <iprintf>
		Etc_Buffer_In.LANByte[5] |= PCAP_COMM_ERROR;
 8002a4e:	4b82      	ldr	r3, [pc, #520]	@ (8002c58 <pcap_scan+0x2d0>)
 8002a50:	795b      	ldrb	r3, [r3, #5]
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	4b7f      	ldr	r3, [pc, #508]	@ (8002c58 <pcap_scan+0x2d0>)
 8002a5a:	715a      	strb	r2, [r3, #5]
		return;
 8002a5c:	e0ed      	b.n	8002c3a <pcap_scan+0x2b2>
	}else{
		ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 4, PCAP_MAX_DELAY);
 8002a5e:	463a      	mov	r2, r7
 8002a60:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2304      	movs	r3, #4
 8002a68:	2150      	movs	r1, #80	@ 0x50
 8002a6a:	4876      	ldr	r0, [pc, #472]	@ (8002c44 <pcap_scan+0x2bc>)
 8002a6c:	f001 fb9c 	bl	80041a8 <HAL_I2C_Master_Receive>
 8002a70:	4603      	mov	r3, r0
 8002a72:	73bb      	strb	r3, [r7, #14]
		if(ret != HAL_OK){
 8002a74:	7bbb      	ldrb	r3, [r7, #14]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <pcap_scan+0x106>
			printf("Bad response while reading RD CAP command, bytes received = %d\n", ret);
 8002a7a:	7bbb      	ldrb	r3, [r7, #14]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4877      	ldr	r0, [pc, #476]	@ (8002c5c <pcap_scan+0x2d4>)
 8002a80:	f004 fa6c 	bl	8006f5c <iprintf>
			errorStatus |= PCAP_COMM_ERROR;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
			return;
 8002a8c:	e0d5      	b.n	8002c3a <pcap_scan+0x2b2>
		}else{
			pcap_capval_check1 = ((uint32_t)buf[3] << 24) | ((uint32_t)buf[2] << 16) | ((uint32_t)buf[1] << 8) | (uint32_t)buf[0];
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	061a      	lsls	r2, r3, #24
 8002a92:	78bb      	ldrb	r3, [r7, #2]
 8002a94:	041b      	lsls	r3, r3, #16
 8002a96:	431a      	orrs	r2, r3
 8002a98:	787b      	ldrb	r3, [r7, #1]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	783a      	ldrb	r2, [r7, #0]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	4a6f      	ldr	r2, [pc, #444]	@ (8002c60 <pcap_scan+0x2d8>)
 8002aa4:	6013      	str	r3, [r2, #0]

		   delay_us (DEBOUNCE_TIME_US);
 8002aa6:	2096      	movs	r0, #150	@ 0x96
 8002aa8:	f000 f8ee 	bl	8002c88 <delay_us>

			buf[0] = PCAP_CAP_ADDR;
 8002aac:	2340      	movs	r3, #64	@ 0x40
 8002aae:	703b      	strb	r3, [r7, #0]
			buf[1] = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	707b      	strb	r3, [r7, #1]
			ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 8002ab4:	463a      	mov	r2, r7
 8002ab6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2301      	movs	r3, #1
 8002abe:	2150      	movs	r1, #80	@ 0x50
 8002ac0:	4860      	ldr	r0, [pc, #384]	@ (8002c44 <pcap_scan+0x2bc>)
 8002ac2:	f001 fa73 	bl	8003fac <HAL_I2C_Master_Transmit>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	73bb      	strb	r3, [r7, #14]
			if(ret != HAL_OK){
 8002aca:	7bbb      	ldrb	r3, [r7, #14]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d009      	beq.n	8002ae4 <pcap_scan+0x15c>
				printf("Error sending RD CAP command, code = %d\n", ret);
 8002ad0:	7bbb      	ldrb	r3, [r7, #14]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	485f      	ldr	r0, [pc, #380]	@ (8002c54 <pcap_scan+0x2cc>)
 8002ad6:	f004 fa41 	bl	8006f5c <iprintf>
				errorStatus |= PCAP_COMM_ERROR;
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
				return;
 8002ae2:	e0aa      	b.n	8002c3a <pcap_scan+0x2b2>
			}else{
				ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 4, PCAP_MAX_DELAY);
 8002ae4:	463a      	mov	r2, r7
 8002ae6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2304      	movs	r3, #4
 8002aee:	2150      	movs	r1, #80	@ 0x50
 8002af0:	4854      	ldr	r0, [pc, #336]	@ (8002c44 <pcap_scan+0x2bc>)
 8002af2:	f001 fb59 	bl	80041a8 <HAL_I2C_Master_Receive>
 8002af6:	4603      	mov	r3, r0
 8002af8:	73bb      	strb	r3, [r7, #14]
				if(ret != HAL_OK){
 8002afa:	7bbb      	ldrb	r3, [r7, #14]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d009      	beq.n	8002b14 <pcap_scan+0x18c>
					printf("Bad response while reading RD CAP command, bytes received = %d\n", ret);
 8002b00:	7bbb      	ldrb	r3, [r7, #14]
 8002b02:	4619      	mov	r1, r3
 8002b04:	4855      	ldr	r0, [pc, #340]	@ (8002c5c <pcap_scan+0x2d4>)
 8002b06:	f004 fa29 	bl	8006f5c <iprintf>
					errorStatus |= PCAP_COMM_ERROR;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
					return;
 8002b12:	e092      	b.n	8002c3a <pcap_scan+0x2b2>
				}else{
					pcap_capval_check2 = ((uint32_t)buf[3] << 24) | ((uint32_t)buf[2] << 16) | ((uint32_t)buf[1] << 8) | (uint32_t)buf[0];
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	061a      	lsls	r2, r3, #24
 8002b18:	78bb      	ldrb	r3, [r7, #2]
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	787b      	ldrb	r3, [r7, #1]
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	4313      	orrs	r3, r2
 8002b24:	783a      	ldrb	r2, [r7, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	4a4e      	ldr	r2, [pc, #312]	@ (8002c64 <pcap_scan+0x2dc>)
 8002b2a:	6013      	str	r3, [r2, #0]

					if(abs(pcap_capval_check1 - pcap_capval_check2) < DEBOUNCE_CAP_TOLERANCE){
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c60 <pcap_scan+0x2d8>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b4c      	ldr	r3, [pc, #304]	@ (8002c64 <pcap_scan+0x2dc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b4b      	ldr	r3, [pc, #300]	@ (8002c68 <pcap_scan+0x2e0>)
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	db33      	blt.n	8002ba6 <pcap_scan+0x21e>
 8002b3e:	4b48      	ldr	r3, [pc, #288]	@ (8002c60 <pcap_scan+0x2d8>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b48      	ldr	r3, [pc, #288]	@ (8002c64 <pcap_scan+0x2dc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b48      	ldr	r3, [pc, #288]	@ (8002c6c <pcap_scan+0x2e4>)
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	dc2a      	bgt.n	8002ba6 <pcap_scan+0x21e>
						pcap_capval = pcap_capval_check2;
 8002b50:	4b44      	ldr	r3, [pc, #272]	@ (8002c64 <pcap_scan+0x2dc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a46      	ldr	r2, [pc, #280]	@ (8002c70 <pcap_scan+0x2e8>)
 8002b56:	6013      	str	r3, [r2, #0]

						if (pcap_capval > DEBOUNCE_CAP_TOLERANCE){
 8002b58:	4b45      	ldr	r3, [pc, #276]	@ (8002c70 <pcap_scan+0x2e8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a45      	ldr	r2, [pc, #276]	@ (8002c74 <pcap_scan+0x2ec>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d904      	bls.n	8002b6c <pcap_scan+0x1e4>
							Etc_Buffer_In.LANLong[2] = pcap_capval;
 8002b62:	4b43      	ldr	r3, [pc, #268]	@ (8002c70 <pcap_scan+0x2e8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a3c      	ldr	r2, [pc, #240]	@ (8002c58 <pcap_scan+0x2d0>)
 8002b68:	6093      	str	r3, [r2, #8]
 8002b6a:	e01c      	b.n	8002ba6 <pcap_scan+0x21e>
						}
						else {
							updateMovingAverage(&mAvg, pcap_capval);
 8002b6c:	4b40      	ldr	r3, [pc, #256]	@ (8002c70 <pcap_scan+0x2e8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4619      	mov	r1, r3
 8002b72:	4841      	ldr	r0, [pc, #260]	@ (8002c78 <pcap_scan+0x2f0>)
 8002b74:	f7ff fe5f 	bl	8002836 <updateMovingAverage>
							pcap_capval_avg = mAvg.out;
 8002b78:	4b3f      	ldr	r3, [pc, #252]	@ (8002c78 <pcap_scan+0x2f0>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	4a3f      	ldr	r2, [pc, #252]	@ (8002c7c <pcap_scan+0x2f4>)
 8002b7e:	6013      	str	r3, [r2, #0]

							//Etc_Buffer_In.LANLong[6] = pcap_capval;
							Etc_Buffer_In.LANLong[2] = pcap_capval_avg;
 8002b80:	4b3e      	ldr	r3, [pc, #248]	@ (8002c7c <pcap_scan+0x2f4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a34      	ldr	r2, [pc, #208]	@ (8002c58 <pcap_scan+0x2d0>)
 8002b86:	6093      	str	r3, [r2, #8]

							if (pcap_capval_avg == PCAP_TIP_TOUCH) {
 8002b88:	4b3c      	ldr	r3, [pc, #240]	@ (8002c7c <pcap_scan+0x2f4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d103      	bne.n	8002b9a <pcap_scan+0x212>
								errorStatus |= PCAP_TIP_TOUCH_ERROR;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	73fb      	strb	r3, [r7, #15]
							}
							printf("Filtered Capacitive Value = %lu\n", pcap_capval_avg);
 8002b9a:	4b38      	ldr	r3, [pc, #224]	@ (8002c7c <pcap_scan+0x2f4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4837      	ldr	r0, [pc, #220]	@ (8002c80 <pcap_scan+0x2f8>)
 8002ba2:	f004 f9db 	bl	8006f5c <iprintf>
		}

	}

	//read and display temperature value 4 bytes
	buf[0] = PCAP_TEMP_ADDR;
 8002ba6:	2358      	movs	r3, #88	@ 0x58
 8002ba8:	703b      	strb	r3, [r7, #0]
	buf[1] = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	707b      	strb	r3, [r7, #1]
	buf[2] = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	70bb      	strb	r3, [r7, #2]
	buf[3] = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	70fb      	strb	r3, [r7, #3]
	ret = HAL_I2C_Master_Transmit(&PCAP_PORT, PCAP_ADDR, buf, 1, PCAP_MAX_DELAY);
 8002bb6:	463a      	mov	r2, r7
 8002bb8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	2150      	movs	r1, #80	@ 0x50
 8002bc2:	4820      	ldr	r0, [pc, #128]	@ (8002c44 <pcap_scan+0x2bc>)
 8002bc4:	f001 f9f2 	bl	8003fac <HAL_I2C_Master_Transmit>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK){
 8002bcc:	7bbb      	ldrb	r3, [r7, #14]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <pcap_scan+0x25e>
		printf("Error sending RD CAP command, code = %d\n", ret);
 8002bd2:	7bbb      	ldrb	r3, [r7, #14]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	481f      	ldr	r0, [pc, #124]	@ (8002c54 <pcap_scan+0x2cc>)
 8002bd8:	f004 f9c0 	bl	8006f5c <iprintf>
		errorStatus |= PCAP_COMM_ERROR;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
		return;
 8002be4:	e029      	b.n	8002c3a <pcap_scan+0x2b2>
	}else{
		ret = HAL_I2C_Master_Receive(&PCAP_PORT, PCAP_ADDR, buf, 4, PCAP_MAX_DELAY);
 8002be6:	463a      	mov	r2, r7
 8002be8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2304      	movs	r3, #4
 8002bf0:	2150      	movs	r1, #80	@ 0x50
 8002bf2:	4814      	ldr	r0, [pc, #80]	@ (8002c44 <pcap_scan+0x2bc>)
 8002bf4:	f001 fad8 	bl	80041a8 <HAL_I2C_Master_Receive>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73bb      	strb	r3, [r7, #14]
		if(ret != HAL_OK){
 8002bfc:	7bbb      	ldrb	r3, [r7, #14]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <pcap_scan+0x28e>
			printf("Bad response while reading RD CAP command, bytes received = %d\n", ret);
 8002c02:	7bbb      	ldrb	r3, [r7, #14]
 8002c04:	4619      	mov	r1, r3
 8002c06:	4815      	ldr	r0, [pc, #84]	@ (8002c5c <pcap_scan+0x2d4>)
 8002c08:	f004 f9a8 	bl	8006f5c <iprintf>
			errorStatus |= PCAP_COMM_ERROR;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
			return;
 8002c14:	e011      	b.n	8002c3a <pcap_scan+0x2b2>
		}else{
			pcap_tempval = ((uint32_t)buf[3] << 24) | ((uint32_t)buf[2] << 16) | ((uint32_t)buf[1] << 8) | (uint32_t)buf[0];
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	061a      	lsls	r2, r3, #24
 8002c1a:	78bb      	ldrb	r3, [r7, #2]
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	787b      	ldrb	r3, [r7, #1]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	4313      	orrs	r3, r2
 8002c26:	783a      	ldrb	r2, [r7, #0]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	4a16      	ldr	r2, [pc, #88]	@ (8002c84 <pcap_scan+0x2fc>)
 8002c2c:	6013      	str	r3, [r2, #0]
			Etc_Buffer_In.LANLong[3] = pcap_tempval;
 8002c2e:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <pcap_scan+0x2fc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a09      	ldr	r2, [pc, #36]	@ (8002c58 <pcap_scan+0x2d0>)
 8002c34:	60d3      	str	r3, [r2, #12]
			// printf("Temperature Value = %lu\n", pcap_tempval);
		}
	}
	return errorStatus;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	e7ff      	b.n	8002c3a <pcap_scan+0x2b2>
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200000c4 	.word	0x200000c4
 8002c48:	08007ddc 	.word	0x08007ddc
 8002c4c:	08007e08 	.word	0x08007e08
 8002c50:	08007e48 	.word	0x08007e48
 8002c54:	08007e58 	.word	0x08007e58
 8002c58:	200000a4 	.word	0x200000a4
 8002c5c:	08007e84 	.word	0x08007e84
 8002c60:	200003a8 	.word	0x200003a8
 8002c64:	200003ac 	.word	0x200003ac
 8002c68:	fa0a1f01 	.word	0xfa0a1f01
 8002c6c:	05f5e0ff 	.word	0x05f5e0ff
 8002c70:	200003a0 	.word	0x200003a0
 8002c74:	05f5e100 	.word	0x05f5e100
 8002c78:	20000350 	.word	0x20000350
 8002c7c:	200003b0 	.word	0x200003b0
 8002c80:	08007ec4 	.word	0x08007ec4
 8002c84:	200003a4 	.word	0x200003a4

08002c88 <delay_us>:


//This function is used to create delay in micro second.
void delay_us(uint16_t us) {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&PCAP_TIMER);
 8002c92:	480a      	ldr	r0, [pc, #40]	@ (8002cbc <delay_us+0x34>)
 8002c94:	f003 fdc4 	bl	8006820 <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COUNTER(&PCAP_TIMER, 0);  // set the counter value a 0
 8002c98:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <delay_us+0x34>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	625a      	str	r2, [r3, #36]	@ 0x24

	while (__HAL_TIM_GET_COUNTER(&PCAP_TIMER) < us);  // wait for the counter to reach the us input in the parameter
 8002ca0:	bf00      	nop
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <delay_us+0x34>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d3f9      	bcc.n	8002ca2 <delay_us+0x1a>

	HAL_TIM_Base_Stop(&PCAP_TIMER);
 8002cae:	4803      	ldr	r0, [pc, #12]	@ (8002cbc <delay_us+0x34>)
 8002cb0:	f003 fe10 	bl	80068d4 <HAL_TIM_Base_Stop>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000274 	.word	0x20000274

08002cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	4b10      	ldr	r3, [pc, #64]	@ (8002d0c <HAL_MspInit+0x4c>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	4a0f      	ldr	r2, [pc, #60]	@ (8002d0c <HAL_MspInit+0x4c>)
 8002cd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <HAL_MspInit+0x4c>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <HAL_MspInit+0x4c>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	4a08      	ldr	r2, [pc, #32]	@ (8002d0c <HAL_MspInit+0x4c>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_MspInit+0x4c>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800

08002d10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	@ 0x30
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e1c <HAL_I2C_MspInit+0x10c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d12c      	bne.n	8002d8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	4b3a      	ldr	r3, [pc, #232]	@ (8002e20 <HAL_I2C_MspInit+0x110>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	4a39      	ldr	r2, [pc, #228]	@ (8002e20 <HAL_I2C_MspInit+0x110>)
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d42:	4b37      	ldr	r3, [pc, #220]	@ (8002e20 <HAL_I2C_MspInit+0x110>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = PCAP_SCL_Pin|PCAP_SDA_Pin;
 8002d4e:	23c0      	movs	r3, #192	@ 0xc0
 8002d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d52:	2312      	movs	r3, #18
 8002d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d5e:	2304      	movs	r3, #4
 8002d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d62:	f107 031c 	add.w	r3, r7, #28
 8002d66:	4619      	mov	r1, r3
 8002d68:	482e      	ldr	r0, [pc, #184]	@ (8002e24 <HAL_I2C_MspInit+0x114>)
 8002d6a:	f000 fe3d 	bl	80039e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	4b2b      	ldr	r3, [pc, #172]	@ (8002e20 <HAL_I2C_MspInit+0x110>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	4a2a      	ldr	r2, [pc, #168]	@ (8002e20 <HAL_I2C_MspInit+0x110>)
 8002d78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d7e:	4b28      	ldr	r3, [pc, #160]	@ (8002e20 <HAL_I2C_MspInit+0x110>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d8a:	e042      	b.n	8002e12 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a25      	ldr	r2, [pc, #148]	@ (8002e28 <HAL_I2C_MspInit+0x118>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d13d      	bne.n	8002e12 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	4b21      	ldr	r3, [pc, #132]	@ (8002e20 <HAL_I2C_MspInit+0x110>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	4a20      	ldr	r2, [pc, #128]	@ (8002e20 <HAL_I2C_MspInit+0x110>)
 8002da0:	f043 0302 	orr.w	r3, r3, #2
 8002da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e20 <HAL_I2C_MspInit+0x110>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BRL64WE2_SCL_Pin;
 8002db2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002db8:	2312      	movs	r3, #18
 8002dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BRL64WE2_SCL_GPIO_Port, &GPIO_InitStruct);
 8002dc8:	f107 031c 	add.w	r3, r7, #28
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4815      	ldr	r0, [pc, #84]	@ (8002e24 <HAL_I2C_MspInit+0x114>)
 8002dd0:	f000 fe0a 	bl	80039e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BRL64WE2_SDA_Pin;
 8002dd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dda:	2312      	movs	r3, #18
 8002ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de2:	2303      	movs	r3, #3
 8002de4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002de6:	2309      	movs	r3, #9
 8002de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BRL64WE2_SDA_GPIO_Port, &GPIO_InitStruct);
 8002dea:	f107 031c 	add.w	r3, r7, #28
 8002dee:	4619      	mov	r1, r3
 8002df0:	480c      	ldr	r0, [pc, #48]	@ (8002e24 <HAL_I2C_MspInit+0x114>)
 8002df2:	f000 fdf9 	bl	80039e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <HAL_I2C_MspInit+0x110>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	4a08      	ldr	r2, [pc, #32]	@ (8002e20 <HAL_I2C_MspInit+0x110>)
 8002e00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e06:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <HAL_I2C_MspInit+0x110>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
}
 8002e12:	bf00      	nop
 8002e14:	3730      	adds	r7, #48	@ 0x30
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40005400 	.word	0x40005400
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40020400 	.word	0x40020400
 8002e28:	40005800 	.word	0x40005800

08002e2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b090      	sub	sp, #64	@ 0x40
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6a      	ldr	r2, [pc, #424]	@ (8002ff4 <HAL_SPI_MspInit+0x1c8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d14a      	bne.n	8002ee4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e52:	4b69      	ldr	r3, [pc, #420]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	4a68      	ldr	r2, [pc, #416]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002e58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e5e:	4b66      	ldr	r3, [pc, #408]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6e:	4b62      	ldr	r3, [pc, #392]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	4a61      	ldr	r2, [pc, #388]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	623b      	str	r3, [r7, #32]
 8002e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e96:	4b58      	ldr	r3, [pc, #352]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TMC_CLK_Pin;
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eb2:	2305      	movs	r3, #5
 8002eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TMC_CLK_GPIO_Port, &GPIO_InitStruct);
 8002eb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eba:	4619      	mov	r1, r3
 8002ebc:	484f      	ldr	r0, [pc, #316]	@ (8002ffc <HAL_SPI_MspInit+0x1d0>)
 8002ebe:	f000 fd93 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TMC_MISO_Pin|TMC_MOSI_Pin;
 8002ec2:	2330      	movs	r3, #48	@ 0x30
 8002ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ed2:	2305      	movs	r3, #5
 8002ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eda:	4619      	mov	r1, r3
 8002edc:	4848      	ldr	r0, [pc, #288]	@ (8003000 <HAL_SPI_MspInit+0x1d4>)
 8002ede:	f000 fd83 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002ee2:	e082      	b.n	8002fea <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a46      	ldr	r2, [pc, #280]	@ (8003004 <HAL_SPI_MspInit+0x1d8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d12d      	bne.n	8002f4a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	4b41      	ldr	r3, [pc, #260]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	4a40      	ldr	r2, [pc, #256]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002efe:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	4a39      	ldr	r2, [pc, #228]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1a:	4b37      	ldr	r3, [pc, #220]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ADXL345_CLK_Pin|ADXL345_MISO_Pin|ADXL345_MOSI_Pin;
 8002f26:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f34:	2303      	movs	r3, #3
 8002f36:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f38:	2305      	movs	r3, #5
 8002f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f40:	4619      	mov	r1, r3
 8002f42:	482f      	ldr	r0, [pc, #188]	@ (8003000 <HAL_SPI_MspInit+0x1d4>)
 8002f44:	f000 fd50 	bl	80039e8 <HAL_GPIO_Init>
}
 8002f48:	e04f      	b.n	8002fea <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI5)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2e      	ldr	r2, [pc, #184]	@ (8003008 <HAL_SPI_MspInit+0x1dc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d14a      	bne.n	8002fea <HAL_SPI_MspInit+0x1be>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	4b27      	ldr	r3, [pc, #156]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5c:	4a26      	ldr	r2, [pc, #152]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f62:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f64:	4b24      	ldr	r3, [pc, #144]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	4b20      	ldr	r3, [pc, #128]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f78:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f7a:	f043 0302 	orr.w	r3, r3, #2
 8002f7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f80:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	4b19      	ldr	r3, [pc, #100]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f94:	4a18      	ldr	r2, [pc, #96]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9c:	4b16      	ldr	r3, [pc, #88]	@ (8002ff8 <HAL_SPI_MspInit+0x1cc>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LAN9252_SCK_Pin;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8002fb8:	2306      	movs	r3, #6
 8002fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(LAN9252_SCK_GPIO_Port, &GPIO_InitStruct);
 8002fbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	480f      	ldr	r0, [pc, #60]	@ (8003000 <HAL_SPI_MspInit+0x1d4>)
 8002fc4:	f000 fd10 	bl	80039e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LAN9252_MOSI_Pin|LAN9252_MISO_Pin;
 8002fc8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8002fda:	2306      	movs	r3, #6
 8002fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4805      	ldr	r0, [pc, #20]	@ (8002ffc <HAL_SPI_MspInit+0x1d0>)
 8002fe6:	f000 fcff 	bl	80039e8 <HAL_GPIO_Init>
}
 8002fea:	bf00      	nop
 8002fec:	3740      	adds	r7, #64	@ 0x40
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40013000 	.word	0x40013000
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40020000 	.word	0x40020000
 8003000:	40020400 	.word	0x40020400
 8003004:	40003800 	.word	0x40003800
 8003008:	40015000 	.word	0x40015000

0800300c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0b      	ldr	r2, [pc, #44]	@ (8003048 <HAL_TIM_Base_MspInit+0x3c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10d      	bne.n	800303a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <HAL_TIM_Base_MspInit+0x40>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	4a09      	ldr	r2, [pc, #36]	@ (800304c <HAL_TIM_Base_MspInit+0x40>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	6413      	str	r3, [r2, #64]	@ 0x40
 800302e:	4b07      	ldr	r3, [pc, #28]	@ (800304c <HAL_TIM_Base_MspInit+0x40>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40000800 	.word	0x40000800
 800304c:	40023800 	.word	0x40023800

08003050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003054:	bf00      	nop
 8003056:	e7fd      	b.n	8003054 <NMI_Handler+0x4>

08003058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <HardFault_Handler+0x4>

08003060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <MemManage_Handler+0x4>

08003068 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <BusFault_Handler+0x4>

08003070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <UsageFault_Handler+0x4>

08003078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030a6:	f000 fb75 	bl	8003794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_read>:
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b086      	sub	sp, #24
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	e00a      	b.n	80030d6 <_read+0x28>
 80030c0:	f3af 8000 	nop.w
 80030c4:	4601      	mov	r1, r0
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	60ba      	str	r2, [r7, #8]
 80030cc:	b2ca      	uxtb	r2, r1
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3301      	adds	r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	429a      	cmp	r2, r3
 80030dc:	dbf0      	blt.n	80030c0 <_read+0x12>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <_write>:
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	e009      	b.n	800310e <_write+0x26>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	60ba      	str	r2, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f3af 8000 	nop.w
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	3301      	adds	r3, #1
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	429a      	cmp	r2, r3
 8003114:	dbf1      	blt.n	80030fa <_write+0x12>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <_close>:
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	f04f 33ff 	mov.w	r3, #4294967295
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <_fstat>:
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	2300      	movs	r3, #0
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <_isatty>:
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	2301      	movs	r3, #1
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <_lseek>:
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	2300      	movs	r3, #0
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <_sbrk>:
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	4a14      	ldr	r2, [pc, #80]	@ (80031e4 <_sbrk+0x5c>)
 8003192:	4b15      	ldr	r3, [pc, #84]	@ (80031e8 <_sbrk+0x60>)
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	4b13      	ldr	r3, [pc, #76]	@ (80031ec <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <_sbrk+0x22>
 80031a4:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <_sbrk+0x64>)
 80031a6:	4a12      	ldr	r2, [pc, #72]	@ (80031f0 <_sbrk+0x68>)
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	4b10      	ldr	r3, [pc, #64]	@ (80031ec <_sbrk+0x64>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d207      	bcs.n	80031c8 <_sbrk+0x40>
 80031b8:	f004 f866 	bl	8007288 <__errno>
 80031bc:	4603      	mov	r3, r0
 80031be:	220c      	movs	r2, #12
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	e009      	b.n	80031dc <_sbrk+0x54>
 80031c8:	4b08      	ldr	r3, [pc, #32]	@ (80031ec <_sbrk+0x64>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b07      	ldr	r3, [pc, #28]	@ (80031ec <_sbrk+0x64>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	4a05      	ldr	r2, [pc, #20]	@ (80031ec <_sbrk+0x64>)
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20020000 	.word	0x20020000
 80031e8:	00000400 	.word	0x00000400
 80031ec:	200003b4 	.word	0x200003b4
 80031f0:	20000508 	.word	0x20000508

080031f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031f8:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <SystemInit+0x20>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fe:	4a05      	ldr	r2, [pc, #20]	@ (8003214 <SystemInit+0x20>)
 8003200:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003204:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <setWrongCommandFlag>:
		setIncrementalTargetPosition(tmc4671_controller, -STOP_TOLERANCE_DECODER_COUNT);
	}
}

//---------------------------------------------------------------------------------------------------------
void setWrongCommandFlag(TMC4671_Controller *tmc4671_controller, bool is_wrong){
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
	tmc4671_controller->tmc_flags.wrong_command = is_wrong;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <getEventStatusWord>:
//---------------------------------------------------------------------------------------------------------
TMCStatusFlags getEventStatus(TMC4671_Controller *tmc4671_controller){
	return tmc4671_controller->tmc_flags;
}

uint16_t getEventStatusWord(TMC4671_Controller *tmc4671_controller, PcapErrorStatus *Pcap_status) {
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
	uint16_t status_word = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	81fb      	strh	r3, [r7, #14]

	switch(tmc4671_controller->tmc_flags.limits){
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800324c:	2b04      	cmp	r3, #4
 800324e:	d821      	bhi.n	8003294 <getEventStatusWord+0x5c>
 8003250:	a201      	add	r2, pc, #4	@ (adr r2, 8003258 <getEventStatusWord+0x20>)
 8003252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003256:	bf00      	nop
 8003258:	08003295 	.word	0x08003295
 800325c:	0800328b 	.word	0x0800328b
 8003260:	08003281 	.word	0x08003281
 8003264:	08003277 	.word	0x08003277
 8003268:	0800326d 	.word	0x0800326d
	case NO_LIMIT:
		break;

	case HARD_POSITIVE:
		status_word |= 0x0001 << 0;
 800326c:	89fb      	ldrh	r3, [r7, #14]
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	81fb      	strh	r3, [r7, #14]
		break;
 8003274:	e00e      	b.n	8003294 <getEventStatusWord+0x5c>

	case HARD_NEGATIVE:
		status_word |= 0x0001 << 1;
 8003276:	89fb      	ldrh	r3, [r7, #14]
 8003278:	f043 0302 	orr.w	r3, r3, #2
 800327c:	81fb      	strh	r3, [r7, #14]
		break;
 800327e:	e009      	b.n	8003294 <getEventStatusWord+0x5c>

	case SOFT_POSITIVE:
		status_word |= 0x0001 << 2;
 8003280:	89fb      	ldrh	r3, [r7, #14]
 8003282:	f043 0304 	orr.w	r3, r3, #4
 8003286:	81fb      	strh	r3, [r7, #14]
		break;
 8003288:	e004      	b.n	8003294 <getEventStatusWord+0x5c>

	case SOFT_NEGATIVE:
		status_word |= 0x0001 << 3;
 800328a:	89fb      	ldrh	r3, [r7, #14]
 800328c:	f043 0308 	orr.w	r3, r3, #8
 8003290:	81fb      	strh	r3, [r7, #14]
		break;
 8003292:	bf00      	nop
	}

	if(tmc4671_controller->tmc_flags.target_reached){
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <getEventStatusWord+0x6e>
		status_word |= 0x0001 << 4;
 800329e:	89fb      	ldrh	r3, [r7, #14]
 80032a0:	f043 0310 	orr.w	r3, r3, #16
 80032a4:	81fb      	strh	r3, [r7, #14]
	}

	if(tmc4671_controller->tmc_flags.homing_done){
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <getEventStatusWord+0x80>
		status_word |= 0x0001 << 5;
 80032b0:	89fb      	ldrh	r3, [r7, #14]
 80032b2:	f043 0320 	orr.w	r3, r3, #32
 80032b6:	81fb      	strh	r3, [r7, #14]
	}

	if(tmc4671_controller->tmc_flags.servo_enable){
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <getEventStatusWord+0x92>
		status_word |= 0x0001 << 6;
 80032c2:	89fb      	ldrh	r3, [r7, #14]
 80032c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c8:	81fb      	strh	r3, [r7, #14]
	}

	if(tmc4671_controller->tmc_flags.servo_ready){
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <getEventStatusWord+0xa4>
		status_word |= 0x0001 << 7;
 80032d4:	89fb      	ldrh	r3, [r7, #14]
 80032d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032da:	81fb      	strh	r3, [r7, #14]
	}

	switch(tmc4671_controller->tmc_flags.faults){
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d820      	bhi.n	8003328 <getEventStatusWord+0xf0>
 80032e6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ec <getEventStatusWord+0xb4>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	08003329 	.word	0x08003329
 80032f0:	0800331f 	.word	0x0800331f
 80032f4:	08003315 	.word	0x08003315
 80032f8:	0800330b 	.word	0x0800330b
 80032fc:	08003301 	.word	0x08003301
	case NO_FAULT:
		break;

	case SHORT_CIRCUIT:
		status_word |= 0x0001 << 8;
 8003300:	89fb      	ldrh	r3, [r7, #14]
 8003302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003306:	81fb      	strh	r3, [r7, #14]
		break;
 8003308:	e00e      	b.n	8003328 <getEventStatusWord+0xf0>

	case UNDER_VOLTAGE:
		status_word |= 0x0001 << 9;
 800330a:	89fb      	ldrh	r3, [r7, #14]
 800330c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003310:	81fb      	strh	r3, [r7, #14]
		break;
 8003312:	e009      	b.n	8003328 <getEventStatusWord+0xf0>

	case OVER_TEMPERATURE:
		status_word |= 0x0001 << 10;
 8003314:	89fb      	ldrh	r3, [r7, #14]
 8003316:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800331a:	81fb      	strh	r3, [r7, #14]
		break;
 800331c:	e004      	b.n	8003328 <getEventStatusWord+0xf0>

	case UNKNOWN:
		status_word |= 0x0001 << 11;
 800331e:	89fb      	ldrh	r3, [r7, #14]
 8003320:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003324:	81fb      	strh	r3, [r7, #14]
		break;
 8003326:	bf00      	nop
	}

	if(tmc4671_controller->tmc_flags.wrong_command){
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <getEventStatusWord+0x102>
		status_word |= 0x0001 << 12;
 8003332:	89fb      	ldrh	r3, [r7, #14]
 8003334:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003338:	81fb      	strh	r3, [r7, #14]
	}

	switch (*Pcap_status) {
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d00a      	beq.n	8003358 <getEventStatusWord+0x120>
 8003342:	2b02      	cmp	r3, #2
 8003344:	dc0e      	bgt.n	8003364 <getEventStatusWord+0x12c>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <getEventStatusWord+0x12a>
 800334a:	2b01      	cmp	r3, #1
 800334c:	d10a      	bne.n	8003364 <getEventStatusWord+0x12c>
	case PCAP_NO_ERROR:
		break;

	case PCAP_COMM_ERROR:
		status_word |= 0x0001 << 13;
 800334e:	89fb      	ldrh	r3, [r7, #14]
 8003350:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003354:	81fb      	strh	r3, [r7, #14]
		break;
 8003356:	e005      	b.n	8003364 <getEventStatusWord+0x12c>

	case PCAP_TIP_TOUCH_ERROR:
		status_word |= 0x0001 << 14;
 8003358:	89fb      	ldrh	r3, [r7, #14]
 800335a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800335e:	81fb      	strh	r3, [r7, #14]
		break;
 8003360:	e000      	b.n	8003364 <getEventStatusWord+0x12c>
		break;
 8003362:	bf00      	nop
	}

	return status_word;
 8003364:	89fb      	ldrh	r3, [r7, #14]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop

08003374 <getCoilCurrent>:
		return false;
	}
}
//---------------------------------------------------------------------------------------------------------

uint32_t getCoilCurrent(TMC4671_Controller *tmc4671_controller){
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->motor_current;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <getCurrentLimitHoming>:

void setCurrentLimitHoming(TMC4671_Controller *tmc4671_controller, uint32_t current_limit){
	tmc4671_controller->tmc_parameters.current_limit_homing = current_limit;
}

uint32_t getCurrentLimitHoming(TMC4671_Controller *tmc4671_controller){
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.current_limit_homing;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <getCurrentLimitServo>:

void setCurrentLimitServo(TMC4671_Controller *tmc4671_controller, uint32_t current_limit){
	tmc4671_controller->tmc_parameters.current_limit_servo = current_limit;
}

uint32_t getCurrentLimitServo(TMC4671_Controller *tmc4671_controller){
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.current_limit_servo;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <getVoltageLimitHoming>:

void setVoltageLimitHoming(TMC4671_Controller *tmc4671_controller, uint32_t voltage_limit){
	tmc4671_controller->tmc_parameters.voltage_limit_homing = voltage_limit;
}

uint32_t getVoltageLimitHoming(TMC4671_Controller *tmc4671_controller){
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.voltage_limit_homing;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <getVelocityLimitServo>:
void setVelocityLimitServo(TMC4671_Controller *tmc4671_controller, uint32_t velocity_limit){
	tmc4671_controller->tmc_parameters.velocity_limit_servo = velocity_limit;
	write_register_tmc4671(TMC4671_PID_VELOCITY_LIMIT, velocity_limit);
}

uint32_t getVelocityLimitServo(TMC4671_Controller *tmc4671_controller){
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.velocity_limit_servo;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <getTorqueLimitServo>:
void setTorqueLimitServo(TMC4671_Controller *tmc4671_controller, uint32_t torque_limit){
	tmc4671_controller->tmc_parameters.torque_limit_servo = torque_limit;
	write_register_tmc4671(TMC4671_PID_TORQUE_FLUX_LIMITS, torque_limit);
}

uint32_t getTorqueLimitServo(TMC4671_Controller *tmc4671_controller){
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.torque_limit_servo;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	0000      	movs	r0, r0
	...

08003408 <getSoftNegativeLimit>:
void setSoftNegativeLimit(TMC4671_Controller *tmc4671_controller, int32_t limit_microns){
	tmc4671_controller->tmc_parameters.soft_limit_negative = (int32_t)(limit_microns*(TOTAL_DECODER_REGISTER_COUNT/TOTAL_MAPPED_TRAVEL_MICRONS)) + tmc4671_controller->tmc_parameters.encoder_zero_offset;
	write_register_tmc4671(TMC4671_PID_POSITION_LIMIT_LOW, tmc4671_controller->tmc_parameters.soft_limit_negative);
}

int32_t getSoftNegativeLimit(TMC4671_Controller *tmc4671_controller){
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	int32_t neg_limit = (tmc4671_controller->tmc_parameters.soft_limit_negative - tmc4671_controller->tmc_parameters.encoder_zero_offset);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	60fb      	str	r3, [r7, #12]
	neg_limit = (int32_t)((neg_limit*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7fd f881 	bl	8000524 <__aeabi_i2d>
 8003422:	a30e      	add	r3, pc, #56	@ (adr r3, 800345c <getSoftNegativeLimit+0x54>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f7fd f8e6 	bl	80005f8 <__aeabi_dmul>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <getSoftNegativeLimit+0x50>)
 800343a:	f7fd fa07 	bl	800084c <__aeabi_ddiv>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	f7fd fae9 	bl	8000a1c <__aeabi_d2iz>
 800344a:	4603      	mov	r3, r0
 800344c:	60fb      	str	r3, [r7, #12]
	return neg_limit;
 800344e:	68fb      	ldr	r3, [r7, #12]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40f00000 	.word	0x40f00000
 800345c:	00000000 	.word	0x00000000
 8003460:	40d38800 	.word	0x40d38800
 8003464:	00000000 	.word	0x00000000

08003468 <getZeroOffset>:

void setZeroOffset(TMC4671_Controller *tmc4671_controller, int32_t offset_microns){
	tmc4671_controller->tmc_parameters.encoder_zero_offset = (int32_t)(offset_microns * (TOTAL_DECODER_REGISTER_COUNT/TOTAL_MAPPED_TRAVEL_MICRONS));
}

int32_t getZeroOffset(TMC4671_Controller *tmc4671_controller){
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	int32_t offset_microns = tmc4671_controller->tmc_parameters.encoder_zero_offset;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	60fb      	str	r3, [r7, #12]
	offset_microns = (int32_t)((offset_microns*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f7fd f854 	bl	8000524 <__aeabi_i2d>
 800347c:	a30f      	add	r3, pc, #60	@ (adr r3, 80034bc <getZeroOffset+0x54>)
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f7fd f8b9 	bl	80005f8 <__aeabi_dmul>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4610      	mov	r0, r2
 800348c:	4619      	mov	r1, r3
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <getZeroOffset+0x50>)
 8003494:	f7fd f9da 	bl	800084c <__aeabi_ddiv>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f7fd fabc 	bl	8000a1c <__aeabi_d2iz>
 80034a4:	4603      	mov	r3, r0
 80034a6:	60fb      	str	r3, [r7, #12]
	return offset_microns;
 80034a8:	68fb      	ldr	r3, [r7, #12]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	f3af 8000 	nop.w
 80034b8:	40f00000 	.word	0x40f00000
 80034bc:	00000000 	.word	0x00000000
 80034c0:	40d38800 	.word	0x40d38800
 80034c4:	00000000 	.word	0x00000000

080034c8 <getActualPosition>:
//---------------------------------------------------------------------------------------------------------

int32_t getActualPosition(TMC4671_Controller *tmc4671_controller){
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	int32_t actual_microns = (tmc4671_controller->current_position - tmc4671_controller->tmc_parameters.encoder_zero_offset);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	60fb      	str	r3, [r7, #12]
	actual_microns = (int32_t)((actual_microns*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7fd f821 	bl	8000524 <__aeabi_i2d>
 80034e2:	a30e      	add	r3, pc, #56	@ (adr r3, 800351c <getActualPosition+0x54>)
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	f7fd f886 	bl	80005f8 <__aeabi_dmul>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <getActualPosition+0x50>)
 80034fa:	f7fd f9a7 	bl	800084c <__aeabi_ddiv>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f7fd fa89 	bl	8000a1c <__aeabi_d2iz>
 800350a:	4603      	mov	r3, r0
 800350c:	60fb      	str	r3, [r7, #12]
	return actual_microns;
 800350e:	68fb      	ldr	r3, [r7, #12]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40f00000 	.word	0x40f00000
 800351c:	00000000 	.word	0x00000000
 8003520:	40d38800 	.word	0x40d38800
 8003524:	00000000 	.word	0x00000000

08003528 <getTargetPosition>:
void setIncrementalTargetPosition(TMC4671_Controller *tmc4671_controller, int32_t target_microns){
	int32_t current_microns = getActualPosition(tmc4671_controller);
	setAbsoluteTargetPosition(tmc4671_controller, current_microns + target_microns);
}

int32_t getTargetPosition(TMC4671_Controller *tmc4671_controller){
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	int32_t target_pos = (tmc4671_controller->target_position - tmc4671_controller->tmc_parameters.encoder_zero_offset);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	60fb      	str	r3, [r7, #12]
	target_pos = (int32_t)((target_pos*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7fc fff1 	bl	8000524 <__aeabi_i2d>
 8003542:	a30e      	add	r3, pc, #56	@ (adr r3, 800357c <getTargetPosition+0x54>)
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	f7fd f856 	bl	80005f8 <__aeabi_dmul>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	4b07      	ldr	r3, [pc, #28]	@ (8003578 <getTargetPosition+0x50>)
 800355a:	f7fd f977 	bl	800084c <__aeabi_ddiv>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	f7fd fa59 	bl	8000a1c <__aeabi_d2iz>
 800356a:	4603      	mov	r3, r0
 800356c:	60fb      	str	r3, [r7, #12]
	return target_pos;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40f00000 	.word	0x40f00000
 800357c:	00000000 	.word	0x00000000
 8003580:	40d38800 	.word	0x40d38800
 8003584:	00000000 	.word	0x00000000

08003588 <getMaxPositionError>:

void setMaxPositionError(TMC4671_Controller *tmc4671_controller, uint32_t error_microns){
	tmc4671_controller->tmc_parameters.position_error_limit = (uint32_t)(error_microns * (TOTAL_DECODER_REGISTER_COUNT/TOTAL_MAPPED_TRAVEL_MICRONS));
}

uint32_t getMaxPositionError(TMC4671_Controller *tmc4671_controller){
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	uint32_t error_microns = tmc4671_controller->tmc_parameters.position_error_limit;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	60fb      	str	r3, [r7, #12]
	error_microns = (uint32_t)((error_microns*TOTAL_MAPPED_TRAVEL_MICRONS)/TOTAL_DECODER_REGISTER_COUNT);
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f7fc ffb4 	bl	8000504 <__aeabi_ui2d>
 800359c:	a30f      	add	r3, pc, #60	@ (adr r3, 80035dc <getMaxPositionError+0x54>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f7fd f829 	bl	80005f8 <__aeabi_dmul>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <getMaxPositionError+0x50>)
 80035b4:	f7fd f94a 	bl	800084c <__aeabi_ddiv>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4610      	mov	r0, r2
 80035be:	4619      	mov	r1, r3
 80035c0:	f7fd fa54 	bl	8000a6c <__aeabi_d2uiz>
 80035c4:	4603      	mov	r3, r0
 80035c6:	60fb      	str	r3, [r7, #12]
	return error_microns;
 80035c8:	68fb      	ldr	r3, [r7, #12]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	f3af 8000 	nop.w
 80035d8:	40f00000 	.word	0x40f00000
 80035dc:	00000000 	.word	0x00000000
 80035e0:	40d38800 	.word	0x40d38800

080035e4 <getCurrentGainP>:
	uint32_t pid_torque_P_torque_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_TORQUE_P_TORQUE_I, pid_torque_P_torque_I);
	write_register_tmc4671(TMC4671_PID_FLUX_P_FLUX_I, pid_torque_P_torque_I);
}

uint32_t getCurrentGainP(TMC4671_Controller *tmc4671_controller){
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.current_P_gain;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <getCurrentGainI>:
	uint32_t pid_torque_P_torque_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_TORQUE_P_TORQUE_I, pid_torque_P_torque_I);
	write_register_tmc4671(TMC4671_PID_FLUX_P_FLUX_I, pid_torque_P_torque_I);
}

uint32_t getCurrentGainI(TMC4671_Controller *tmc4671_controller){
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.current_I_gain;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <getVelocityGainP>:

	uint32_t pid_velocity_P_velocity_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_VELOCITY_P_VELOCITY_I, pid_velocity_P_velocity_I);
}

uint32_t getVelocityGainP(TMC4671_Controller *tmc4671_controller){
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.velocity_P_gain;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <getVelocityGainI>:

	uint32_t pid_velocity_P_velocity_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_VELOCITY_P_VELOCITY_I, pid_velocity_P_velocity_I);
}

uint32_t getVelocityGainI(TMC4671_Controller *tmc4671_controller){
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.velocity_I_gain;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <getPositionGainP>:

	uint32_t pid_position_P_position_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_POSITION_P_POSITION_I, pid_position_P_position_I);
}

uint32_t getPositionGainP(TMC4671_Controller *tmc4671_controller){
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.position_P_gain;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <getPositionGainI>:

	uint32_t pid_position_P_position_I = (P_gain << 16) | I_gain;
	write_register_tmc4671(TMC4671_PID_POSITION_P_POSITION_I, pid_position_P_position_I);
}

uint32_t getPositionGainI(TMC4671_Controller *tmc4671_controller){
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	return tmc4671_controller->tmc_parameters.position_I_gain;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <getFirmwareVersion>:
void control_disable(){
	HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CTRL_EN_Pin, GPIO_PIN_RESET);
}
//---------------------------------------------------------------------------------------------------------

uint32_t getFirmwareVersion(){
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
	uint8_t temp_bytes[4];

	EEPROM_Read(DEF_ADDR_VERSION_NUMBER, temp_bytes, 4);
 800367a:	463b      	mov	r3, r7
 800367c:	2204      	movs	r2, #4
 800367e:	4619      	mov	r1, r3
 8003680:	f44f 7022 	mov.w	r0, #648	@ 0x288
 8003684:	f7fd fc54 	bl	8000f30 <EEPROM_Read>

	uint32_t version_no = bytes2uInt(temp_bytes);
 8003688:	463b      	mov	r3, r7
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fc6e 	bl	8000f6c <bytes2uInt>
 8003690:	6078      	str	r0, [r7, #4]
	return version_no;
 8003692:	687b      	ldr	r3, [r7, #4]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <Reset_Handler>:
 800369c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036d4 <LoopFillZerobss+0xe>
 80036a0:	f7ff fda8 	bl	80031f4 <SystemInit>
 80036a4:	480c      	ldr	r0, [pc, #48]	@ (80036d8 <LoopFillZerobss+0x12>)
 80036a6:	490d      	ldr	r1, [pc, #52]	@ (80036dc <LoopFillZerobss+0x16>)
 80036a8:	4a0d      	ldr	r2, [pc, #52]	@ (80036e0 <LoopFillZerobss+0x1a>)
 80036aa:	2300      	movs	r3, #0
 80036ac:	e002      	b.n	80036b4 <LoopCopyDataInit>

080036ae <CopyDataInit>:
 80036ae:	58d4      	ldr	r4, [r2, r3]
 80036b0:	50c4      	str	r4, [r0, r3]
 80036b2:	3304      	adds	r3, #4

080036b4 <LoopCopyDataInit>:
 80036b4:	18c4      	adds	r4, r0, r3
 80036b6:	428c      	cmp	r4, r1
 80036b8:	d3f9      	bcc.n	80036ae <CopyDataInit>
 80036ba:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <LoopFillZerobss+0x1e>)
 80036bc:	4c0a      	ldr	r4, [pc, #40]	@ (80036e8 <LoopFillZerobss+0x22>)
 80036be:	2300      	movs	r3, #0
 80036c0:	e001      	b.n	80036c6 <LoopFillZerobss>

080036c2 <FillZerobss>:
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	3204      	adds	r2, #4

080036c6 <LoopFillZerobss>:
 80036c6:	42a2      	cmp	r2, r4
 80036c8:	d3fb      	bcc.n	80036c2 <FillZerobss>
 80036ca:	f003 fde3 	bl	8007294 <__libc_init_array>
 80036ce:	f7fd fe97 	bl	8001400 <main>
 80036d2:	4770      	bx	lr
 80036d4:	20020000 	.word	0x20020000
 80036d8:	20000000 	.word	0x20000000
 80036dc:	20000068 	.word	0x20000068
 80036e0:	08007f44 	.word	0x08007f44
 80036e4:	20000068 	.word	0x20000068
 80036e8:	20000508 	.word	0x20000508

080036ec <ADC_IRQHandler>:
 80036ec:	e7fe      	b.n	80036ec <ADC_IRQHandler>
	...

080036f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003730 <HAL_Init+0x40>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003730 <HAL_Init+0x40>)
 80036fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003700:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <HAL_Init+0x40>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <HAL_Init+0x40>)
 8003706:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800370a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800370c:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <HAL_Init+0x40>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a07      	ldr	r2, [pc, #28]	@ (8003730 <HAL_Init+0x40>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003718:	2003      	movs	r0, #3
 800371a:	f000 f931 	bl	8003980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800371e:	200f      	movs	r0, #15
 8003720:	f000 f808 	bl	8003734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003724:	f7ff facc 	bl	8002cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023c00 	.word	0x40023c00

08003734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800373c:	4b12      	ldr	r3, [pc, #72]	@ (8003788 <HAL_InitTick+0x54>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b12      	ldr	r3, [pc, #72]	@ (800378c <HAL_InitTick+0x58>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	4619      	mov	r1, r3
 8003746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800374a:	fbb3 f3f1 	udiv	r3, r3, r1
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f93b 	bl	80039ce <HAL_SYSTICK_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e00e      	b.n	8003780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d80a      	bhi.n	800377e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003768:	2200      	movs	r2, #0
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	f000 f911 	bl	8003996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003774:	4a06      	ldr	r2, [pc, #24]	@ (8003790 <HAL_InitTick+0x5c>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000000 	.word	0x20000000
 800378c:	20000008 	.word	0x20000008
 8003790:	20000004 	.word	0x20000004

08003794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003798:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <HAL_IncTick+0x20>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_IncTick+0x24>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <HAL_IncTick+0x24>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000008 	.word	0x20000008
 80037b8:	200003b8 	.word	0x200003b8

080037bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return uwTick;
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_GetTick+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	200003b8 	.word	0x200003b8

080037d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037dc:	f7ff ffee 	bl	80037bc <HAL_GetTick>
 80037e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d005      	beq.n	80037fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <HAL_Delay+0x44>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037fa:	bf00      	nop
 80037fc:	f7ff ffde 	bl	80037bc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d8f7      	bhi.n	80037fc <HAL_Delay+0x28>
  {
  }
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000008 	.word	0x20000008

0800381c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800382c:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003838:	4013      	ands	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800384c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384e:	4a04      	ldr	r2, [pc, #16]	@ (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	60d3      	str	r3, [r2, #12]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003868:	4b04      	ldr	r3, [pc, #16]	@ (800387c <__NVIC_GetPriorityGrouping+0x18>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	f003 0307 	and.w	r3, r3, #7
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003890:	2b00      	cmp	r3, #0
 8003892:	db0a      	blt.n	80038aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	b2da      	uxtb	r2, r3
 8003898:	490c      	ldr	r1, [pc, #48]	@ (80038cc <__NVIC_SetPriority+0x4c>)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	0112      	lsls	r2, r2, #4
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	440b      	add	r3, r1
 80038a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038a8:	e00a      	b.n	80038c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4908      	ldr	r1, [pc, #32]	@ (80038d0 <__NVIC_SetPriority+0x50>)
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	3b04      	subs	r3, #4
 80038b8:	0112      	lsls	r2, r2, #4
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	440b      	add	r3, r1
 80038be:	761a      	strb	r2, [r3, #24]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000e100 	.word	0xe000e100
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b089      	sub	sp, #36	@ 0x24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f1c3 0307 	rsb	r3, r3, #7
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	bf28      	it	cs
 80038f2:	2304      	movcs	r3, #4
 80038f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d902      	bls.n	8003904 <NVIC_EncodePriority+0x30>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3b03      	subs	r3, #3
 8003902:	e000      	b.n	8003906 <NVIC_EncodePriority+0x32>
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003908:	f04f 32ff 	mov.w	r2, #4294967295
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43da      	mvns	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	401a      	ands	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800391c:	f04f 31ff 	mov.w	r1, #4294967295
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	fa01 f303 	lsl.w	r3, r1, r3
 8003926:	43d9      	mvns	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	4313      	orrs	r3, r2
         );
}
 800392e:	4618      	mov	r0, r3
 8003930:	3724      	adds	r7, #36	@ 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800394c:	d301      	bcc.n	8003952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800394e:	2301      	movs	r3, #1
 8003950:	e00f      	b.n	8003972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003952:	4a0a      	ldr	r2, [pc, #40]	@ (800397c <SysTick_Config+0x40>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800395a:	210f      	movs	r1, #15
 800395c:	f04f 30ff 	mov.w	r0, #4294967295
 8003960:	f7ff ff8e 	bl	8003880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <SysTick_Config+0x40>)
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800396a:	4b04      	ldr	r3, [pc, #16]	@ (800397c <SysTick_Config+0x40>)
 800396c:	2207      	movs	r2, #7
 800396e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	e000e010 	.word	0xe000e010

08003980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff47 	bl	800381c <__NVIC_SetPriorityGrouping>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a8:	f7ff ff5c 	bl	8003864 <__NVIC_GetPriorityGrouping>
 80039ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	6978      	ldr	r0, [r7, #20]
 80039b4:	f7ff ff8e 	bl	80038d4 <NVIC_EncodePriority>
 80039b8:	4602      	mov	r2, r0
 80039ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff5d 	bl	8003880 <__NVIC_SetPriority>
}
 80039c6:	bf00      	nop
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff ffb0 	bl	800393c <SysTick_Config>
 80039dc:	4603      	mov	r3, r0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_GPIO_Init>:
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	@ 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	e159      	b.n	8003cb8 <HAL_GPIO_Init+0x2d0>
 8003a04:	2201      	movs	r2, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	f040 8148 	bne.w	8003cb2 <HAL_GPIO_Init+0x2ca>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d005      	beq.n	8003a3a <HAL_GPIO_Init+0x52>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d130      	bne.n	8003a9c <HAL_GPIO_Init+0xb4>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	2203      	movs	r2, #3
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	609a      	str	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	2201      	movs	r2, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 0201 	and.w	r2, r3, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	605a      	str	r2, [r3, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d017      	beq.n	8003ad8 <HAL_GPIO_Init+0xf0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	60da      	str	r2, [r3, #12]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d123      	bne.n	8003b2c <HAL_GPIO_Init+0x144>
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	08da      	lsrs	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3208      	adds	r2, #8
 8003aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	220f      	movs	r2, #15
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	08da      	lsrs	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3208      	adds	r2, #8
 8003b26:	69b9      	ldr	r1, [r7, #24]
 8003b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2203      	movs	r2, #3
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0203 	and.w	r2, r3, #3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80a2 	beq.w	8003cb2 <HAL_GPIO_Init+0x2ca>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4b57      	ldr	r3, [pc, #348]	@ (8003cd0 <HAL_GPIO_Init+0x2e8>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	4a56      	ldr	r2, [pc, #344]	@ (8003cd0 <HAL_GPIO_Init+0x2e8>)
 8003b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b7e:	4b54      	ldr	r3, [pc, #336]	@ (8003cd0 <HAL_GPIO_Init+0x2e8>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a52      	ldr	r2, [pc, #328]	@ (8003cd4 <HAL_GPIO_Init+0x2ec>)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	089b      	lsrs	r3, r3, #2
 8003b90:	3302      	adds	r3, #2
 8003b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a49      	ldr	r2, [pc, #292]	@ (8003cd8 <HAL_GPIO_Init+0x2f0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d019      	beq.n	8003bea <HAL_GPIO_Init+0x202>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a48      	ldr	r2, [pc, #288]	@ (8003cdc <HAL_GPIO_Init+0x2f4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_GPIO_Init+0x1fe>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a47      	ldr	r2, [pc, #284]	@ (8003ce0 <HAL_GPIO_Init+0x2f8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00d      	beq.n	8003be2 <HAL_GPIO_Init+0x1fa>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a46      	ldr	r2, [pc, #280]	@ (8003ce4 <HAL_GPIO_Init+0x2fc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d007      	beq.n	8003bde <HAL_GPIO_Init+0x1f6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a45      	ldr	r2, [pc, #276]	@ (8003ce8 <HAL_GPIO_Init+0x300>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_GPIO_Init+0x1f2>
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	e008      	b.n	8003bec <HAL_GPIO_Init+0x204>
 8003bda:	2307      	movs	r3, #7
 8003bdc:	e006      	b.n	8003bec <HAL_GPIO_Init+0x204>
 8003bde:	2303      	movs	r3, #3
 8003be0:	e004      	b.n	8003bec <HAL_GPIO_Init+0x204>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e002      	b.n	8003bec <HAL_GPIO_Init+0x204>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_GPIO_Init+0x204>
 8003bea:	2300      	movs	r3, #0
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	f002 0203 	and.w	r2, r2, #3
 8003bf2:	0092      	lsls	r2, r2, #2
 8003bf4:	4093      	lsls	r3, r2
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	4935      	ldr	r1, [pc, #212]	@ (8003cd4 <HAL_GPIO_Init+0x2ec>)
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	3302      	adds	r3, #2
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003c0a:	4b38      	ldr	r3, [pc, #224]	@ (8003cec <HAL_GPIO_Init+0x304>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	61bb      	str	r3, [r7, #24]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_Init+0x246>
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003cec <HAL_GPIO_Init+0x304>)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	6093      	str	r3, [r2, #8]
 8003c34:	4b2d      	ldr	r3, [pc, #180]	@ (8003cec <HAL_GPIO_Init+0x304>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x270>
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	4a24      	ldr	r2, [pc, #144]	@ (8003cec <HAL_GPIO_Init+0x304>)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	60d3      	str	r3, [r2, #12]
 8003c5e:	4b23      	ldr	r3, [pc, #140]	@ (8003cec <HAL_GPIO_Init+0x304>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	43db      	mvns	r3, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_Init+0x29a>
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	4a1a      	ldr	r2, [pc, #104]	@ (8003cec <HAL_GPIO_Init+0x304>)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	6053      	str	r3, [r2, #4]
 8003c88:	4b18      	ldr	r3, [pc, #96]	@ (8003cec <HAL_GPIO_Init+0x304>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_GPIO_Init+0x2c4>
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	4a0f      	ldr	r2, [pc, #60]	@ (8003cec <HAL_GPIO_Init+0x304>)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	2b0f      	cmp	r3, #15
 8003cbc:	f67f aea2 	bls.w	8003a04 <HAL_GPIO_Init+0x1c>
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	3724      	adds	r7, #36	@ 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40013800 	.word	0x40013800
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	40020400 	.word	0x40020400
 8003ce0:	40020800 	.word	0x40020800
 8003ce4:	40020c00 	.word	0x40020c00
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40013c00 	.word	0x40013c00

08003cf0 <HAL_GPIO_WritePin>:
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	707b      	strb	r3, [r7, #1]
 8003d00:	787b      	ldrb	r3, [r7, #1]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_WritePin+0x1e>
 8003d06:	887a      	ldrh	r2, [r7, #2]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	619a      	str	r2, [r3, #24]
 8003d0c:	e003      	b.n	8003d16 <HAL_GPIO_WritePin+0x26>
 8003d0e:	887b      	ldrh	r3, [r7, #2]
 8003d10:	041a      	lsls	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	619a      	str	r2, [r3, #24]
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_I2C_Init>:
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_I2C_Init+0x12>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e12b      	b.n	8003f8e <HAL_I2C_Init+0x26a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_I2C_Init+0x2c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe ffe0 	bl	8002d10 <HAL_I2C_MspInit>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2224      	movs	r2, #36	@ 0x24
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f001 ff10 	bl	8005bac <HAL_RCC_GetPCLK1Freq>
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4a81      	ldr	r2, [pc, #516]	@ (8003f98 <HAL_I2C_Init+0x274>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d807      	bhi.n	8003da8 <HAL_I2C_Init+0x84>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4a80      	ldr	r2, [pc, #512]	@ (8003f9c <HAL_I2C_Init+0x278>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	bf94      	ite	ls
 8003da0:	2301      	movls	r3, #1
 8003da2:	2300      	movhi	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	e006      	b.n	8003db6 <HAL_I2C_Init+0x92>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4a7d      	ldr	r2, [pc, #500]	@ (8003fa0 <HAL_I2C_Init+0x27c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	bf94      	ite	ls
 8003db0:	2301      	movls	r3, #1
 8003db2:	2300      	movhi	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_Init+0x9a>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e0e7      	b.n	8003f8e <HAL_I2C_Init+0x26a>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4a78      	ldr	r2, [pc, #480]	@ (8003fa4 <HAL_I2C_Init+0x280>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	0c9b      	lsrs	r3, r3, #18
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4a6a      	ldr	r2, [pc, #424]	@ (8003f98 <HAL_I2C_Init+0x274>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d802      	bhi.n	8003df8 <HAL_I2C_Init+0xd4>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	3301      	adds	r3, #1
 8003df6:	e009      	b.n	8003e0c <HAL_I2C_Init+0xe8>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	4a69      	ldr	r2, [pc, #420]	@ (8003fa8 <HAL_I2C_Init+0x284>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	099b      	lsrs	r3, r3, #6
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6213      	str	r3, [r2, #32]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	495c      	ldr	r1, [pc, #368]	@ (8003f98 <HAL_I2C_Init+0x274>)
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	d819      	bhi.n	8003e60 <HAL_I2C_Init+0x13c>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1e59      	subs	r1, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e3a:	1c59      	adds	r1, r3, #1
 8003e3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e40:	400b      	ands	r3, r1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_I2C_Init+0x138>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1e59      	subs	r1, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e54:	3301      	adds	r3, #1
 8003e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5a:	e051      	b.n	8003f00 <HAL_I2C_Init+0x1dc>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	e04f      	b.n	8003f00 <HAL_I2C_Init+0x1dc>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d111      	bne.n	8003e8c <HAL_I2C_Init+0x168>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1e58      	subs	r0, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	440b      	add	r3, r1
 8003e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	e012      	b.n	8003eb2 <HAL_I2C_Init+0x18e>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1e58      	subs	r0, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	0099      	lsls	r1, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf0c      	ite	eq
 8003eac:	2301      	moveq	r3, #1
 8003eae:	2300      	movne	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_Init+0x196>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e022      	b.n	8003f00 <HAL_I2C_Init+0x1dc>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_I2C_Init+0x1bc>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1e58      	subs	r0, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6859      	ldr	r1, [r3, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	440b      	add	r3, r1
 8003ed0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ede:	e00f      	b.n	8003f00 <HAL_I2C_Init+0x1dc>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1e58      	subs	r0, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	0099      	lsls	r1, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	6809      	ldr	r1, [r1, #0]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61cb      	str	r3, [r1, #28]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69da      	ldr	r2, [r3, #28]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6911      	ldr	r1, [r2, #16]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68d2      	ldr	r2, [r2, #12]
 8003f3a:	4311      	orrs	r1, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	430b      	orrs	r3, r1
 8003f42:	6093      	str	r3, [r2, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	60da      	str	r2, [r3, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	000186a0 	.word	0x000186a0
 8003f9c:	001e847f 	.word	0x001e847f
 8003fa0:	003d08ff 	.word	0x003d08ff
 8003fa4:	431bde83 	.word	0x431bde83
 8003fa8:	10624dd3 	.word	0x10624dd3

08003fac <HAL_I2C_Master_Transmit>:
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	460b      	mov	r3, r1
 8003fba:	817b      	strh	r3, [r7, #10]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	813b      	strh	r3, [r7, #8]
 8003fc0:	f7ff fbfc 	bl	80037bc <HAL_GetTick>
 8003fc4:	6178      	str	r0, [r7, #20]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	f040 80e0 	bne.w	8004194 <HAL_I2C_Master_Transmit+0x1e8>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	2319      	movs	r3, #25
 8003fda:	2201      	movs	r2, #1
 8003fdc:	4970      	ldr	r1, [pc, #448]	@ (80041a0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 ff7e 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_I2C_Master_Transmit+0x42>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e0d3      	b.n	8004196 <HAL_I2C_Master_Transmit+0x1ea>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2C_Master_Transmit+0x50>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e0cc      	b.n	8004196 <HAL_I2C_Master_Transmit+0x1ea>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b01      	cmp	r3, #1
 8004010:	d007      	beq.n	8004022 <HAL_I2C_Master_Transmit+0x76>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0201 	orr.w	r2, r2, #1
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2221      	movs	r2, #33	@ 0x21
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2210      	movs	r2, #16
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	641a      	str	r2, [r3, #64]	@ 0x40
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	893a      	ldrh	r2, [r7, #8]
 8004052:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a50      	ldr	r2, [pc, #320]	@ (80041a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004062:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004064:	8979      	ldrh	r1, [r7, #10]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	6a3a      	ldr	r2, [r7, #32]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fd00 	bl	8004a70 <I2C_MasterRequestWrite>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_I2C_Master_Transmit+0xce>
 8004076:	2301      	movs	r3, #1
 8004078:	e08d      	b.n	8004196 <HAL_I2C_Master_Transmit+0x1ea>
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	e066      	b.n	8004160 <HAL_I2C_Master_Transmit+0x1b4>
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	6a39      	ldr	r1, [r7, #32]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f001 f83c 	bl	8005114 <I2C_WaitOnTXEFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00d      	beq.n	80040be <HAL_I2C_Master_Transmit+0x112>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d107      	bne.n	80040ba <HAL_I2C_Master_Transmit+0x10e>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	2301      	movs	r3, #1
 80040bc:	e06b      	b.n	8004196 <HAL_I2C_Master_Transmit+0x1ea>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	781a      	ldrb	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	611a      	str	r2, [r3, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	851a      	strh	r2, [r3, #40]	@ 0x28
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d11b      	bne.n	8004134 <HAL_I2C_Master_Transmit+0x188>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	d017      	beq.n	8004134 <HAL_I2C_Master_Transmit+0x188>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	611a      	str	r2, [r3, #16]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	625a      	str	r2, [r3, #36]	@ 0x24
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	6a39      	ldr	r1, [r7, #32]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f001 f833 	bl	80051a4 <I2C_WaitOnBTFFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00d      	beq.n	8004160 <HAL_I2C_Master_Transmit+0x1b4>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	2b04      	cmp	r3, #4
 800414a:	d107      	bne.n	800415c <HAL_I2C_Master_Transmit+0x1b0>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	2301      	movs	r3, #1
 800415e:	e01a      	b.n	8004196 <HAL_I2C_Master_Transmit+0x1ea>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	d194      	bne.n	8004092 <HAL_I2C_Master_Transmit+0xe6>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <HAL_I2C_Master_Transmit+0x1ea>
 8004194:	2302      	movs	r3, #2
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	00100002 	.word	0x00100002
 80041a4:	ffff0000 	.word	0xffff0000

080041a8 <HAL_I2C_Master_Receive>:
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08c      	sub	sp, #48	@ 0x30
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	607a      	str	r2, [r7, #4]
 80041b2:	461a      	mov	r2, r3
 80041b4:	460b      	mov	r3, r1
 80041b6:	817b      	strh	r3, [r7, #10]
 80041b8:	4613      	mov	r3, r2
 80041ba:	813b      	strh	r3, [r7, #8]
 80041bc:	f7ff fafe 	bl	80037bc <HAL_GetTick>
 80041c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	f040 8217 	bne.w	80045fe <HAL_I2C_Master_Receive+0x456>
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	2319      	movs	r3, #25
 80041d6:	2201      	movs	r2, #1
 80041d8:	497c      	ldr	r1, [pc, #496]	@ (80043cc <HAL_I2C_Master_Receive+0x224>)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fe80 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_I2C_Master_Receive+0x42>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e20a      	b.n	8004600 <HAL_I2C_Master_Receive+0x458>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_I2C_Master_Receive+0x50>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e203      	b.n	8004600 <HAL_I2C_Master_Receive+0x458>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d007      	beq.n	800421e <HAL_I2C_Master_Receive+0x76>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0201 	orr.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2222      	movs	r2, #34	@ 0x22
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2210      	movs	r2, #16
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	641a      	str	r2, [r3, #64]	@ 0x40
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	625a      	str	r2, [r3, #36]	@ 0x24
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	893a      	ldrh	r2, [r7, #8]
 800424e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	851a      	strh	r2, [r3, #40]	@ 0x28
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4a5c      	ldr	r2, [pc, #368]	@ (80043d0 <HAL_I2C_Master_Receive+0x228>)
 800425e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004260:	8979      	ldrh	r1, [r7, #10]
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 fc84 	bl	8004b74 <I2C_MasterRequestRead>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Master_Receive+0xce>
 8004272:	2301      	movs	r3, #1
 8004274:	e1c4      	b.n	8004600 <HAL_I2C_Master_Receive+0x458>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427a:	2b00      	cmp	r3, #0
 800427c:	d113      	bne.n	80042a6 <HAL_I2C_Master_Receive+0xfe>
 800427e:	2300      	movs	r3, #0
 8004280:	623b      	str	r3, [r7, #32]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	623b      	str	r3, [r7, #32]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	623b      	str	r3, [r7, #32]
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e198      	b.n	80045d8 <HAL_I2C_Master_Receive+0x430>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d11b      	bne.n	80042e6 <HAL_I2C_Master_Receive+0x13e>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e178      	b.n	80045d8 <HAL_I2C_Master_Receive+0x430>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d11b      	bne.n	8004326 <HAL_I2C_Master_Receive+0x17e>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	2300      	movs	r3, #0
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	e158      	b.n	80045d8 <HAL_I2C_Master_Receive+0x430>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	e144      	b.n	80045d8 <HAL_I2C_Master_Receive+0x430>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004352:	2b03      	cmp	r3, #3
 8004354:	f200 80f1 	bhi.w	800453a <HAL_I2C_Master_Receive+0x392>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435c:	2b01      	cmp	r3, #1
 800435e:	d123      	bne.n	80043a8 <HAL_I2C_Master_Receive+0x200>
 8004360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004362:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 ff65 	bl	8005234 <I2C_WaitOnRXNEFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_I2C_Master_Receive+0x1cc>
 8004370:	2301      	movs	r3, #1
 8004372:	e145      	b.n	8004600 <HAL_I2C_Master_Receive+0x458>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	625a      	str	r2, [r3, #36]	@ 0x24
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043a6:	e117      	b.n	80045d8 <HAL_I2C_Master_Receive+0x430>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d14e      	bne.n	800444e <HAL_I2C_Master_Receive+0x2a6>
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	2200      	movs	r2, #0
 80043b8:	4906      	ldr	r1, [pc, #24]	@ (80043d4 <HAL_I2C_Master_Receive+0x22c>)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fd90 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_I2C_Master_Receive+0x230>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e11a      	b.n	8004600 <HAL_I2C_Master_Receive+0x458>
 80043ca:	bf00      	nop
 80043cc:	00100002 	.word	0x00100002
 80043d0:	ffff0000 	.word	0xffff0000
 80043d4:	00010004 	.word	0x00010004
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800444c:	e0c4      	b.n	80045d8 <HAL_I2C_Master_Receive+0x430>
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	2200      	movs	r2, #0
 8004456:	496c      	ldr	r1, [pc, #432]	@ (8004608 <HAL_I2C_Master_Receive+0x460>)
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fd41 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_I2C_Master_Receive+0x2c0>
 8004464:	2301      	movs	r3, #1
 8004466:	e0cb      	b.n	8004600 <HAL_I2C_Master_Receive+0x458>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b0:	2200      	movs	r2, #0
 80044b2:	4955      	ldr	r1, [pc, #340]	@ (8004608 <HAL_I2C_Master_Receive+0x460>)
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fd13 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_I2C_Master_Receive+0x31c>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e09d      	b.n	8004600 <HAL_I2C_Master_Receive+0x458>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	625a      	str	r2, [r3, #36]	@ 0x24
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	851a      	strh	r2, [r3, #40]	@ 0x28
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004538:	e04e      	b.n	80045d8 <HAL_I2C_Master_Receive+0x430>
 800453a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800453c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fe78 	bl	8005234 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_I2C_Master_Receive+0x3a6>
 800454a:	2301      	movs	r3, #1
 800454c:	e058      	b.n	8004600 <HAL_I2C_Master_Receive+0x458>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	625a      	str	r2, [r3, #36]	@ 0x24
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b04      	cmp	r3, #4
 800458c:	d124      	bne.n	80045d8 <HAL_I2C_Master_Receive+0x430>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004592:	2b03      	cmp	r3, #3
 8004594:	d107      	bne.n	80045a6 <HAL_I2C_Master_Receive+0x3fe>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f47f aeb6 	bne.w	800434e <HAL_I2C_Master_Receive+0x1a6>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <HAL_I2C_Master_Receive+0x458>
 80045fe:	2302      	movs	r3, #2
 8004600:	4618      	mov	r0, r3
 8004602:	3728      	adds	r7, #40	@ 0x28
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	00010004 	.word	0x00010004

0800460c <HAL_I2C_Mem_Read>:
 800460c:	b580      	push	{r7, lr}
 800460e:	b08c      	sub	sp, #48	@ 0x30
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	4608      	mov	r0, r1
 8004616:	4611      	mov	r1, r2
 8004618:	461a      	mov	r2, r3
 800461a:	4603      	mov	r3, r0
 800461c:	817b      	strh	r3, [r7, #10]
 800461e:	460b      	mov	r3, r1
 8004620:	813b      	strh	r3, [r7, #8]
 8004622:	4613      	mov	r3, r2
 8004624:	80fb      	strh	r3, [r7, #6]
 8004626:	f7ff f8c9 	bl	80037bc <HAL_GetTick>
 800462a:	6278      	str	r0, [r7, #36]	@ 0x24
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b20      	cmp	r3, #32
 8004636:	f040 8214 	bne.w	8004a62 <HAL_I2C_Mem_Read+0x456>
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	2319      	movs	r3, #25
 8004640:	2201      	movs	r2, #1
 8004642:	497b      	ldr	r1, [pc, #492]	@ (8004830 <HAL_I2C_Mem_Read+0x224>)
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fc4b 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_I2C_Mem_Read+0x48>
 8004650:	2302      	movs	r3, #2
 8004652:	e207      	b.n	8004a64 <HAL_I2C_Mem_Read+0x458>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_I2C_Mem_Read+0x56>
 800465e:	2302      	movs	r3, #2
 8004660:	e200      	b.n	8004a64 <HAL_I2C_Mem_Read+0x458>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d007      	beq.n	8004688 <HAL_I2C_Mem_Read+0x7c>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2222      	movs	r2, #34	@ 0x22
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2240      	movs	r2, #64	@ 0x40
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80046b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004834 <HAL_I2C_Mem_Read+0x228>)
 80046c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046ca:	88f8      	ldrh	r0, [r7, #6]
 80046cc:	893a      	ldrh	r2, [r7, #8]
 80046ce:	8979      	ldrh	r1, [r7, #10]
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	9301      	str	r3, [sp, #4]
 80046d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	4603      	mov	r3, r0
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fb18 	bl	8004d10 <I2C_RequestMemoryRead>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Mem_Read+0xde>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e1bc      	b.n	8004a64 <HAL_I2C_Mem_Read+0x458>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d113      	bne.n	800471a <HAL_I2C_Mem_Read+0x10e>
 80046f2:	2300      	movs	r3, #0
 80046f4:	623b      	str	r3, [r7, #32]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	623b      	str	r3, [r7, #32]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	623b      	str	r3, [r7, #32]
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e190      	b.n	8004a3c <HAL_I2C_Mem_Read+0x430>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471e:	2b01      	cmp	r3, #1
 8004720:	d11b      	bne.n	800475a <HAL_I2C_Mem_Read+0x14e>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	e170      	b.n	8004a3c <HAL_I2C_Mem_Read+0x430>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475e:	2b02      	cmp	r3, #2
 8004760:	d11b      	bne.n	800479a <HAL_I2C_Mem_Read+0x18e>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	e150      	b.n	8004a3c <HAL_I2C_Mem_Read+0x430>
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	e144      	b.n	8004a3c <HAL_I2C_Mem_Read+0x430>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	f200 80f1 	bhi.w	800499e <HAL_I2C_Mem_Read+0x392>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d123      	bne.n	800480c <HAL_I2C_Mem_Read+0x200>
 80047c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fd33 	bl	8005234 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_I2C_Mem_Read+0x1cc>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e145      	b.n	8004a64 <HAL_I2C_Mem_Read+0x458>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800480a:	e117      	b.n	8004a3c <HAL_I2C_Mem_Read+0x430>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004810:	2b02      	cmp	r3, #2
 8004812:	d14e      	bne.n	80048b2 <HAL_I2C_Mem_Read+0x2a6>
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481a:	2200      	movs	r2, #0
 800481c:	4906      	ldr	r1, [pc, #24]	@ (8004838 <HAL_I2C_Mem_Read+0x22c>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fb5e 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_I2C_Mem_Read+0x230>
 800482a:	2301      	movs	r3, #1
 800482c:	e11a      	b.n	8004a64 <HAL_I2C_Mem_Read+0x458>
 800482e:	bf00      	nop
 8004830:	00100002 	.word	0x00100002
 8004834:	ffff0000 	.word	0xffff0000
 8004838:	00010004 	.word	0x00010004
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	625a      	str	r2, [r3, #36]	@ 0x24
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	625a      	str	r2, [r3, #36]	@ 0x24
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048b0:	e0c4      	b.n	8004a3c <HAL_I2C_Mem_Read+0x430>
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b8:	2200      	movs	r2, #0
 80048ba:	496c      	ldr	r1, [pc, #432]	@ (8004a6c <HAL_I2C_Mem_Read+0x460>)
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fb0f 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_I2C_Mem_Read+0x2c0>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0cb      	b.n	8004a64 <HAL_I2C_Mem_Read+0x458>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004914:	2200      	movs	r2, #0
 8004916:	4955      	ldr	r1, [pc, #340]	@ (8004a6c <HAL_I2C_Mem_Read+0x460>)
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fae1 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_I2C_Mem_Read+0x31c>
 8004924:	2301      	movs	r3, #1
 8004926:	e09d      	b.n	8004a64 <HAL_I2C_Mem_Read+0x458>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	625a      	str	r2, [r3, #36]	@ 0x24
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800499c:	e04e      	b.n	8004a3c <HAL_I2C_Mem_Read+0x430>
 800499e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fc46 	bl	8005234 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_I2C_Mem_Read+0x3a6>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e058      	b.n	8004a64 <HAL_I2C_Mem_Read+0x458>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d124      	bne.n	8004a3c <HAL_I2C_Mem_Read+0x430>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d107      	bne.n	8004a0a <HAL_I2C_Mem_Read+0x3fe>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f47f aeb6 	bne.w	80047b2 <HAL_I2C_Mem_Read+0x1a6>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e000      	b.n	8004a64 <HAL_I2C_Mem_Read+0x458>
 8004a62:	2302      	movs	r3, #2
 8004a64:	4618      	mov	r0, r3
 8004a66:	3728      	adds	r7, #40	@ 0x28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	00010004 	.word	0x00010004

08004a70 <I2C_MasterRequestWrite>:
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	817b      	strh	r3, [r7, #10]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d006      	beq.n	8004a9a <I2C_MasterRequestWrite+0x2a>
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d003      	beq.n	8004a9a <I2C_MasterRequestWrite+0x2a>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a98:	d108      	bne.n	8004aac <I2C_MasterRequestWrite+0x3c>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e00b      	b.n	8004ac4 <I2C_MasterRequestWrite+0x54>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab0:	2b12      	cmp	r3, #18
 8004ab2:	d107      	bne.n	8004ac4 <I2C_MasterRequestWrite+0x54>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fa05 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <I2C_MasterRequestWrite+0x88>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aea:	d103      	bne.n	8004af4 <I2C_MasterRequestWrite+0x84>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004af2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004af4:	2303      	movs	r3, #3
 8004af6:	e035      	b.n	8004b64 <I2C_MasterRequestWrite+0xf4>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b00:	d108      	bne.n	8004b14 <I2C_MasterRequestWrite+0xa4>
 8004b02:	897b      	ldrh	r3, [r7, #10]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b10:	611a      	str	r2, [r3, #16]
 8004b12:	e01b      	b.n	8004b4c <I2C_MasterRequestWrite+0xdc>
 8004b14:	897b      	ldrh	r3, [r7, #10]
 8004b16:	11db      	asrs	r3, r3, #7
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	f003 0306 	and.w	r3, r3, #6
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f063 030f 	orn	r3, r3, #15
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	611a      	str	r2, [r3, #16]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	490e      	ldr	r1, [pc, #56]	@ (8004b6c <I2C_MasterRequestWrite+0xfc>)
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fa4e 	bl	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <I2C_MasterRequestWrite+0xd2>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e010      	b.n	8004b64 <I2C_MasterRequestWrite+0xf4>
 8004b42:	897b      	ldrh	r3, [r7, #10]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4907      	ldr	r1, [pc, #28]	@ (8004b70 <I2C_MasterRequestWrite+0x100>)
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fa3e 	bl	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <I2C_MasterRequestWrite+0xf2>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <I2C_MasterRequestWrite+0xf4>
 8004b62:	2300      	movs	r3, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	00010008 	.word	0x00010008
 8004b70:	00010002 	.word	0x00010002

08004b74 <I2C_MasterRequestRead>:
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	607a      	str	r2, [r7, #4]
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	460b      	mov	r3, r1
 8004b82:	817b      	strh	r3, [r7, #10]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d006      	beq.n	8004bae <I2C_MasterRequestRead+0x3a>
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d003      	beq.n	8004bae <I2C_MasterRequestRead+0x3a>
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bac:	d108      	bne.n	8004bc0 <I2C_MasterRequestRead+0x4c>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	e00b      	b.n	8004bd8 <I2C_MasterRequestRead+0x64>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc4:	2b11      	cmp	r3, #17
 8004bc6:	d107      	bne.n	8004bd8 <I2C_MasterRequestRead+0x64>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f97b 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00d      	beq.n	8004c0c <I2C_MasterRequestRead+0x98>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bfe:	d103      	bne.n	8004c08 <I2C_MasterRequestRead+0x94>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c06:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e079      	b.n	8004d00 <I2C_MasterRequestRead+0x18c>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c14:	d108      	bne.n	8004c28 <I2C_MasterRequestRead+0xb4>
 8004c16:	897b      	ldrh	r3, [r7, #10]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	611a      	str	r2, [r3, #16]
 8004c26:	e05f      	b.n	8004ce8 <I2C_MasterRequestRead+0x174>
 8004c28:	897b      	ldrh	r3, [r7, #10]
 8004c2a:	11db      	asrs	r3, r3, #7
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f003 0306 	and.w	r3, r3, #6
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	f063 030f 	orn	r3, r3, #15
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	611a      	str	r2, [r3, #16]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4930      	ldr	r1, [pc, #192]	@ (8004d08 <I2C_MasterRequestRead+0x194>)
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f9c4 	bl	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <I2C_MasterRequestRead+0xe2>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e054      	b.n	8004d00 <I2C_MasterRequestRead+0x18c>
 8004c56:	897b      	ldrh	r3, [r7, #10]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	611a      	str	r2, [r3, #16]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	4929      	ldr	r1, [pc, #164]	@ (8004d0c <I2C_MasterRequestRead+0x198>)
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f9b4 	bl	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <I2C_MasterRequestRead+0x102>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e044      	b.n	8004d00 <I2C_MasterRequestRead+0x18c>
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f919 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <I2C_MasterRequestRead+0x15c>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc2:	d103      	bne.n	8004ccc <I2C_MasterRequestRead+0x158>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cca:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e017      	b.n	8004d00 <I2C_MasterRequestRead+0x18c>
 8004cd0:	897b      	ldrh	r3, [r7, #10]
 8004cd2:	11db      	asrs	r3, r3, #7
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	f003 0306 	and.w	r3, r3, #6
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f063 030e 	orn	r3, r3, #14
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	611a      	str	r2, [r3, #16]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	4907      	ldr	r1, [pc, #28]	@ (8004d0c <I2C_MasterRequestRead+0x198>)
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f970 	bl	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_MasterRequestRead+0x18a>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <I2C_MasterRequestRead+0x18c>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	00010008 	.word	0x00010008
 8004d0c:	00010002 	.word	0x00010002

08004d10 <I2C_RequestMemoryRead>:
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	4608      	mov	r0, r1
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	817b      	strh	r3, [r7, #10]
 8004d22:	460b      	mov	r3, r1
 8004d24:	813b      	strh	r3, [r7, #8]
 8004d26:	4613      	mov	r3, r2
 8004d28:	80fb      	strh	r3, [r7, #6]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f8c2 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00d      	beq.n	8004d7e <I2C_RequestMemoryRead+0x6e>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d70:	d103      	bne.n	8004d7a <I2C_RequestMemoryRead+0x6a>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d78:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e0aa      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
 8004d7e:	897b      	ldrh	r3, [r7, #10]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d8c:	611a      	str	r2, [r3, #16]
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	6a3a      	ldr	r2, [r7, #32]
 8004d92:	4952      	ldr	r1, [pc, #328]	@ (8004edc <I2C_RequestMemoryRead+0x1cc>)
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f91d 	bl	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <I2C_RequestMemoryRead+0x94>
 8004da0:	2301      	movs	r3, #1
 8004da2:	e097      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbc:	6a39      	ldr	r1, [r7, #32]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f9a8 	bl	8005114 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <I2C_RequestMemoryRead+0xd6>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d107      	bne.n	8004de2 <I2C_RequestMemoryRead+0xd2>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	2301      	movs	r3, #1
 8004de4:	e076      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d105      	bne.n	8004df8 <I2C_RequestMemoryRead+0xe8>
 8004dec:	893b      	ldrh	r3, [r7, #8]
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	611a      	str	r2, [r3, #16]
 8004df6:	e021      	b.n	8004e3c <I2C_RequestMemoryRead+0x12c>
 8004df8:	893b      	ldrh	r3, [r7, #8]
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	611a      	str	r2, [r3, #16]
 8004e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e08:	6a39      	ldr	r1, [r7, #32]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f982 	bl	8005114 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00d      	beq.n	8004e32 <I2C_RequestMemoryRead+0x122>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d107      	bne.n	8004e2e <I2C_RequestMemoryRead+0x11e>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e050      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
 8004e32:	893b      	ldrh	r3, [r7, #8]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	611a      	str	r2, [r3, #16]
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e3e:	6a39      	ldr	r1, [r7, #32]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f967 	bl	8005114 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00d      	beq.n	8004e68 <I2C_RequestMemoryRead+0x158>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d107      	bne.n	8004e64 <I2C_RequestMemoryRead+0x154>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	2301      	movs	r3, #1
 8004e66:	e035      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f82b 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00d      	beq.n	8004eac <I2C_RequestMemoryRead+0x19c>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e9e:	d103      	bne.n	8004ea8 <I2C_RequestMemoryRead+0x198>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ea6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e013      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
 8004eac:	897b      	ldrh	r3, [r7, #10]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	611a      	str	r2, [r3, #16]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	6a3a      	ldr	r2, [r7, #32]
 8004ec0:	4906      	ldr	r1, [pc, #24]	@ (8004edc <I2C_RequestMemoryRead+0x1cc>)
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f886 	bl	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <I2C_RequestMemoryRead+0x1c2>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <I2C_RequestMemoryRead+0x1c4>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	00010002 	.word	0x00010002

08004ee0 <I2C_WaitOnFlagUntilTimeout>:
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	71fb      	strb	r3, [r7, #7]
 8004ef0:	e048      	b.n	8004f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d044      	beq.n	8004f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004efa:	f7fe fc5f 	bl	80037bc <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d302      	bcc.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d139      	bne.n	8004f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	0c1b      	lsrs	r3, r3, #16
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d10d      	bne.n	8004f36 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	43da      	mvns	r2, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4013      	ands	r3, r2
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2301      	moveq	r3, #1
 8004f2e:	2300      	movne	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	e00c      	b.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	43da      	mvns	r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4013      	ands	r3, r2
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	bf0c      	ite	eq
 8004f48:	2301      	moveq	r3, #1
 8004f4a:	2300      	movne	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	461a      	mov	r2, r3
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d116      	bne.n	8004f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	f043 0220 	orr.w	r2, r3, #32
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004f80:	2301      	movs	r3, #1
 8004f82:	e023      	b.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0xec>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	0c1b      	lsrs	r3, r3, #16
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d10d      	bne.n	8004faa <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	43da      	mvns	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf0c      	ite	eq
 8004fa0:	2301      	moveq	r3, #1
 8004fa2:	2300      	movne	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	e00c      	b.n	8004fc4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	43da      	mvns	r2, r3
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d093      	beq.n	8004ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	e071      	b.n	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff2:	d123      	bne.n	800503c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800500c:	615a      	str	r2, [r3, #20]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	631a      	str	r2, [r3, #48]	@ 0x30
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005028:	f043 0204 	orr.w	r2, r3, #4
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005038:	2301      	movs	r3, #1
 800503a:	e067      	b.n	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d041      	beq.n	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8005044:	f7fe fbba 	bl	80037bc <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d302      	bcc.n	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d136      	bne.n	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	d10c      	bne.n	800507e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	43da      	mvns	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	bf14      	ite	ne
 8005076:	2301      	movne	r3, #1
 8005078:	2300      	moveq	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	e00b      	b.n	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	43da      	mvns	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4013      	ands	r3, r2
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf14      	ite	ne
 8005090:	2301      	movne	r3, #1
 8005092:	2300      	moveq	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	@ 0x30
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	f043 0220 	orr.w	r2, r3, #32
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80050c4:	2301      	movs	r3, #1
 80050c6:	e021      	b.n	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	0c1b      	lsrs	r3, r3, #16
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d10c      	bne.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	43da      	mvns	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4013      	ands	r3, r2
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf14      	ite	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	2300      	moveq	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	e00b      	b.n	8005104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	43da      	mvns	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4013      	ands	r3, r2
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bf14      	ite	ne
 80050fe:	2301      	movne	r3, #1
 8005100:	2300      	moveq	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	f47f af6d 	bne.w	8004fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800510a:	2300      	movs	r3, #0
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <I2C_WaitOnTXEFlagUntilTimeout>:
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	e034      	b.n	800518c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f8e3 	bl	80052ee <I2C_IsAcknowledgeFailed>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 800512e:	2301      	movs	r3, #1
 8005130:	e034      	b.n	800519c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d028      	beq.n	800518c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800513a:	f7fe fb3f 	bl	80037bc <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	429a      	cmp	r2, r3
 8005148:	d302      	bcc.n	8005150 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11d      	bne.n	800518c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515a:	2b80      	cmp	r3, #128	@ 0x80
 800515c:	d016      	beq.n	800518c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	@ 0x30
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005178:	f043 0220 	orr.w	r2, r3, #32
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005188:	2301      	movs	r3, #1
 800518a:	e007      	b.n	800519c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005196:	2b80      	cmp	r3, #128	@ 0x80
 8005198:	d1c3      	bne.n	8005122 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 800519a:	2300      	movs	r3, #0
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <I2C_WaitOnBTFFlagUntilTimeout>:
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	e034      	b.n	800521c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f89b 	bl	80052ee <I2C_IsAcknowledgeFailed>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 80051be:	2301      	movs	r3, #1
 80051c0:	e034      	b.n	800522c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d028      	beq.n	800521c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80051ca:	f7fe faf7 	bl	80037bc <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d302      	bcc.n	80051e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d11d      	bne.n	800521c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d016      	beq.n	800521c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005208:	f043 0220 	orr.w	r2, r3, #32
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005218:	2301      	movs	r3, #1
 800521a:	e007      	b.n	800522c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b04      	cmp	r3, #4
 8005228:	d1c3      	bne.n	80051b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 800522a:	2300      	movs	r3, #0
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	e049      	b.n	80052d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b10      	cmp	r3, #16
 800524e:	d119      	bne.n	8005284 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0210 	mvn.w	r2, #16
 8005258:	615a      	str	r2, [r3, #20]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	641a      	str	r2, [r3, #64]	@ 0x40
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005280:	2301      	movs	r3, #1
 8005282:	e030      	b.n	80052e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8005284:	f7fe fa9a 	bl	80037bc <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d302      	bcc.n	800529a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d11d      	bne.n	80052d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b40      	cmp	r3, #64	@ 0x40
 80052a6:	d016      	beq.n	80052d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	f043 0220 	orr.w	r2, r3, #32
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80052d2:	2301      	movs	r3, #1
 80052d4:	e007      	b.n	80052e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e0:	2b40      	cmp	r3, #64	@ 0x40
 80052e2:	d1ae      	bne.n	8005242 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80052e4:	2300      	movs	r3, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <I2C_IsAcknowledgeFailed>:
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005304:	d11b      	bne.n	800533e <I2C_IsAcknowledgeFailed+0x50>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800530e:	615a      	str	r2, [r3, #20]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	631a      	str	r2, [r3, #48]	@ 0x30
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	f043 0204 	orr.w	r2, r3, #4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	641a      	str	r2, [r3, #64]	@ 0x40
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <I2C_IsAcknowledgeFailed+0x52>
 800533e:	2300      	movs	r3, #0
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_RCC_OscConfig>:
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_RCC_OscConfig+0x12>
 800535a:	2301      	movs	r3, #1
 800535c:	e267      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d075      	beq.n	8005456 <HAL_RCC_OscConfig+0x10a>
 800536a:	4b88      	ldr	r3, [pc, #544]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b04      	cmp	r3, #4
 8005374:	d00c      	beq.n	8005390 <HAL_RCC_OscConfig+0x44>
 8005376:	4b85      	ldr	r3, [pc, #532]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b08      	cmp	r3, #8
 8005380:	d112      	bne.n	80053a8 <HAL_RCC_OscConfig+0x5c>
 8005382:	4b82      	ldr	r3, [pc, #520]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800538a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800538e:	d10b      	bne.n	80053a8 <HAL_RCC_OscConfig+0x5c>
 8005390:	4b7e      	ldr	r3, [pc, #504]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d05b      	beq.n	8005454 <HAL_RCC_OscConfig+0x108>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d157      	bne.n	8005454 <HAL_RCC_OscConfig+0x108>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e242      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b0:	d106      	bne.n	80053c0 <HAL_RCC_OscConfig+0x74>
 80053b2:	4b76      	ldr	r3, [pc, #472]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a75      	ldr	r2, [pc, #468]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80053b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e01d      	b.n	80053fc <HAL_RCC_OscConfig+0xb0>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053c8:	d10c      	bne.n	80053e4 <HAL_RCC_OscConfig+0x98>
 80053ca:	4b70      	ldr	r3, [pc, #448]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a6f      	ldr	r2, [pc, #444]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80053d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	4b6d      	ldr	r3, [pc, #436]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a6c      	ldr	r2, [pc, #432]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e00b      	b.n	80053fc <HAL_RCC_OscConfig+0xb0>
 80053e4:	4b69      	ldr	r3, [pc, #420]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a68      	ldr	r2, [pc, #416]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80053ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	4b66      	ldr	r3, [pc, #408]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a65      	ldr	r2, [pc, #404]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80053f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d013      	beq.n	800542c <HAL_RCC_OscConfig+0xe0>
 8005404:	f7fe f9da 	bl	80037bc <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0xd2>
 800540c:	f7fe f9d6 	bl	80037bc <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	@ 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0xd2>
 800541a:	2303      	movs	r3, #3
 800541c:	e207      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 800541e:	4b5b      	ldr	r3, [pc, #364]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0xc0>
 800542a:	e014      	b.n	8005456 <HAL_RCC_OscConfig+0x10a>
 800542c:	f7fe f9c6 	bl	80037bc <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0xfa>
 8005434:	f7fe f9c2 	bl	80037bc <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	@ 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0xfa>
 8005442:	2303      	movs	r3, #3
 8005444:	e1f3      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 8005446:	4b51      	ldr	r3, [pc, #324]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0xe8>
 8005452:	e000      	b.n	8005456 <HAL_RCC_OscConfig+0x10a>
 8005454:	bf00      	nop
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d063      	beq.n	800552a <HAL_RCC_OscConfig+0x1de>
 8005462:	4b4a      	ldr	r3, [pc, #296]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <HAL_RCC_OscConfig+0x13a>
 800546e:	4b47      	ldr	r3, [pc, #284]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b08      	cmp	r3, #8
 8005478:	d11c      	bne.n	80054b4 <HAL_RCC_OscConfig+0x168>
 800547a:	4b44      	ldr	r3, [pc, #272]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d116      	bne.n	80054b4 <HAL_RCC_OscConfig+0x168>
 8005486:	4b41      	ldr	r3, [pc, #260]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_RCC_OscConfig+0x152>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d001      	beq.n	800549e <HAL_RCC_OscConfig+0x152>
 800549a:	2301      	movs	r3, #1
 800549c:	e1c7      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 800549e:	4b3b      	ldr	r3, [pc, #236]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4937      	ldr	r1, [pc, #220]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]
 80054b2:	e03a      	b.n	800552a <HAL_RCC_OscConfig+0x1de>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d020      	beq.n	80054fe <HAL_RCC_OscConfig+0x1b2>
 80054bc:	4b34      	ldr	r3, [pc, #208]	@ (8005590 <HAL_RCC_OscConfig+0x244>)
 80054be:	2201      	movs	r2, #1
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	f7fe f97b 	bl	80037bc <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x190>
 80054ca:	f7fe f977 	bl	80037bc <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x190>
 80054d8:	2303      	movs	r3, #3
 80054da:	e1a8      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 80054dc:	4b2b      	ldr	r3, [pc, #172]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x17e>
 80054e8:	4b28      	ldr	r3, [pc, #160]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	4925      	ldr	r1, [pc, #148]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	600b      	str	r3, [r1, #0]
 80054fc:	e015      	b.n	800552a <HAL_RCC_OscConfig+0x1de>
 80054fe:	4b24      	ldr	r3, [pc, #144]	@ (8005590 <HAL_RCC_OscConfig+0x244>)
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f7fe f95a 	bl	80037bc <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x1d2>
 800550c:	f7fe f956 	bl	80037bc <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x1d2>
 800551a:	2303      	movs	r3, #3
 800551c:	e187      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 800551e:	4b1b      	ldr	r3, [pc, #108]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x1c0>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d036      	beq.n	80055a4 <HAL_RCC_OscConfig+0x258>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d016      	beq.n	800556c <HAL_RCC_OscConfig+0x220>
 800553e:	4b15      	ldr	r3, [pc, #84]	@ (8005594 <HAL_RCC_OscConfig+0x248>)
 8005540:	2201      	movs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	f7fe f93a 	bl	80037bc <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x212>
 800554c:	f7fe f936 	bl	80037bc <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x212>
 800555a:	2303      	movs	r3, #3
 800555c:	e167      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 800555e:	4b0b      	ldr	r3, [pc, #44]	@ (800558c <HAL_RCC_OscConfig+0x240>)
 8005560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0x200>
 800556a:	e01b      	b.n	80055a4 <HAL_RCC_OscConfig+0x258>
 800556c:	4b09      	ldr	r3, [pc, #36]	@ (8005594 <HAL_RCC_OscConfig+0x248>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	f7fe f923 	bl	80037bc <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]
 8005578:	e00e      	b.n	8005598 <HAL_RCC_OscConfig+0x24c>
 800557a:	f7fe f91f 	bl	80037bc <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d907      	bls.n	8005598 <HAL_RCC_OscConfig+0x24c>
 8005588:	2303      	movs	r3, #3
 800558a:	e150      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 800558c:	40023800 	.word	0x40023800
 8005590:	42470000 	.word	0x42470000
 8005594:	42470e80 	.word	0x42470e80
 8005598:	4b88      	ldr	r3, [pc, #544]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 800559a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1ea      	bne.n	800557a <HAL_RCC_OscConfig+0x22e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 8097 	beq.w	80056e0 <HAL_RCC_OscConfig+0x394>
 80055b2:	2300      	movs	r3, #0
 80055b4:	75fb      	strb	r3, [r7, #23]
 80055b6:	4b81      	ldr	r3, [pc, #516]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10f      	bne.n	80055e2 <HAL_RCC_OscConfig+0x296>
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	4b7d      	ldr	r3, [pc, #500]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	4a7c      	ldr	r2, [pc, #496]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 80055cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80055d2:	4b7a      	ldr	r3, [pc, #488]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2301      	movs	r3, #1
 80055e0:	75fb      	strb	r3, [r7, #23]
 80055e2:	4b77      	ldr	r3, [pc, #476]	@ (80057c0 <HAL_RCC_OscConfig+0x474>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d118      	bne.n	8005620 <HAL_RCC_OscConfig+0x2d4>
 80055ee:	4b74      	ldr	r3, [pc, #464]	@ (80057c0 <HAL_RCC_OscConfig+0x474>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a73      	ldr	r2, [pc, #460]	@ (80057c0 <HAL_RCC_OscConfig+0x474>)
 80055f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	f7fe f8df 	bl	80037bc <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x2c8>
 8005602:	f7fe f8db 	bl	80037bc <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x2c8>
 8005610:	2303      	movs	r3, #3
 8005612:	e10c      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 8005614:	4b6a      	ldr	r3, [pc, #424]	@ (80057c0 <HAL_RCC_OscConfig+0x474>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f0      	beq.n	8005602 <HAL_RCC_OscConfig+0x2b6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d106      	bne.n	8005636 <HAL_RCC_OscConfig+0x2ea>
 8005628:	4b64      	ldr	r3, [pc, #400]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562c:	4a63      	ldr	r2, [pc, #396]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	6713      	str	r3, [r2, #112]	@ 0x70
 8005634:	e01c      	b.n	8005670 <HAL_RCC_OscConfig+0x324>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b05      	cmp	r3, #5
 800563c:	d10c      	bne.n	8005658 <HAL_RCC_OscConfig+0x30c>
 800563e:	4b5f      	ldr	r3, [pc, #380]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005642:	4a5e      	ldr	r2, [pc, #376]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 8005644:	f043 0304 	orr.w	r3, r3, #4
 8005648:	6713      	str	r3, [r2, #112]	@ 0x70
 800564a:	4b5c      	ldr	r3, [pc, #368]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564e:	4a5b      	ldr	r2, [pc, #364]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	6713      	str	r3, [r2, #112]	@ 0x70
 8005656:	e00b      	b.n	8005670 <HAL_RCC_OscConfig+0x324>
 8005658:	4b58      	ldr	r3, [pc, #352]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565c:	4a57      	ldr	r2, [pc, #348]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	6713      	str	r3, [r2, #112]	@ 0x70
 8005664:	4b55      	ldr	r3, [pc, #340]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 8005666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005668:	4a54      	ldr	r2, [pc, #336]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 800566a:	f023 0304 	bic.w	r3, r3, #4
 800566e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d015      	beq.n	80056a4 <HAL_RCC_OscConfig+0x358>
 8005678:	f7fe f8a0 	bl	80037bc <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]
 800567e:	e00a      	b.n	8005696 <HAL_RCC_OscConfig+0x34a>
 8005680:	f7fe f89c 	bl	80037bc <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x34a>
 8005692:	2303      	movs	r3, #3
 8005694:	e0cb      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 8005696:	4b49      	ldr	r3, [pc, #292]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0ee      	beq.n	8005680 <HAL_RCC_OscConfig+0x334>
 80056a2:	e014      	b.n	80056ce <HAL_RCC_OscConfig+0x382>
 80056a4:	f7fe f88a 	bl	80037bc <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]
 80056aa:	e00a      	b.n	80056c2 <HAL_RCC_OscConfig+0x376>
 80056ac:	f7fe f886 	bl	80037bc <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x376>
 80056be:	2303      	movs	r3, #3
 80056c0:	e0b5      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 80056c2:	4b3e      	ldr	r3, [pc, #248]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1ee      	bne.n	80056ac <HAL_RCC_OscConfig+0x360>
 80056ce:	7dfb      	ldrb	r3, [r7, #23]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d105      	bne.n	80056e0 <HAL_RCC_OscConfig+0x394>
 80056d4:	4b39      	ldr	r3, [pc, #228]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 80056d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d8:	4a38      	ldr	r2, [pc, #224]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 80056da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056de:	6413      	str	r3, [r2, #64]	@ 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80a1 	beq.w	800582c <HAL_RCC_OscConfig+0x4e0>
 80056ea:	4b34      	ldr	r3, [pc, #208]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 030c 	and.w	r3, r3, #12
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d05c      	beq.n	80057b0 <HAL_RCC_OscConfig+0x464>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d141      	bne.n	8005782 <HAL_RCC_OscConfig+0x436>
 80056fe:	4b31      	ldr	r3, [pc, #196]	@ (80057c4 <HAL_RCC_OscConfig+0x478>)
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	f7fe f85a 	bl	80037bc <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x3d2>
 800570c:	f7fe f856 	bl	80037bc <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x3d2>
 800571a:	2303      	movs	r3, #3
 800571c:	e087      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 800571e:	4b27      	ldr	r3, [pc, #156]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x3c0>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005738:	019b      	lsls	r3, r3, #6
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	3b01      	subs	r3, #1
 8005744:	041b      	lsls	r3, r3, #16
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	061b      	lsls	r3, r3, #24
 800574e:	491b      	ldr	r1, [pc, #108]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 8005750:	4313      	orrs	r3, r2
 8005752:	604b      	str	r3, [r1, #4]
 8005754:	4b1b      	ldr	r3, [pc, #108]	@ (80057c4 <HAL_RCC_OscConfig+0x478>)
 8005756:	2201      	movs	r2, #1
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	f7fe f82f 	bl	80037bc <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x428>
 8005762:	f7fe f82b 	bl	80037bc <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x428>
 8005770:	2303      	movs	r3, #3
 8005772:	e05c      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 8005774:	4b11      	ldr	r3, [pc, #68]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCC_OscConfig+0x416>
 8005780:	e054      	b.n	800582c <HAL_RCC_OscConfig+0x4e0>
 8005782:	4b10      	ldr	r3, [pc, #64]	@ (80057c4 <HAL_RCC_OscConfig+0x478>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	f7fe f818 	bl	80037bc <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x456>
 8005790:	f7fe f814 	bl	80037bc <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x456>
 800579e:	2303      	movs	r3, #3
 80057a0:	e045      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 80057a2:	4b06      	ldr	r3, [pc, #24]	@ (80057bc <HAL_RCC_OscConfig+0x470>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f0      	bne.n	8005790 <HAL_RCC_OscConfig+0x444>
 80057ae:	e03d      	b.n	800582c <HAL_RCC_OscConfig+0x4e0>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d107      	bne.n	80057c8 <HAL_RCC_OscConfig+0x47c>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e038      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 80057bc:	40023800 	.word	0x40023800
 80057c0:	40007000 	.word	0x40007000
 80057c4:	42470060 	.word	0x42470060
 80057c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005838 <HAL_RCC_OscConfig+0x4ec>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d028      	beq.n	8005828 <HAL_RCC_OscConfig+0x4dc>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d121      	bne.n	8005828 <HAL_RCC_OscConfig+0x4dc>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d11a      	bne.n	8005828 <HAL_RCC_OscConfig+0x4dc>
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80057f8:	4013      	ands	r3, r2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057fe:	0192      	lsls	r2, r2, #6
 8005800:	4293      	cmp	r3, r2
 8005802:	d111      	bne.n	8005828 <HAL_RCC_OscConfig+0x4dc>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	3b01      	subs	r3, #1
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	429a      	cmp	r2, r3
 8005816:	d107      	bne.n	8005828 <HAL_RCC_OscConfig+0x4dc>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005822:	061b      	lsls	r3, r3, #24
 8005824:	429a      	cmp	r2, r3
 8005826:	d001      	beq.n	800582c <HAL_RCC_OscConfig+0x4e0>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <HAL_RCC_OscConfig+0x4e2>
 800582c:	2300      	movs	r3, #0
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40023800 	.word	0x40023800

0800583c <HAL_RCC_ClockConfig>:
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_ClockConfig+0x14>
 800584c:	2301      	movs	r3, #1
 800584e:	e0cc      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
 8005850:	4b68      	ldr	r3, [pc, #416]	@ (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d90c      	bls.n	8005878 <HAL_RCC_ClockConfig+0x3c>
 800585e:	4b65      	ldr	r3, [pc, #404]	@ (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	4b63      	ldr	r3, [pc, #396]	@ (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d001      	beq.n	8005878 <HAL_RCC_ClockConfig+0x3c>
 8005874:	2301      	movs	r3, #1
 8005876:	e0b8      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d020      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x8a>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_RCC_ClockConfig+0x60>
 8005890:	4b59      	ldr	r3, [pc, #356]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4a58      	ldr	r2, [pc, #352]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800589a:	6093      	str	r3, [r2, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x78>
 80058a8:	4b53      	ldr	r3, [pc, #332]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	4a52      	ldr	r2, [pc, #328]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80058b2:	6093      	str	r3, [r2, #8]
 80058b4:	4b50      	ldr	r3, [pc, #320]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	494d      	ldr	r1, [pc, #308]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d044      	beq.n	800595c <HAL_RCC_ClockConfig+0x120>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d107      	bne.n	80058ea <HAL_RCC_ClockConfig+0xae>
 80058da:	4b47      	ldr	r3, [pc, #284]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d119      	bne.n	800591a <HAL_RCC_ClockConfig+0xde>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e07f      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d003      	beq.n	80058fa <HAL_RCC_ClockConfig+0xbe>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d107      	bne.n	800590a <HAL_RCC_ClockConfig+0xce>
 80058fa:	4b3f      	ldr	r3, [pc, #252]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d109      	bne.n	800591a <HAL_RCC_ClockConfig+0xde>
 8005906:	2301      	movs	r3, #1
 8005908:	e06f      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
 800590a:	4b3b      	ldr	r3, [pc, #236]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_ClockConfig+0xde>
 8005916:	2301      	movs	r3, #1
 8005918:	e067      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
 800591a:	4b37      	ldr	r3, [pc, #220]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f023 0203 	bic.w	r2, r3, #3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	4934      	ldr	r1, [pc, #208]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	4313      	orrs	r3, r2
 800592a:	608b      	str	r3, [r1, #8]
 800592c:	f7fd ff46 	bl	80037bc <HAL_GetTick>
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	e00a      	b.n	800594a <HAL_RCC_ClockConfig+0x10e>
 8005934:	f7fd ff42 	bl	80037bc <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCC_ClockConfig+0x10e>
 8005946:	2303      	movs	r3, #3
 8005948:	e04f      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
 800594a:	4b2b      	ldr	r3, [pc, #172]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 020c 	and.w	r2, r3, #12
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	429a      	cmp	r2, r3
 800595a:	d1eb      	bne.n	8005934 <HAL_RCC_ClockConfig+0xf8>
 800595c:	4b25      	ldr	r3, [pc, #148]	@ (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d20c      	bcs.n	8005984 <HAL_RCC_ClockConfig+0x148>
 800596a:	4b22      	ldr	r3, [pc, #136]	@ (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	4b20      	ldr	r3, [pc, #128]	@ (80059f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d001      	beq.n	8005984 <HAL_RCC_ClockConfig+0x148>
 8005980:	2301      	movs	r3, #1
 8005982:	e032      	b.n	80059ea <HAL_RCC_ClockConfig+0x1ae>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x166>
 8005990:	4b19      	ldr	r3, [pc, #100]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4916      	ldr	r1, [pc, #88]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	608b      	str	r3, [r1, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x186>
 80059ae:	4b12      	ldr	r3, [pc, #72]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	490e      	ldr	r1, [pc, #56]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]
 80059c2:	f000 f821 	bl	8005a08 <HAL_RCC_GetSysClockFreq>
 80059c6:	4602      	mov	r2, r0
 80059c8:	4b0b      	ldr	r3, [pc, #44]	@ (80059f8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	091b      	lsrs	r3, r3, #4
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	490a      	ldr	r1, [pc, #40]	@ (80059fc <HAL_RCC_ClockConfig+0x1c0>)
 80059d4:	5ccb      	ldrb	r3, [r1, r3]
 80059d6:	fa22 f303 	lsr.w	r3, r2, r3
 80059da:	4a09      	ldr	r2, [pc, #36]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	4b09      	ldr	r3, [pc, #36]	@ (8005a04 <HAL_RCC_ClockConfig+0x1c8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fd fea6 	bl	8003734 <HAL_InitTick>
 80059e8:	2300      	movs	r3, #0
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40023c00 	.word	0x40023c00
 80059f8:	40023800 	.word	0x40023800
 80059fc:	08007ee8 	.word	0x08007ee8
 8005a00:	20000000 	.word	0x20000000
 8005a04:	20000004 	.word	0x20000004

08005a08 <HAL_RCC_GetSysClockFreq>:
 8005a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a0c:	b090      	sub	sp, #64	@ 0x40
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	2300      	movs	r3, #0
 8005a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a14:	2300      	movs	r3, #0
 8005a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a18:	2300      	movs	r3, #0
 8005a1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a20:	4b59      	ldr	r3, [pc, #356]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 030c 	and.w	r3, r3, #12
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d00d      	beq.n	8005a48 <HAL_RCC_GetSysClockFreq+0x40>
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	f200 80a1 	bhi.w	8005b74 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_RCC_GetSysClockFreq+0x34>
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d003      	beq.n	8005a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a3a:	e09b      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a3c:	4b53      	ldr	r3, [pc, #332]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x184>)
 8005a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a40:	e09b      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x172>
 8005a42:	4b53      	ldr	r3, [pc, #332]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a46:	e098      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x172>
 8005a48:	4b4f      	ldr	r3, [pc, #316]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a52:	4b4d      	ldr	r3, [pc, #308]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d028      	beq.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xa8>
 8005a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	099b      	lsrs	r3, r3, #6
 8005a64:	2200      	movs	r2, #0
 8005a66:	623b      	str	r3, [r7, #32]
 8005a68:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a70:	2100      	movs	r1, #0
 8005a72:	4b47      	ldr	r3, [pc, #284]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a74:	fb03 f201 	mul.w	r2, r3, r1
 8005a78:	2300      	movs	r3, #0
 8005a7a:	fb00 f303 	mul.w	r3, r0, r3
 8005a7e:	4413      	add	r3, r2
 8005a80:	4a43      	ldr	r2, [pc, #268]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a82:	fba0 1202 	umull	r1, r2, r0, r2
 8005a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a88:	460a      	mov	r2, r1
 8005a8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a8e:	4413      	add	r3, r2
 8005a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a94:	2200      	movs	r2, #0
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	61fa      	str	r2, [r7, #28]
 8005a9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005aa2:	f7fb f803 	bl	8000aac <__aeabi_uldivmod>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4613      	mov	r3, r2
 8005aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aae:	e053      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x150>
 8005ab0:	4b35      	ldr	r3, [pc, #212]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	099b      	lsrs	r3, r3, #6
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	613b      	str	r3, [r7, #16]
 8005aba:	617a      	str	r2, [r7, #20]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005ac2:	f04f 0b00 	mov.w	fp, #0
 8005ac6:	4652      	mov	r2, sl
 8005ac8:	465b      	mov	r3, fp
 8005aca:	f04f 0000 	mov.w	r0, #0
 8005ace:	f04f 0100 	mov.w	r1, #0
 8005ad2:	0159      	lsls	r1, r3, #5
 8005ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ad8:	0150      	lsls	r0, r2, #5
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	ebb2 080a 	subs.w	r8, r2, sl
 8005ae2:	eb63 090b 	sbc.w	r9, r3, fp
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005af2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005af6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005afa:	ebb2 0408 	subs.w	r4, r2, r8
 8005afe:	eb63 0509 	sbc.w	r5, r3, r9
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	f04f 0300 	mov.w	r3, #0
 8005b0a:	00eb      	lsls	r3, r5, #3
 8005b0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b10:	00e2      	lsls	r2, r4, #3
 8005b12:	4614      	mov	r4, r2
 8005b14:	461d      	mov	r5, r3
 8005b16:	eb14 030a 	adds.w	r3, r4, sl
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	eb45 030b 	adc.w	r3, r5, fp
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b2e:	4629      	mov	r1, r5
 8005b30:	028b      	lsls	r3, r1, #10
 8005b32:	4621      	mov	r1, r4
 8005b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b38:	4621      	mov	r1, r4
 8005b3a:	028a      	lsls	r2, r1, #10
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b42:	2200      	movs	r2, #0
 8005b44:	60bb      	str	r3, [r7, #8]
 8005b46:	60fa      	str	r2, [r7, #12]
 8005b48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b4c:	f7fa ffae 	bl	8000aac <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4613      	mov	r3, r2
 8005b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b58:	4b0b      	ldr	r3, [pc, #44]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	3301      	adds	r3, #1
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b72:	e002      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x172>
 8005b74:	4b05      	ldr	r3, [pc, #20]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x184>)
 8005b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b78:	bf00      	nop
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3740      	adds	r7, #64	@ 0x40
 8005b80:	46bd      	mov	sp, r7
 8005b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	00f42400 	.word	0x00f42400
 8005b90:	017d7840 	.word	0x017d7840

08005b94 <HAL_RCC_GetHCLKFreq>:
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	4b03      	ldr	r3, [pc, #12]	@ (8005ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20000000 	.word	0x20000000

08005bac <HAL_RCC_GetPCLK1Freq>:
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	f7ff fff0 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	4b05      	ldr	r3, [pc, #20]	@ (8005bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	0a9b      	lsrs	r3, r3, #10
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	4903      	ldr	r1, [pc, #12]	@ (8005bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bc2:	5ccb      	ldrb	r3, [r1, r3]
 8005bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc8:	4618      	mov	r0, r3
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	08007ef8 	.word	0x08007ef8

08005bd4 <HAL_SPI_Init>:
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_SPI_Init+0x12>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e07b      	b.n	8005cde <HAL_SPI_Init+0x10a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d108      	bne.n	8005c00 <HAL_SPI_Init+0x2c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bf6:	d009      	beq.n	8005c0c <HAL_SPI_Init+0x38>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	61da      	str	r2, [r3, #28]
 8005bfe:	e005      	b.n	8005c0c <HAL_SPI_Init+0x38>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	611a      	str	r2, [r3, #16]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	615a      	str	r2, [r3, #20]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <HAL_SPI_Init+0x58>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fd f900 	bl	8002e2c <HAL_SPI_MspInit>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c90:	ea42 0103 	orr.w	r1, r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	0c1b      	lsrs	r3, r3, #16
 8005caa:	f003 0104 	and.w	r1, r3, #4
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb2:	f003 0210 	and.w	r2, r3, #16
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ccc:	61da      	str	r2, [r3, #28]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	655a      	str	r2, [r3, #84]	@ 0x54
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_SPI_Transmit>:
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b088      	sub	sp, #32
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	603b      	str	r3, [r7, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	80fb      	strh	r3, [r7, #6]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_SPI_Transmit+0x22>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e12d      	b.n	8005f64 <HAL_SPI_Transmit+0x27e>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005d10:	f7fd fd54 	bl	80037bc <HAL_GetTick>
 8005d14:	61b8      	str	r0, [r7, #24]
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	82fb      	strh	r3, [r7, #22]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d002      	beq.n	8005d2c <HAL_SPI_Transmit+0x46>
 8005d26:	2302      	movs	r3, #2
 8005d28:	77fb      	strb	r3, [r7, #31]
 8005d2a:	e116      	b.n	8005f5a <HAL_SPI_Transmit+0x274>
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_SPI_Transmit+0x52>
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <HAL_SPI_Transmit+0x58>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e10d      	b.n	8005f5a <HAL_SPI_Transmit+0x274>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2203      	movs	r2, #3
 8005d42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	88fa      	ldrh	r2, [r7, #6]
 8005d56:	869a      	strh	r2, [r3, #52]	@ 0x34
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	88fa      	ldrh	r2, [r7, #6]
 8005d5c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	645a      	str	r2, [r3, #68]	@ 0x44
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d84:	d10f      	bne.n	8005da6 <HAL_SPI_Transmit+0xc0>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db0:	2b40      	cmp	r3, #64	@ 0x40
 8005db2:	d007      	beq.n	8005dc4 <HAL_SPI_Transmit+0xde>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dcc:	d14f      	bne.n	8005e6e <HAL_SPI_Transmit+0x188>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <HAL_SPI_Transmit+0xf6>
 8005dd6:	8afb      	ldrh	r3, [r7, #22]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d142      	bne.n	8005e62 <HAL_SPI_Transmit+0x17c>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de0:	881a      	ldrh	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60da      	str	r2, [r3, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dec:	1c9a      	adds	r2, r3, #2
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e00:	e02f      	b.n	8005e62 <HAL_SPI_Transmit+0x17c>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d112      	bne.n	8005e36 <HAL_SPI_Transmit+0x150>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e14:	881a      	ldrh	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60da      	str	r2, [r3, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e20:	1c9a      	adds	r2, r3, #2
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e34:	e015      	b.n	8005e62 <HAL_SPI_Transmit+0x17c>
 8005e36:	f7fd fcc1 	bl	80037bc <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d803      	bhi.n	8005e4e <HAL_SPI_Transmit+0x168>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d102      	bne.n	8005e54 <HAL_SPI_Transmit+0x16e>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <HAL_SPI_Transmit+0x17c>
 8005e54:	2303      	movs	r3, #3
 8005e56:	77fb      	strb	r3, [r7, #31]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005e60:	e07b      	b.n	8005f5a <HAL_SPI_Transmit+0x274>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1ca      	bne.n	8005e02 <HAL_SPI_Transmit+0x11c>
 8005e6c:	e050      	b.n	8005f10 <HAL_SPI_Transmit+0x22a>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_SPI_Transmit+0x196>
 8005e76:	8afb      	ldrh	r3, [r7, #22]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d144      	bne.n	8005f06 <HAL_SPI_Transmit+0x220>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	7812      	ldrb	r2, [r2, #0]
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ea2:	e030      	b.n	8005f06 <HAL_SPI_Transmit+0x220>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d113      	bne.n	8005eda <HAL_SPI_Transmit+0x1f4>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	7812      	ldrb	r2, [r2, #0]
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ed8:	e015      	b.n	8005f06 <HAL_SPI_Transmit+0x220>
 8005eda:	f7fd fc6f 	bl	80037bc <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d803      	bhi.n	8005ef2 <HAL_SPI_Transmit+0x20c>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef0:	d102      	bne.n	8005ef8 <HAL_SPI_Transmit+0x212>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <HAL_SPI_Transmit+0x220>
 8005ef8:	2303      	movs	r3, #3
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005f04:	e029      	b.n	8005f5a <HAL_SPI_Transmit+0x274>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1c9      	bne.n	8005ea4 <HAL_SPI_Transmit+0x1be>
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 fbdf 	bl	80066d8 <SPI_EndRxTxTransaction>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_SPI_Transmit+0x240>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	655a      	str	r2, [r3, #84]	@ 0x54
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <HAL_SPI_Transmit+0x25e>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_SPI_Transmit+0x26c>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e003      	b.n	8005f5a <HAL_SPI_Transmit+0x274>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005f62:	7ffb      	ldrb	r3, [r7, #31]
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_SPI_Receive>:
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	80fb      	strh	r3, [r7, #6]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	75fb      	strb	r3, [r7, #23]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d002      	beq.n	8005f92 <HAL_SPI_Receive+0x26>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	75fb      	strb	r3, [r7, #23]
 8005f90:	e0fb      	b.n	800618a <HAL_SPI_Receive+0x21e>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f9a:	d112      	bne.n	8005fc2 <HAL_SPI_Receive+0x56>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10e      	bne.n	8005fc2 <HAL_SPI_Receive+0x56>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005fac:	88fa      	ldrh	r2, [r7, #6]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f8ef 	bl	800619c <HAL_SPI_TransmitReceive>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	e0e8      	b.n	8006194 <HAL_SPI_Receive+0x228>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_SPI_Receive+0x64>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e0e1      	b.n	8006194 <HAL_SPI_Receive+0x228>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005fd8:	f7fd fbf0 	bl	80037bc <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <HAL_SPI_Receive+0x7e>
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <HAL_SPI_Receive+0x84>
 8005fea:	2301      	movs	r3, #1
 8005fec:	75fb      	strb	r3, [r7, #23]
 8005fee:	e0cc      	b.n	800618a <HAL_SPI_Receive+0x21e>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2204      	movs	r2, #4
 8005ff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	639a      	str	r2, [r3, #56]	@ 0x38
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	88fa      	ldrh	r2, [r7, #6]
 8006008:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	88fa      	ldrh	r2, [r7, #6]
 800600e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	631a      	str	r2, [r3, #48]	@ 0x30
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	869a      	strh	r2, [r3, #52]	@ 0x34
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	641a      	str	r2, [r3, #64]	@ 0x40
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	645a      	str	r2, [r3, #68]	@ 0x44
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006036:	d10f      	bne.n	8006058 <HAL_SPI_Receive+0xec>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006062:	2b40      	cmp	r3, #64	@ 0x40
 8006064:	d007      	beq.n	8006076 <HAL_SPI_Receive+0x10a>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d16a      	bne.n	8006154 <HAL_SPI_Receive+0x1e8>
 800607e:	e032      	b.n	80060e6 <HAL_SPI_Receive+0x17a>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b01      	cmp	r3, #1
 800608c:	d115      	bne.n	80060ba <HAL_SPI_Receive+0x14e>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f103 020c 	add.w	r2, r3, #12
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609a:	7812      	ldrb	r2, [r2, #0]
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060b8:	e015      	b.n	80060e6 <HAL_SPI_Receive+0x17a>
 80060ba:	f7fd fb7f 	bl	80037bc <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d803      	bhi.n	80060d2 <HAL_SPI_Receive+0x166>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_Receive+0x16c>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d106      	bne.n	80060e6 <HAL_SPI_Receive+0x17a>
 80060d8:	2303      	movs	r3, #3
 80060da:	75fb      	strb	r3, [r7, #23]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80060e4:	e051      	b.n	800618a <HAL_SPI_Receive+0x21e>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1c7      	bne.n	8006080 <HAL_SPI_Receive+0x114>
 80060f0:	e035      	b.n	800615e <HAL_SPI_Receive+0x1f2>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d113      	bne.n	8006128 <HAL_SPI_Receive+0x1bc>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610a:	b292      	uxth	r2, r2
 800610c:	801a      	strh	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006112:	1c9a      	adds	r2, r3, #2
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	639a      	str	r2, [r3, #56]	@ 0x38
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006126:	e015      	b.n	8006154 <HAL_SPI_Receive+0x1e8>
 8006128:	f7fd fb48 	bl	80037bc <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d803      	bhi.n	8006140 <HAL_SPI_Receive+0x1d4>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d102      	bne.n	8006146 <HAL_SPI_Receive+0x1da>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <HAL_SPI_Receive+0x1e8>
 8006146:	2303      	movs	r3, #3
 8006148:	75fb      	strb	r3, [r7, #23]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006152:	e01a      	b.n	800618a <HAL_SPI_Receive+0x21e>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1c9      	bne.n	80060f2 <HAL_SPI_Receive+0x186>
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fa52 	bl	800660c <SPI_EndRxTransaction>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_SPI_Receive+0x208>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	655a      	str	r2, [r3, #84]	@ 0x54
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_SPI_Receive+0x216>
 800617c:	2301      	movs	r3, #1
 800617e:	75fb      	strb	r3, [r7, #23]
 8006180:	e003      	b.n	800618a <HAL_SPI_Receive+0x21e>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_SPI_TransmitReceive>:
 800619c:	b580      	push	{r7, lr}
 800619e:	b08c      	sub	sp, #48	@ 0x30
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	807b      	strh	r3, [r7, #2]
 80061aa:	2301      	movs	r3, #1
 80061ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061ae:	2300      	movs	r3, #0
 80061b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_SPI_TransmitReceive+0x26>
 80061be:	2302      	movs	r3, #2
 80061c0:	e198      	b.n	80064f4 <HAL_SPI_TransmitReceive+0x358>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80061ca:	f7fd faf7 	bl	80037bc <HAL_GetTick>
 80061ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	887b      	ldrh	r3, [r7, #2]
 80061e2:	837b      	strh	r3, [r7, #26]
 80061e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d00f      	beq.n	800620c <HAL_SPI_TransmitReceive+0x70>
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061f2:	d107      	bne.n	8006204 <HAL_SPI_TransmitReceive+0x68>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d103      	bne.n	8006204 <HAL_SPI_TransmitReceive+0x68>
 80061fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006200:	2b04      	cmp	r3, #4
 8006202:	d003      	beq.n	800620c <HAL_SPI_TransmitReceive+0x70>
 8006204:	2302      	movs	r3, #2
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800620a:	e16d      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x34c>
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_SPI_TransmitReceive+0x82>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <HAL_SPI_TransmitReceive+0x82>
 8006218:	887b      	ldrh	r3, [r7, #2]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d103      	bne.n	8006226 <HAL_SPI_TransmitReceive+0x8a>
 800621e:	2301      	movs	r3, #1
 8006220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006224:	e160      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x34c>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b04      	cmp	r3, #4
 8006230:	d003      	beq.n	800623a <HAL_SPI_TransmitReceive+0x9e>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2205      	movs	r2, #5
 8006236:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	639a      	str	r2, [r3, #56]	@ 0x38
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	887a      	ldrh	r2, [r7, #2]
 800624a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	887a      	ldrh	r2, [r7, #2]
 8006250:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	631a      	str	r2, [r3, #48]	@ 0x30
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	887a      	ldrh	r2, [r7, #2]
 800625c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	887a      	ldrh	r2, [r7, #2]
 8006262:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	641a      	str	r2, [r3, #64]	@ 0x40
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	645a      	str	r2, [r3, #68]	@ 0x44
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627a:	2b40      	cmp	r3, #64	@ 0x40
 800627c:	d007      	beq.n	800628e <HAL_SPI_TransmitReceive+0xf2>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006296:	d17c      	bne.n	8006392 <HAL_SPI_TransmitReceive+0x1f6>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <HAL_SPI_TransmitReceive+0x10a>
 80062a0:	8b7b      	ldrh	r3, [r7, #26]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d16a      	bne.n	800637c <HAL_SPI_TransmitReceive+0x1e0>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062aa:	881a      	ldrh	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60da      	str	r2, [r3, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b6:	1c9a      	adds	r2, r3, #2
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062ca:	e057      	b.n	800637c <HAL_SPI_TransmitReceive+0x1e0>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d11b      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x176>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d016      	beq.n	8006312 <HAL_SPI_TransmitReceive+0x176>
 80062e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d113      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x176>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ee:	881a      	ldrh	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60da      	str	r2, [r3, #12]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062fa:	1c9a      	adds	r2, r3, #2
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006304:	b29b      	uxth	r3, r3
 8006306:	3b01      	subs	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800630e:	2300      	movs	r3, #0
 8006310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b01      	cmp	r3, #1
 800631e:	d119      	bne.n	8006354 <HAL_SPI_TransmitReceive+0x1b8>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d014      	beq.n	8006354 <HAL_SPI_TransmitReceive+0x1b8>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006334:	b292      	uxth	r2, r2
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633c:	1c9a      	adds	r2, r3, #2
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	639a      	str	r2, [r3, #56]	@ 0x38
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006350:	2301      	movs	r3, #1
 8006352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006354:	f7fd fa32 	bl	80037bc <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006360:	429a      	cmp	r2, r3
 8006362:	d80b      	bhi.n	800637c <HAL_SPI_TransmitReceive+0x1e0>
 8006364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636a:	d007      	beq.n	800637c <HAL_SPI_TransmitReceive+0x1e0>
 800636c:	2303      	movs	r3, #3
 800636e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800637a:	e0b5      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x34c>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1a2      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x130>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d19d      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x130>
 8006390:	e080      	b.n	8006494 <HAL_SPI_TransmitReceive+0x2f8>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_SPI_TransmitReceive+0x204>
 800639a:	8b7b      	ldrh	r3, [r7, #26]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d16f      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x2e4>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80063c6:	e05b      	b.n	8006480 <HAL_SPI_TransmitReceive+0x2e4>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d11c      	bne.n	8006410 <HAL_SPI_TransmitReceive+0x274>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d017      	beq.n	8006410 <HAL_SPI_TransmitReceive+0x274>
 80063e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d114      	bne.n	8006410 <HAL_SPI_TransmitReceive+0x274>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	7812      	ldrb	r2, [r2, #0]
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800640c:	2300      	movs	r3, #0
 800640e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b01      	cmp	r3, #1
 800641c:	d119      	bne.n	8006452 <HAL_SPI_TransmitReceive+0x2b6>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d014      	beq.n	8006452 <HAL_SPI_TransmitReceive+0x2b6>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800644e:	2301      	movs	r3, #1
 8006450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006452:	f7fd f9b3 	bl	80037bc <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800645e:	429a      	cmp	r2, r3
 8006460:	d803      	bhi.n	800646a <HAL_SPI_TransmitReceive+0x2ce>
 8006462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d102      	bne.n	8006470 <HAL_SPI_TransmitReceive+0x2d4>
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d107      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x2e4>
 8006470:	2303      	movs	r3, #3
 8006472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800647e:	e033      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x34c>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d19e      	bne.n	80063c8 <HAL_SPI_TransmitReceive+0x22c>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d199      	bne.n	80063c8 <HAL_SPI_TransmitReceive+0x22c>
 8006494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006496:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f91d 	bl	80066d8 <SPI_EndRxTxTransaction>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d006      	beq.n	80064b2 <HAL_SPI_TransmitReceive+0x316>
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80064b0:	e01a      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x34c>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <HAL_SPI_TransmitReceive+0x334>
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <HAL_SPI_TransmitReceive+0x344>
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064de:	e003      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x34c>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80064f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064f4:	4618      	mov	r0, r3
 80064f6:	3730      	adds	r7, #48	@ 0x30
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <SPI_WaitFlagStateUntilTimeout>:
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	4613      	mov	r3, r2
 800650a:	71fb      	strb	r3, [r7, #7]
 800650c:	f7fd f956 	bl	80037bc <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	4413      	add	r3, r2
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	f7fd f94e 	bl	80037bc <HAL_GetTick>
 8006520:	61b8      	str	r0, [r7, #24]
 8006522:	4b39      	ldr	r3, [pc, #228]	@ (8006608 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	015b      	lsls	r3, r3, #5
 8006528:	0d1b      	lsrs	r3, r3, #20
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	fb02 f303 	mul.w	r3, r2, r3
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	e054      	b.n	80065de <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653a:	d050      	beq.n	80065de <SPI_WaitFlagStateUntilTimeout+0xe2>
 800653c:	f7fd f93e 	bl	80037bc <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	69fa      	ldr	r2, [r7, #28]
 8006548:	429a      	cmp	r2, r3
 800654a:	d902      	bls.n	8006552 <SPI_WaitFlagStateUntilTimeout+0x56>
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d13d      	bne.n	80065ce <SPI_WaitFlagStateUntilTimeout+0xd2>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800656a:	d111      	bne.n	8006590 <SPI_WaitFlagStateUntilTimeout+0x94>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006574:	d004      	beq.n	8006580 <SPI_WaitFlagStateUntilTimeout+0x84>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800657e:	d107      	bne.n	8006590 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006594:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006598:	d10f      	bne.n	80065ba <SPI_WaitFlagStateUntilTimeout+0xbe>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80065ca:	2303      	movs	r3, #3
 80065cc:	e017      	b.n	80065fe <SPI_WaitFlagStateUntilTimeout+0x102>
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
 80065d4:	2300      	movs	r3, #0
 80065d6:	61fb      	str	r3, [r7, #28]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	3b01      	subs	r3, #1
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4013      	ands	r3, r2
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	bf0c      	ite	eq
 80065ee:	2301      	moveq	r3, #1
 80065f0:	2300      	movne	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d19b      	bne.n	8006534 <SPI_WaitFlagStateUntilTimeout+0x38>
 80065fc:	2300      	movs	r3, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	3720      	adds	r7, #32
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20000000 	.word	0x20000000

0800660c <SPI_EndRxTransaction>:
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af02      	add	r7, sp, #8
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006620:	d111      	bne.n	8006646 <SPI_EndRxTransaction+0x3a>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800662a:	d004      	beq.n	8006636 <SPI_EndRxTransaction+0x2a>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006634:	d107      	bne.n	8006646 <SPI_EndRxTransaction+0x3a>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800664e:	d12a      	bne.n	80066a6 <SPI_EndRxTransaction+0x9a>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006658:	d012      	beq.n	8006680 <SPI_EndRxTransaction+0x74>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2200      	movs	r2, #0
 8006662:	2180      	movs	r1, #128	@ 0x80
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7ff ff49 	bl	80064fc <SPI_WaitFlagStateUntilTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d02d      	beq.n	80066cc <SPI_EndRxTransaction+0xc0>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006674:	f043 0220 	orr.w	r2, r3, #32
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	655a      	str	r2, [r3, #84]	@ 0x54
 800667c:	2303      	movs	r3, #3
 800667e:	e026      	b.n	80066ce <SPI_EndRxTransaction+0xc2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2200      	movs	r2, #0
 8006688:	2101      	movs	r1, #1
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7ff ff36 	bl	80064fc <SPI_WaitFlagStateUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d01a      	beq.n	80066cc <SPI_EndRxTransaction+0xc0>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800669a:	f043 0220 	orr.w	r2, r3, #32
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80066a2:	2303      	movs	r3, #3
 80066a4:	e013      	b.n	80066ce <SPI_EndRxTransaction+0xc2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2200      	movs	r2, #0
 80066ae:	2101      	movs	r1, #1
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f7ff ff23 	bl	80064fc <SPI_WaitFlagStateUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d007      	beq.n	80066cc <SPI_EndRxTransaction+0xc0>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c0:	f043 0220 	orr.w	r2, r3, #32
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80066c8:	2303      	movs	r3, #3
 80066ca:	e000      	b.n	80066ce <SPI_EndRxTransaction+0xc2>
 80066cc:	2300      	movs	r3, #0
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
	...

080066d8 <SPI_EndRxTxTransaction>:
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2201      	movs	r2, #1
 80066ec:	2102      	movs	r1, #2
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff ff04 	bl	80064fc <SPI_WaitFlagStateUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <SPI_EndRxTxTransaction+0x32>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fe:	f043 0220 	orr.w	r2, r3, #32
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	655a      	str	r2, [r3, #84]	@ 0x54
 8006706:	2303      	movs	r3, #3
 8006708:	e032      	b.n	8006770 <SPI_EndRxTxTransaction+0x98>
 800670a:	4b1b      	ldr	r3, [pc, #108]	@ (8006778 <SPI_EndRxTxTransaction+0xa0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1b      	ldr	r2, [pc, #108]	@ (800677c <SPI_EndRxTxTransaction+0xa4>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	0d5b      	lsrs	r3, r3, #21
 8006716:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800671a:	fb02 f303 	mul.w	r3, r2, r3
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006728:	d112      	bne.n	8006750 <SPI_EndRxTxTransaction+0x78>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2200      	movs	r2, #0
 8006732:	2180      	movs	r1, #128	@ 0x80
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff fee1 	bl	80064fc <SPI_WaitFlagStateUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d016      	beq.n	800676e <SPI_EndRxTxTransaction+0x96>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006744:	f043 0220 	orr.w	r2, r3, #32
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	655a      	str	r2, [r3, #84]	@ 0x54
 800674c:	2303      	movs	r3, #3
 800674e:	e00f      	b.n	8006770 <SPI_EndRxTxTransaction+0x98>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <SPI_EndRxTxTransaction+0x94>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	3b01      	subs	r3, #1
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006766:	2b80      	cmp	r3, #128	@ 0x80
 8006768:	d0f2      	beq.n	8006750 <SPI_EndRxTxTransaction+0x78>
 800676a:	e000      	b.n	800676e <SPI_EndRxTxTransaction+0x96>
 800676c:	bf00      	nop
 800676e:	2300      	movs	r3, #0
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000000 	.word	0x20000000
 800677c:	165e9f81 	.word	0x165e9f81

08006780 <HAL_TIM_Base_Init>:
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_TIM_Base_Init+0x12>
 800678e:	2301      	movs	r3, #1
 8006790:	e041      	b.n	8006816 <HAL_TIM_Base_Init+0x96>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_TIM_Base_Init+0x2c>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fc fc30 	bl	800300c <HAL_TIM_Base_MspInit>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3304      	adds	r3, #4
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f000 f976 	bl	8006ab0 <TIM_Base_SetConfig>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006814:	2300      	movs	r3, #0
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <HAL_TIM_Base_Start>:
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	d001      	beq.n	8006838 <HAL_TIM_Base_Start+0x18>
 8006834:	2301      	movs	r3, #1
 8006836:	e03c      	b.n	80068b2 <HAL_TIM_Base_Start+0x92>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1e      	ldr	r2, [pc, #120]	@ (80068c0 <HAL_TIM_Base_Start+0xa0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d018      	beq.n	800687c <HAL_TIM_Base_Start+0x5c>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006852:	d013      	beq.n	800687c <HAL_TIM_Base_Start+0x5c>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1a      	ldr	r2, [pc, #104]	@ (80068c4 <HAL_TIM_Base_Start+0xa4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00e      	beq.n	800687c <HAL_TIM_Base_Start+0x5c>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a19      	ldr	r2, [pc, #100]	@ (80068c8 <HAL_TIM_Base_Start+0xa8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d009      	beq.n	800687c <HAL_TIM_Base_Start+0x5c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a17      	ldr	r2, [pc, #92]	@ (80068cc <HAL_TIM_Base_Start+0xac>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d004      	beq.n	800687c <HAL_TIM_Base_Start+0x5c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a16      	ldr	r2, [pc, #88]	@ (80068d0 <HAL_TIM_Base_Start+0xb0>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d111      	bne.n	80068a0 <HAL_TIM_Base_Start+0x80>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b06      	cmp	r3, #6
 800688c:	d010      	beq.n	80068b0 <HAL_TIM_Base_Start+0x90>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0201 	orr.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	e007      	b.n	80068b0 <HAL_TIM_Base_Start+0x90>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	2300      	movs	r3, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40010000 	.word	0x40010000
 80068c4:	40000400 	.word	0x40000400
 80068c8:	40000800 	.word	0x40000800
 80068cc:	40000c00 	.word	0x40000c00
 80068d0:	40014000 	.word	0x40014000

080068d4 <HAL_TIM_Base_Stop>:
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6a1a      	ldr	r2, [r3, #32]
 80068e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80068e6:	4013      	ands	r3, r2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10f      	bne.n	800690c <HAL_TIM_Base_Stop+0x38>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6a1a      	ldr	r2, [r3, #32]
 80068f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d107      	bne.n	800690c <HAL_TIM_Base_Stop+0x38>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0201 	bic.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006914:	2300      	movs	r3, #0
 8006916:	4618      	mov	r0, r3
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <HAL_TIM_ConfigClockSource>:
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <HAL_TIM_ConfigClockSource+0x1c>
 800693a:	2302      	movs	r3, #2
 800693c:	e0b4      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x186>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2202      	movs	r2, #2
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	60bb      	str	r3, [r7, #8]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	609a      	str	r2, [r3, #8]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006976:	d03e      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0xd4>
 8006978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800697c:	f200 8087 	bhi.w	8006a8e <HAL_TIM_ConfigClockSource+0x16c>
 8006980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006984:	f000 8086 	beq.w	8006a94 <HAL_TIM_ConfigClockSource+0x172>
 8006988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800698c:	d87f      	bhi.n	8006a8e <HAL_TIM_ConfigClockSource+0x16c>
 800698e:	2b70      	cmp	r3, #112	@ 0x70
 8006990:	d01a      	beq.n	80069c8 <HAL_TIM_ConfigClockSource+0xa6>
 8006992:	2b70      	cmp	r3, #112	@ 0x70
 8006994:	d87b      	bhi.n	8006a8e <HAL_TIM_ConfigClockSource+0x16c>
 8006996:	2b60      	cmp	r3, #96	@ 0x60
 8006998:	d050      	beq.n	8006a3c <HAL_TIM_ConfigClockSource+0x11a>
 800699a:	2b60      	cmp	r3, #96	@ 0x60
 800699c:	d877      	bhi.n	8006a8e <HAL_TIM_ConfigClockSource+0x16c>
 800699e:	2b50      	cmp	r3, #80	@ 0x50
 80069a0:	d03c      	beq.n	8006a1c <HAL_TIM_ConfigClockSource+0xfa>
 80069a2:	2b50      	cmp	r3, #80	@ 0x50
 80069a4:	d873      	bhi.n	8006a8e <HAL_TIM_ConfigClockSource+0x16c>
 80069a6:	2b40      	cmp	r3, #64	@ 0x40
 80069a8:	d058      	beq.n	8006a5c <HAL_TIM_ConfigClockSource+0x13a>
 80069aa:	2b40      	cmp	r3, #64	@ 0x40
 80069ac:	d86f      	bhi.n	8006a8e <HAL_TIM_ConfigClockSource+0x16c>
 80069ae:	2b30      	cmp	r3, #48	@ 0x30
 80069b0:	d064      	beq.n	8006a7c <HAL_TIM_ConfigClockSource+0x15a>
 80069b2:	2b30      	cmp	r3, #48	@ 0x30
 80069b4:	d86b      	bhi.n	8006a8e <HAL_TIM_ConfigClockSource+0x16c>
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d060      	beq.n	8006a7c <HAL_TIM_ConfigClockSource+0x15a>
 80069ba:	2b20      	cmp	r3, #32
 80069bc:	d867      	bhi.n	8006a8e <HAL_TIM_ConfigClockSource+0x16c>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d05c      	beq.n	8006a7c <HAL_TIM_ConfigClockSource+0x15a>
 80069c2:	2b10      	cmp	r3, #16
 80069c4:	d05a      	beq.n	8006a7c <HAL_TIM_ConfigClockSource+0x15a>
 80069c6:	e062      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x16c>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	6899      	ldr	r1, [r3, #8]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f000 f970 	bl	8006cbc <TIM_ETR_SetConfig>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	60bb      	str	r3, [r7, #8]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80069ea:	60bb      	str	r3, [r7, #8]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	609a      	str	r2, [r3, #8]
 80069f4:	e04f      	b.n	8006a96 <HAL_TIM_ConfigClockSource+0x174>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6899      	ldr	r1, [r3, #8]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f000 f959 	bl	8006cbc <TIM_ETR_SetConfig>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a18:	609a      	str	r2, [r3, #8]
 8006a1a:	e03c      	b.n	8006a96 <HAL_TIM_ConfigClockSource+0x174>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6818      	ldr	r0, [r3, #0]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	6859      	ldr	r1, [r3, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	f000 f8cd 	bl	8006bc8 <TIM_TI1_ConfigInputStage>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2150      	movs	r1, #80	@ 0x50
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 f926 	bl	8006c86 <TIM_ITRx_SetConfig>
 8006a3a:	e02c      	b.n	8006a96 <HAL_TIM_ConfigClockSource+0x174>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	6859      	ldr	r1, [r3, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f000 f8ec 	bl	8006c26 <TIM_TI2_ConfigInputStage>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2160      	movs	r1, #96	@ 0x60
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 f916 	bl	8006c86 <TIM_ITRx_SetConfig>
 8006a5a:	e01c      	b.n	8006a96 <HAL_TIM_ConfigClockSource+0x174>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6818      	ldr	r0, [r3, #0]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	6859      	ldr	r1, [r3, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f000 f8ad 	bl	8006bc8 <TIM_TI1_ConfigInputStage>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2140      	movs	r1, #64	@ 0x40
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 f906 	bl	8006c86 <TIM_ITRx_SetConfig>
 8006a7a:	e00c      	b.n	8006a96 <HAL_TIM_ConfigClockSource+0x174>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f000 f8fd 	bl	8006c86 <TIM_ITRx_SetConfig>
 8006a8c:	e003      	b.n	8006a96 <HAL_TIM_ConfigClockSource+0x174>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	73fb      	strb	r3, [r7, #15]
 8006a92:	e000      	b.n	8006a96 <HAL_TIM_ConfigClockSource+0x174>
 8006a94:	bf00      	nop
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <TIM_Base_SetConfig>:
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a3a      	ldr	r2, [pc, #232]	@ (8006bac <TIM_Base_SetConfig+0xfc>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00f      	beq.n	8006ae8 <TIM_Base_SetConfig+0x38>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ace:	d00b      	beq.n	8006ae8 <TIM_Base_SetConfig+0x38>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a37      	ldr	r2, [pc, #220]	@ (8006bb0 <TIM_Base_SetConfig+0x100>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d007      	beq.n	8006ae8 <TIM_Base_SetConfig+0x38>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a36      	ldr	r2, [pc, #216]	@ (8006bb4 <TIM_Base_SetConfig+0x104>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_Base_SetConfig+0x38>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a35      	ldr	r2, [pc, #212]	@ (8006bb8 <TIM_Base_SetConfig+0x108>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d108      	bne.n	8006afa <TIM_Base_SetConfig+0x4a>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2b      	ldr	r2, [pc, #172]	@ (8006bac <TIM_Base_SetConfig+0xfc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d01b      	beq.n	8006b3a <TIM_Base_SetConfig+0x8a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b08:	d017      	beq.n	8006b3a <TIM_Base_SetConfig+0x8a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a28      	ldr	r2, [pc, #160]	@ (8006bb0 <TIM_Base_SetConfig+0x100>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d013      	beq.n	8006b3a <TIM_Base_SetConfig+0x8a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a27      	ldr	r2, [pc, #156]	@ (8006bb4 <TIM_Base_SetConfig+0x104>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00f      	beq.n	8006b3a <TIM_Base_SetConfig+0x8a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a26      	ldr	r2, [pc, #152]	@ (8006bb8 <TIM_Base_SetConfig+0x108>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00b      	beq.n	8006b3a <TIM_Base_SetConfig+0x8a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a25      	ldr	r2, [pc, #148]	@ (8006bbc <TIM_Base_SetConfig+0x10c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d007      	beq.n	8006b3a <TIM_Base_SetConfig+0x8a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a24      	ldr	r2, [pc, #144]	@ (8006bc0 <TIM_Base_SetConfig+0x110>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d003      	beq.n	8006b3a <TIM_Base_SetConfig+0x8a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a23      	ldr	r2, [pc, #140]	@ (8006bc4 <TIM_Base_SetConfig+0x114>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d108      	bne.n	8006b4c <TIM_Base_SetConfig+0x9c>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a0e      	ldr	r2, [pc, #56]	@ (8006bac <TIM_Base_SetConfig+0xfc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d103      	bne.n	8006b80 <TIM_Base_SetConfig+0xd0>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	691a      	ldr	r2, [r3, #16]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	615a      	str	r2, [r3, #20]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d105      	bne.n	8006b9e <TIM_Base_SetConfig+0xee>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f023 0201 	bic.w	r2, r3, #1
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	611a      	str	r2, [r3, #16]
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40010000 	.word	0x40010000
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40000800 	.word	0x40000800
 8006bb8:	40000c00 	.word	0x40000c00
 8006bbc:	40014000 	.word	0x40014000
 8006bc0:	40014400 	.word	0x40014400
 8006bc4:	40014800 	.word	0x40014800

08006bc8 <TIM_TI1_ConfigInputStage>:
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f023 0201 	bic.w	r2, r3, #1
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	621a      	str	r2, [r3, #32]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	613b      	str	r3, [r7, #16]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bf2:	613b      	str	r3, [r7, #16]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 030a 	bic.w	r3, r3, #10
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	619a      	str	r2, [r3, #24]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	621a      	str	r2, [r3, #32]
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <TIM_TI2_ConfigInputStage>:
 8006c26:	b480      	push	{r7}
 8006c28:	b087      	sub	sp, #28
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	607a      	str	r2, [r7, #4]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	f023 0210 	bic.w	r2, r3, #16
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	621a      	str	r2, [r3, #32]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	031b      	lsls	r3, r3, #12
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	619a      	str	r2, [r3, #24]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	621a      	str	r2, [r3, #32]
 8006c7a:	bf00      	nop
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <TIM_ITRx_SetConfig>:
 8006c86:	b480      	push	{r7}
 8006c88:	b085      	sub	sp, #20
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f043 0307 	orr.w	r3, r3, #7
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	609a      	str	r2, [r3, #8]
 8006cb0:	bf00      	nop
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <TIM_ETR_SetConfig>:
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	021a      	lsls	r2, r3, #8
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	609a      	str	r2, [r3, #8]
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_TIMEx_MasterConfigSynchronization>:
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d10:	2302      	movs	r3, #2
 8006d12:	e050      	b.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	60bb      	str	r3, [r7, #8]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	605a      	str	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d018      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d60:	d013      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a18      	ldr	r2, [pc, #96]	@ (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00e      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a16      	ldr	r2, [pc, #88]	@ (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d009      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a15      	ldr	r2, [pc, #84]	@ (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d004      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a13      	ldr	r2, [pc, #76]	@ (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d10c      	bne.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d90:	60bb      	str	r3, [r7, #8]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60bb      	str	r3, [r7, #8]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	609a      	str	r2, [r3, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006db4:	2300      	movs	r3, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	40000400 	.word	0x40000400
 8006dcc:	40000800 	.word	0x40000800
 8006dd0:	40000c00 	.word	0x40000c00
 8006dd4:	40014000 	.word	0x40014000

08006dd8 <std>:
 8006dd8:	2300      	movs	r3, #0
 8006dda:	b510      	push	{r4, lr}
 8006ddc:	4604      	mov	r4, r0
 8006dde:	e9c0 3300 	strd	r3, r3, [r0]
 8006de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006de6:	6083      	str	r3, [r0, #8]
 8006de8:	8181      	strh	r1, [r0, #12]
 8006dea:	6643      	str	r3, [r0, #100]	@ 0x64
 8006dec:	81c2      	strh	r2, [r0, #14]
 8006dee:	6183      	str	r3, [r0, #24]
 8006df0:	4619      	mov	r1, r3
 8006df2:	2208      	movs	r2, #8
 8006df4:	305c      	adds	r0, #92	@ 0x5c
 8006df6:	f000 f9f9 	bl	80071ec <memset>
 8006dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006e30 <std+0x58>)
 8006dfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006e34 <std+0x5c>)
 8006e00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e02:	4b0d      	ldr	r3, [pc, #52]	@ (8006e38 <std+0x60>)
 8006e04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e06:	4b0d      	ldr	r3, [pc, #52]	@ (8006e3c <std+0x64>)
 8006e08:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e40 <std+0x68>)
 8006e0c:	6224      	str	r4, [r4, #32]
 8006e0e:	429c      	cmp	r4, r3
 8006e10:	d006      	beq.n	8006e20 <std+0x48>
 8006e12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e16:	4294      	cmp	r4, r2
 8006e18:	d002      	beq.n	8006e20 <std+0x48>
 8006e1a:	33d0      	adds	r3, #208	@ 0xd0
 8006e1c:	429c      	cmp	r4, r3
 8006e1e:	d105      	bne.n	8006e2c <std+0x54>
 8006e20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e28:	f000 ba58 	b.w	80072dc <__retarget_lock_init_recursive>
 8006e2c:	bd10      	pop	{r4, pc}
 8006e2e:	bf00      	nop
 8006e30:	0800703d 	.word	0x0800703d
 8006e34:	0800705f 	.word	0x0800705f
 8006e38:	08007097 	.word	0x08007097
 8006e3c:	080070bb 	.word	0x080070bb
 8006e40:	200003bc 	.word	0x200003bc

08006e44 <stdio_exit_handler>:
 8006e44:	4a02      	ldr	r2, [pc, #8]	@ (8006e50 <stdio_exit_handler+0xc>)
 8006e46:	4903      	ldr	r1, [pc, #12]	@ (8006e54 <stdio_exit_handler+0x10>)
 8006e48:	4803      	ldr	r0, [pc, #12]	@ (8006e58 <stdio_exit_handler+0x14>)
 8006e4a:	f000 b869 	b.w	8006f20 <_fwalk_sglue>
 8006e4e:	bf00      	nop
 8006e50:	2000000c 	.word	0x2000000c
 8006e54:	08007b7d 	.word	0x08007b7d
 8006e58:	2000001c 	.word	0x2000001c

08006e5c <cleanup_stdio>:
 8006e5c:	6841      	ldr	r1, [r0, #4]
 8006e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e90 <cleanup_stdio+0x34>)
 8006e60:	4299      	cmp	r1, r3
 8006e62:	b510      	push	{r4, lr}
 8006e64:	4604      	mov	r4, r0
 8006e66:	d001      	beq.n	8006e6c <cleanup_stdio+0x10>
 8006e68:	f000 fe88 	bl	8007b7c <_fflush_r>
 8006e6c:	68a1      	ldr	r1, [r4, #8]
 8006e6e:	4b09      	ldr	r3, [pc, #36]	@ (8006e94 <cleanup_stdio+0x38>)
 8006e70:	4299      	cmp	r1, r3
 8006e72:	d002      	beq.n	8006e7a <cleanup_stdio+0x1e>
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 fe81 	bl	8007b7c <_fflush_r>
 8006e7a:	68e1      	ldr	r1, [r4, #12]
 8006e7c:	4b06      	ldr	r3, [pc, #24]	@ (8006e98 <cleanup_stdio+0x3c>)
 8006e7e:	4299      	cmp	r1, r3
 8006e80:	d004      	beq.n	8006e8c <cleanup_stdio+0x30>
 8006e82:	4620      	mov	r0, r4
 8006e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e88:	f000 be78 	b.w	8007b7c <_fflush_r>
 8006e8c:	bd10      	pop	{r4, pc}
 8006e8e:	bf00      	nop
 8006e90:	200003bc 	.word	0x200003bc
 8006e94:	20000424 	.word	0x20000424
 8006e98:	2000048c 	.word	0x2000048c

08006e9c <global_stdio_init.part.0>:
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006ecc <global_stdio_init.part.0+0x30>)
 8006ea0:	4c0b      	ldr	r4, [pc, #44]	@ (8006ed0 <global_stdio_init.part.0+0x34>)
 8006ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8006ed4 <global_stdio_init.part.0+0x38>)
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2104      	movs	r1, #4
 8006eac:	f7ff ff94 	bl	8006dd8 <std>
 8006eb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	2109      	movs	r1, #9
 8006eb8:	f7ff ff8e 	bl	8006dd8 <std>
 8006ebc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec6:	2112      	movs	r1, #18
 8006ec8:	f7ff bf86 	b.w	8006dd8 <std>
 8006ecc:	200004f4 	.word	0x200004f4
 8006ed0:	200003bc 	.word	0x200003bc
 8006ed4:	08006e45 	.word	0x08006e45

08006ed8 <__sfp_lock_acquire>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	@ (8006ee0 <__sfp_lock_acquire+0x8>)
 8006eda:	f000 ba00 	b.w	80072de <__retarget_lock_acquire_recursive>
 8006ede:	bf00      	nop
 8006ee0:	200004fd 	.word	0x200004fd

08006ee4 <__sfp_lock_release>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	@ (8006eec <__sfp_lock_release+0x8>)
 8006ee6:	f000 b9fb 	b.w	80072e0 <__retarget_lock_release_recursive>
 8006eea:	bf00      	nop
 8006eec:	200004fd 	.word	0x200004fd

08006ef0 <__sinit>:
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	f7ff fff0 	bl	8006ed8 <__sfp_lock_acquire>
 8006ef8:	6a23      	ldr	r3, [r4, #32]
 8006efa:	b11b      	cbz	r3, 8006f04 <__sinit+0x14>
 8006efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f00:	f7ff bff0 	b.w	8006ee4 <__sfp_lock_release>
 8006f04:	4b04      	ldr	r3, [pc, #16]	@ (8006f18 <__sinit+0x28>)
 8006f06:	6223      	str	r3, [r4, #32]
 8006f08:	4b04      	ldr	r3, [pc, #16]	@ (8006f1c <__sinit+0x2c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f5      	bne.n	8006efc <__sinit+0xc>
 8006f10:	f7ff ffc4 	bl	8006e9c <global_stdio_init.part.0>
 8006f14:	e7f2      	b.n	8006efc <__sinit+0xc>
 8006f16:	bf00      	nop
 8006f18:	08006e5d 	.word	0x08006e5d
 8006f1c:	200004f4 	.word	0x200004f4

08006f20 <_fwalk_sglue>:
 8006f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f24:	4607      	mov	r7, r0
 8006f26:	4688      	mov	r8, r1
 8006f28:	4614      	mov	r4, r2
 8006f2a:	2600      	movs	r6, #0
 8006f2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f30:	f1b9 0901 	subs.w	r9, r9, #1
 8006f34:	d505      	bpl.n	8006f42 <_fwalk_sglue+0x22>
 8006f36:	6824      	ldr	r4, [r4, #0]
 8006f38:	2c00      	cmp	r4, #0
 8006f3a:	d1f7      	bne.n	8006f2c <_fwalk_sglue+0xc>
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f42:	89ab      	ldrh	r3, [r5, #12]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d907      	bls.n	8006f58 <_fwalk_sglue+0x38>
 8006f48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	d003      	beq.n	8006f58 <_fwalk_sglue+0x38>
 8006f50:	4629      	mov	r1, r5
 8006f52:	4638      	mov	r0, r7
 8006f54:	47c0      	blx	r8
 8006f56:	4306      	orrs	r6, r0
 8006f58:	3568      	adds	r5, #104	@ 0x68
 8006f5a:	e7e9      	b.n	8006f30 <_fwalk_sglue+0x10>

08006f5c <iprintf>:
 8006f5c:	b40f      	push	{r0, r1, r2, r3}
 8006f5e:	b507      	push	{r0, r1, r2, lr}
 8006f60:	4906      	ldr	r1, [pc, #24]	@ (8006f7c <iprintf+0x20>)
 8006f62:	ab04      	add	r3, sp, #16
 8006f64:	6808      	ldr	r0, [r1, #0]
 8006f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f6a:	6881      	ldr	r1, [r0, #8]
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	f000 fadb 	bl	8007528 <_vfiprintf_r>
 8006f72:	b003      	add	sp, #12
 8006f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f78:	b004      	add	sp, #16
 8006f7a:	4770      	bx	lr
 8006f7c:	20000018 	.word	0x20000018

08006f80 <_puts_r>:
 8006f80:	6a03      	ldr	r3, [r0, #32]
 8006f82:	b570      	push	{r4, r5, r6, lr}
 8006f84:	6884      	ldr	r4, [r0, #8]
 8006f86:	4605      	mov	r5, r0
 8006f88:	460e      	mov	r6, r1
 8006f8a:	b90b      	cbnz	r3, 8006f90 <_puts_r+0x10>
 8006f8c:	f7ff ffb0 	bl	8006ef0 <__sinit>
 8006f90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f92:	07db      	lsls	r3, r3, #31
 8006f94:	d405      	bmi.n	8006fa2 <_puts_r+0x22>
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	0598      	lsls	r0, r3, #22
 8006f9a:	d402      	bmi.n	8006fa2 <_puts_r+0x22>
 8006f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f9e:	f000 f99e 	bl	80072de <__retarget_lock_acquire_recursive>
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	0719      	lsls	r1, r3, #28
 8006fa6:	d502      	bpl.n	8006fae <_puts_r+0x2e>
 8006fa8:	6923      	ldr	r3, [r4, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d135      	bne.n	800701a <_puts_r+0x9a>
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f000 f8c5 	bl	8007140 <__swsetup_r>
 8006fb6:	b380      	cbz	r0, 800701a <_puts_r+0x9a>
 8006fb8:	f04f 35ff 	mov.w	r5, #4294967295
 8006fbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fbe:	07da      	lsls	r2, r3, #31
 8006fc0:	d405      	bmi.n	8006fce <_puts_r+0x4e>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	059b      	lsls	r3, r3, #22
 8006fc6:	d402      	bmi.n	8006fce <_puts_r+0x4e>
 8006fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fca:	f000 f989 	bl	80072e0 <__retarget_lock_release_recursive>
 8006fce:	4628      	mov	r0, r5
 8006fd0:	bd70      	pop	{r4, r5, r6, pc}
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	da04      	bge.n	8006fe0 <_puts_r+0x60>
 8006fd6:	69a2      	ldr	r2, [r4, #24]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	dc17      	bgt.n	800700c <_puts_r+0x8c>
 8006fdc:	290a      	cmp	r1, #10
 8006fde:	d015      	beq.n	800700c <_puts_r+0x8c>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	6022      	str	r2, [r4, #0]
 8006fe6:	7019      	strb	r1, [r3, #0]
 8006fe8:	68a3      	ldr	r3, [r4, #8]
 8006fea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	60a3      	str	r3, [r4, #8]
 8006ff2:	2900      	cmp	r1, #0
 8006ff4:	d1ed      	bne.n	8006fd2 <_puts_r+0x52>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da11      	bge.n	800701e <_puts_r+0x9e>
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	210a      	movs	r1, #10
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 f85f 	bl	80070c2 <__swbuf_r>
 8007004:	3001      	adds	r0, #1
 8007006:	d0d7      	beq.n	8006fb8 <_puts_r+0x38>
 8007008:	250a      	movs	r5, #10
 800700a:	e7d7      	b.n	8006fbc <_puts_r+0x3c>
 800700c:	4622      	mov	r2, r4
 800700e:	4628      	mov	r0, r5
 8007010:	f000 f857 	bl	80070c2 <__swbuf_r>
 8007014:	3001      	adds	r0, #1
 8007016:	d1e7      	bne.n	8006fe8 <_puts_r+0x68>
 8007018:	e7ce      	b.n	8006fb8 <_puts_r+0x38>
 800701a:	3e01      	subs	r6, #1
 800701c:	e7e4      	b.n	8006fe8 <_puts_r+0x68>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	6022      	str	r2, [r4, #0]
 8007024:	220a      	movs	r2, #10
 8007026:	701a      	strb	r2, [r3, #0]
 8007028:	e7ee      	b.n	8007008 <_puts_r+0x88>
	...

0800702c <puts>:
 800702c:	4b02      	ldr	r3, [pc, #8]	@ (8007038 <puts+0xc>)
 800702e:	4601      	mov	r1, r0
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	f7ff bfa5 	b.w	8006f80 <_puts_r>
 8007036:	bf00      	nop
 8007038:	20000018 	.word	0x20000018

0800703c <__sread>:
 800703c:	b510      	push	{r4, lr}
 800703e:	460c      	mov	r4, r1
 8007040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007044:	f000 f8fc 	bl	8007240 <_read_r>
 8007048:	2800      	cmp	r0, #0
 800704a:	bfab      	itete	ge
 800704c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800704e:	89a3      	ldrhlt	r3, [r4, #12]
 8007050:	181b      	addge	r3, r3, r0
 8007052:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007056:	bfac      	ite	ge
 8007058:	6563      	strge	r3, [r4, #84]	@ 0x54
 800705a:	81a3      	strhlt	r3, [r4, #12]
 800705c:	bd10      	pop	{r4, pc}

0800705e <__swrite>:
 800705e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007062:	461f      	mov	r7, r3
 8007064:	898b      	ldrh	r3, [r1, #12]
 8007066:	05db      	lsls	r3, r3, #23
 8007068:	4605      	mov	r5, r0
 800706a:	460c      	mov	r4, r1
 800706c:	4616      	mov	r6, r2
 800706e:	d505      	bpl.n	800707c <__swrite+0x1e>
 8007070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007074:	2302      	movs	r3, #2
 8007076:	2200      	movs	r2, #0
 8007078:	f000 f8d0 	bl	800721c <_lseek_r>
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007082:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007086:	81a3      	strh	r3, [r4, #12]
 8007088:	4632      	mov	r2, r6
 800708a:	463b      	mov	r3, r7
 800708c:	4628      	mov	r0, r5
 800708e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007092:	f000 b8e7 	b.w	8007264 <_write_r>

08007096 <__sseek>:
 8007096:	b510      	push	{r4, lr}
 8007098:	460c      	mov	r4, r1
 800709a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709e:	f000 f8bd 	bl	800721c <_lseek_r>
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	bf15      	itete	ne
 80070a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070b2:	81a3      	strheq	r3, [r4, #12]
 80070b4:	bf18      	it	ne
 80070b6:	81a3      	strhne	r3, [r4, #12]
 80070b8:	bd10      	pop	{r4, pc}

080070ba <__sclose>:
 80070ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070be:	f000 b89d 	b.w	80071fc <_close_r>

080070c2 <__swbuf_r>:
 80070c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c4:	460e      	mov	r6, r1
 80070c6:	4614      	mov	r4, r2
 80070c8:	4605      	mov	r5, r0
 80070ca:	b118      	cbz	r0, 80070d4 <__swbuf_r+0x12>
 80070cc:	6a03      	ldr	r3, [r0, #32]
 80070ce:	b90b      	cbnz	r3, 80070d4 <__swbuf_r+0x12>
 80070d0:	f7ff ff0e 	bl	8006ef0 <__sinit>
 80070d4:	69a3      	ldr	r3, [r4, #24]
 80070d6:	60a3      	str	r3, [r4, #8]
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	071a      	lsls	r2, r3, #28
 80070dc:	d501      	bpl.n	80070e2 <__swbuf_r+0x20>
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	b943      	cbnz	r3, 80070f4 <__swbuf_r+0x32>
 80070e2:	4621      	mov	r1, r4
 80070e4:	4628      	mov	r0, r5
 80070e6:	f000 f82b 	bl	8007140 <__swsetup_r>
 80070ea:	b118      	cbz	r0, 80070f4 <__swbuf_r+0x32>
 80070ec:	f04f 37ff 	mov.w	r7, #4294967295
 80070f0:	4638      	mov	r0, r7
 80070f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	6922      	ldr	r2, [r4, #16]
 80070f8:	1a98      	subs	r0, r3, r2
 80070fa:	6963      	ldr	r3, [r4, #20]
 80070fc:	b2f6      	uxtb	r6, r6
 80070fe:	4283      	cmp	r3, r0
 8007100:	4637      	mov	r7, r6
 8007102:	dc05      	bgt.n	8007110 <__swbuf_r+0x4e>
 8007104:	4621      	mov	r1, r4
 8007106:	4628      	mov	r0, r5
 8007108:	f000 fd38 	bl	8007b7c <_fflush_r>
 800710c:	2800      	cmp	r0, #0
 800710e:	d1ed      	bne.n	80070ec <__swbuf_r+0x2a>
 8007110:	68a3      	ldr	r3, [r4, #8]
 8007112:	3b01      	subs	r3, #1
 8007114:	60a3      	str	r3, [r4, #8]
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	6022      	str	r2, [r4, #0]
 800711c:	701e      	strb	r6, [r3, #0]
 800711e:	6962      	ldr	r2, [r4, #20]
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	429a      	cmp	r2, r3
 8007124:	d004      	beq.n	8007130 <__swbuf_r+0x6e>
 8007126:	89a3      	ldrh	r3, [r4, #12]
 8007128:	07db      	lsls	r3, r3, #31
 800712a:	d5e1      	bpl.n	80070f0 <__swbuf_r+0x2e>
 800712c:	2e0a      	cmp	r6, #10
 800712e:	d1df      	bne.n	80070f0 <__swbuf_r+0x2e>
 8007130:	4621      	mov	r1, r4
 8007132:	4628      	mov	r0, r5
 8007134:	f000 fd22 	bl	8007b7c <_fflush_r>
 8007138:	2800      	cmp	r0, #0
 800713a:	d0d9      	beq.n	80070f0 <__swbuf_r+0x2e>
 800713c:	e7d6      	b.n	80070ec <__swbuf_r+0x2a>
	...

08007140 <__swsetup_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4b29      	ldr	r3, [pc, #164]	@ (80071e8 <__swsetup_r+0xa8>)
 8007144:	4605      	mov	r5, r0
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	460c      	mov	r4, r1
 800714a:	b118      	cbz	r0, 8007154 <__swsetup_r+0x14>
 800714c:	6a03      	ldr	r3, [r0, #32]
 800714e:	b90b      	cbnz	r3, 8007154 <__swsetup_r+0x14>
 8007150:	f7ff fece 	bl	8006ef0 <__sinit>
 8007154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007158:	0719      	lsls	r1, r3, #28
 800715a:	d422      	bmi.n	80071a2 <__swsetup_r+0x62>
 800715c:	06da      	lsls	r2, r3, #27
 800715e:	d407      	bmi.n	8007170 <__swsetup_r+0x30>
 8007160:	2209      	movs	r2, #9
 8007162:	602a      	str	r2, [r5, #0]
 8007164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007168:	81a3      	strh	r3, [r4, #12]
 800716a:	f04f 30ff 	mov.w	r0, #4294967295
 800716e:	e033      	b.n	80071d8 <__swsetup_r+0x98>
 8007170:	0758      	lsls	r0, r3, #29
 8007172:	d512      	bpl.n	800719a <__swsetup_r+0x5a>
 8007174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007176:	b141      	cbz	r1, 800718a <__swsetup_r+0x4a>
 8007178:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800717c:	4299      	cmp	r1, r3
 800717e:	d002      	beq.n	8007186 <__swsetup_r+0x46>
 8007180:	4628      	mov	r0, r5
 8007182:	f000 f8af 	bl	80072e4 <_free_r>
 8007186:	2300      	movs	r3, #0
 8007188:	6363      	str	r3, [r4, #52]	@ 0x34
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007190:	81a3      	strh	r3, [r4, #12]
 8007192:	2300      	movs	r3, #0
 8007194:	6063      	str	r3, [r4, #4]
 8007196:	6923      	ldr	r3, [r4, #16]
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	f043 0308 	orr.w	r3, r3, #8
 80071a0:	81a3      	strh	r3, [r4, #12]
 80071a2:	6923      	ldr	r3, [r4, #16]
 80071a4:	b94b      	cbnz	r3, 80071ba <__swsetup_r+0x7a>
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071b0:	d003      	beq.n	80071ba <__swsetup_r+0x7a>
 80071b2:	4621      	mov	r1, r4
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 fd2f 	bl	8007c18 <__smakebuf_r>
 80071ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071be:	f013 0201 	ands.w	r2, r3, #1
 80071c2:	d00a      	beq.n	80071da <__swsetup_r+0x9a>
 80071c4:	2200      	movs	r2, #0
 80071c6:	60a2      	str	r2, [r4, #8]
 80071c8:	6962      	ldr	r2, [r4, #20]
 80071ca:	4252      	negs	r2, r2
 80071cc:	61a2      	str	r2, [r4, #24]
 80071ce:	6922      	ldr	r2, [r4, #16]
 80071d0:	b942      	cbnz	r2, 80071e4 <__swsetup_r+0xa4>
 80071d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071d6:	d1c5      	bne.n	8007164 <__swsetup_r+0x24>
 80071d8:	bd38      	pop	{r3, r4, r5, pc}
 80071da:	0799      	lsls	r1, r3, #30
 80071dc:	bf58      	it	pl
 80071de:	6962      	ldrpl	r2, [r4, #20]
 80071e0:	60a2      	str	r2, [r4, #8]
 80071e2:	e7f4      	b.n	80071ce <__swsetup_r+0x8e>
 80071e4:	2000      	movs	r0, #0
 80071e6:	e7f7      	b.n	80071d8 <__swsetup_r+0x98>
 80071e8:	20000018 	.word	0x20000018

080071ec <memset>:
 80071ec:	4402      	add	r2, r0
 80071ee:	4603      	mov	r3, r0
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d100      	bne.n	80071f6 <memset+0xa>
 80071f4:	4770      	bx	lr
 80071f6:	f803 1b01 	strb.w	r1, [r3], #1
 80071fa:	e7f9      	b.n	80071f0 <memset+0x4>

080071fc <_close_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d06      	ldr	r5, [pc, #24]	@ (8007218 <_close_r+0x1c>)
 8007200:	2300      	movs	r3, #0
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	602b      	str	r3, [r5, #0]
 8007208:	f7fb ff8a 	bl	8003120 <_close>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_close_r+0x1a>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_close_r+0x1a>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	200004f8 	.word	0x200004f8

0800721c <_lseek_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4d07      	ldr	r5, [pc, #28]	@ (800723c <_lseek_r+0x20>)
 8007220:	4604      	mov	r4, r0
 8007222:	4608      	mov	r0, r1
 8007224:	4611      	mov	r1, r2
 8007226:	2200      	movs	r2, #0
 8007228:	602a      	str	r2, [r5, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	f7fb ff9f 	bl	800316e <_lseek>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_lseek_r+0x1e>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_lseek_r+0x1e>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	200004f8 	.word	0x200004f8

08007240 <_read_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4d07      	ldr	r5, [pc, #28]	@ (8007260 <_read_r+0x20>)
 8007244:	4604      	mov	r4, r0
 8007246:	4608      	mov	r0, r1
 8007248:	4611      	mov	r1, r2
 800724a:	2200      	movs	r2, #0
 800724c:	602a      	str	r2, [r5, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	f7fb ff2d 	bl	80030ae <_read>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_read_r+0x1e>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_read_r+0x1e>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	200004f8 	.word	0x200004f8

08007264 <_write_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d07      	ldr	r5, [pc, #28]	@ (8007284 <_write_r+0x20>)
 8007268:	4604      	mov	r4, r0
 800726a:	4608      	mov	r0, r1
 800726c:	4611      	mov	r1, r2
 800726e:	2200      	movs	r2, #0
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f7fb ff38 	bl	80030e8 <_write>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_write_r+0x1e>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_write_r+0x1e>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	200004f8 	.word	0x200004f8

08007288 <__errno>:
 8007288:	4b01      	ldr	r3, [pc, #4]	@ (8007290 <__errno+0x8>)
 800728a:	6818      	ldr	r0, [r3, #0]
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	20000018 	.word	0x20000018

08007294 <__libc_init_array>:
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	4d0d      	ldr	r5, [pc, #52]	@ (80072cc <__libc_init_array+0x38>)
 8007298:	4c0d      	ldr	r4, [pc, #52]	@ (80072d0 <__libc_init_array+0x3c>)
 800729a:	1b64      	subs	r4, r4, r5
 800729c:	10a4      	asrs	r4, r4, #2
 800729e:	2600      	movs	r6, #0
 80072a0:	42a6      	cmp	r6, r4
 80072a2:	d109      	bne.n	80072b8 <__libc_init_array+0x24>
 80072a4:	4d0b      	ldr	r5, [pc, #44]	@ (80072d4 <__libc_init_array+0x40>)
 80072a6:	4c0c      	ldr	r4, [pc, #48]	@ (80072d8 <__libc_init_array+0x44>)
 80072a8:	f000 fd24 	bl	8007cf4 <_init>
 80072ac:	1b64      	subs	r4, r4, r5
 80072ae:	10a4      	asrs	r4, r4, #2
 80072b0:	2600      	movs	r6, #0
 80072b2:	42a6      	cmp	r6, r4
 80072b4:	d105      	bne.n	80072c2 <__libc_init_array+0x2e>
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072bc:	4798      	blx	r3
 80072be:	3601      	adds	r6, #1
 80072c0:	e7ee      	b.n	80072a0 <__libc_init_array+0xc>
 80072c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c6:	4798      	blx	r3
 80072c8:	3601      	adds	r6, #1
 80072ca:	e7f2      	b.n	80072b2 <__libc_init_array+0x1e>
 80072cc:	08007f3c 	.word	0x08007f3c
 80072d0:	08007f3c 	.word	0x08007f3c
 80072d4:	08007f3c 	.word	0x08007f3c
 80072d8:	08007f40 	.word	0x08007f40

080072dc <__retarget_lock_init_recursive>:
 80072dc:	4770      	bx	lr

080072de <__retarget_lock_acquire_recursive>:
 80072de:	4770      	bx	lr

080072e0 <__retarget_lock_release_recursive>:
 80072e0:	4770      	bx	lr
	...

080072e4 <_free_r>:
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	4605      	mov	r5, r0
 80072e8:	2900      	cmp	r1, #0
 80072ea:	d041      	beq.n	8007370 <_free_r+0x8c>
 80072ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072f0:	1f0c      	subs	r4, r1, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bfb8      	it	lt
 80072f6:	18e4      	addlt	r4, r4, r3
 80072f8:	f000 f8e0 	bl	80074bc <__malloc_lock>
 80072fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007374 <_free_r+0x90>)
 80072fe:	6813      	ldr	r3, [r2, #0]
 8007300:	b933      	cbnz	r3, 8007310 <_free_r+0x2c>
 8007302:	6063      	str	r3, [r4, #4]
 8007304:	6014      	str	r4, [r2, #0]
 8007306:	4628      	mov	r0, r5
 8007308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800730c:	f000 b8dc 	b.w	80074c8 <__malloc_unlock>
 8007310:	42a3      	cmp	r3, r4
 8007312:	d908      	bls.n	8007326 <_free_r+0x42>
 8007314:	6820      	ldr	r0, [r4, #0]
 8007316:	1821      	adds	r1, r4, r0
 8007318:	428b      	cmp	r3, r1
 800731a:	bf01      	itttt	eq
 800731c:	6819      	ldreq	r1, [r3, #0]
 800731e:	685b      	ldreq	r3, [r3, #4]
 8007320:	1809      	addeq	r1, r1, r0
 8007322:	6021      	streq	r1, [r4, #0]
 8007324:	e7ed      	b.n	8007302 <_free_r+0x1e>
 8007326:	461a      	mov	r2, r3
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	b10b      	cbz	r3, 8007330 <_free_r+0x4c>
 800732c:	42a3      	cmp	r3, r4
 800732e:	d9fa      	bls.n	8007326 <_free_r+0x42>
 8007330:	6811      	ldr	r1, [r2, #0]
 8007332:	1850      	adds	r0, r2, r1
 8007334:	42a0      	cmp	r0, r4
 8007336:	d10b      	bne.n	8007350 <_free_r+0x6c>
 8007338:	6820      	ldr	r0, [r4, #0]
 800733a:	4401      	add	r1, r0
 800733c:	1850      	adds	r0, r2, r1
 800733e:	4283      	cmp	r3, r0
 8007340:	6011      	str	r1, [r2, #0]
 8007342:	d1e0      	bne.n	8007306 <_free_r+0x22>
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	6053      	str	r3, [r2, #4]
 800734a:	4408      	add	r0, r1
 800734c:	6010      	str	r0, [r2, #0]
 800734e:	e7da      	b.n	8007306 <_free_r+0x22>
 8007350:	d902      	bls.n	8007358 <_free_r+0x74>
 8007352:	230c      	movs	r3, #12
 8007354:	602b      	str	r3, [r5, #0]
 8007356:	e7d6      	b.n	8007306 <_free_r+0x22>
 8007358:	6820      	ldr	r0, [r4, #0]
 800735a:	1821      	adds	r1, r4, r0
 800735c:	428b      	cmp	r3, r1
 800735e:	bf04      	itt	eq
 8007360:	6819      	ldreq	r1, [r3, #0]
 8007362:	685b      	ldreq	r3, [r3, #4]
 8007364:	6063      	str	r3, [r4, #4]
 8007366:	bf04      	itt	eq
 8007368:	1809      	addeq	r1, r1, r0
 800736a:	6021      	streq	r1, [r4, #0]
 800736c:	6054      	str	r4, [r2, #4]
 800736e:	e7ca      	b.n	8007306 <_free_r+0x22>
 8007370:	bd38      	pop	{r3, r4, r5, pc}
 8007372:	bf00      	nop
 8007374:	20000504 	.word	0x20000504

08007378 <sbrk_aligned>:
 8007378:	b570      	push	{r4, r5, r6, lr}
 800737a:	4e0f      	ldr	r6, [pc, #60]	@ (80073b8 <sbrk_aligned+0x40>)
 800737c:	460c      	mov	r4, r1
 800737e:	6831      	ldr	r1, [r6, #0]
 8007380:	4605      	mov	r5, r0
 8007382:	b911      	cbnz	r1, 800738a <sbrk_aligned+0x12>
 8007384:	f000 fca6 	bl	8007cd4 <_sbrk_r>
 8007388:	6030      	str	r0, [r6, #0]
 800738a:	4621      	mov	r1, r4
 800738c:	4628      	mov	r0, r5
 800738e:	f000 fca1 	bl	8007cd4 <_sbrk_r>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	d103      	bne.n	800739e <sbrk_aligned+0x26>
 8007396:	f04f 34ff 	mov.w	r4, #4294967295
 800739a:	4620      	mov	r0, r4
 800739c:	bd70      	pop	{r4, r5, r6, pc}
 800739e:	1cc4      	adds	r4, r0, #3
 80073a0:	f024 0403 	bic.w	r4, r4, #3
 80073a4:	42a0      	cmp	r0, r4
 80073a6:	d0f8      	beq.n	800739a <sbrk_aligned+0x22>
 80073a8:	1a21      	subs	r1, r4, r0
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 fc92 	bl	8007cd4 <_sbrk_r>
 80073b0:	3001      	adds	r0, #1
 80073b2:	d1f2      	bne.n	800739a <sbrk_aligned+0x22>
 80073b4:	e7ef      	b.n	8007396 <sbrk_aligned+0x1e>
 80073b6:	bf00      	nop
 80073b8:	20000500 	.word	0x20000500

080073bc <_malloc_r>:
 80073bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073c0:	1ccd      	adds	r5, r1, #3
 80073c2:	f025 0503 	bic.w	r5, r5, #3
 80073c6:	3508      	adds	r5, #8
 80073c8:	2d0c      	cmp	r5, #12
 80073ca:	bf38      	it	cc
 80073cc:	250c      	movcc	r5, #12
 80073ce:	2d00      	cmp	r5, #0
 80073d0:	4606      	mov	r6, r0
 80073d2:	db01      	blt.n	80073d8 <_malloc_r+0x1c>
 80073d4:	42a9      	cmp	r1, r5
 80073d6:	d904      	bls.n	80073e2 <_malloc_r+0x26>
 80073d8:	230c      	movs	r3, #12
 80073da:	6033      	str	r3, [r6, #0]
 80073dc:	2000      	movs	r0, #0
 80073de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074b8 <_malloc_r+0xfc>
 80073e6:	f000 f869 	bl	80074bc <__malloc_lock>
 80073ea:	f8d8 3000 	ldr.w	r3, [r8]
 80073ee:	461c      	mov	r4, r3
 80073f0:	bb44      	cbnz	r4, 8007444 <_malloc_r+0x88>
 80073f2:	4629      	mov	r1, r5
 80073f4:	4630      	mov	r0, r6
 80073f6:	f7ff ffbf 	bl	8007378 <sbrk_aligned>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	4604      	mov	r4, r0
 80073fe:	d158      	bne.n	80074b2 <_malloc_r+0xf6>
 8007400:	f8d8 4000 	ldr.w	r4, [r8]
 8007404:	4627      	mov	r7, r4
 8007406:	2f00      	cmp	r7, #0
 8007408:	d143      	bne.n	8007492 <_malloc_r+0xd6>
 800740a:	2c00      	cmp	r4, #0
 800740c:	d04b      	beq.n	80074a6 <_malloc_r+0xea>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	4639      	mov	r1, r7
 8007412:	4630      	mov	r0, r6
 8007414:	eb04 0903 	add.w	r9, r4, r3
 8007418:	f000 fc5c 	bl	8007cd4 <_sbrk_r>
 800741c:	4581      	cmp	r9, r0
 800741e:	d142      	bne.n	80074a6 <_malloc_r+0xea>
 8007420:	6821      	ldr	r1, [r4, #0]
 8007422:	1a6d      	subs	r5, r5, r1
 8007424:	4629      	mov	r1, r5
 8007426:	4630      	mov	r0, r6
 8007428:	f7ff ffa6 	bl	8007378 <sbrk_aligned>
 800742c:	3001      	adds	r0, #1
 800742e:	d03a      	beq.n	80074a6 <_malloc_r+0xea>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	442b      	add	r3, r5
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	f8d8 3000 	ldr.w	r3, [r8]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	bb62      	cbnz	r2, 8007498 <_malloc_r+0xdc>
 800743e:	f8c8 7000 	str.w	r7, [r8]
 8007442:	e00f      	b.n	8007464 <_malloc_r+0xa8>
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	1b52      	subs	r2, r2, r5
 8007448:	d420      	bmi.n	800748c <_malloc_r+0xd0>
 800744a:	2a0b      	cmp	r2, #11
 800744c:	d917      	bls.n	800747e <_malloc_r+0xc2>
 800744e:	1961      	adds	r1, r4, r5
 8007450:	42a3      	cmp	r3, r4
 8007452:	6025      	str	r5, [r4, #0]
 8007454:	bf18      	it	ne
 8007456:	6059      	strne	r1, [r3, #4]
 8007458:	6863      	ldr	r3, [r4, #4]
 800745a:	bf08      	it	eq
 800745c:	f8c8 1000 	streq.w	r1, [r8]
 8007460:	5162      	str	r2, [r4, r5]
 8007462:	604b      	str	r3, [r1, #4]
 8007464:	4630      	mov	r0, r6
 8007466:	f000 f82f 	bl	80074c8 <__malloc_unlock>
 800746a:	f104 000b 	add.w	r0, r4, #11
 800746e:	1d23      	adds	r3, r4, #4
 8007470:	f020 0007 	bic.w	r0, r0, #7
 8007474:	1ac2      	subs	r2, r0, r3
 8007476:	bf1c      	itt	ne
 8007478:	1a1b      	subne	r3, r3, r0
 800747a:	50a3      	strne	r3, [r4, r2]
 800747c:	e7af      	b.n	80073de <_malloc_r+0x22>
 800747e:	6862      	ldr	r2, [r4, #4]
 8007480:	42a3      	cmp	r3, r4
 8007482:	bf0c      	ite	eq
 8007484:	f8c8 2000 	streq.w	r2, [r8]
 8007488:	605a      	strne	r2, [r3, #4]
 800748a:	e7eb      	b.n	8007464 <_malloc_r+0xa8>
 800748c:	4623      	mov	r3, r4
 800748e:	6864      	ldr	r4, [r4, #4]
 8007490:	e7ae      	b.n	80073f0 <_malloc_r+0x34>
 8007492:	463c      	mov	r4, r7
 8007494:	687f      	ldr	r7, [r7, #4]
 8007496:	e7b6      	b.n	8007406 <_malloc_r+0x4a>
 8007498:	461a      	mov	r2, r3
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	42a3      	cmp	r3, r4
 800749e:	d1fb      	bne.n	8007498 <_malloc_r+0xdc>
 80074a0:	2300      	movs	r3, #0
 80074a2:	6053      	str	r3, [r2, #4]
 80074a4:	e7de      	b.n	8007464 <_malloc_r+0xa8>
 80074a6:	230c      	movs	r3, #12
 80074a8:	6033      	str	r3, [r6, #0]
 80074aa:	4630      	mov	r0, r6
 80074ac:	f000 f80c 	bl	80074c8 <__malloc_unlock>
 80074b0:	e794      	b.n	80073dc <_malloc_r+0x20>
 80074b2:	6005      	str	r5, [r0, #0]
 80074b4:	e7d6      	b.n	8007464 <_malloc_r+0xa8>
 80074b6:	bf00      	nop
 80074b8:	20000504 	.word	0x20000504

080074bc <__malloc_lock>:
 80074bc:	4801      	ldr	r0, [pc, #4]	@ (80074c4 <__malloc_lock+0x8>)
 80074be:	f7ff bf0e 	b.w	80072de <__retarget_lock_acquire_recursive>
 80074c2:	bf00      	nop
 80074c4:	200004fc 	.word	0x200004fc

080074c8 <__malloc_unlock>:
 80074c8:	4801      	ldr	r0, [pc, #4]	@ (80074d0 <__malloc_unlock+0x8>)
 80074ca:	f7ff bf09 	b.w	80072e0 <__retarget_lock_release_recursive>
 80074ce:	bf00      	nop
 80074d0:	200004fc 	.word	0x200004fc

080074d4 <__sfputc_r>:
 80074d4:	6893      	ldr	r3, [r2, #8]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	b410      	push	{r4}
 80074dc:	6093      	str	r3, [r2, #8]
 80074de:	da08      	bge.n	80074f2 <__sfputc_r+0x1e>
 80074e0:	6994      	ldr	r4, [r2, #24]
 80074e2:	42a3      	cmp	r3, r4
 80074e4:	db01      	blt.n	80074ea <__sfputc_r+0x16>
 80074e6:	290a      	cmp	r1, #10
 80074e8:	d103      	bne.n	80074f2 <__sfputc_r+0x1e>
 80074ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ee:	f7ff bde8 	b.w	80070c2 <__swbuf_r>
 80074f2:	6813      	ldr	r3, [r2, #0]
 80074f4:	1c58      	adds	r0, r3, #1
 80074f6:	6010      	str	r0, [r2, #0]
 80074f8:	7019      	strb	r1, [r3, #0]
 80074fa:	4608      	mov	r0, r1
 80074fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007500:	4770      	bx	lr

08007502 <__sfputs_r>:
 8007502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007504:	4606      	mov	r6, r0
 8007506:	460f      	mov	r7, r1
 8007508:	4614      	mov	r4, r2
 800750a:	18d5      	adds	r5, r2, r3
 800750c:	42ac      	cmp	r4, r5
 800750e:	d101      	bne.n	8007514 <__sfputs_r+0x12>
 8007510:	2000      	movs	r0, #0
 8007512:	e007      	b.n	8007524 <__sfputs_r+0x22>
 8007514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007518:	463a      	mov	r2, r7
 800751a:	4630      	mov	r0, r6
 800751c:	f7ff ffda 	bl	80074d4 <__sfputc_r>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d1f3      	bne.n	800750c <__sfputs_r+0xa>
 8007524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007528 <_vfiprintf_r>:
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	460d      	mov	r5, r1
 800752e:	b09d      	sub	sp, #116	@ 0x74
 8007530:	4614      	mov	r4, r2
 8007532:	4698      	mov	r8, r3
 8007534:	4606      	mov	r6, r0
 8007536:	b118      	cbz	r0, 8007540 <_vfiprintf_r+0x18>
 8007538:	6a03      	ldr	r3, [r0, #32]
 800753a:	b90b      	cbnz	r3, 8007540 <_vfiprintf_r+0x18>
 800753c:	f7ff fcd8 	bl	8006ef0 <__sinit>
 8007540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007542:	07d9      	lsls	r1, r3, #31
 8007544:	d405      	bmi.n	8007552 <_vfiprintf_r+0x2a>
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	059a      	lsls	r2, r3, #22
 800754a:	d402      	bmi.n	8007552 <_vfiprintf_r+0x2a>
 800754c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800754e:	f7ff fec6 	bl	80072de <__retarget_lock_acquire_recursive>
 8007552:	89ab      	ldrh	r3, [r5, #12]
 8007554:	071b      	lsls	r3, r3, #28
 8007556:	d501      	bpl.n	800755c <_vfiprintf_r+0x34>
 8007558:	692b      	ldr	r3, [r5, #16]
 800755a:	b99b      	cbnz	r3, 8007584 <_vfiprintf_r+0x5c>
 800755c:	4629      	mov	r1, r5
 800755e:	4630      	mov	r0, r6
 8007560:	f7ff fdee 	bl	8007140 <__swsetup_r>
 8007564:	b170      	cbz	r0, 8007584 <_vfiprintf_r+0x5c>
 8007566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007568:	07dc      	lsls	r4, r3, #31
 800756a:	d504      	bpl.n	8007576 <_vfiprintf_r+0x4e>
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	b01d      	add	sp, #116	@ 0x74
 8007572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007576:	89ab      	ldrh	r3, [r5, #12]
 8007578:	0598      	lsls	r0, r3, #22
 800757a:	d4f7      	bmi.n	800756c <_vfiprintf_r+0x44>
 800757c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800757e:	f7ff feaf 	bl	80072e0 <__retarget_lock_release_recursive>
 8007582:	e7f3      	b.n	800756c <_vfiprintf_r+0x44>
 8007584:	2300      	movs	r3, #0
 8007586:	9309      	str	r3, [sp, #36]	@ 0x24
 8007588:	2320      	movs	r3, #32
 800758a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800758e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007592:	2330      	movs	r3, #48	@ 0x30
 8007594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007744 <_vfiprintf_r+0x21c>
 8007598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800759c:	f04f 0901 	mov.w	r9, #1
 80075a0:	4623      	mov	r3, r4
 80075a2:	469a      	mov	sl, r3
 80075a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075a8:	b10a      	cbz	r2, 80075ae <_vfiprintf_r+0x86>
 80075aa:	2a25      	cmp	r2, #37	@ 0x25
 80075ac:	d1f9      	bne.n	80075a2 <_vfiprintf_r+0x7a>
 80075ae:	ebba 0b04 	subs.w	fp, sl, r4
 80075b2:	d00b      	beq.n	80075cc <_vfiprintf_r+0xa4>
 80075b4:	465b      	mov	r3, fp
 80075b6:	4622      	mov	r2, r4
 80075b8:	4629      	mov	r1, r5
 80075ba:	4630      	mov	r0, r6
 80075bc:	f7ff ffa1 	bl	8007502 <__sfputs_r>
 80075c0:	3001      	adds	r0, #1
 80075c2:	f000 80a7 	beq.w	8007714 <_vfiprintf_r+0x1ec>
 80075c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075c8:	445a      	add	r2, fp
 80075ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80075cc:	f89a 3000 	ldrb.w	r3, [sl]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 809f 	beq.w	8007714 <_vfiprintf_r+0x1ec>
 80075d6:	2300      	movs	r3, #0
 80075d8:	f04f 32ff 	mov.w	r2, #4294967295
 80075dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075e0:	f10a 0a01 	add.w	sl, sl, #1
 80075e4:	9304      	str	r3, [sp, #16]
 80075e6:	9307      	str	r3, [sp, #28]
 80075e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80075ee:	4654      	mov	r4, sl
 80075f0:	2205      	movs	r2, #5
 80075f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f6:	4853      	ldr	r0, [pc, #332]	@ (8007744 <_vfiprintf_r+0x21c>)
 80075f8:	f7f8 fdf2 	bl	80001e0 <memchr>
 80075fc:	9a04      	ldr	r2, [sp, #16]
 80075fe:	b9d8      	cbnz	r0, 8007638 <_vfiprintf_r+0x110>
 8007600:	06d1      	lsls	r1, r2, #27
 8007602:	bf44      	itt	mi
 8007604:	2320      	movmi	r3, #32
 8007606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800760a:	0713      	lsls	r3, r2, #28
 800760c:	bf44      	itt	mi
 800760e:	232b      	movmi	r3, #43	@ 0x2b
 8007610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007614:	f89a 3000 	ldrb.w	r3, [sl]
 8007618:	2b2a      	cmp	r3, #42	@ 0x2a
 800761a:	d015      	beq.n	8007648 <_vfiprintf_r+0x120>
 800761c:	9a07      	ldr	r2, [sp, #28]
 800761e:	4654      	mov	r4, sl
 8007620:	2000      	movs	r0, #0
 8007622:	f04f 0c0a 	mov.w	ip, #10
 8007626:	4621      	mov	r1, r4
 8007628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800762c:	3b30      	subs	r3, #48	@ 0x30
 800762e:	2b09      	cmp	r3, #9
 8007630:	d94b      	bls.n	80076ca <_vfiprintf_r+0x1a2>
 8007632:	b1b0      	cbz	r0, 8007662 <_vfiprintf_r+0x13a>
 8007634:	9207      	str	r2, [sp, #28]
 8007636:	e014      	b.n	8007662 <_vfiprintf_r+0x13a>
 8007638:	eba0 0308 	sub.w	r3, r0, r8
 800763c:	fa09 f303 	lsl.w	r3, r9, r3
 8007640:	4313      	orrs	r3, r2
 8007642:	9304      	str	r3, [sp, #16]
 8007644:	46a2      	mov	sl, r4
 8007646:	e7d2      	b.n	80075ee <_vfiprintf_r+0xc6>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	1d19      	adds	r1, r3, #4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	9103      	str	r1, [sp, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	bfbb      	ittet	lt
 8007654:	425b      	neglt	r3, r3
 8007656:	f042 0202 	orrlt.w	r2, r2, #2
 800765a:	9307      	strge	r3, [sp, #28]
 800765c:	9307      	strlt	r3, [sp, #28]
 800765e:	bfb8      	it	lt
 8007660:	9204      	strlt	r2, [sp, #16]
 8007662:	7823      	ldrb	r3, [r4, #0]
 8007664:	2b2e      	cmp	r3, #46	@ 0x2e
 8007666:	d10a      	bne.n	800767e <_vfiprintf_r+0x156>
 8007668:	7863      	ldrb	r3, [r4, #1]
 800766a:	2b2a      	cmp	r3, #42	@ 0x2a
 800766c:	d132      	bne.n	80076d4 <_vfiprintf_r+0x1ac>
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	1d1a      	adds	r2, r3, #4
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	9203      	str	r2, [sp, #12]
 8007676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800767a:	3402      	adds	r4, #2
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007754 <_vfiprintf_r+0x22c>
 8007682:	7821      	ldrb	r1, [r4, #0]
 8007684:	2203      	movs	r2, #3
 8007686:	4650      	mov	r0, sl
 8007688:	f7f8 fdaa 	bl	80001e0 <memchr>
 800768c:	b138      	cbz	r0, 800769e <_vfiprintf_r+0x176>
 800768e:	9b04      	ldr	r3, [sp, #16]
 8007690:	eba0 000a 	sub.w	r0, r0, sl
 8007694:	2240      	movs	r2, #64	@ 0x40
 8007696:	4082      	lsls	r2, r0
 8007698:	4313      	orrs	r3, r2
 800769a:	3401      	adds	r4, #1
 800769c:	9304      	str	r3, [sp, #16]
 800769e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a2:	4829      	ldr	r0, [pc, #164]	@ (8007748 <_vfiprintf_r+0x220>)
 80076a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076a8:	2206      	movs	r2, #6
 80076aa:	f7f8 fd99 	bl	80001e0 <memchr>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d03f      	beq.n	8007732 <_vfiprintf_r+0x20a>
 80076b2:	4b26      	ldr	r3, [pc, #152]	@ (800774c <_vfiprintf_r+0x224>)
 80076b4:	bb1b      	cbnz	r3, 80076fe <_vfiprintf_r+0x1d6>
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	3307      	adds	r3, #7
 80076ba:	f023 0307 	bic.w	r3, r3, #7
 80076be:	3308      	adds	r3, #8
 80076c0:	9303      	str	r3, [sp, #12]
 80076c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c4:	443b      	add	r3, r7
 80076c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076c8:	e76a      	b.n	80075a0 <_vfiprintf_r+0x78>
 80076ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ce:	460c      	mov	r4, r1
 80076d0:	2001      	movs	r0, #1
 80076d2:	e7a8      	b.n	8007626 <_vfiprintf_r+0xfe>
 80076d4:	2300      	movs	r3, #0
 80076d6:	3401      	adds	r4, #1
 80076d8:	9305      	str	r3, [sp, #20]
 80076da:	4619      	mov	r1, r3
 80076dc:	f04f 0c0a 	mov.w	ip, #10
 80076e0:	4620      	mov	r0, r4
 80076e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076e6:	3a30      	subs	r2, #48	@ 0x30
 80076e8:	2a09      	cmp	r2, #9
 80076ea:	d903      	bls.n	80076f4 <_vfiprintf_r+0x1cc>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0c6      	beq.n	800767e <_vfiprintf_r+0x156>
 80076f0:	9105      	str	r1, [sp, #20]
 80076f2:	e7c4      	b.n	800767e <_vfiprintf_r+0x156>
 80076f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80076f8:	4604      	mov	r4, r0
 80076fa:	2301      	movs	r3, #1
 80076fc:	e7f0      	b.n	80076e0 <_vfiprintf_r+0x1b8>
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	462a      	mov	r2, r5
 8007704:	4b12      	ldr	r3, [pc, #72]	@ (8007750 <_vfiprintf_r+0x228>)
 8007706:	a904      	add	r1, sp, #16
 8007708:	4630      	mov	r0, r6
 800770a:	f3af 8000 	nop.w
 800770e:	4607      	mov	r7, r0
 8007710:	1c78      	adds	r0, r7, #1
 8007712:	d1d6      	bne.n	80076c2 <_vfiprintf_r+0x19a>
 8007714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007716:	07d9      	lsls	r1, r3, #31
 8007718:	d405      	bmi.n	8007726 <_vfiprintf_r+0x1fe>
 800771a:	89ab      	ldrh	r3, [r5, #12]
 800771c:	059a      	lsls	r2, r3, #22
 800771e:	d402      	bmi.n	8007726 <_vfiprintf_r+0x1fe>
 8007720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007722:	f7ff fddd 	bl	80072e0 <__retarget_lock_release_recursive>
 8007726:	89ab      	ldrh	r3, [r5, #12]
 8007728:	065b      	lsls	r3, r3, #25
 800772a:	f53f af1f 	bmi.w	800756c <_vfiprintf_r+0x44>
 800772e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007730:	e71e      	b.n	8007570 <_vfiprintf_r+0x48>
 8007732:	ab03      	add	r3, sp, #12
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	462a      	mov	r2, r5
 8007738:	4b05      	ldr	r3, [pc, #20]	@ (8007750 <_vfiprintf_r+0x228>)
 800773a:	a904      	add	r1, sp, #16
 800773c:	4630      	mov	r0, r6
 800773e:	f000 f879 	bl	8007834 <_printf_i>
 8007742:	e7e4      	b.n	800770e <_vfiprintf_r+0x1e6>
 8007744:	08007f00 	.word	0x08007f00
 8007748:	08007f0a 	.word	0x08007f0a
 800774c:	00000000 	.word	0x00000000
 8007750:	08007503 	.word	0x08007503
 8007754:	08007f06 	.word	0x08007f06

08007758 <_printf_common>:
 8007758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800775c:	4616      	mov	r6, r2
 800775e:	4698      	mov	r8, r3
 8007760:	688a      	ldr	r2, [r1, #8]
 8007762:	690b      	ldr	r3, [r1, #16]
 8007764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007768:	4293      	cmp	r3, r2
 800776a:	bfb8      	it	lt
 800776c:	4613      	movlt	r3, r2
 800776e:	6033      	str	r3, [r6, #0]
 8007770:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007774:	4607      	mov	r7, r0
 8007776:	460c      	mov	r4, r1
 8007778:	b10a      	cbz	r2, 800777e <_printf_common+0x26>
 800777a:	3301      	adds	r3, #1
 800777c:	6033      	str	r3, [r6, #0]
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	0699      	lsls	r1, r3, #26
 8007782:	bf42      	ittt	mi
 8007784:	6833      	ldrmi	r3, [r6, #0]
 8007786:	3302      	addmi	r3, #2
 8007788:	6033      	strmi	r3, [r6, #0]
 800778a:	6825      	ldr	r5, [r4, #0]
 800778c:	f015 0506 	ands.w	r5, r5, #6
 8007790:	d106      	bne.n	80077a0 <_printf_common+0x48>
 8007792:	f104 0a19 	add.w	sl, r4, #25
 8007796:	68e3      	ldr	r3, [r4, #12]
 8007798:	6832      	ldr	r2, [r6, #0]
 800779a:	1a9b      	subs	r3, r3, r2
 800779c:	42ab      	cmp	r3, r5
 800779e:	dc26      	bgt.n	80077ee <_printf_common+0x96>
 80077a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077a4:	6822      	ldr	r2, [r4, #0]
 80077a6:	3b00      	subs	r3, #0
 80077a8:	bf18      	it	ne
 80077aa:	2301      	movne	r3, #1
 80077ac:	0692      	lsls	r2, r2, #26
 80077ae:	d42b      	bmi.n	8007808 <_printf_common+0xb0>
 80077b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077b4:	4641      	mov	r1, r8
 80077b6:	4638      	mov	r0, r7
 80077b8:	47c8      	blx	r9
 80077ba:	3001      	adds	r0, #1
 80077bc:	d01e      	beq.n	80077fc <_printf_common+0xa4>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	6922      	ldr	r2, [r4, #16]
 80077c2:	f003 0306 	and.w	r3, r3, #6
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	bf02      	ittt	eq
 80077ca:	68e5      	ldreq	r5, [r4, #12]
 80077cc:	6833      	ldreq	r3, [r6, #0]
 80077ce:	1aed      	subeq	r5, r5, r3
 80077d0:	68a3      	ldr	r3, [r4, #8]
 80077d2:	bf0c      	ite	eq
 80077d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077d8:	2500      	movne	r5, #0
 80077da:	4293      	cmp	r3, r2
 80077dc:	bfc4      	itt	gt
 80077de:	1a9b      	subgt	r3, r3, r2
 80077e0:	18ed      	addgt	r5, r5, r3
 80077e2:	2600      	movs	r6, #0
 80077e4:	341a      	adds	r4, #26
 80077e6:	42b5      	cmp	r5, r6
 80077e8:	d11a      	bne.n	8007820 <_printf_common+0xc8>
 80077ea:	2000      	movs	r0, #0
 80077ec:	e008      	b.n	8007800 <_printf_common+0xa8>
 80077ee:	2301      	movs	r3, #1
 80077f0:	4652      	mov	r2, sl
 80077f2:	4641      	mov	r1, r8
 80077f4:	4638      	mov	r0, r7
 80077f6:	47c8      	blx	r9
 80077f8:	3001      	adds	r0, #1
 80077fa:	d103      	bne.n	8007804 <_printf_common+0xac>
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007804:	3501      	adds	r5, #1
 8007806:	e7c6      	b.n	8007796 <_printf_common+0x3e>
 8007808:	18e1      	adds	r1, r4, r3
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	2030      	movs	r0, #48	@ 0x30
 800780e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007812:	4422      	add	r2, r4
 8007814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800781c:	3302      	adds	r3, #2
 800781e:	e7c7      	b.n	80077b0 <_printf_common+0x58>
 8007820:	2301      	movs	r3, #1
 8007822:	4622      	mov	r2, r4
 8007824:	4641      	mov	r1, r8
 8007826:	4638      	mov	r0, r7
 8007828:	47c8      	blx	r9
 800782a:	3001      	adds	r0, #1
 800782c:	d0e6      	beq.n	80077fc <_printf_common+0xa4>
 800782e:	3601      	adds	r6, #1
 8007830:	e7d9      	b.n	80077e6 <_printf_common+0x8e>
	...

08007834 <_printf_i>:
 8007834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007838:	7e0f      	ldrb	r7, [r1, #24]
 800783a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800783c:	2f78      	cmp	r7, #120	@ 0x78
 800783e:	4691      	mov	r9, r2
 8007840:	4680      	mov	r8, r0
 8007842:	460c      	mov	r4, r1
 8007844:	469a      	mov	sl, r3
 8007846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800784a:	d807      	bhi.n	800785c <_printf_i+0x28>
 800784c:	2f62      	cmp	r7, #98	@ 0x62
 800784e:	d80a      	bhi.n	8007866 <_printf_i+0x32>
 8007850:	2f00      	cmp	r7, #0
 8007852:	f000 80d2 	beq.w	80079fa <_printf_i+0x1c6>
 8007856:	2f58      	cmp	r7, #88	@ 0x58
 8007858:	f000 80b9 	beq.w	80079ce <_printf_i+0x19a>
 800785c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007864:	e03a      	b.n	80078dc <_printf_i+0xa8>
 8007866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800786a:	2b15      	cmp	r3, #21
 800786c:	d8f6      	bhi.n	800785c <_printf_i+0x28>
 800786e:	a101      	add	r1, pc, #4	@ (adr r1, 8007874 <_printf_i+0x40>)
 8007870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007874:	080078cd 	.word	0x080078cd
 8007878:	080078e1 	.word	0x080078e1
 800787c:	0800785d 	.word	0x0800785d
 8007880:	0800785d 	.word	0x0800785d
 8007884:	0800785d 	.word	0x0800785d
 8007888:	0800785d 	.word	0x0800785d
 800788c:	080078e1 	.word	0x080078e1
 8007890:	0800785d 	.word	0x0800785d
 8007894:	0800785d 	.word	0x0800785d
 8007898:	0800785d 	.word	0x0800785d
 800789c:	0800785d 	.word	0x0800785d
 80078a0:	080079e1 	.word	0x080079e1
 80078a4:	0800790b 	.word	0x0800790b
 80078a8:	0800799b 	.word	0x0800799b
 80078ac:	0800785d 	.word	0x0800785d
 80078b0:	0800785d 	.word	0x0800785d
 80078b4:	08007a03 	.word	0x08007a03
 80078b8:	0800785d 	.word	0x0800785d
 80078bc:	0800790b 	.word	0x0800790b
 80078c0:	0800785d 	.word	0x0800785d
 80078c4:	0800785d 	.word	0x0800785d
 80078c8:	080079a3 	.word	0x080079a3
 80078cc:	6833      	ldr	r3, [r6, #0]
 80078ce:	1d1a      	adds	r2, r3, #4
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6032      	str	r2, [r6, #0]
 80078d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078dc:	2301      	movs	r3, #1
 80078de:	e09d      	b.n	8007a1c <_printf_i+0x1e8>
 80078e0:	6833      	ldr	r3, [r6, #0]
 80078e2:	6820      	ldr	r0, [r4, #0]
 80078e4:	1d19      	adds	r1, r3, #4
 80078e6:	6031      	str	r1, [r6, #0]
 80078e8:	0606      	lsls	r6, r0, #24
 80078ea:	d501      	bpl.n	80078f0 <_printf_i+0xbc>
 80078ec:	681d      	ldr	r5, [r3, #0]
 80078ee:	e003      	b.n	80078f8 <_printf_i+0xc4>
 80078f0:	0645      	lsls	r5, r0, #25
 80078f2:	d5fb      	bpl.n	80078ec <_printf_i+0xb8>
 80078f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078f8:	2d00      	cmp	r5, #0
 80078fa:	da03      	bge.n	8007904 <_printf_i+0xd0>
 80078fc:	232d      	movs	r3, #45	@ 0x2d
 80078fe:	426d      	negs	r5, r5
 8007900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007904:	4859      	ldr	r0, [pc, #356]	@ (8007a6c <_printf_i+0x238>)
 8007906:	230a      	movs	r3, #10
 8007908:	e011      	b.n	800792e <_printf_i+0xfa>
 800790a:	6821      	ldr	r1, [r4, #0]
 800790c:	6833      	ldr	r3, [r6, #0]
 800790e:	0608      	lsls	r0, r1, #24
 8007910:	f853 5b04 	ldr.w	r5, [r3], #4
 8007914:	d402      	bmi.n	800791c <_printf_i+0xe8>
 8007916:	0649      	lsls	r1, r1, #25
 8007918:	bf48      	it	mi
 800791a:	b2ad      	uxthmi	r5, r5
 800791c:	2f6f      	cmp	r7, #111	@ 0x6f
 800791e:	4853      	ldr	r0, [pc, #332]	@ (8007a6c <_printf_i+0x238>)
 8007920:	6033      	str	r3, [r6, #0]
 8007922:	bf14      	ite	ne
 8007924:	230a      	movne	r3, #10
 8007926:	2308      	moveq	r3, #8
 8007928:	2100      	movs	r1, #0
 800792a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800792e:	6866      	ldr	r6, [r4, #4]
 8007930:	60a6      	str	r6, [r4, #8]
 8007932:	2e00      	cmp	r6, #0
 8007934:	bfa2      	ittt	ge
 8007936:	6821      	ldrge	r1, [r4, #0]
 8007938:	f021 0104 	bicge.w	r1, r1, #4
 800793c:	6021      	strge	r1, [r4, #0]
 800793e:	b90d      	cbnz	r5, 8007944 <_printf_i+0x110>
 8007940:	2e00      	cmp	r6, #0
 8007942:	d04b      	beq.n	80079dc <_printf_i+0x1a8>
 8007944:	4616      	mov	r6, r2
 8007946:	fbb5 f1f3 	udiv	r1, r5, r3
 800794a:	fb03 5711 	mls	r7, r3, r1, r5
 800794e:	5dc7      	ldrb	r7, [r0, r7]
 8007950:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007954:	462f      	mov	r7, r5
 8007956:	42bb      	cmp	r3, r7
 8007958:	460d      	mov	r5, r1
 800795a:	d9f4      	bls.n	8007946 <_printf_i+0x112>
 800795c:	2b08      	cmp	r3, #8
 800795e:	d10b      	bne.n	8007978 <_printf_i+0x144>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	07df      	lsls	r7, r3, #31
 8007964:	d508      	bpl.n	8007978 <_printf_i+0x144>
 8007966:	6923      	ldr	r3, [r4, #16]
 8007968:	6861      	ldr	r1, [r4, #4]
 800796a:	4299      	cmp	r1, r3
 800796c:	bfde      	ittt	le
 800796e:	2330      	movle	r3, #48	@ 0x30
 8007970:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007974:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007978:	1b92      	subs	r2, r2, r6
 800797a:	6122      	str	r2, [r4, #16]
 800797c:	f8cd a000 	str.w	sl, [sp]
 8007980:	464b      	mov	r3, r9
 8007982:	aa03      	add	r2, sp, #12
 8007984:	4621      	mov	r1, r4
 8007986:	4640      	mov	r0, r8
 8007988:	f7ff fee6 	bl	8007758 <_printf_common>
 800798c:	3001      	adds	r0, #1
 800798e:	d14a      	bne.n	8007a26 <_printf_i+0x1f2>
 8007990:	f04f 30ff 	mov.w	r0, #4294967295
 8007994:	b004      	add	sp, #16
 8007996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	f043 0320 	orr.w	r3, r3, #32
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	4833      	ldr	r0, [pc, #204]	@ (8007a70 <_printf_i+0x23c>)
 80079a4:	2778      	movs	r7, #120	@ 0x78
 80079a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	6831      	ldr	r1, [r6, #0]
 80079ae:	061f      	lsls	r7, r3, #24
 80079b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80079b4:	d402      	bmi.n	80079bc <_printf_i+0x188>
 80079b6:	065f      	lsls	r7, r3, #25
 80079b8:	bf48      	it	mi
 80079ba:	b2ad      	uxthmi	r5, r5
 80079bc:	6031      	str	r1, [r6, #0]
 80079be:	07d9      	lsls	r1, r3, #31
 80079c0:	bf44      	itt	mi
 80079c2:	f043 0320 	orrmi.w	r3, r3, #32
 80079c6:	6023      	strmi	r3, [r4, #0]
 80079c8:	b11d      	cbz	r5, 80079d2 <_printf_i+0x19e>
 80079ca:	2310      	movs	r3, #16
 80079cc:	e7ac      	b.n	8007928 <_printf_i+0xf4>
 80079ce:	4827      	ldr	r0, [pc, #156]	@ (8007a6c <_printf_i+0x238>)
 80079d0:	e7e9      	b.n	80079a6 <_printf_i+0x172>
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	f023 0320 	bic.w	r3, r3, #32
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	e7f6      	b.n	80079ca <_printf_i+0x196>
 80079dc:	4616      	mov	r6, r2
 80079de:	e7bd      	b.n	800795c <_printf_i+0x128>
 80079e0:	6833      	ldr	r3, [r6, #0]
 80079e2:	6825      	ldr	r5, [r4, #0]
 80079e4:	6961      	ldr	r1, [r4, #20]
 80079e6:	1d18      	adds	r0, r3, #4
 80079e8:	6030      	str	r0, [r6, #0]
 80079ea:	062e      	lsls	r6, r5, #24
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	d501      	bpl.n	80079f4 <_printf_i+0x1c0>
 80079f0:	6019      	str	r1, [r3, #0]
 80079f2:	e002      	b.n	80079fa <_printf_i+0x1c6>
 80079f4:	0668      	lsls	r0, r5, #25
 80079f6:	d5fb      	bpl.n	80079f0 <_printf_i+0x1bc>
 80079f8:	8019      	strh	r1, [r3, #0]
 80079fa:	2300      	movs	r3, #0
 80079fc:	6123      	str	r3, [r4, #16]
 80079fe:	4616      	mov	r6, r2
 8007a00:	e7bc      	b.n	800797c <_printf_i+0x148>
 8007a02:	6833      	ldr	r3, [r6, #0]
 8007a04:	1d1a      	adds	r2, r3, #4
 8007a06:	6032      	str	r2, [r6, #0]
 8007a08:	681e      	ldr	r6, [r3, #0]
 8007a0a:	6862      	ldr	r2, [r4, #4]
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4630      	mov	r0, r6
 8007a10:	f7f8 fbe6 	bl	80001e0 <memchr>
 8007a14:	b108      	cbz	r0, 8007a1a <_printf_i+0x1e6>
 8007a16:	1b80      	subs	r0, r0, r6
 8007a18:	6060      	str	r0, [r4, #4]
 8007a1a:	6863      	ldr	r3, [r4, #4]
 8007a1c:	6123      	str	r3, [r4, #16]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a24:	e7aa      	b.n	800797c <_printf_i+0x148>
 8007a26:	6923      	ldr	r3, [r4, #16]
 8007a28:	4632      	mov	r2, r6
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	47d0      	blx	sl
 8007a30:	3001      	adds	r0, #1
 8007a32:	d0ad      	beq.n	8007990 <_printf_i+0x15c>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	079b      	lsls	r3, r3, #30
 8007a38:	d413      	bmi.n	8007a62 <_printf_i+0x22e>
 8007a3a:	68e0      	ldr	r0, [r4, #12]
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	4298      	cmp	r0, r3
 8007a40:	bfb8      	it	lt
 8007a42:	4618      	movlt	r0, r3
 8007a44:	e7a6      	b.n	8007994 <_printf_i+0x160>
 8007a46:	2301      	movs	r3, #1
 8007a48:	4632      	mov	r2, r6
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	47d0      	blx	sl
 8007a50:	3001      	adds	r0, #1
 8007a52:	d09d      	beq.n	8007990 <_printf_i+0x15c>
 8007a54:	3501      	adds	r5, #1
 8007a56:	68e3      	ldr	r3, [r4, #12]
 8007a58:	9903      	ldr	r1, [sp, #12]
 8007a5a:	1a5b      	subs	r3, r3, r1
 8007a5c:	42ab      	cmp	r3, r5
 8007a5e:	dcf2      	bgt.n	8007a46 <_printf_i+0x212>
 8007a60:	e7eb      	b.n	8007a3a <_printf_i+0x206>
 8007a62:	2500      	movs	r5, #0
 8007a64:	f104 0619 	add.w	r6, r4, #25
 8007a68:	e7f5      	b.n	8007a56 <_printf_i+0x222>
 8007a6a:	bf00      	nop
 8007a6c:	08007f11 	.word	0x08007f11
 8007a70:	08007f22 	.word	0x08007f22

08007a74 <__sflush_r>:
 8007a74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7c:	0716      	lsls	r6, r2, #28
 8007a7e:	4605      	mov	r5, r0
 8007a80:	460c      	mov	r4, r1
 8007a82:	d454      	bmi.n	8007b2e <__sflush_r+0xba>
 8007a84:	684b      	ldr	r3, [r1, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dc02      	bgt.n	8007a90 <__sflush_r+0x1c>
 8007a8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dd48      	ble.n	8007b22 <__sflush_r+0xae>
 8007a90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	d045      	beq.n	8007b22 <__sflush_r+0xae>
 8007a96:	2300      	movs	r3, #0
 8007a98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a9c:	682f      	ldr	r7, [r5, #0]
 8007a9e:	6a21      	ldr	r1, [r4, #32]
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	d030      	beq.n	8007b06 <__sflush_r+0x92>
 8007aa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	0759      	lsls	r1, r3, #29
 8007aaa:	d505      	bpl.n	8007ab8 <__sflush_r+0x44>
 8007aac:	6863      	ldr	r3, [r4, #4]
 8007aae:	1ad2      	subs	r2, r2, r3
 8007ab0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ab2:	b10b      	cbz	r3, 8007ab8 <__sflush_r+0x44>
 8007ab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	2300      	movs	r3, #0
 8007aba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007abc:	6a21      	ldr	r1, [r4, #32]
 8007abe:	4628      	mov	r0, r5
 8007ac0:	47b0      	blx	r6
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	d106      	bne.n	8007ad6 <__sflush_r+0x62>
 8007ac8:	6829      	ldr	r1, [r5, #0]
 8007aca:	291d      	cmp	r1, #29
 8007acc:	d82b      	bhi.n	8007b26 <__sflush_r+0xb2>
 8007ace:	4a2a      	ldr	r2, [pc, #168]	@ (8007b78 <__sflush_r+0x104>)
 8007ad0:	410a      	asrs	r2, r1
 8007ad2:	07d6      	lsls	r6, r2, #31
 8007ad4:	d427      	bmi.n	8007b26 <__sflush_r+0xb2>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	6062      	str	r2, [r4, #4]
 8007ada:	04d9      	lsls	r1, r3, #19
 8007adc:	6922      	ldr	r2, [r4, #16]
 8007ade:	6022      	str	r2, [r4, #0]
 8007ae0:	d504      	bpl.n	8007aec <__sflush_r+0x78>
 8007ae2:	1c42      	adds	r2, r0, #1
 8007ae4:	d101      	bne.n	8007aea <__sflush_r+0x76>
 8007ae6:	682b      	ldr	r3, [r5, #0]
 8007ae8:	b903      	cbnz	r3, 8007aec <__sflush_r+0x78>
 8007aea:	6560      	str	r0, [r4, #84]	@ 0x54
 8007aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aee:	602f      	str	r7, [r5, #0]
 8007af0:	b1b9      	cbz	r1, 8007b22 <__sflush_r+0xae>
 8007af2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007af6:	4299      	cmp	r1, r3
 8007af8:	d002      	beq.n	8007b00 <__sflush_r+0x8c>
 8007afa:	4628      	mov	r0, r5
 8007afc:	f7ff fbf2 	bl	80072e4 <_free_r>
 8007b00:	2300      	movs	r3, #0
 8007b02:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b04:	e00d      	b.n	8007b22 <__sflush_r+0xae>
 8007b06:	2301      	movs	r3, #1
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b0      	blx	r6
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	1c50      	adds	r0, r2, #1
 8007b10:	d1c9      	bne.n	8007aa6 <__sflush_r+0x32>
 8007b12:	682b      	ldr	r3, [r5, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0c6      	beq.n	8007aa6 <__sflush_r+0x32>
 8007b18:	2b1d      	cmp	r3, #29
 8007b1a:	d001      	beq.n	8007b20 <__sflush_r+0xac>
 8007b1c:	2b16      	cmp	r3, #22
 8007b1e:	d11e      	bne.n	8007b5e <__sflush_r+0xea>
 8007b20:	602f      	str	r7, [r5, #0]
 8007b22:	2000      	movs	r0, #0
 8007b24:	e022      	b.n	8007b6c <__sflush_r+0xf8>
 8007b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b2a:	b21b      	sxth	r3, r3
 8007b2c:	e01b      	b.n	8007b66 <__sflush_r+0xf2>
 8007b2e:	690f      	ldr	r7, [r1, #16]
 8007b30:	2f00      	cmp	r7, #0
 8007b32:	d0f6      	beq.n	8007b22 <__sflush_r+0xae>
 8007b34:	0793      	lsls	r3, r2, #30
 8007b36:	680e      	ldr	r6, [r1, #0]
 8007b38:	bf08      	it	eq
 8007b3a:	694b      	ldreq	r3, [r1, #20]
 8007b3c:	600f      	str	r7, [r1, #0]
 8007b3e:	bf18      	it	ne
 8007b40:	2300      	movne	r3, #0
 8007b42:	eba6 0807 	sub.w	r8, r6, r7
 8007b46:	608b      	str	r3, [r1, #8]
 8007b48:	f1b8 0f00 	cmp.w	r8, #0
 8007b4c:	dde9      	ble.n	8007b22 <__sflush_r+0xae>
 8007b4e:	6a21      	ldr	r1, [r4, #32]
 8007b50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b52:	4643      	mov	r3, r8
 8007b54:	463a      	mov	r2, r7
 8007b56:	4628      	mov	r0, r5
 8007b58:	47b0      	blx	r6
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	dc08      	bgt.n	8007b70 <__sflush_r+0xfc>
 8007b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b66:	81a3      	strh	r3, [r4, #12]
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b70:	4407      	add	r7, r0
 8007b72:	eba8 0800 	sub.w	r8, r8, r0
 8007b76:	e7e7      	b.n	8007b48 <__sflush_r+0xd4>
 8007b78:	dfbffffe 	.word	0xdfbffffe

08007b7c <_fflush_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	690b      	ldr	r3, [r1, #16]
 8007b80:	4605      	mov	r5, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	b913      	cbnz	r3, 8007b8c <_fflush_r+0x10>
 8007b86:	2500      	movs	r5, #0
 8007b88:	4628      	mov	r0, r5
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	b118      	cbz	r0, 8007b96 <_fflush_r+0x1a>
 8007b8e:	6a03      	ldr	r3, [r0, #32]
 8007b90:	b90b      	cbnz	r3, 8007b96 <_fflush_r+0x1a>
 8007b92:	f7ff f9ad 	bl	8006ef0 <__sinit>
 8007b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0f3      	beq.n	8007b86 <_fflush_r+0xa>
 8007b9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ba0:	07d0      	lsls	r0, r2, #31
 8007ba2:	d404      	bmi.n	8007bae <_fflush_r+0x32>
 8007ba4:	0599      	lsls	r1, r3, #22
 8007ba6:	d402      	bmi.n	8007bae <_fflush_r+0x32>
 8007ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007baa:	f7ff fb98 	bl	80072de <__retarget_lock_acquire_recursive>
 8007bae:	4628      	mov	r0, r5
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	f7ff ff5f 	bl	8007a74 <__sflush_r>
 8007bb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bb8:	07da      	lsls	r2, r3, #31
 8007bba:	4605      	mov	r5, r0
 8007bbc:	d4e4      	bmi.n	8007b88 <_fflush_r+0xc>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	059b      	lsls	r3, r3, #22
 8007bc2:	d4e1      	bmi.n	8007b88 <_fflush_r+0xc>
 8007bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bc6:	f7ff fb8b 	bl	80072e0 <__retarget_lock_release_recursive>
 8007bca:	e7dd      	b.n	8007b88 <_fflush_r+0xc>

08007bcc <__swhatbuf_r>:
 8007bcc:	b570      	push	{r4, r5, r6, lr}
 8007bce:	460c      	mov	r4, r1
 8007bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	b096      	sub	sp, #88	@ 0x58
 8007bd8:	4615      	mov	r5, r2
 8007bda:	461e      	mov	r6, r3
 8007bdc:	da0d      	bge.n	8007bfa <__swhatbuf_r+0x2e>
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007be4:	f04f 0100 	mov.w	r1, #0
 8007be8:	bf14      	ite	ne
 8007bea:	2340      	movne	r3, #64	@ 0x40
 8007bec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	6031      	str	r1, [r6, #0]
 8007bf4:	602b      	str	r3, [r5, #0]
 8007bf6:	b016      	add	sp, #88	@ 0x58
 8007bf8:	bd70      	pop	{r4, r5, r6, pc}
 8007bfa:	466a      	mov	r2, sp
 8007bfc:	f000 f848 	bl	8007c90 <_fstat_r>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	dbec      	blt.n	8007bde <__swhatbuf_r+0x12>
 8007c04:	9901      	ldr	r1, [sp, #4]
 8007c06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c0e:	4259      	negs	r1, r3
 8007c10:	4159      	adcs	r1, r3
 8007c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c16:	e7eb      	b.n	8007bf0 <__swhatbuf_r+0x24>

08007c18 <__smakebuf_r>:
 8007c18:	898b      	ldrh	r3, [r1, #12]
 8007c1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c1c:	079d      	lsls	r5, r3, #30
 8007c1e:	4606      	mov	r6, r0
 8007c20:	460c      	mov	r4, r1
 8007c22:	d507      	bpl.n	8007c34 <__smakebuf_r+0x1c>
 8007c24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	6123      	str	r3, [r4, #16]
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	6163      	str	r3, [r4, #20]
 8007c30:	b003      	add	sp, #12
 8007c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c34:	ab01      	add	r3, sp, #4
 8007c36:	466a      	mov	r2, sp
 8007c38:	f7ff ffc8 	bl	8007bcc <__swhatbuf_r>
 8007c3c:	9f00      	ldr	r7, [sp, #0]
 8007c3e:	4605      	mov	r5, r0
 8007c40:	4639      	mov	r1, r7
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7ff fbba 	bl	80073bc <_malloc_r>
 8007c48:	b948      	cbnz	r0, 8007c5e <__smakebuf_r+0x46>
 8007c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4e:	059a      	lsls	r2, r3, #22
 8007c50:	d4ee      	bmi.n	8007c30 <__smakebuf_r+0x18>
 8007c52:	f023 0303 	bic.w	r3, r3, #3
 8007c56:	f043 0302 	orr.w	r3, r3, #2
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	e7e2      	b.n	8007c24 <__smakebuf_r+0xc>
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	6020      	str	r0, [r4, #0]
 8007c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c66:	81a3      	strh	r3, [r4, #12]
 8007c68:	9b01      	ldr	r3, [sp, #4]
 8007c6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c6e:	b15b      	cbz	r3, 8007c88 <__smakebuf_r+0x70>
 8007c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c74:	4630      	mov	r0, r6
 8007c76:	f000 f81d 	bl	8007cb4 <_isatty_r>
 8007c7a:	b128      	cbz	r0, 8007c88 <__smakebuf_r+0x70>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	f023 0303 	bic.w	r3, r3, #3
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	431d      	orrs	r5, r3
 8007c8c:	81a5      	strh	r5, [r4, #12]
 8007c8e:	e7cf      	b.n	8007c30 <__smakebuf_r+0x18>

08007c90 <_fstat_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4d07      	ldr	r5, [pc, #28]	@ (8007cb0 <_fstat_r+0x20>)
 8007c94:	2300      	movs	r3, #0
 8007c96:	4604      	mov	r4, r0
 8007c98:	4608      	mov	r0, r1
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	602b      	str	r3, [r5, #0]
 8007c9e:	f7fb fa4b 	bl	8003138 <_fstat>
 8007ca2:	1c43      	adds	r3, r0, #1
 8007ca4:	d102      	bne.n	8007cac <_fstat_r+0x1c>
 8007ca6:	682b      	ldr	r3, [r5, #0]
 8007ca8:	b103      	cbz	r3, 8007cac <_fstat_r+0x1c>
 8007caa:	6023      	str	r3, [r4, #0]
 8007cac:	bd38      	pop	{r3, r4, r5, pc}
 8007cae:	bf00      	nop
 8007cb0:	200004f8 	.word	0x200004f8

08007cb4 <_isatty_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4d06      	ldr	r5, [pc, #24]	@ (8007cd0 <_isatty_r+0x1c>)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4604      	mov	r4, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	602b      	str	r3, [r5, #0]
 8007cc0:	f7fb fa4a 	bl	8003158 <_isatty>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_isatty_r+0x1a>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_isatty_r+0x1a>
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	200004f8 	.word	0x200004f8

08007cd4 <_sbrk_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d06      	ldr	r5, [pc, #24]	@ (8007cf0 <_sbrk_r+0x1c>)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	f7fb fa52 	bl	8003188 <_sbrk>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_sbrk_r+0x1a>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_sbrk_r+0x1a>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	200004f8 	.word	0x200004f8

08007cf4 <_init>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	bf00      	nop
 8007cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfa:	bc08      	pop	{r3}
 8007cfc:	469e      	mov	lr, r3
 8007cfe:	4770      	bx	lr

08007d00 <_fini>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr
